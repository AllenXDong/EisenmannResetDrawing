/****************************************************************************************
*   Author:       Matthias Kreissig
*   Datum:        11.10.2019
*   Beschreibung: IST-SOLL-Abgleich von allen relevanten 2D-DPV-Settings
*                 Grund: Abgleich der 2D-DPV-Settings mit dem Code
***************************************************************************************/

#include "en_nx_getset_dpv_prefs.h"
#include "en_nx_dpv.h"

// EN Header Files
#include "en_nx_common.h"
string Standard_Site = "";//get_env_dir("UGII_SITE_DIR") + "\\startup\\" + NX_DPV_SITE_FILE_NAME + ".dpv";

string routineName;
string id_name;
string ist_id_value;
string soll_id_value;
std::map<const std::string, std::string>::iterator it;

bool g_nxLog_en_nx_getset_dpv_prefs = true;

/*
Run "Set EN-Drafting-Standards"/"Setze EN-Zeichnungs-Standards" (EN_SET_DRAFTING_STANDARDS)
*/
bool run_getset_dpv_values() {
	routineName.assign("run_getset_dpv_values");
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- START - %s --- \n", routineName.c_str());

	NXOpen::Session *theSession = NXOpen::Session::GetSession();
	Part* workPart;
	workPart = theSession->Parts()->Work();
	
	Session::UndoMarkId markId1;
	markId1 = theSession->SetUndoMark(Session::MarkVisibilityVisible, "Get and Set General Drafting Preferences");
	
	en_nx_dpv *nx_dpv = en_nx_dpv::getInstance();
	g_nxLog_en_nx_getset_dpv_prefs = nx_dpv->set_nxLog();
	
	list <en_drawing_dpv_elements> drw_list;
	list <en_nx_site_dpv_elements> site_list;
	
	drw_list = nx_dpv->drafting_dpv_list;
	site_list = nx_dpv->nx_site_dpv_list;

	nxLog("start run_getset_dpv_values\n");
	char* clr_name = NULL;
	double clr_values[3] = { 0.533,0.533,0.533 };
	/*UF_CALL(UF_DISP_ask_color(UF_DISP_BACKGROUND_COLOR,
		UF_DISP_rgb_model,
		&clr_name,
		clr_values));*/

	//double clr_values[3] = { 136,136,136 };
	UF_CALL(UF_DISP_set_color(UF_DISP_BACKGROUND_COLOR,
		UF_DISP_rgb_model,
		clr_name,
		clr_values));
	UF_CALL(UF_DISP_load_color_table());
	//UF_DISP_set_color(0, UF_DISP_rgb_model, NULL, clr_values);
	//UF_DISP_load_color_table();
	NXOpen::Drafting::PreferencesBuilder *preferencesBuilder;
	preferencesBuilder = workPart->SettingsManager()->CreatePreferencesBuilder();
	//preferencesBuilder->InheritSettingsFromPreferences();
	//preferencesBuilder->Commit();

	//Site Preferences setzen
	UG_debug("set_site_preferences\n");
	set_site_preferences(preferencesBuilder, nx_dpv, theSession, workPart);
	
	//Drawing Preferences setzen
	UG_debug("set_drawing_preferences\n");
	set_drawing_preferences(preferencesBuilder, nx_dpv, theSession, workPart);

	//preferencesBuilder->Commit();
	preferencesBuilder->Destroy();
	
	//VersionUpAllDraftingObjects
	UG_debug("versionUpAllDraftingObjects\n");
//	versionUpAllDraftingObjects(workPart);
	
	//Repair drawing elements
	UG_debug("repair_drawing_elements\n");
	repair_drawing_elements(nx_dpv, theSession, workPart);

	UG_debug("Rest\n");

	std::map<const std::string, std::string>::iterator it_soll;
	list<en_nx_site_dpv_elements>::iterator site_it;
	for (site_it = site_list.begin(); site_it != site_list.end(); site_it++) {
		id_name.assign(site_it->get_dpv_id_name());
		it = nx_dpv->ist_dpv_map.find(id_name);
		it_soll = nx_dpv->soll_dpv_map.find(id_name);
		if (it != nx_dpv->ist_dpv_map.end()) {
			site_it->set_dpv_id_value_ist(it->second);
			//site_it->set_dpv_id_value_soll(it_soll->second);
		}
	}
	list<en_drawing_dpv_elements>::iterator drw_it;
	for (drw_it = drw_list.begin(); drw_it != drw_list.end(); drw_it++) {
		id_name.assign(drw_it->get_dpv_id_name());
		it = nx_dpv->ist_dpv_map.find(id_name);
		it_soll = nx_dpv->soll_dpv_map.find(id_name);
		if (it != nx_dpv->ist_dpv_map.end()) {
			drw_it->set_dpv_id_value_ist(it->second);
			//drw_it->set_dpv_id_value_soll(it_soll->second);
		}
	}
	
	list <en_nx_site_dpv_elements> site_diff_list;
	list <en_drawing_dpv_elements> drw_diff_list;
	
	for (site_it = site_list.begin(); site_it != site_list.end(); site_it++) {
		if (site_it->get_dpv_id_value().compare(site_it->get_dpv_id_value_ist().c_str()) != 0 && site_it->get_dpv_id_name().find("EU") == std::string::npos) {
		//if (site_it->get_dpv_id_value().compare(site_it->get_dpv_id_value_ist().c_str()) != 0 ) {
			en_nx_site_dpv_elements nxsite_dataset = en_nx_site_dpv_elements(site_it->get_dpv_application(), site_it->get_dpv_category(), site_it->get_dpv_subcategory(), site_it->get_dpv_tab(), site_it->get_dpv_subtab(), site_it->get_dpv_display_value(), site_it->get_dpv_mod_date(), site_it->get_dpv_id_name(), site_it->get_dpv_title(), site_it->get_dpv_id_value(), site_it->get_dpv_comment(), site_it->get_dpv_id_value_ist());
			site_diff_list.push_back(nxsite_dataset);
		}
	}
	for (drw_it = drw_list.begin(); drw_it != drw_list.end(); drw_it++) {
		if (drw_it->get_dpv_id_value().compare(drw_it->get_dpv_id_value_ist().c_str()) != 0 && drw_it->get_dpv_id_name().find("EU") == std::string::npos) {
		//if (drw_it->get_dpv_id_value().compare(drw_it->get_dpv_id_value_ist().c_str()) != 0 ) {
			en_drawing_dpv_elements drawing_dataset = en_drawing_dpv_elements(drw_it->get_dpv_application(), drw_it->get_dpv_category(), drw_it->get_dpv_subcategory(), drw_it->get_dpv_tab(), drw_it->get_dpv_subtab(), drw_it->get_dpv_display_value(), drw_it->get_dpv_mod_date(), drw_it->get_dpv_id_name(), drw_it->get_dpv_title(), drw_it->get_dpv_id_value(), drw_it->get_dpv_comment(), drw_it->get_dpv_id_value_ist());
			drw_diff_list.push_back(drawing_dataset);
		}
	}
	
	nx_dpv->create_text_file_from_dpv(site_diff_list, "diff_site_list");
	nx_dpv->create_text_file_from_dpv(drw_diff_list, "diff_drw_list");
	
	if (g_nxLog_en_nx_getset_dpv_prefs) nx_dpv->create_text_file_from_dpv(drw_list, DRAFTING_DPV_FILE_NAME);
	if (g_nxLog_en_nx_getset_dpv_prefs) nx_dpv->create_text_file_from_dpv(site_list, NX_DPV_SITE_FILE_NAME);
	
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- STOPP - %s --- \n", routineName.c_str());
	
	nx_dpv->~en_nx_dpv();
	UG_debug("End\n");

	return true;
}

/*
Set all Site Preferences
*/
void set_site_preferences(NXOpen::Drafting::PreferencesBuilder *_preferencesBuilder, en_nx_dpv* _nx_dpv, Session * _theSession, Part* _workPart) {
	repair_site_ShipDrafting_Annotation_ReferenceLines_prefs(_preferencesBuilder, _nx_dpv, _theSession, _workPart);
	repair_site_Gateway_Visualization_Line_prefs(_preferencesBuilder, _nx_dpv, _theSession, _workPart);
	repair_site_Gateway_Visualization_ColorSettings_prefs(_preferencesBuilder, _nx_dpv, _theSession, _workPart);
	repair_site_Gateway_LineWidths_Conversion_prefs(_preferencesBuilder, _nx_dpv, _theSession, _workPart);
	
	repair_site_drafting_GeneralSetup_Standard_prefs(_preferencesBuilder, _nx_dpv, _theSession, _workPart);
	repair_site_Drafting_GneralSetup_Workflow_prefs(_preferencesBuilder, _nx_dpv, _theSession, _workPart);
	repair_site_Drafting_GneralSetup_RetainedAnnotations_prefs(_preferencesBuilder, _nx_dpv, _theSession, _workPart);
	repair_site_Drafting_GneralSetup_WelcomePage_prefs(_preferencesBuilder, _nx_dpv, _theSession, _workPart);
	repair_site_Drafting_GneralSetup_Miscellaneous_prefs(_preferencesBuilder, _nx_dpv, _theSession, _workPart);
	repair_site_Drafting_GneralSetup_TextEditor_prefs(_preferencesBuilder, _nx_dpv, _theSession, _workPart);
	
	repair_site_Drafting_FlatPatternView_Lines_prefs(_preferencesBuilder, _nx_dpv, _theSession, _workPart);
	repair_site_Drafting_FlatPatternView_Callouts_prefs(_preferencesBuilder, _nx_dpv, _theSession, _workPart);
	
	repair_site_Drafting_DrawingCompare_ReportGeneral_prefs(_preferencesBuilder, _nx_dpv, _theSession, _workPart);
	repair_site_Drafting_DrawingCompare_ReportFilter_prefs(_preferencesBuilder, _nx_dpv, _theSession, _workPart);
	repair_site_Drafting_DrawingCompare_VisualOverlay_prefs(_preferencesBuilder, _nx_dpv, _theSession, _workPart);
	
	repair_site_Drafting_DrawingAutomation_Booklet_prefs(_preferencesBuilder, _nx_dpv, _theSession, _workPart);
	repair_site_Drafting_DrawingAutomation_Rule_prefs(_preferencesBuilder, _nx_dpv, _theSession, _workPart);
	repair_site_Drafting_DrawingAutomation_Region_prefs(_preferencesBuilder, _nx_dpv, _theSession, _workPart);
	
	repair_site_Drafting_ConvertToPMI_General_prefs(_preferencesBuilder, _nx_dpv, _theSession, _workPart);
}

/*
Set all Drawing Preferences
*/
void set_drawing_preferences(NXOpen::Drafting::PreferencesBuilder *_preferencesBuilder, en_nx_dpv* _nx_dpv, Session * _theSession, Part* _workPart) {
	repair_DraftingStandard_General_Standard_prefs(_preferencesBuilder, _nx_dpv, _theSession, _workPart);
	
	repair_DraftingStandard_Common_Lettering_prefs(_preferencesBuilder, _nx_dpv, _theSession, _workPart);
	repair_DraftingStandard_Common_LineArrow_Arrowhead_prefs(_preferencesBuilder, _nx_dpv, _theSession, _workPart);
	repair_DraftingStandard_Common_LineArrow_ArrowLineLeader_prefs(_preferencesBuilder, _nx_dpv, _theSession, _workPart);
	repair_DraftingStandard_Common_LineArrow_ExtensionLine_prefs(_preferencesBuilder, _nx_dpv, _theSession, _workPart);
	repair_DraftingStandard_Common_LineArrow_Break_prefs(_preferencesBuilder, _nx_dpv, _theSession, _workPart);
	repair_DraftingStandard_Common_LineArrow_ForeshorteningSymbol_prefs(_preferencesBuilder, _nx_dpv, _theSession, _workPart);
	repair_DraftingStandard_Common_Stacking_prefs(_preferencesBuilder, _nx_dpv, _theSession, _workPart);
	repair_DraftingStandard_Common_Origin_prefs(_preferencesBuilder, _nx_dpv, _theSession, _workPart);
	repair_DraftingStandard_Common_PrefixSuffix_prefs(_preferencesBuilder, _nx_dpv, _theSession, _workPart);
	repair_DraftingStandard_Common_Symbol_prefs(_preferencesBuilder, _nx_dpv, _theSession, _workPart);
	
	repair_DraftingStandard_DrawingFormat_Sheet_NameAndNumber_prefs(_preferencesBuilder, _nx_dpv, _theSession, _workPart);
	repair_DraftingStandard_DrawingFormat_Sheet_SizeAndScale_prefs(_preferencesBuilder, _nx_dpv, _theSession, _workPart);
	repair_DraftingStandard_DrawingFormat_BordersAndZones_BorderDisplay_prefs(_preferencesBuilder, _nx_dpv, _theSession, _workPart);
	repair_DraftingStandard_DrawingFormat_BordersAndZones_BorderMargins_prefs(_preferencesBuilder, _nx_dpv, _theSession, _workPart);
	repair_DraftingStandard_DrawingFormat_BordersAndZones_Zones_prefs(_preferencesBuilder, _nx_dpv, _theSession, _workPart);
	repair_DraftingStandard_DrawingFormat_Template_prefs(_preferencesBuilder, _nx_dpv, _theSession, _workPart);
	repair_DraftingStandard_DrawingFormat_TitleBlock_prefs(_preferencesBuilder, _nx_dpv, _theSession, _workPart);

	repair_DraftingStandard_View_Workflow_prefs(_preferencesBuilder, _nx_dpv, _theSession, _workPart);
	
	repair_DraftingStandard_View_Common_Configuration_prefs(_preferencesBuilder, _nx_dpv, _theSession, _workPart);
	repair_DraftingStandard_View_Common_General_prefs(_preferencesBuilder, _nx_dpv, _theSession, _workPart);
	repair_DraftingStandard_View_Common_Angle_prefs(_preferencesBuilder, _nx_dpv, _theSession, _workPart);
	repair_DraftingStandard_View_Common_VisibleLines_prefs(_preferencesBuilder, _nx_dpv, _theSession, _workPart);
	repair_DraftingStandard_View_Common_HiddenLines_prefs(_preferencesBuilder, _nx_dpv, _theSession, _workPart);
	repair_DraftingStandard_View_Common_VirtualIntersections_prefs(_preferencesBuilder, _nx_dpv, _theSession, _workPart);
	repair_DraftingStandard_View_Common_Tracelines_prefs(_preferencesBuilder, _nx_dpv, _theSession, _workPart);
	repair_DraftingStandard_View_Common_SecondaryGeometry_prefs(_preferencesBuilder, _nx_dpv, _theSession, _workPart);
	repair_DraftingStandard_View_Common_Threads_prefs(_preferencesBuilder, _nx_dpv, _theSession, _workPart);
	repair_DraftingStandard_View_Common_PMI_prefs(_preferencesBuilder, _nx_dpv, _theSession, _workPart);
	repair_DraftingStandard_View_Common_Shading_prefs(_preferencesBuilder, _nx_dpv, _theSession, _workPart);
	repair_DraftingStandard_View_Common_SmoothEdges_prefs(_preferencesBuilder, _nx_dpv, _theSession, _workPart);
	repair_DraftingStandard_View_Common_ViewLabel_prefs(_preferencesBuilder, _nx_dpv, _theSession, _workPart);
	
	repair_DraftingStandard_View_BaseDrawing_Settings_prefs(_preferencesBuilder, _nx_dpv, _theSession, _workPart);
	repair_DraftingStandard_View_BaseDrawing_Label_prefs(_preferencesBuilder, _nx_dpv, _theSession, _workPart);
	
	repair_DraftingStandard_View_Projected_Settings_prefs(_preferencesBuilder, _nx_dpv, _theSession, _workPart);
	repair_DraftingStandard_View_Projected_Label_prefs(_preferencesBuilder, _nx_dpv, _theSession, _workPart);
	repair_DraftingStandard_View_Projected_Arrow_prefs(_preferencesBuilder, _nx_dpv, _theSession, _workPart);
	
	repair_DraftingStandard_View_Section_Settings_prefs(_preferencesBuilder, _nx_dpv, _theSession, _workPart);
	repair_DraftingStandard_View_Section_Label_prefs(_preferencesBuilder, _nx_dpv, _theSession, _workPart);
	
	repair_DraftingStandard_View_Detail_Settings_prefs(_preferencesBuilder, _nx_dpv, _theSession, _workPart);
	repair_DraftingStandard_View_Detail_Label_prefs(_preferencesBuilder, _nx_dpv, _theSession, _workPart);
	
	repair_DraftingStandard_View_SectionLine_DisplayAndFormat_prefs(_preferencesBuilder, _nx_dpv, _theSession, _workPart);
	repair_DraftingStandard_View_SectionLine_Arrowhead_prefs(_preferencesBuilder, _nx_dpv, _theSession, _workPart);
	repair_DraftingStandard_View_SectionLine_Arrowline_prefs(_preferencesBuilder, _nx_dpv, _theSession, _workPart);
	repair_DraftingStandard_View_SectionLine_Label_prefs(_preferencesBuilder, _nx_dpv, _theSession, _workPart);
	repair_DraftingStandard_View_SectionLine_Offset_prefs(_preferencesBuilder, _nx_dpv, _theSession, _workPart);
	repair_DraftingStandard_View_SectionLine_HingeLine_prefs(_preferencesBuilder, _nx_dpv, _theSession, _workPart);
	
	repair_DraftingStandard_View_Break_prefs(_preferencesBuilder, _nx_dpv, _theSession, _workPart);

	repair_DraftingStandard_Dimension_Workflow_DirectedDimensions_prefs(_preferencesBuilder, _nx_dpv, _theSession, _workPart);
	repair_DraftingStandard_Dimension_Workflow_General_prefs(_preferencesBuilder, _nx_dpv, _theSession, _workPart);
	
	repair_DraftingStandard_Dimension_Tolerance_prefs(_preferencesBuilder, _nx_dpv, _theSession, _workPart);
	repair_DraftingStandard_Dimension_Dual_prefs(_preferencesBuilder, _nx_dpv, _theSession, _workPart);
	repair_DraftingStandard_Dimension_Jog_prefs(_preferencesBuilder, _nx_dpv, _theSession, _workPart);
	repair_DraftingStandard_Dimension_Narrow_prefs(_preferencesBuilder, _nx_dpv, _theSession, _workPart);
	repair_DraftingStandard_Dimension_SingleSidedDimension_prefs(_preferencesBuilder, _nx_dpv, _theSession, _workPart);
	repair_DraftingStandard_Dimension_DimensionSet_prefs(_preferencesBuilder, _nx_dpv, _theSession, _workPart);
	repair_DraftingStandard_Dimension_Chamfer_prefs(_preferencesBuilder, _nx_dpv, _theSession, _workPart);
	repair_DraftingStandard_Dimension_DimensionLine_prefs(_preferencesBuilder, _nx_dpv, _theSession, _workPart);
	repair_DraftingStandard_Dimension_Radial_prefs(_preferencesBuilder, _nx_dpv, _theSession, _workPart);
	repair_DraftingStandard_Dimension_Ordinate_prefs(_preferencesBuilder, _nx_dpv, _theSession, _workPart);
	
	repair_DraftingStandard_Dimension_Text_Units_prefs(_preferencesBuilder, _nx_dpv, _theSession, _workPart);
	repair_DraftingStandard_Dimension_Text_OrientationLocation_prefs(_preferencesBuilder, _nx_dpv, _theSession, _workPart);
	repair_DraftingStandard_Dimension_Text_Format_prefs(_preferencesBuilder, _nx_dpv, _theSession, _workPart);
	repair_DraftingStandard_Dimension_Text_Appended_prefs(_preferencesBuilder, _nx_dpv, _theSession, _workPart);
	repair_DraftingStandard_Dimension_Text_Dimension_prefs(_preferencesBuilder, _nx_dpv, _theSession, _workPart);
	repair_DraftingStandard_Dimension_Text_Tolerance_prefs(_preferencesBuilder, _nx_dpv, _theSession, _workPart);
	
	repair_DraftingStandard_Dimension_Reference_prefs(_preferencesBuilder, _nx_dpv, _theSession, _workPart);
	
	repair_DraftingStandard_Dimension_HoleCallout_Lettering_prefs(_preferencesBuilder, _nx_dpv, _theSession, _workPart);
	repair_DraftingStandard_Dimension_HoleCallout_GeneralHole_prefs(_preferencesBuilder, _nx_dpv, _theSession, _workPart);
	repair_DraftingStandard_Dimension_HoleCallout_DrillSizeHole_prefs(_preferencesBuilder, _nx_dpv, _theSession, _workPart);
	repair_DraftingStandard_Dimension_HoleCallout_ScrewClearanceHole_prefs(_preferencesBuilder, _nx_dpv, _theSession, _workPart);
	repair_DraftingStandard_Dimension_HoleCallout_ThreadedHole_prefs(_preferencesBuilder, _nx_dpv, _theSession, _workPart);
	repair_DraftingStandard_Dimension_HoleCallout_SymbolicThread_prefs(_preferencesBuilder, _nx_dpv, _theSession, _workPart);

	repair_DraftingStandard_Annotation_GDT_prefs(_preferencesBuilder, _nx_dpv, _theSession, _workPart);
	repair_DraftingStandard_Annotation_FeatureControlFrame_prefs(_preferencesBuilder, _nx_dpv, _theSession, _workPart);
	repair_DraftingStandard_Annotation_Balloon_prefs(_preferencesBuilder, _nx_dpv, _theSession, _workPart);
	repair_DraftingStandard_Annotation_SurfaceFinishSymbol_prefs(_preferencesBuilder, _nx_dpv, _theSession, _workPart);
	repair_DraftingStandard_Annotation_WeldSymbol_prefs(_preferencesBuilder, _nx_dpv, _theSession, _workPart);
	repair_DraftingStandard_Annotation_TargetPointSymbol_prefs(_preferencesBuilder, _nx_dpv, _theSession, _workPart);
	repair_DraftingStandard_Annotation_IntersectionSymbol_prefs(_preferencesBuilder, _nx_dpv, _theSession, _workPart);
	repair_DraftingStandard_Annotation_CrosshatchAreaFill_prefs(_preferencesBuilder, _nx_dpv, _theSession, _workPart);
	repair_DraftingStandard_Annotation_Centerline_prefs(_preferencesBuilder, _nx_dpv, _theSession, _workPart);
	repair_DraftingStandard_Annotation_OffsetCenterPoint_prefs(_preferencesBuilder, _nx_dpv, _theSession, _workPart);

	repair_DraftingStandard_Symbol_Workflow_prefs(_preferencesBuilder, _nx_dpv, _theSession, _workPart);

	repair_DraftingStandard_Table_Common_Cell_prefs(_preferencesBuilder, _nx_dpv, _theSession, _workPart);
	repair_DraftingStandard_Table_Common_Section_prefs(_preferencesBuilder, _nx_dpv, _theSession, _workPart);
	repair_DraftingStandard_Table_PartsList_prefs(_preferencesBuilder, _nx_dpv, _theSession, _workPart);
	repair_DraftingStandard_Table_TabularNote_prefs(_preferencesBuilder, _nx_dpv, _theSession, _workPart);
	repair_DraftingStandard_Table_BendTable_prefs(_preferencesBuilder, _nx_dpv, _theSession, _workPart);
	repair_DraftingStandard_Table_HoleTable_Workflow_prefs(_preferencesBuilder, _nx_dpv, _theSession, _workPart);
	repair_DraftingStandard_Table_HoleTable_Format_prefs(_preferencesBuilder, _nx_dpv, _theSession, _workPart);
	repair_DraftingStandard_Table_HoleTable_Content_prefs(_preferencesBuilder, _nx_dpv, _theSession, _workPart);
	repair_DraftingStandard_Table_HoleTable_HoleFilters_prefs(_preferencesBuilder, _nx_dpv, _theSession, _workPart);
	repair_DraftingStandard_Table_HoleTable_HoleTypeSymbols_prefs(_preferencesBuilder, _nx_dpv, _theSession, _workPart);
	repair_DraftingStandard_Table_HoleTable_LabelFormat_prefs(_preferencesBuilder, _nx_dpv, _theSession, _workPart);
	repair_DraftingStandard_Table_HoleTable_Attributes_prefs(_preferencesBuilder, _nx_dpv, _theSession, _workPart);
	
	repair_DraftingStandard_PMI_GDTGeneral_Standard_prefs(_preferencesBuilder, _nx_dpv, _theSession, _workPart);
	repair_DraftingStandard_PMI_GDTGeneral_Region_prefs(_preferencesBuilder, _nx_dpv, _theSession, _workPart);
}

/*
Repair drawing elements
*/
void repair_drawing_elements(en_nx_dpv* _nx_dpv, Session * _theSession, Part* _workPart) {
	repair_existing_dimension_styles(_nx_dpv, _theSession, _workPart);
	repair_existing_symbol_styles(_nx_dpv, _theSession, _workPart);
	repair_existing_text_styles(_nx_dpv, _theSession, _workPart);
	repair_existing_line_styles(_nx_dpv, _theSession, _workPart);
	repair_existing_weld_styles(_nx_dpv, _theSession, _workPart);
	repair_existing_gdt_styles(_nx_dpv, _theSession, _workPart);
	repair_existing_SurfaceFinishSymbol_styles(_nx_dpv, _theSession, _workPart);
	repair_existing_sectionLine_styles(_nx_dpv, _theSession, _workPart);
	//NX-917 Schraffuren sollen nicht modifiziert werden.
	//repair_existing_hatch_styles(_nx_dpv, _theSession, _workPart);
	repair_existing_view_styles(_nx_dpv, _theSession, _workPart);
}

/*
get the work part
*/
Part* get_work_part() {
	Session *theSession = Session::GetSession();
	Part* workPart;
	workPart = theSession->Parts()->Work();
	return workPart;
}

/*
write messages to the NX-Log-File
*/
void nxLog(char *_szFormatString, ...) {
	va_list ap;
	char *szText = NULL;

	int len;

	// Variable String auswerten
	//UF_print_syslog("nxLog - Absturzstelle 1 \n", FALSE);
	va_start(ap, _szFormatString);
	//UF_print_syslog("nxLog - Absturzstelle 2 \n", FALSE);
	len = _vscprintf(_szFormatString, ap) + 1; //Länge des Strings ermitteln + '\0'
											   //char buf[30];
											   //sprintf_s(buf, "nxLog - len = %d \n", (int) len);
											   //UF_print_syslog(buf, FALSE);
											   //UF_print_syslog("nxLog - Absturzstelle 3 \n", FALSE);
	szText = (char *)calloc(len, sizeof(char));
	//UF_print_syslog("nxLog - Absturzstelle 4 \n", FALSE);
	if (len > 1) {
		vsprintf_s(szText, len, _szFormatString, ap);
	}

	//szText = this->str_c_allocate_memory(szText);
	//UF_print_syslog("nxLog - Absturzstelle 5 \n", FALSE);
	va_end(ap);
	//UF_print_syslog("nxLog - Absturzstelle 6 \n", FALSE);

	//UF_print_syslog("nxLog - vor printf \n", FALSE);
	if (printf("%s", szText)) {
		//UF_print_syslog("nxLog - vor NULL \n", FALSE);
		if (szText != NULL) {
			//UF_print_syslog("nxLog - vor UF_print_syslog \n", FALSE);
			UF_print_syslog(szText, FALSE);
			//UF_print_syslog("nxLog - vor delete \n", FALSE);
			//delete szText;
			free(szText);
		}
		//UF_print_syslog("nxLog - nach NULL \n", FALSE);
	}
	//UF_print_syslog("nxLog - OK \n", FALSE);
}

/*
get_env_dir (string _envname)
*/
string get_env_dir(const char * _envname) {
	str_c env_dir = NULL;
	errno_t err;
	size_t len;
	string result_direction;
	err = _dupenv_s(&env_dir, &len, _envname);
	env_dir = str_c_allocate_memory(env_dir);
	if (err == 0) {
		result_direction = string(env_dir);
		return result_direction;
	}
	return "";
}

/*
string convert_to_string(bool _bool_value)
*/
string convert_to_string(bool _bool_value) {
	string result_string;
	result_string.clear();
	result_string = _bool_value ? "true" : "false";
	return result_string;
}

/*
string convert_to_string(int _int_value)
*/
string convert_to_string(int _int_value) {
	string result_string;
	//result_string.clear();
	//result_string.assign(std::to_string(_int_value));
	std::ostringstream oss;
	oss.clear();
	oss << _int_value;
	result_string.assign(oss.str());
	oss.clear();
	return result_string;
}

/*
string convert_to_string(double _double_value)
*/
string convert_to_string(double _double_value) {
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("string convert_to_string(double _double_value) - _double_value = %f \n", _double_value);
	int vk = (int)_double_value;
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("string convert_to_string(double _double_value) - vk = %d \n", vk);
	double nk = _double_value - vk;
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("string convert_to_string(double _double_value) - nk = %f \n", nk);
	int precision_nk;
	precision_nk = (int)sizeof(nk) - 2;
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("string convert_to_string(double _double_value) - precision_nk = %d \n", precision_nk);

	//Alle Nullen nach dem Komma abschneiden, aber eine Null behalten: 1.0000000 ==> 1.0
	double round_value;
	//Runden auf X Stellen nach dem Komma
	round_value = round(_double_value * 1000000000000000.0) / 1000000000000000.0;

	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("string convert_to_string(double _double_value) - round_value = %f \n", round_value);

	std::ostringstream Str;
	//Str.precision(15);
	Str.precision(precision_nk);
	Str << std::fixed << round_value;
	//Str << round_value;

	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("string convert_to_string(double _double_value) - Str = %s \n", Str.str().c_str());

	std::string s;
	s.assign(Str.str().c_str());

	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("string convert_to_string(double _double_value) - s = %s \n", s.c_str());


	s.erase(s.find_last_not_of('0') + 1, std::string::npos);
	if (s.back() == '.') {
		s.pop_back();
	}

	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("string convert_to_string(double _double_value) - nach pop_back - s = %s \n", s.c_str());

	size_t last = s.length() - 1;
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("string convert_to_string(double _double_value) - s.length() = %d \n", (int)s.length() );
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("string convert_to_string(double _double_value) - s.at(0) = %c \n", s.at(0) );
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("string convert_to_string(double _double_value) - s.find('.') = %d \n", (int)s.find('.'));
	if (s.at(last) == '.') {
		s.append("0");
	}
	//else if ((s.find('.') < 0 || s.find('.') > s.size()) && s.at(last) != '0') {
	else if (s.find('.') == -1) {
		s.append(".0");
	}

	return(s);
}

/*
bool convert_to_bool(string _string_value)
*/
bool convert_to_bool(string _string_value) {
	bool result_bool;
	size_t string_len;
	string_len = _string_value.length();
	size_t z = 0;
	char c;
	while (_string_value[z] != '\0') {
		c = _string_value[z];
		c = tolower(c);
		_string_value[z] = c;
		z++;
	}

	result_bool = (_string_value == "false") ? false : true;
	return result_bool;
}

/*
int convert_to_int(string _string_value)
*/
int convert_to_int(string _string_value) {
	//return std::stoi(_string_value.c_str());
	//return std::atoi(_string_value.c_str());
	std::istringstream iss(_string_value);
	int int_result;
	iss >> int_result;
	return int_result;
}

/*
double convert_to_double(string _string_value)
*/
double convert_to_double(string _string_value) {
	double double_result;
	size_t * Idx;
	Idx = NULL;
	double_result = stod(_string_value.c_str(), Idx);

	return double_result;
}

str_c str_c_allocate_memory(str_c _input, ...) {
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- START - str_c_allocate_memory --- \n");
	va_list ap;
	char *szText = NULL;
	int len;

	va_start(ap, _input);
	len = _vscprintf(_input, ap) + 1; //Länge des Strings ermitteln + '\0'
	szText = (char *)calloc(len, sizeof(char));
	if (len > 1) {
		vsprintf_s(szText, len, _input, ap);
		//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("str_c_allocate_memory - szText=\"%s\" \n", szText);
	}
	va_end(ap);

	if (printf("%s", szText)) {
		if (szText != NULL) {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- STOPP - str_c_allocate_memory --- \n");
			return szText;
		}
		else {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- STOPP - str_c_allocate_memory - NULL --- \n");
			return NULL;
		}
	}
	else {
		//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- STOPP - str_c_allocate_memory - printf - NULL --- \n");
		return NULL;
	}
}

const unsigned char calcFinalSize[] =
{
	1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
	1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
	1,   1,   6,   1,   1,   1,   5,   6,   1,   1,   1,   1,   1,   1,   1,   1,
	1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   4,   1,   4,   1,
	1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
	1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
	1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
	1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
	1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
	1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
	1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
	1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
	1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
	1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
	1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
	1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1
};

void escapeXml(std::string &_in)
{
	const char* dataIn = _in.data();
	size_t sizeIn = _in.size();

	const char* dataInCurrent = dataIn;
	const char* dataInEnd = dataIn + sizeIn;
	size_t outSize = 0;
	while (dataInCurrent < dataInEnd)
	{
		outSize += calcFinalSize[static_cast<uint8_t>(*dataInCurrent)];
		dataInCurrent++;
	}


	if (outSize == sizeIn)
	{
		return;
	}
	std::string out;
	out.resize(outSize);

	dataInCurrent = dataIn;
	char* dataOut = &out[0];
	while (dataInCurrent < dataInEnd)
	{
		switch (*dataInCurrent) {
		case '&':
			memcpy(dataOut, "&amp;", sizeof("&amp;") - 1);
			dataOut += sizeof("&amp;") - 1;
			break;
		case '\'':
			memcpy(dataOut, "&apos;", sizeof("&apos;") - 1);
			dataOut += sizeof("&apos;") - 1;
			break;
		case '\"':
			memcpy(dataOut, "&quot;", sizeof("&quot;") - 1);
			dataOut += sizeof("&quot;") - 1;
			break;
		case '>':
			memcpy(dataOut, "&gt;", sizeof("&gt;") - 1);
			dataOut += sizeof("&gt;") - 1;
			break;
		case '<':
			memcpy(dataOut, "&lt;", sizeof("&lt;") - 1);
			dataOut += sizeof("&lt;") - 1;
			break;
		default:
			*dataOut++ = *dataInCurrent;
		}
		dataInCurrent++;
	}
	_in.swap(out);
}

string retrieveXml(std::string _in)
{
	// https://www.adfreak.de/2018/11/25/html-umlaute-und-sonderzeichen/
	/*
	ä ==> &auml; Ä ==> &Auml;
	ö ==> &ouml;
	ü ==> &uuml;
	ß ==> &szlig;
	§ ==> &sect;
	€ ==> &euro;
	½ ==> &frac12;
	² ==> &sup2;
	√ ==> &radic;
	∑ ==> &sum;
	*/

	/*
	HTML Umlaute
	Zeichen/Beschreibung/Name in HTML/Unicode in HTML
	Ä A Umlaut &Auml; &#196;
	ä a Umlaut &auml; &#228;
	Ë E Umlaut &Euml; &#203;
	ë e Umlaut &euml; &#235;
	Ï I Umlaut &Iuml; &#207;
	ï i Umlaut &iuml; &#239;
	Ö O Umlaut &Ouml; &#214;
	ö o Umlaut &ouml; &#246;
	Ü U Umlaut &Uuml; &#220;
	ü u Umlaut &uuml; &#252;
	Ÿ Y Umlaut &Yuml; &#195;
	ÿ y Umlaut &yuml; &#255;

	Häufig verwendete Sonderzeichen HTML
	Zeichen / Beschreibung / Name in HTML / Unicode in HTML
	Erzwungenes Leerzeichen &nbsp; &#160;
	&Und - Zeichen, Ampersand &amp; &#38;
	ß scharfes S &szlig; &#223;
	© Copyright - Zeichen &copy; &#169;
	® Registriermarke - Zeichen &reg; &#174;
	™ Trademark &trade; &#153;
	« angewinkelte Anf.zeichen links &laquo; &#171;
	» angewinkelte Anf.zeichen rechts &raquo; &#187;
	• Bullet(größerer, dickerer Punkt) &bull; &#149;
	· Mittelpunkt &middot; &#183;
	¨ Pünktchen oben &uml; &#168;
	… Ellipsis, Auslassungspunkte &hellip; &#133;
	¡ umgekehrtes Ausrufezeichen &iexcl; &#161;
	¿ umgekehrtes Fragezeichen &iquest; &#191;
	¦ durchbrochener Strich &brvbar; &#166;
	§ Paragraph - Zeichen &sect; &#167;
	º Ordinal - Zeichen männlich &ordm; &#186;
	ª Ordinal - Zeichen weiblich &ordf; &#170;
	kurzer Trennstrich &shy; &#173;
	¯ Überstrich &macr; &#175;
	¶ Absatz - Zeichen &para; &#182;
	† einfaches Kreuz(Dagger) &dagger; &#134;
	‡ doppeltes Kreuz &Dagger; &#135;
	° Grad - Zeichen &deg; &#176;

	Währungszeichen HTML
	Zeichen / Beschreibung / Name in HTML / Unicode in HTML
	¢ Cent - Zeichen &cent; &#162;
	€ Euro - Zeichen &euro; &#8364;
	£ Pfund - Zeichen &pound; &#163;
	¤ Währungs - Zeichen &curren; &#164;
	¥ Yen - Zeichen &yen; &#165;
	ƒ Florin, Gulden &fnof; &#131;

	Das Dollar - Zeichen besitzt in HTML keinen Namen, da es Bestandteil der ASCII - Zeichentabelle ist.Das Dollar - Zeichen(Unicode: &#036;) kann einfach über die Tastatur eingeben werden und muss nicht maskiert werden.

	Mathematische Sonderzeichen HTML
	Zeichen / Beschreibung / Name in HTML / Unicode in HTML
	± Plusminus - Zeichen &plusmn; &#177;
	÷ Divisions - Zeichen &divide; &#247;
	× Mal - Zeichen &times; &#215;
	√ Quadratwurzel &radic; &#8730;
	∫ Integral &int; &#8747;
	¹ Hoch - 1 - Zeichen &sup1; &#185;
	² Hoch - 2 - Zeichen &sup2; &#178;
	³ Hoch - 3 - Zeichen &sup3; &#179;
	´ Acute - Zeichen &acute; &#180;
	¸ Häkchen unten &cedil; &#184;
	‰ Promille &permill; &#137;
	µ Mikro - Zeichen &micro; &#181;
	¬ Verneinungs - Zeichen & not; &#172;
	½ ein Halb &frac12; &#189;
	¼ ein Viertel &frac14; &#188;
	¾ drei Viertel &frac34; &#190;
	∀ für alle &forall; &#8704;
	∂ partiell &part; &#8706;
	∃ existiert &exist; &#8707;
	∅ leere Menge &empty; &#8709;
	⊂ Untermenge von &sub; &#8834;
	⊃ Obermenge von &sup; &#8835;
	⊄ keine Untermenge von &nsub; &#8836;
	⊆ Untermenge von oder gleich mit &sube; &#8838;
	⊇ Obermenge von oder gleich mit &supe; &#8839;
	≡ identisch mit &equiv; &#8801;
	≤ kleiner gleich &le; &#8804;
	≥ größer gleich &ge; &#8805;
	≙ entspricht &wedgeq; &#8793;


	HTML Zeichen für andere Sprachen
	Zeichen / Beschreibung / Name in HTML / Unicode in HTML
	À A mit Accent grave &Agrave; &#192;
	Á A mit Accent acute &Aacute; &#193;
	Â A mit Circumflex &Acirc; &#194;
	Ã A mit Tilde &Atilde; &#195;
	Å A mit Ring &Aring; &#197;
	Æ AE - Ligatur &AElig; &#198;
	Ç C mit Häkchen &Ccedil; &#199;
	È E mit Accent grave &Egrave; &#200;
	É E mit Accent acute &Eacute; &#201;
	Ê E mit Circumflex &Ecirc; &#202;
	Ì I mit Accent grave &Igrave; &#204;
	Í I mit Accent acute &Iacute; &#205;
	Î I mit Circumflex &Icirc; &#206;
	Ð Eth(isländisch) &ETH; &#208;
	Ñ N mit Tilde &Ntilde; &#209;
	Ò O mit Accent grave &Ograve; &#210;
	Ó O mit Accent acute &Oacute; &#211;
	Ô O mit Circumflex &Ocirc; &#212;
	Õ O mit Tilde &Otilde; &#213;
	Ø O mit Schrägstrich &Oslash; &#216;
	Œ OE - Ligatur &OElig; &#140;
	Ù U mit Accent grave &Ugrave; &#217;
	Ú U mit Accent acute &Uacute; &#218;
	Û U mit Circumflex &Ucirc; &#219;
	Ý Y mit Accent acute &Yacute; &#221;
	Þ THORN(isländisch) &THORN; &#222;
	à a mit Accent grave &agrave; &#224;
	á a mit Accent acute &aacute; &#225;
	â a mit Circumflex &acirc; &#226;
	ã a mit Tilde &atilde; &#227;
	å a mit Ring &aring; &#229;
	æ ae - Ligatur &aelig; &#230;
	ç c mit Häkchen &ccedil; &#231;
	è e mit Accent grave &egrave; &#232;
	é e mit Accent acute &eacute; &#233;
	ê e mit Circumflex &ecirc; &#234;
	ì i mit Accent grave &igrave; &#236;
	í i mit Accent acute &iacute; &#237;
	î i mit Circumflex &icirc; &#238;
	ð eth(isländisch) &eth; &#240;
	ñ n mit Tilde &ntilde; &#241;
	ò o mit Accent grave &ograve; &#242;
	ó o mit Accent acute &oacute; &#243;
	ô o mit Circumflex &ocirc; &#244;
	õ o mit Tilde &otilde; &#245;
	ø o mit Schrägstrich &oslash; &#248;
	œ oe - Ligatur &oelig; &#156;
	ù u mit Accent grave &ugrave; &#249;
	ú u mit Accent acute &uacute; &#250;
	û u mit Circumflex &ucirc; &#251;
	ý y mit Accent acute &yacute; &#253;
	þ thorn(isländisch) &thorn; &#254;
	Š S mit Hacek &Scaron; &#138;
	š s mit Hacek &scaron; &#154;
	Č C mit Hacek &Ccaron; &#268;
	č c mit Hacek &ccaron; &#269;


	Griechisches Alphabet
	Zeichen / Beschreibung / Name in HTML / Unicode in HTML
	Α großes griechisches Alpha &Alpha; &#913;
	Β großes griechisches Beta &Beta; &#914;
	Γ großes griechisches Gamma &Gamma; &#915;
	Δ großes griechisches Delta &Delta; &#916;
	Ε großes griechisches Epsilon &Epsilon; &#917;
	Ζ großes griechisches Zeta &Zeta; &#918;
	Η großes griechisches Eta &Eta; &#919;
	Θ großes griechisches Theta &Theta; &#920;
	Ι großes griechisches Iota &Iota; &#921;
	Κ großes griechisches Kappa &Kappa; &#922;
	Λ großes griechisches Lambda &Lambda; &#923;
	Μ großes griechisches Mu &Mu; &#924;
	Ν großes griechisches Nu &Nu; &#925;
	Ξ großes griechisches Xi &Xi; &#926;
	Ο großes griechisches Omicron &Omicron; &#927;
	Π großes griechisches Pi &Pi; &#928;
	Ρ großes griechisches Rho &Rho; &#929;
	Σ großes griechisches Sigma &Sigma; &#931;
	Τ großes griechisches Tau &Tau; &#932;
	Υ großes griechisches Ypsilon &Upsilon; &#933;
	Φ großes griechisches Phi &Phi; &#934;
	Χ großes griechisches Chi &Chi; &#935;
	Ψ großes griechisches Psi &Psi; &#936;
	Ω großes griechisches Omega &Omega; &#937;
	α kleines griechisches alpha &alpha; &#945;
	β kleines griechisches beta &beta; &#946;
	γ kleines griechisches gamma &gamma; &#947;
	δ kleines griechisches delta &delta; &#948;
	ε kleines griechisches epsilon &epsilon; &#949;
	ζ kleines griechisches zeta &zeta; &#950;
	η kleines griechisches eta &eta; &#951;
	θ kleines griechisches theta &theta; &#952;
	ι kleines griechisches iota &iota; &#953;
	κ kleines griechisches kappa &kappa; &#954;
	λ kleines griechisches lambda &lambda; &#955;
	μ kleines griechisches mu &mu; &#956;
	ν kleines griechisches nu &nu; &#957;
	ξ kleines griechisches xi &xi; &#958;
	ο kleines griechisches omicron &omicron; &#959;
	π kleines griechisches pi &pi; &#960;
	ρ kleines griechisches rho &rho; &#961;
	ς kleines griechisches finales sigma &sigmaf; &#962;
	σ kleines griechisches sigma &sigma; &#963;
	τ kleines griechisches tau &tau; &#964;
	υ kleines griechisches ypsilon &upsilon; &#965;
	φ kleines griechisches phi &phi; &#966;
	χ kleines griechisches chi &chi; &#967;
	ψ kleines griechisches psi &psi; &#968;
	ω kleines griechisches omega &omega; &#969;
	*/


	std::stringstream ss;
	//ss << "&quot;";
	string input_string;
	string output_string;
	output_string.clear();
	input_string.assign(_in);
	for (int i = 0; i < input_string.size(); i++) {
		char c;
		c = input_string[i];
		switch (c) {
			/*
		case 'ä':
			//input_string.replace(i, 1, "\&nbsp;");
			//output_string.append("&nbsp;");
			ss << "&auml;";
			break;
		case 'Ä':
			//input_string.replace(i, 1, "\&nbsp;");
			//output_string.append("&nbsp;");
			ss << "&Auml;";
			break;
		case 'ö':
			//input_string.replace(i, 1, "\&nbsp;");
			//output_string.append("&nbsp;");
			ss << "&ouml;";
			break;
		case 'Ö':
			//input_string.replace(i, 1, "\&nbsp;");
			//output_string.append("&nbsp;");
			ss << "&Ouml;";
			break;
		case 'ü':
			//input_string.replace(i, 1, "\&nbsp;");
			//output_string.append("&nbsp;");
			ss << "&uuml;";
			break;
		case 'Ü':
			//input_string.replace(i, 1, "\&nbsp;");
			//output_string.append("&nbsp;");
			ss << "&Uuml;";
			break;
		case 'ß':
			//input_string.replace(i, 1, "\&nbsp;");
			//output_string.append("&nbsp;");
			ss << "&szlig;";
			break;
			/*
			case ' ':
			//input_string.replace(i, 1, "\&nbsp;");
			//output_string.append("&nbsp;");
			ss << "&quot;\\&quot;";
			break;
			
		case '&':
			//input_string.replace(i, 1, "\&amp;");
			//output_string.append("&amp;");
			ss << "&amp;";
			break;
		case '\'':
			//input_string.replace(i, 1, "\&apos;");
			//output_string.append("&apos;");
			ss << "&apos;";
			break;
		case '\"':
			//input_string.replace(i, 1, "\&quot;");
			//output_string.append("&quot;");
			ss << "&quot;\\";
			break;
		case '>':
			//input_string.replace(i, 1, "\&gt;");
			//output_string.append("&gt;");
			ss << "&gt;";
			break;
		case '<':
			//input_string.replace(i, 1, "\&lt;");
			//output_string.append("&lt;");
			ss << "&lt;";
			break;
			*/
		default:
			//string add;
			//add = c;
			//output_string.append(add);
			ss << c;
			break;
		}
	}
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("ss = %s \n", ss.str().c_str());
	//ss << "&quot;";
	output_string.assign(ss.str());
	//output_string.pop_back();
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("input_string  = \"%s\" \n", input_string.c_str());
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("output_string = \"%s\" \n", output_string.c_str());
	return output_string;

}

string retrieveXmlList(std::string _in)
{
	std::stringstream ss;
	ss << "&quot;";
	string input_string;
	string output_string;
	output_string.clear();
	input_string.assign(_in);
	for (int i = 0; i < input_string.size(); i++) {
		char c;
		c = input_string[i];
		switch (c) {
			/*
		case 'ä':
			//input_string.replace(i, 1, "\&nbsp;");
			//output_string.append("&nbsp;");
			ss << "&auml;";
			break;
		case 'Ä':
			//input_string.replace(i, 1, "\&nbsp;");
			//output_string.append("&nbsp;");
			ss << "&Auml;";
			break;
		case 'ö':
			//input_string.replace(i, 1, "\&nbsp;");
			//output_string.append("&nbsp;");
			ss << "&ouml;";
			break;
		case 'Ö':
			//input_string.replace(i, 1, "\&nbsp;");
			//output_string.append("&nbsp;");
			ss << "&Ouml;";
			break;
		case 'ü':
			//input_string.replace(i, 1, "\&nbsp;");
			//output_string.append("&nbsp;");
			ss << "&uuml;";
			break;
		case 'Ü':
			//input_string.replace(i, 1, "\&nbsp;");
			//output_string.append("&nbsp;");
			ss << "&Uuml;";
			break;
		case 'ß':
			//input_string.replace(i, 1, "\&nbsp;");
			//output_string.append("&nbsp;");
			ss << "&szlig;";
			break;
		case ' ':
			//input_string.replace(i, 1, "\&nbsp;");
			//output_string.append("&nbsp;");
			ss << "&quot;\\&quot;";
			break;
		case '&':
			//input_string.replace(i, 1, "\&amp;");
			//output_string.append("&amp;");
			ss << "&amp;";
			break;
		case '\'':
			//input_string.replace(i, 1, "\&apos;");
			//output_string.append("&apos;");
			ss << "&apos;";
			break;
		case '\"':
			//input_string.replace(i, 1, "\&quot;");
			//output_string.append("&quot;");
			ss << "&quot;\\";
			break;
		case '>':
			//input_string.replace(i, 1, "\&gt;");
			//output_string.append("&gt;");
			ss << "&gt;";
			break;
		case '<':
			//input_string.replace(i, 1, "\&lt;");
			//output_string.append("&lt;");
			ss << "&lt;";
			break;*/
		default:
			//string add;
			//add = c;
			//output_string.append(add);
			ss << c;
			break;
		}
	}
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("ss = %s \n", ss.str().c_str());
	ss << "&quot;";
	output_string.assign(ss.str());
	//output_string.pop_back();
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("input_string  = \"%s\" \n", input_string.c_str());
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("output_string = \"%s\" \n", output_string.c_str());
	return output_string;

}

/*
File - Utilities - Customer Defaults - Gateway - Visualization - Line - Line Widths -> Repair these preferences.
*/
void repair_site_Gateway_Visualization_Line_prefs(NXOpen::Drafting::PreferencesBuilder *_preferencesBuilder, en_nx_dpv* _nx_dpv, Session * _theSession, Part* _workPart) {
	routineName.assign("repair_site_Gateway_Visualization_Line_prefs");
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- START - %s --- \n", routineName.c_str());

	//This option specifies the level of detail for the currently chosen Line Font Display.
	id_name.assign("UG_tolerance");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double lineCurveTolerance;
			lineCurveTolerance = _workPart->Preferences()->LineVisualization()->CurveTolerance();
			ist_id_value.assign(convert_to_string(lineCurveTolerance));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				lineCurveTolerance = convert_to_double(soll_id_value);
				_workPart->Preferences()->LineVisualization()->SetCurveTolerance(lineCurveTolerance);
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}	
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies how the line font is to be generated.
	id_name.assign("UG_fontDisplayMode");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Preferences::PartVisualizationLine::LineFontDisplayType lineFontDisplayType;
			lineFontDisplayType = _workPart->Preferences()->LineVisualization()->LineFontDisplay();
			int int_lineFontDisplayType;
			if (lineFontDisplayType == NXOpen::Preferences::PartVisualizationLine::LineFontDisplayTypeSoftware) {
				int_lineFontDisplayType = 0;
			}
			else if (lineFontDisplayType == NXOpen::Preferences::PartVisualizationLine::LineFontDisplayTypeHardware) {
				int_lineFontDisplayType = 1;
			}
			ist_id_value.assign(convert_to_string(int_lineFontDisplayType));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_lineFontDisplayType = convert_to_int(soll_id_value);
				if (int_lineFontDisplayType == 0) {
					lineFontDisplayType = NXOpen::Preferences::PartVisualizationLine::LineFontDisplayTypeSoftware;
				}
				else if (int_lineFontDisplayType == 1) {
					lineFontDisplayType = NXOpen::Preferences::PartVisualizationLine::LineFontDisplayTypeHardware;
				}
				_workPart->Preferences()->LineVisualization()->SetLineFontDisplay(lineFontDisplayType);
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the length of a segment of a dashed curve.
	if (_nx_dpv->usedUnitValue.compare("1") == 0) {
		id_name.assign("UG_dashSize_MU");
	}
	else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
		id_name.assign("UG_dashSize_EU");
	}
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double lineDashSize;
			lineDashSize = _workPart->Preferences()->LineVisualization()->DashSize();
			ist_id_value.assign(convert_to_string(lineDashSize));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				lineDashSize = convert_to_double(soll_id_value);
				_workPart->Preferences()->LineVisualization()->SetDashSize(lineDashSize);
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the distance between two segments of a dashed curve.
	if (_nx_dpv->usedUnitValue.compare("1") == 0) {
		id_name.assign("UG_spaceSize_MU");
	}
	else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
		id_name.assign("UG_spaceSize_EU");
	}
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double lineSpaceSize;
			lineSpaceSize = _workPart->Preferences()->LineVisualization()->SpaceSize();
			ist_id_value.assign(convert_to_string(lineSpaceSize));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				lineSpaceSize = convert_to_double(soll_id_value);
				_workPart->Preferences()->LineVisualization()->SetSpaceSize(lineSpaceSize);
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the displayed size of symbols.
	if (_nx_dpv->usedUnitValue.compare("1") == 0) {
		id_name.assign("UG_symbolSize_MU");
	}
	else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
		id_name.assign("UG_symbolSize_EU");
	}
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double lineSymbolSize;
			lineSymbolSize = _workPart->Preferences()->LineVisualization()->SymbolSize();
			ist_id_value.assign(convert_to_string(lineSymbolSize));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				lineSymbolSize = convert_to_double(soll_id_value);
				_workPart->Preferences()->LineVisualization()->SetSymbolSize(lineSymbolSize);
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not the object width attribute 
	//determines the displayed width of lines and curves.			
	id_name.assign("UG_widthDisplay");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			bool isShowWidthOn;
			isShowWidthOn = _workPart->Preferences()->LineVisualization()->ShowWidths();
			int int_isShowWidthOn;
			if (isShowWidthOn) {
				int_isShowWidthOn = 1;
			}
			else {
				int_isShowWidthOn = 2;
			}
			ist_id_value.assign(convert_to_string(int_isShowWidthOn));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_isShowWidthOn = convert_to_int(soll_id_value);
				bool isShowWidthOn;
				if (int_isShowWidthOn == 2) {
					isShowWidthOn = false;
				}
				else if (int_isShowWidthOn == 1) {
					isShowWidthOn = true;
				}
				_workPart->Preferences()->LineVisualization()->SetShowWidths(isShowWidthOn);
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the number of pixels used in the graphics window for Width 1.
	id_name.assign("UG_pixelWidth1");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			short int widhtNr;
			widhtNr = 0;
			std::vector<int> pixelWidths(9);
			_workPart->Preferences()->LineVisualization()->GetPixelWidths(pixelWidths);
			int pixelWidth;
			pixelWidth = pixelWidths[widhtNr];
			ist_id_value.assign(convert_to_string(pixelWidth));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				pixelWidth = convert_to_int(soll_id_value);
				pixelWidths[widhtNr] = pixelWidth;
				_workPart->Preferences()->LineVisualization()->SetPixelWidths(pixelWidths);
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the number of pixels used in the graphics window for Width 2.
	id_name.assign("UG_pixelWidth2");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			short int widhtNr;
			widhtNr = 1;
			std::vector<int> pixelWidths(9);
			_workPart->Preferences()->LineVisualization()->GetPixelWidths(pixelWidths);
			int pixelWidth;
			pixelWidth = pixelWidths[widhtNr];
			ist_id_value.assign(convert_to_string(pixelWidth));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				pixelWidth = convert_to_int(soll_id_value);
				pixelWidths[widhtNr] = pixelWidth;
				_workPart->Preferences()->LineVisualization()->SetPixelWidths(pixelWidths);
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the number of pixels used in the graphics window for Width 3.
	id_name.assign("UG_pixelWidth3");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			short int widhtNr;
			widhtNr = 2;
			std::vector<int> pixelWidths(9);
			_workPart->Preferences()->LineVisualization()->GetPixelWidths(pixelWidths);
			int pixelWidth;
			pixelWidth = pixelWidths[widhtNr];
			ist_id_value.assign(convert_to_string(pixelWidth));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				pixelWidth = convert_to_int(soll_id_value);
				pixelWidths[widhtNr] = pixelWidth;
				_workPart->Preferences()->LineVisualization()->SetPixelWidths(pixelWidths);
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the number of pixels used in the graphics window for Width 4.
	id_name.assign("UG_pixelWidth4");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			short int widhtNr;
			widhtNr = 3;
			std::vector<int> pixelWidths(9);
			_workPart->Preferences()->LineVisualization()->GetPixelWidths(pixelWidths);
			int pixelWidth;
			pixelWidth = pixelWidths[widhtNr];
			ist_id_value.assign(convert_to_string(pixelWidth));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				pixelWidth = convert_to_int(soll_id_value);
				pixelWidths[widhtNr] = pixelWidth;
				_workPart->Preferences()->LineVisualization()->SetPixelWidths(pixelWidths);
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the number of pixels used in the graphics window for Width 5.
	id_name.assign("UG_pixelWidth5");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			short int widhtNr;
			widhtNr = 4;
			std::vector<int> pixelWidths(9);
			_workPart->Preferences()->LineVisualization()->GetPixelWidths(pixelWidths);
			int pixelWidth;
			pixelWidth = pixelWidths[widhtNr];
			ist_id_value.assign(convert_to_string(pixelWidth));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				pixelWidth = convert_to_int(soll_id_value);
				pixelWidths[widhtNr] = pixelWidth;
				_workPart->Preferences()->LineVisualization()->SetPixelWidths(pixelWidths);
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the number of pixels used in the graphics window for Width 6.
	id_name.assign("UG_pixelWidth6");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			short int widhtNr;
			widhtNr = 5;
			std::vector<int> pixelWidths(9);
			_workPart->Preferences()->LineVisualization()->GetPixelWidths(pixelWidths);
			int pixelWidth;
			pixelWidth = pixelWidths[widhtNr];
			ist_id_value.assign(convert_to_string(pixelWidth));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				pixelWidth = convert_to_int(soll_id_value);
				pixelWidths[widhtNr] = pixelWidth;
				_workPart->Preferences()->LineVisualization()->SetPixelWidths(pixelWidths);
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the number of pixels used in the graphics window for Width 7.
	id_name.assign("UG_pixelWidth7");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			short int widhtNr;
			widhtNr = 6;
			std::vector<int> pixelWidths(9);
			_workPart->Preferences()->LineVisualization()->GetPixelWidths(pixelWidths);
			int pixelWidth;
			pixelWidth = pixelWidths[widhtNr];
			ist_id_value.assign(convert_to_string(pixelWidth));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				pixelWidth = convert_to_int(soll_id_value);
				pixelWidths[widhtNr] = pixelWidth;
				_workPart->Preferences()->LineVisualization()->SetPixelWidths(pixelWidths);
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the number of pixels used in the graphics window for Width 8.
	id_name.assign("UG_pixelWidth8");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			short int widhtNr;
			widhtNr = 7;
			std::vector<int> pixelWidths(9);
			_workPart->Preferences()->LineVisualization()->GetPixelWidths(pixelWidths);
			int pixelWidth;
			pixelWidth = pixelWidths[widhtNr];
			ist_id_value.assign(convert_to_string(pixelWidth));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				pixelWidth = convert_to_int(soll_id_value);
				pixelWidths[widhtNr] = pixelWidth;
				_workPart->Preferences()->LineVisualization()->SetPixelWidths(pixelWidths);
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the number of pixels used in the graphics window for Width 9.
	id_name.assign("UG_pixelWidth9");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			short int widhtNr;
			widhtNr = 8;
			std::vector<int> pixelWidths(9);
			_workPart->Preferences()->LineVisualization()->GetPixelWidths(pixelWidths);
			int pixelWidth;
			pixelWidth = pixelWidths[widhtNr];
			ist_id_value.assign(convert_to_string(pixelWidth));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				pixelWidth = convert_to_int(soll_id_value);
				pixelWidths[widhtNr] = pixelWidth;
				_workPart->Preferences()->LineVisualization()->SetPixelWidths(pixelWidths);
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- STOPP - %s --- \n", routineName.c_str());
}

/*
File - Utilities - Customer Defaults - Gateway - Visualization - Color Settings -> Repair these preferences.
*/
void repair_site_Gateway_Visualization_ColorSettings_prefs(NXOpen::Drafting::PreferencesBuilder *_preferencesBuilder, en_nx_dpv* _nx_dpv, Session * _theSession, Part* _workPart) {
	routineName.assign("repair_site_Gateway_Visualization_ColorSettings_prefs");
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- START - %s --- \n", routineName.c_str());

	//This option specifies the background color to be used when in monochrome drawing and layout display. 
	//The Original option means that the background color will be the same as that for full color mode.
	id_name.assign("UG_drawingBackgroundColor");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			int monochromeBackgroundColorIndex;
			monochromeBackgroundColorIndex = _workPart->Preferences()->ColorSettingVisualization()->MonochromeBackgroundColor();
			ist_id_value.assign(convert_to_string(monochromeBackgroundColorIndex));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				monochromeBackgroundColorIndex = convert_to_int(soll_id_value.c_str());
				_workPart->Preferences()->ColorSettingVisualization()->SetMonochromeBackgroundColor(monochromeBackgroundColorIndex);
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- STOPP - %s --- \n", routineName.c_str());
}

/*
File - Utilities - Customer Defaults - Gateway - Line Widths - Conversion -> Repair these preferences.
*/
void repair_site_Gateway_LineWidths_Conversion_prefs(NXOpen::Drafting::PreferencesBuilder *_preferencesBuilder, en_nx_dpv* _nx_dpv, Session * _theSession, Part* _workPart) {
	routineName.assign("repair_site_Gateway_LineWidths_Conversion_prefs");
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- START - %s --- \n", routineName.c_str());

	//This option specifies the line width to which thin line width is converted when object line widths are edited.
	id_name.assign("UG_thinLineWidthToNewLineWidth");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			std::vector<NXOpen::Preferences::PartObject::WidthType> newLineWidths(3);
			_workPart->Preferences()->ObjectPreferences()->GetLegacyLineWidthMap(newLineWidths);
			int int_newLineWidth;
			short int lineWidthType;
			lineWidthType = 0;
			if (newLineWidths[lineWidthType] == NXOpen::Preferences::PartObject::WidthTypePartDefault) {
				int_newLineWidth = 1;
			}
			else if (newLineWidths[lineWidthType] == NXOpen::Preferences::PartObject::WidthTypeThinWidth) {
				int_newLineWidth = 2;
			}
			else if (newLineWidths[lineWidthType] == NXOpen::Preferences::PartObject::WidthTypeNormalWidth) {
				int_newLineWidth = 3;
			}
			else if (newLineWidths[lineWidthType] == NXOpen::Preferences::PartObject::WidthTypeThickWidth) {
				int_newLineWidth = 4;
			}
			else if (newLineWidths[lineWidthType] == NXOpen::Preferences::PartObject::WidthTypeWidthOne) {
				int_newLineWidth = 5;
			}
			else if (newLineWidths[lineWidthType] == NXOpen::Preferences::PartObject::WidthTypeWidthTwo) {
				int_newLineWidth = 6;
			}
			else if (newLineWidths[lineWidthType] == NXOpen::Preferences::PartObject::WidthTypeWidthThree) {
				int_newLineWidth = 7;
			}
			else if (newLineWidths[lineWidthType] == NXOpen::Preferences::PartObject::WidthTypeWidthFour) {
				int_newLineWidth = 8;
			}
			else if (newLineWidths[lineWidthType] == NXOpen::Preferences::PartObject::WidthTypeWidthFive) {
				int_newLineWidth = 9;
			}
			else if (newLineWidths[lineWidthType] == NXOpen::Preferences::PartObject::WidthTypeWidthSix) {
				int_newLineWidth = 10;
			}
			else if (newLineWidths[lineWidthType] == NXOpen::Preferences::PartObject::WidthTypeWidthSeven) {
				int_newLineWidth = 11;
			}
			else if (newLineWidths[lineWidthType] == NXOpen::Preferences::PartObject::WidthTypeWidthEight) {
				int_newLineWidth = 12;
			}
			else if (newLineWidths[lineWidthType] == NXOpen::Preferences::PartObject::WidthTypeWidthNine) {
				int_newLineWidth = 13;
			}
			else {
				int_newLineWidth = -999;
			}
			ist_id_value.assign(convert_to_string(int_newLineWidth));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_newLineWidth = convert_to_int(soll_id_value.c_str());
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - nach convert_to_int \n", routineName.c_str());
				if (int_newLineWidth == 1) {
					newLineWidths[lineWidthType] = NXOpen::Preferences::PartObject::WidthTypePartDefault;
				}
				else if (int_newLineWidth == 2) {
					newLineWidths[lineWidthType] = NXOpen::Preferences::PartObject::WidthTypeThinWidth;
				}
				else if (int_newLineWidth == 3) {
					newLineWidths[lineWidthType] = NXOpen::Preferences::PartObject::WidthTypeNormalWidth;
				}
				else if (int_newLineWidth == 4) {
					newLineWidths[lineWidthType] = NXOpen::Preferences::PartObject::WidthTypeThickWidth;
				}
				else if (int_newLineWidth == 5) {
					newLineWidths[lineWidthType] = NXOpen::Preferences::PartObject::WidthTypeWidthOne;
				}
				else if (int_newLineWidth == 6) {
					newLineWidths[lineWidthType] = NXOpen::Preferences::PartObject::WidthTypeWidthTwo;
				}
				else if (int_newLineWidth == 7) {
					newLineWidths[lineWidthType] = NXOpen::Preferences::PartObject::WidthTypeWidthThree;
				}
				else if (int_newLineWidth == 8) {
					newLineWidths[lineWidthType] = NXOpen::Preferences::PartObject::WidthTypeWidthFour;
				}
				else if (int_newLineWidth == 9) {
					newLineWidths[lineWidthType] = NXOpen::Preferences::PartObject::WidthTypeWidthFive;
				}
				else if (int_newLineWidth == 10) {
					newLineWidths[lineWidthType] = NXOpen::Preferences::PartObject::WidthTypeWidthSix;
				}
				else if (int_newLineWidth == 11) {
					newLineWidths[lineWidthType] = NXOpen::Preferences::PartObject::WidthTypeWidthSeven;
				}
				else if (int_newLineWidth == 12) {
					newLineWidths[lineWidthType] = NXOpen::Preferences::PartObject::WidthTypeWidthEight;
				}
				else if (int_newLineWidth == 13) {
					newLineWidths[lineWidthType] = NXOpen::Preferences::PartObject::WidthTypeWidthNine;
				}
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - nach newLineWidths[%d] \n", routineName.c_str(), lineWidthType);
				if ((int)newLineWidths[lineWidthType] > (int)NXOpen::Preferences::PartObject::WidthTypeWidthSeven) {
					//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - %d = newLineWidths[%d] > WidthTypeWidthSeven = %d \n", routineName.c_str(), (int)newLineWidths[lineWidthType], lineWidthType, (int)NXOpen::Preferences::PartObject::WidthTypeWidthSeven);
					newLineWidths[lineWidthType] = NXOpen::Preferences::PartObject::WidthTypeWidthSeven;
					it->second = convert_to_string((int)newLineWidths[lineWidthType]);
					//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - Repaired: newLineWidths[%d] = %d \n", routineName.c_str(), lineWidthType, (int)newLineWidths[lineWidthType]);
				}
				if ((int)newLineWidths[lineWidthType] < (int)NXOpen::Preferences::PartObject::WidthTypeWidthOne) {
					//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - %d = newLineWidths[%d] < WidthTypeWidthSeven = %d \n", routineName.c_str(), (int)newLineWidths[lineWidthType], lineWidthType, (int)NXOpen::Preferences::PartObject::WidthTypeWidthOne);
					newLineWidths[lineWidthType] = NXOpen::Preferences::PartObject::WidthTypeWidthOne;
					it->second = convert_to_string((int)newLineWidths[lineWidthType]);
					//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - Repaired: newLineWidths[%d] = %d \n", routineName.c_str(), lineWidthType, (int)newLineWidths[lineWidthType]);
				}
				if ((int)newLineWidths[lineWidthType + 1] <= (int)newLineWidths[lineWidthType]) {
					//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - %d = newLineWidths[%d] <= newLineWidths[%d] = %d \n", routineName.c_str(), (int)newLineWidths[lineWidthType + 1], lineWidthType + 1, lineWidthType, (int)newLineWidths[lineWidthType]);
					newLineWidths[lineWidthType + 1] = (NXOpen::Preferences::PartObject::WidthType) ((int)newLineWidths[lineWidthType] + 1);
					//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - Repaired: newLineWidths[%d] = %d \n", routineName.c_str(), lineWidthType + 1, (int)newLineWidths[lineWidthType + 1]);
				}
				if ((int)newLineWidths[lineWidthType + 2] <= (int)newLineWidths[lineWidthType + 1]) {
					//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - %d = newLineWidths[%d] <= newLineWidths[%d] = %d \n", routineName.c_str(), (int)newLineWidths[lineWidthType + 2], lineWidthType + 2, lineWidthType + 1, (int)newLineWidths[lineWidthType + 1]);
					newLineWidths[lineWidthType + 2] = (NXOpen::Preferences::PartObject::WidthType) ((int)newLineWidths[lineWidthType + 1] + 1);
					//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - Repaired: newLineWidths[%d] = %d \n", routineName.c_str(), lineWidthType + 2, (int)newLineWidths[lineWidthType + 2]);
				}
				_workPart->Preferences()->ObjectPreferences()->SetLegacyLineWidthMap(newLineWidths);
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - nach SetLegacyLineWidthMap \n", routineName.c_str());
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the line width to which normal line width is converted when object line widths are edited.
	id_name.assign("UG_normalLineWidthToNewLineWidth");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			std::vector<NXOpen::Preferences::PartObject::WidthType> newLineWidths(3);
			_workPart->Preferences()->ObjectPreferences()->GetLegacyLineWidthMap(newLineWidths);
			int int_newLineWidth;
			short int lineWidthType;
			lineWidthType = 1;
			if (newLineWidths[lineWidthType] == NXOpen::Preferences::PartObject::WidthTypePartDefault) {
				int_newLineWidth = 1;
			}
			else if (newLineWidths[lineWidthType] == NXOpen::Preferences::PartObject::WidthTypeThinWidth) {
				int_newLineWidth = 2;
			}
			else if (newLineWidths[lineWidthType] == NXOpen::Preferences::PartObject::WidthTypeNormalWidth) {
				int_newLineWidth = 3;
			}
			else if (newLineWidths[lineWidthType] == NXOpen::Preferences::PartObject::WidthTypeThickWidth) {
				int_newLineWidth = 4;
			}
			else if (newLineWidths[lineWidthType] == NXOpen::Preferences::PartObject::WidthTypeWidthOne) {
				int_newLineWidth = 5;
			}
			else if (newLineWidths[lineWidthType] == NXOpen::Preferences::PartObject::WidthTypeWidthTwo) {
				int_newLineWidth = 6;
			}
			else if (newLineWidths[lineWidthType] == NXOpen::Preferences::PartObject::WidthTypeWidthThree) {
				int_newLineWidth = 7;
			}
			else if (newLineWidths[lineWidthType] == NXOpen::Preferences::PartObject::WidthTypeWidthFour) {
				int_newLineWidth = 8;
			}
			else if (newLineWidths[lineWidthType] == NXOpen::Preferences::PartObject::WidthTypeWidthFive) {
				int_newLineWidth = 9;
			}
			else if (newLineWidths[lineWidthType] == NXOpen::Preferences::PartObject::WidthTypeWidthSix) {
				int_newLineWidth = 10;
			}
			else if (newLineWidths[lineWidthType] == NXOpen::Preferences::PartObject::WidthTypeWidthSeven) {
				int_newLineWidth = 11;
			}
			else if (newLineWidths[lineWidthType] == NXOpen::Preferences::PartObject::WidthTypeWidthEight) {
				int_newLineWidth = 12;
			}
			else if (newLineWidths[lineWidthType] == NXOpen::Preferences::PartObject::WidthTypeWidthNine) {
				int_newLineWidth = 13;
			}
			else {
				int_newLineWidth = -999;
			}
			ist_id_value.assign(convert_to_string(int_newLineWidth));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
				soll_id_value.assign(it->second);
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
				if (ist_id_value.compare(soll_id_value) != 0) {
					//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
					int_newLineWidth = convert_to_int(soll_id_value.c_str());
					//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - nach convert_to_int \n", routineName.c_str());
					if (int_newLineWidth == 1) {
						newLineWidths[lineWidthType] = NXOpen::Preferences::PartObject::WidthTypePartDefault;
					}
					else if (int_newLineWidth == 2) {
						newLineWidths[lineWidthType] = NXOpen::Preferences::PartObject::WidthTypeThinWidth;
					}
					else if (int_newLineWidth == 3) {
						newLineWidths[lineWidthType] = NXOpen::Preferences::PartObject::WidthTypeNormalWidth;
					}
					else if (int_newLineWidth == 4) {
						newLineWidths[lineWidthType] = NXOpen::Preferences::PartObject::WidthTypeThickWidth;
					}
					else if (int_newLineWidth == 5) {
						newLineWidths[lineWidthType] = NXOpen::Preferences::PartObject::WidthTypeWidthOne;
					}
					else if (int_newLineWidth == 6) {
						newLineWidths[lineWidthType] = NXOpen::Preferences::PartObject::WidthTypeWidthTwo;
					}
					else if (int_newLineWidth == 7) {
						newLineWidths[lineWidthType] = NXOpen::Preferences::PartObject::WidthTypeWidthThree;
					}
					else if (int_newLineWidth == 8) {
						newLineWidths[lineWidthType] = NXOpen::Preferences::PartObject::WidthTypeWidthFour;
					}
					else if (int_newLineWidth == 9) {
						newLineWidths[lineWidthType] = NXOpen::Preferences::PartObject::WidthTypeWidthFive;
					}
					else if (int_newLineWidth == 10) {
						newLineWidths[lineWidthType] = NXOpen::Preferences::PartObject::WidthTypeWidthSix;
					}
					else if (int_newLineWidth == 11) {
						newLineWidths[lineWidthType] = NXOpen::Preferences::PartObject::WidthTypeWidthSeven;
					}
					else if (int_newLineWidth == 12) {
						newLineWidths[lineWidthType] = NXOpen::Preferences::PartObject::WidthTypeWidthEight;
					}
					else if (int_newLineWidth == 13) {
						newLineWidths[lineWidthType] = NXOpen::Preferences::PartObject::WidthTypeWidthNine;
					}
					//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - nach newLineWidths[%d] \n", routineName.c_str(), lineWidthType);
					if ((int)newLineWidths[lineWidthType] < (int)NXOpen::Preferences::PartObject::WidthTypeWidthTwo) {
						//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - %d = newLineWidths[%d] < WidthTypeWidthTwo = %d \n", routineName.c_str(), (int)newLineWidths[lineWidthType], lineWidthType, (int)NXOpen::Preferences::PartObject::WidthTypeWidthTwo);
						newLineWidths[lineWidthType] = NXOpen::Preferences::PartObject::WidthTypeWidthTwo;
						it->second = convert_to_string((int)newLineWidths[lineWidthType]);
					}
					if ((int)newLineWidths[lineWidthType] > (int)NXOpen::Preferences::PartObject::WidthTypeWidthEight) {
						//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - %d = newLineWidths[%d] > WidthTypeWidthEight = %d \n", routineName.c_str(), (int)newLineWidths[lineWidthType], lineWidthType, (int)NXOpen::Preferences::PartObject::WidthTypeWidthEight);
						newLineWidths[lineWidthType] = NXOpen::Preferences::PartObject::WidthTypeWidthEight;
						it->second = convert_to_string((int)newLineWidths[lineWidthType]);
					}
					if ((int)newLineWidths[lineWidthType - 1] >= (int)newLineWidths[lineWidthType]) {
						//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - %d = newLineWidths[%d] >= newLineWidths[%d] = %d \n", routineName.c_str(), (int)newLineWidths[lineWidthType - 1], lineWidthType - 1, lineWidthType, (int)newLineWidths[lineWidthType]);
						newLineWidths[lineWidthType - 1] = (NXOpen::Preferences::PartObject::WidthType) ((int)newLineWidths[lineWidthType] - 1);
					}
					if ((int)newLineWidths[lineWidthType] >= (int)newLineWidths[lineWidthType + 1]) {
						//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - %d = newLineWidths[%d] >= newLineWidths[%d] = %d \n", routineName.c_str(), (int)newLineWidths[lineWidthType], lineWidthType, lineWidthType + 1, (int)newLineWidths[lineWidthType + 1]);
						newLineWidths[lineWidthType + 1] = (NXOpen::Preferences::PartObject::WidthType) ((int)newLineWidths[lineWidthType] + 1);
					}
					_workPart->Preferences()->ObjectPreferences()->SetLegacyLineWidthMap(newLineWidths);
					//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - nach SetLegacyLineWidthMap \n", routineName.c_str());
					nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
				}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the line width to which thick line width is converted when object line widths are edited.
	id_name.assign("UG_thickLineWidthToNewLineWidth");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			std::vector<NXOpen::Preferences::PartObject::WidthType> newLineWidths(3);
			_workPart->Preferences()->ObjectPreferences()->GetLegacyLineWidthMap(newLineWidths);
			int int_newLineWidth;
			short int lineWidthType;
			lineWidthType = 2;
			if (newLineWidths[lineWidthType] == NXOpen::Preferences::PartObject::WidthTypePartDefault) {
				int_newLineWidth = 1;
			}
			else if (newLineWidths[lineWidthType] == NXOpen::Preferences::PartObject::WidthTypeThinWidth) {
				int_newLineWidth = 2;
			}
			else if (newLineWidths[lineWidthType] == NXOpen::Preferences::PartObject::WidthTypeNormalWidth) {
				int_newLineWidth = 3;
			}
			else if (newLineWidths[lineWidthType] == NXOpen::Preferences::PartObject::WidthTypeThickWidth) {
				int_newLineWidth = 4;
			}
			else if (newLineWidths[lineWidthType] == NXOpen::Preferences::PartObject::WidthTypeWidthOne) {
				int_newLineWidth = 5;
			}
			else if (newLineWidths[lineWidthType] == NXOpen::Preferences::PartObject::WidthTypeWidthTwo) {
				int_newLineWidth = 6;
			}
			else if (newLineWidths[lineWidthType] == NXOpen::Preferences::PartObject::WidthTypeWidthThree) {
				int_newLineWidth = 7;
			}
			else if (newLineWidths[lineWidthType] == NXOpen::Preferences::PartObject::WidthTypeWidthFour) {
				int_newLineWidth = 8;
			}
			else if (newLineWidths[lineWidthType] == NXOpen::Preferences::PartObject::WidthTypeWidthFive) {
				int_newLineWidth = 9;
			}
			else if (newLineWidths[lineWidthType] == NXOpen::Preferences::PartObject::WidthTypeWidthSix) {
				int_newLineWidth = 10;
			}
			else if (newLineWidths[lineWidthType] == NXOpen::Preferences::PartObject::WidthTypeWidthSeven) {
				int_newLineWidth = 11;
			}
			else if (newLineWidths[lineWidthType] == NXOpen::Preferences::PartObject::WidthTypeWidthEight) {
				int_newLineWidth = 12;
			}
			else if (newLineWidths[lineWidthType] == NXOpen::Preferences::PartObject::WidthTypeWidthNine) {
				int_newLineWidth = 13;
			}
			else {
				int_newLineWidth = -999;
			}
			ist_id_value.assign(convert_to_string(int_newLineWidth));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_newLineWidth = convert_to_int(soll_id_value.c_str());
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - nach convert_to_int \n", routineName.c_str());
				if (int_newLineWidth == 1) {
					newLineWidths[lineWidthType] = NXOpen::Preferences::PartObject::WidthTypePartDefault;
				}
				else if (int_newLineWidth == 2) {
					newLineWidths[lineWidthType] = NXOpen::Preferences::PartObject::WidthTypeThinWidth;
				}
				else if (int_newLineWidth == 3) {
					newLineWidths[lineWidthType] = NXOpen::Preferences::PartObject::WidthTypeNormalWidth;
				}
				else if (int_newLineWidth == 4) {
					newLineWidths[lineWidthType] = NXOpen::Preferences::PartObject::WidthTypeThickWidth;
				}
				else if (int_newLineWidth == 5) {
					newLineWidths[lineWidthType] = NXOpen::Preferences::PartObject::WidthTypeWidthOne;
				}
				else if (int_newLineWidth == 6) {
					newLineWidths[lineWidthType] = NXOpen::Preferences::PartObject::WidthTypeWidthTwo;
				}
				else if (int_newLineWidth == 7) {
					newLineWidths[lineWidthType] = NXOpen::Preferences::PartObject::WidthTypeWidthThree;
				}
				else if (int_newLineWidth == 8) {
					newLineWidths[lineWidthType] = NXOpen::Preferences::PartObject::WidthTypeWidthFour;
				}
				else if (int_newLineWidth == 9) {
					newLineWidths[lineWidthType] = NXOpen::Preferences::PartObject::WidthTypeWidthFive;
				}
				else if (int_newLineWidth == 10) {
					newLineWidths[lineWidthType] = NXOpen::Preferences::PartObject::WidthTypeWidthSix;
				}
				else if (int_newLineWidth == 11) {
					newLineWidths[lineWidthType] = NXOpen::Preferences::PartObject::WidthTypeWidthSeven;
				}
				else if (int_newLineWidth == 12) {
					newLineWidths[lineWidthType] = NXOpen::Preferences::PartObject::WidthTypeWidthEight;
				}
				else if (int_newLineWidth == 13) {
					newLineWidths[lineWidthType] = NXOpen::Preferences::PartObject::WidthTypeWidthNine;
				}
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - nach newLineWidths[%d] \n", routineName.c_str(), lineWidthType);
				if ((int)newLineWidths[lineWidthType] > (int)NXOpen::Preferences::PartObject::WidthTypeWidthNine) {
					//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - %d = newLineWidths[%d] > WidthTypeWidthNine = %d \n", routineName.c_str(), (int)newLineWidths[lineWidthType], lineWidthType, (int)NXOpen::Preferences::PartObject::WidthTypeWidthNine);
					newLineWidths[lineWidthType] = NXOpen::Preferences::PartObject::WidthTypeWidthNine;
					it->second = convert_to_string((int)newLineWidths[lineWidthType]);
				}
				if ((int)newLineWidths[lineWidthType] < (int)NXOpen::Preferences::PartObject::WidthTypeWidthThree) {
					//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - %d = newLineWidths[%d] < WidthTypeWidthThree = %d \n", routineName.c_str(), (int)newLineWidths[lineWidthType], lineWidthType, (int)NXOpen::Preferences::PartObject::WidthTypeWidthThree);
					newLineWidths[lineWidthType] = NXOpen::Preferences::PartObject::WidthTypeWidthThree;
					it->second = convert_to_string((int)newLineWidths[lineWidthType]);
				}
				if ((int)newLineWidths[lineWidthType - 1] >= (int)newLineWidths[lineWidthType]) {
					//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - %d = newLineWidths[%d] >= newLineWidths[%d] = %d \n", routineName.c_str(), (int)newLineWidths[lineWidthType - 1], lineWidthType - 1, lineWidthType, (int)newLineWidths[lineWidthType]);
					newLineWidths[lineWidthType - 1] = (NXOpen::Preferences::PartObject::WidthType) ((int)newLineWidths[lineWidthType] - 1);
				}
				if ((int)newLineWidths[lineWidthType - 2] >= (int)newLineWidths[lineWidthType - 1]) {
					//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - %d = newLineWidths[%d] <= newLineWidths[%d] = %d \n", routineName.c_str(), (int)newLineWidths[lineWidthType - 2], lineWidthType - 2, lineWidthType - 1, (int)newLineWidths[lineWidthType - 1]);
					newLineWidths[lineWidthType - 2] = (NXOpen::Preferences::PartObject::WidthType) ((int)newLineWidths[lineWidthType - 1] - 1);
				}
				_workPart->Preferences()->ObjectPreferences()->SetLegacyLineWidthMap(newLineWidths);
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - nach SetLegacyLineWidthMap \n", routineName.c_str());
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- STOPP - %s --- \n", routineName.c_str());
}

/*
File - Utilities - Customer Defaults - Ship Drafting - Annotation - Reference Lines -> Repair these preferences.
*/
void repair_site_ShipDrafting_Annotation_ReferenceLines_prefs(NXOpen::Drafting::PreferencesBuilder *_preferencesBuilder, en_nx_dpv* _nx_dpv, Session * _theSession, Part* _workPart) {
	routineName.assign("repair_site_Gateway_LineWidths_Conversion_prefs");
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- START - %s --- \n", routineName.c_str());

	//This option determines whether or not the reference lines should be created.
	id_name.assign("ShipDrafting_CreateReferenceLines");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		Preferences::LoadDraftingStandardBuilder *loadDraftingStandardBuilder;
			
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			loadDraftingStandardBuilder = _workPart->Preferences()->DraftingPreference()->CreateLoadDraftingStandardBuilder();
			loadDraftingStandardBuilder->SetLevel(Preferences::LoadDraftingStandardBuilder::LoadLevelSite);
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			ist_id_value.assign(convert_to_string(_theSession->OptionsManager()->GetLogicalValue(nx_id_name)));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				loadDraftingStandardBuilder->SetName(soll_id_value.c_str());
				loadDraftingStandardBuilder->Commit();
				loadDraftingStandardBuilder->Destroy();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
			else
			{
				loadDraftingStandardBuilder->Destroy();
			}

		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	/*
	//This option determines whether or not the reference lines should be created.
	id_name.assign("ShipDrafting_CreateReferenceLines");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::ViewStyleShipbuildingLinesBuilder *vSSLB;
			vSSLB = _workPart->DraftingViews()->CreateShipbuildingLineBuilder();

			bool singleLineToggle;
			singleLineToggle = vSSLB->SingleLineRepresentation();
			ist_id_value.assign(convert_to_string(singleLineToggle));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			if (it != _nx_dpv->soll_dpv_map.end()) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
				soll_id_value.assign(it->second);
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
				if (ist_id_value.compare(soll_id_value) != 0) {
					//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
					singleLineToggle = convert_to_bool(soll_id_value);
					vSSLB->SetSingleLineRepresentation(singleLineToggle);
					nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
				}
			}
			else {
				nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	*/

	//This option specifies the color of the centerline.
	id_name.assign("ShipDrafting_Reference_Lines_CenterLineColor");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			Preferences::LoadDraftingStandardBuilder *loadDraftingStandardBuilder;
			loadDraftingStandardBuilder = _workPart->Preferences()->DraftingPreference()->CreateLoadDraftingStandardBuilder();
			loadDraftingStandardBuilder->SetLevel(Preferences::LoadDraftingStandardBuilder::LoadLevelSite);
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			ist_id_value.assign(convert_to_string(_theSession->OptionsManager()->GetIntValue(nx_id_name)));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				loadDraftingStandardBuilder->SetName(soll_id_value.c_str());
				loadDraftingStandardBuilder->Commit();
				loadDraftingStandardBuilder->Destroy();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
			else
			{
				loadDraftingStandardBuilder->Destroy();
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}
	/*
	//This option specifies the color of the centerline.
	id_name.assign("ShipDrafting_Reference_Lines_CenterLineColor");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::ViewStyleShipbuildingLinesBuilder *vSSLB;
			vSSLB = _workPart->DraftingViews()->CreateShipbuildingLineBuilder();
			NXOpen::NXColor * color;
			color = vSSLB->VisibleColor();
			int colorIndex;
			colorIndex = color->Handle(),
			ist_id_value.assign(convert_to_string(colorIndex));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			if (it != _nx_dpv->soll_dpv_map.end()) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
				soll_id_value.assign(it->second);
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
				if (ist_id_value.compare(soll_id_value) != 0) {
					//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
					colorIndex = convert_to_int(soll_id_value);
					color = _workPart->Colors()->Find(colorIndex);
					vSSLB->SetVisibleColor(color);
					nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
				}
			}
			else {
				nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	*/

	//This option specifies the line font of the centerline.
	id_name.assign("ShipDrafting_Reference_Lines_CenterLineFont");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			Preferences::LoadDraftingStandardBuilder *loadDraftingStandardBuilder;
			loadDraftingStandardBuilder = _workPart->Preferences()->DraftingPreference()->CreateLoadDraftingStandardBuilder();
			loadDraftingStandardBuilder->SetLevel(Preferences::LoadDraftingStandardBuilder::LoadLevelSite);
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			ist_id_value.assign(convert_to_string(_theSession->OptionsManager()->GetIntValue(nx_id_name)));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				loadDraftingStandardBuilder->SetName(soll_id_value.c_str());
				loadDraftingStandardBuilder->Commit();
				loadDraftingStandardBuilder->Destroy();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
			else
			{
				loadDraftingStandardBuilder->Destroy();
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}
		
	/*
	//This option specifies the line font of the centerline.
	id_name.assign("ShipDrafting_Reference_Lines_CenterLineFont");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::ViewStyleShipbuildingLinesBuilder *vSSLB;
			vSSLB = _workPart->DraftingViews()->CreateShipbuildingLineBuilder();
			NXOpen::Preferences::Font font;
			font = vSSLB->VisibleFont();
			int int_font;
			if (font == NXOpen::Preferences::FontInvisible) {
				int_font = 0;
			}
			else if (font == NXOpen::Preferences::FontSolid) {
				int_font = 1;
			}
			else if (font == NXOpen::Preferences::FontDashed) {
				int_font = 2;
			}
			else if (font == NXOpen::Preferences::FontPhantom) {
				int_font = 3;
			}
			else if (font == NXOpen::Preferences::FontCenterline) {
				int_font = 4;
			}
			else if (font == NXOpen::Preferences::FontDotted) {
				int_font = 5;
			}
			else if (font == NXOpen::Preferences::FontLongDashed) {
				int_font = 6;
			}
			else if (font == NXOpen::Preferences::FontDottedDashed) {
				int_font = 7;
			}
			else if (font == NXOpen::Preferences::FontOriginal) {
				int_font = 8;
			}
			ist_id_value.assign(convert_to_string(int_font));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			if (it != _nx_dpv->soll_dpv_map.end()) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
				soll_id_value.assign(it->second);
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
				if (ist_id_value.compare(soll_id_value) != 0) {
					//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
					int_font = convert_to_int(soll_id_value);
					if (int_font == 0) {
						font = NXOpen::Preferences::FontInvisible;
					}
					else if (int_font == 1) {
						font = NXOpen::Preferences::FontSolid;
					}
					else if (int_font == 2) {
						font = NXOpen::Preferences::FontDashed;
					}
					else if (int_font == 3) {
						font = NXOpen::Preferences::FontPhantom;
					}
					else if (int_font == 4) {
						font = NXOpen::Preferences::FontCenterline;
					}
					else if (int_font == 5) {
						font = NXOpen::Preferences::FontDotted;
					}
					else if (int_font == 6) {
						font = NXOpen::Preferences::FontLongDashed;
					}
					else if (int_font == 7) {
						font = NXOpen::Preferences::FontDottedDashed;
					}
					else if (int_font == 8) {
						font = NXOpen::Preferences::FontOriginal;
					}
					vSSLB->SetVisibleFont(font);
					nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
				}
			}
			else {
				nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	*/

	//This option specifies the line width of the centerline.
	id_name.assign("ShipDrafting_Reference_Lines_CenterLineWidth");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			Preferences::LoadDraftingStandardBuilder *loadDraftingStandardBuilder;
			loadDraftingStandardBuilder = _workPart->Preferences()->DraftingPreference()->CreateLoadDraftingStandardBuilder();
			loadDraftingStandardBuilder->SetLevel(Preferences::LoadDraftingStandardBuilder::LoadLevelSite);
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			ist_id_value.assign(convert_to_string(_theSession->OptionsManager()->GetIntValue(nx_id_name)));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				loadDraftingStandardBuilder->SetName(soll_id_value.c_str());
				loadDraftingStandardBuilder->Commit();
				loadDraftingStandardBuilder->Destroy();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
			else
			{
				loadDraftingStandardBuilder->Destroy();
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	/*
	//This option specifies the line width of the centerline.
	id_name.assign("ShipDrafting_Reference_Lines_CenterLineWidth");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::ViewStyleShipbuildingLinesBuilder *vSSLB;
			vSSLB = _workPart->DraftingViews()->CreateShipbuildingLineBuilder();
			NXOpen::Preferences::Width width;
			width = vSSLB->VisibleWidth();
			int int_width;
			if (width == NXOpen::Preferences::WidthOriginal) {
				int_width = 0;
			}
			else if (width == NXOpen::Preferences::WidthThin) {
				int_width = 1;
			}
			else if (width == NXOpen::Preferences::WidthNormal) {
				int_width = 2;
			}
			else if (width == NXOpen::Preferences::WidthThick) {
				int_width = 3;
			}
			else if (width == NXOpen::Preferences::WidthOne) {
				int_width = 5;
			}
			else if (width == NXOpen::Preferences::WidthTwo) {
				int_width = 6;
			}
			else if (width == NXOpen::Preferences::WidthThree) {
				int_width = 7;
			}
			else if (width == NXOpen::Preferences::WidthFour) {
				int_width = 8;
			}
			else if (width == NXOpen::Preferences::WidthFive) {
				int_width = 9;
			}
			else if (width == NXOpen::Preferences::WidthSix) {
				int_width = 10;
			}
			else if (width == NXOpen::Preferences::WidthSeven) {
				int_width = 11;
			}
			else if (width == NXOpen::Preferences::WidthEight) {
				int_width = 12;
			}
			else if (width == NXOpen::Preferences::WidthNine) {
				int_width = 13;
			}
			ist_id_value.assign(convert_to_string(int_width));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			if (it != _nx_dpv->soll_dpv_map.end()) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
				soll_id_value.assign(it->second);
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
				if (ist_id_value.compare(soll_id_value) != 0) {
					//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
					int_width = convert_to_int(soll_id_value);
					if (int_width == 0) {
						width = NXOpen::Preferences::WidthOriginal;
					}
					else if (int_width == 1) {
						width = NXOpen::Preferences::WidthThin;
					}
					else if (int_width == 2) {
						width = NXOpen::Preferences::WidthNormal;
					}
					else if (int_width == 3) {
						width = NXOpen::Preferences::WidthThick;
					}
					else if (int_width == 5) {
						width = NXOpen::Preferences::WidthOne;
					}
					else if (int_width == 6) {
						width = NXOpen::Preferences::WidthTwo;
					}
					else if (int_width == 7) {
						width = NXOpen::Preferences::WidthThree;
					}
					else if (int_width == 8) {
						width = NXOpen::Preferences::WidthFour;
					}
					else if (int_width == 9) {
						width = NXOpen::Preferences::WidthFive;
					}
					else if (int_width == 10) {
						width = NXOpen::Preferences::WidthSix;
					}
					else if (int_width == 11) {
						width = NXOpen::Preferences::WidthSeven;
					}
					else if (int_width == 12) {
						width = NXOpen::Preferences::WidthEight;
					}
					else if (int_width == 13) {
						width = NXOpen::Preferences::WidthNine;
					}
					vSSLB->SetVisibleWidth(width);
					nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
				}
			}
			else {
				nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	*/

	//This option specifies the color of the base line.
	id_name.assign("ShipDrafting_Reference_Lines_BaseLineColor");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			Preferences::LoadDraftingStandardBuilder *loadDraftingStandardBuilder;
			loadDraftingStandardBuilder = _workPart->Preferences()->DraftingPreference()->CreateLoadDraftingStandardBuilder();
			loadDraftingStandardBuilder->SetLevel(Preferences::LoadDraftingStandardBuilder::LoadLevelSite);
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			ist_id_value.assign(convert_to_string(_theSession->OptionsManager()->GetIntValue(nx_id_name)));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				loadDraftingStandardBuilder->SetName(soll_id_value.c_str());
				loadDraftingStandardBuilder->Commit();
				loadDraftingStandardBuilder->Destroy();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
			else
			{
				loadDraftingStandardBuilder->Destroy();
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	/*
	//This option specifies the color of the base line.
	id_name.assign("ShipDrafting_Reference_Lines_BaseLineColor");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::ViewStyleShipbuildingLinesBuilder *vSSLB;
			vSSLB = _workPart->DraftingViews()->CreateShipbuildingLineBuilder();
			NXOpen::NXColor * color;
			color = vSSLB->VisibleColor();
			int colorIndex;
			colorIndex = color->Handle(),
				ist_id_value.assign(convert_to_string(colorIndex));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			if (it != _nx_dpv->soll_dpv_map.end()) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
				soll_id_value.assign(it->second);
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
				if (ist_id_value.compare(soll_id_value) != 0) {
					//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
					colorIndex = convert_to_int(soll_id_value);
					color = _workPart->Colors()->Find(colorIndex);
					vSSLB->SetVisibleColor(color);
					nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
				}
			}
			else {
				nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	*/

	//This option specifies the line font of the base line.
	id_name.assign("ShipDrafting_Reference_Lines_BaseLineFont");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			Preferences::LoadDraftingStandardBuilder *loadDraftingStandardBuilder;
			loadDraftingStandardBuilder = _workPart->Preferences()->DraftingPreference()->CreateLoadDraftingStandardBuilder();
			loadDraftingStandardBuilder->SetLevel(Preferences::LoadDraftingStandardBuilder::LoadLevelSite);
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			ist_id_value.assign(convert_to_string(_theSession->OptionsManager()->GetIntValue(nx_id_name)));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				loadDraftingStandardBuilder->SetName(soll_id_value.c_str());
				loadDraftingStandardBuilder->Commit();
				loadDraftingStandardBuilder->Destroy();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
			else
			{
				loadDraftingStandardBuilder->Destroy();
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	/*
	//This option specifies the line font of the base line.
	id_name.assign("ShipDrafting_Reference_Lines_BaseLineFont");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::ViewStyleShipbuildingLinesBuilder *vSSLB;
			vSSLB = _workPart->DraftingViews()->CreateShipbuildingLineBuilder();
			NXOpen::Preferences::Font font;
			font = vSSLB->VisibleFont();
			int int_font;
			if (font == NXOpen::Preferences::FontInvisible) {
				int_font = 0;
			}
			else if (font == NXOpen::Preferences::FontSolid) {
				int_font = 1;
			}
			else if (font == NXOpen::Preferences::FontDashed) {
				int_font = 2;
			}
			else if (font == NXOpen::Preferences::FontPhantom) {
				int_font = 3;
			}
			else if (font == NXOpen::Preferences::FontCenterline) {
				int_font = 4;
			}
			else if (font == NXOpen::Preferences::FontDotted) {
				int_font = 5;
			}
			else if (font == NXOpen::Preferences::FontLongDashed) {
				int_font = 6;
			}
			else if (font == NXOpen::Preferences::FontDottedDashed) {
				int_font = 7;
			}
			else if (font == NXOpen::Preferences::FontOriginal) {
				int_font = 8;
			}
			ist_id_value.assign(convert_to_string(int_font));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			if (it != _nx_dpv->soll_dpv_map.end()) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
				soll_id_value.assign(it->second);
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
				if (ist_id_value.compare(soll_id_value) != 0) {
					//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
					int_font = convert_to_int(soll_id_value);
					if (int_font == 0) {
						font = NXOpen::Preferences::FontInvisible;
					}
					else if (int_font == 1) {
						font = NXOpen::Preferences::FontSolid;
					}
					else if (int_font == 2) {
						font = NXOpen::Preferences::FontDashed;
					}
					else if (int_font == 3) {
						font = NXOpen::Preferences::FontPhantom;
					}
					else if (int_font == 4) {
						font = NXOpen::Preferences::FontCenterline;
					}
					else if (int_font == 5) {
						font = NXOpen::Preferences::FontDotted;
					}
					else if (int_font == 6) {
						font = NXOpen::Preferences::FontLongDashed;
					}
					else if (int_font == 7) {
						font = NXOpen::Preferences::FontDottedDashed;
					}
					else if (int_font == 8) {
						font = NXOpen::Preferences::FontOriginal;
					}
					vSSLB->SetVisibleFont(font);
					nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
				}
			}
			else {
				nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	*/

	//This option specifies the line width of the base line.
	id_name.assign("ShipDrafting_Reference_Lines_BaseLineWidth");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			Preferences::LoadDraftingStandardBuilder *loadDraftingStandardBuilder;
			loadDraftingStandardBuilder = _workPart->Preferences()->DraftingPreference()->CreateLoadDraftingStandardBuilder();
			loadDraftingStandardBuilder->SetLevel(Preferences::LoadDraftingStandardBuilder::LoadLevelSite);
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			ist_id_value.assign(convert_to_string(_theSession->OptionsManager()->GetIntValue(nx_id_name)));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				loadDraftingStandardBuilder->SetName(soll_id_value.c_str());
				loadDraftingStandardBuilder->Commit();
				loadDraftingStandardBuilder->Destroy();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
			else
			{
				loadDraftingStandardBuilder->Destroy();
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	/*
	//This option specifies the line width of the base line.
	id_name.assign("ShipDrafting_Reference_Lines_BaseLineWidth");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::ViewStyleShipbuildingLinesBuilder *vSSLB;
			vSSLB = _workPart->DraftingViews()->CreateShipbuildingLineBuilder();
			NXOpen::Preferences::Width width;
			width = vSSLB->VisibleWidth();
			int int_width;
			if (width == NXOpen::Preferences::WidthOriginal) {
				int_width = 0;
			}
			else if (width == NXOpen::Preferences::WidthThin) {
				int_width = 1;
			}
			else if (width == NXOpen::Preferences::WidthNormal) {
				int_width = 2;
			}
			else if (width == NXOpen::Preferences::WidthThick) {
				int_width = 3;
			}
			else if (width == NXOpen::Preferences::WidthOne) {
				int_width = 5;
			}
			else if (width == NXOpen::Preferences::WidthTwo) {
				int_width = 6;
			}
			else if (width == NXOpen::Preferences::WidthThree) {
				int_width = 7;
			}
			else if (width == NXOpen::Preferences::WidthFour) {
				int_width = 8;
			}
			else if (width == NXOpen::Preferences::WidthFive) {
				int_width = 9;
			}
			else if (width == NXOpen::Preferences::WidthSix) {
				int_width = 10;
			}
			else if (width == NXOpen::Preferences::WidthSeven) {
				int_width = 11;
			}
			else if (width == NXOpen::Preferences::WidthEight) {
				int_width = 12;
			}
			else if (width == NXOpen::Preferences::WidthNine) {
				int_width = 13;
			}
			ist_id_value.assign(convert_to_string(int_width));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			if (it != _nx_dpv->soll_dpv_map.end()) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
				soll_id_value.assign(it->second);
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
				if (ist_id_value.compare(soll_id_value) != 0) {
					//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
					int_width = convert_to_int(soll_id_value);
					if (int_width == 0) {
						width = NXOpen::Preferences::WidthOriginal;
					}
					else if (int_width == 1) {
						width = NXOpen::Preferences::WidthThin;
					}
					else if (int_width == 2) {
						width = NXOpen::Preferences::WidthNormal;
					}
					else if (int_width == 3) {
						width = NXOpen::Preferences::WidthThick;
					}
					else if (int_width == 5) {
						width = NXOpen::Preferences::WidthOne;
					}
					else if (int_width == 6) {
						width = NXOpen::Preferences::WidthTwo;
					}
					else if (int_width == 7) {
						width = NXOpen::Preferences::WidthThree;
					}
					else if (int_width == 8) {
						width = NXOpen::Preferences::WidthFour;
					}
					else if (int_width == 9) {
						width = NXOpen::Preferences::WidthFive;
					}
					else if (int_width == 10) {
						width = NXOpen::Preferences::WidthSix;
					}
					else if (int_width == 11) {
						width = NXOpen::Preferences::WidthSeven;
					}
					else if (int_width == 12) {
						width = NXOpen::Preferences::WidthEight;
					}
					else if (int_width == 13) {
						width = NXOpen::Preferences::WidthNine;
					}
					vSSLB->SetVisibleWidth(width);
					nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
				}
			}
			else {
				nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	*/

	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- STOPP - %s --- \n", routineName.c_str());
}

/*
File - Utilities - Customer Defaults - Drafting - General/Setup - Standard -> Repair these preferences.
*/
void repair_site_drafting_GeneralSetup_Standard_prefs(NXOpen::Drafting::PreferencesBuilder *_preferencesBuilder, en_nx_dpv* _nx_dpv, Session* _theSession, Part* _workPart) {
	routineName.assign("repair_site_drafting_GeneralSetup_Standard_prefs");
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- START - %s --- \n", routineName.c_str());

	//This option allows users to specify a drafting standard used for drafting standard customer defaults.
	id_name.assign("Drafting_Standard");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			Preferences::LoadDraftingStandardBuilder *loadDraftingStandardBuilder;
			loadDraftingStandardBuilder = _workPart->Preferences()->DraftingPreference()->CreateLoadDraftingStandardBuilder();
			loadDraftingStandardBuilder->SetLevel(Preferences::LoadDraftingStandardBuilder::LoadLevelSite);
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			//ist_id_value.assign(_theSession->OptionsManager()->GetStringValue(nx_id_name).GetLocaleText());
			ist_id_value.assign(loadDraftingStandardBuilder->Name().GetLocaleText());
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });			
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				loadDraftingStandardBuilder->SetName(soll_id_value.c_str());
				loadDraftingStandardBuilder->Commit();
				loadDraftingStandardBuilder->Destroy();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
			else
			{
				loadDraftingStandardBuilder->Destroy();
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- STOPP - %s --- \n", routineName.c_str());
}

/*
File - Utilities - Customer Defaults - Drafting - General/Setup - Workflow -> Repair these preferences.
*/
void repair_site_Drafting_GneralSetup_Workflow_prefs(NXOpen::Drafting::PreferencesBuilder *_preferencesBuilder, en_nx_dpv* _nx_dpv, Session * _theSession, Part* _workPart) {
	routineName.assign("repair_site_Drafting_GneralSetup_Workflow_prefs");
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- START - %s --- \n", routineName.c_str());

	//This option determines whether or not the Insert Sheet command will be started when entering the Drafting application if no drawing sheets exist in the part.
	id_name.assign("Drafting_AutoStartInsertSheetDialog");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			bool bool_result_standAloneInsertSheet;
			bool_result_standAloneInsertSheet = _preferencesBuilder->Workflow()->StandAloneInsertSheet();
			ist_id_value.assign(convert_to_string(bool_result_standAloneInsertSheet));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				bool_result_standAloneInsertSheet = convert_to_bool(soll_id_value);
				_preferencesBuilder->Workflow()->SetStandAloneInsertSheet(bool_result_standAloneInsertSheet);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}
	
	//This option determines whether or not the Drawing View command will be started after inserting a drawing sheet with no views.
	id_name.assign("Drafting_StandaloneAutoStartDrawingViewCreation");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			bool bool_result_standAloneViewCreation;
			bool_result_standAloneViewCreation = _preferencesBuilder->Workflow()->StandAloneViewCreation();
			ist_id_value.assign(convert_to_string(bool_result_standAloneViewCreation));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				bool_result_standAloneViewCreation = convert_to_bool(soll_id_value);
				_preferencesBuilder->Workflow()->SetStandAloneViewCreation(bool_result_standAloneViewCreation);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not the Projected View command will be started after inserting a drawing view.
	id_name.assign("Drafting_StandaloneAutoStartProjectedView");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			bool bool_result_standAloneProjectedView;
			bool_result_standAloneProjectedView = _preferencesBuilder->Workflow()->StandAloneProjectedView();
			ist_id_value.assign(convert_to_string(bool_result_standAloneProjectedView));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				bool_result_standAloneProjectedView = convert_to_bool(soll_id_value);
				_preferencesBuilder->Workflow()->SetStandAloneProjectedView(bool_result_standAloneProjectedView);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not the Project to View command will be started after inserting a projected drawing view.
	//This option has no effect without an NX Layout license or if the Always Start Projected View Command check box is turned on.
	id_name.assign("Drafting_AutoStartProjectToView");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;			
			bool standAloneProjectToView;
			standAloneProjectToView = _preferencesBuilder->Workflow()->StandAloneProjectToView();
			ist_id_value.assign(convert_to_string(standAloneProjectToView));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				standAloneProjectToView = convert_to_bool(soll_id_value);
				_preferencesBuilder->Workflow()->SetStandAloneProjectToView(standAloneProjectToView);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not the Insert Sheet command will be started when 
	//entering the Drafting application if no drawing sheets exist in the part.
	id_name.assign("Drafting_showNewDrawingDialog");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			bool bool_modelBasedInsertSheet;
			bool_modelBasedInsertSheet = _preferencesBuilder->Workflow()->ModelBasedInsertSheet();
			int int_result_modelBasedInsertSheet;
			int_result_modelBasedInsertSheet = (int)bool_modelBasedInsertSheet;
			ist_id_value.assign(convert_to_string(int_result_modelBasedInsertSheet));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_result_modelBasedInsertSheet = convert_to_int(soll_id_value);
				bool_modelBasedInsertSheet = false;
				if (int_result_modelBasedInsertSheet == 1) {
					bool_modelBasedInsertSheet = true;
				}
				_preferencesBuilder->Workflow()->SetModelBasedInsertSheet(bool_modelBasedInsertSheet);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines which view command will be started after inserting a sheet with no views.
	id_name.assign("Drafting_BaseViewOrWizard");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::GeneralWorkFlowBuilder::ModelBasedAlwaysStartType modelBasedAlwaysStart;
			modelBasedAlwaysStart = _preferencesBuilder->Workflow()->ModelBasedAlwaysStart();
			int int_result_modelBasedAlwaysStart;
			int_result_modelBasedAlwaysStart = (int)modelBasedAlwaysStart;
			ist_id_value.assign(convert_to_string(modelBasedAlwaysStart));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_result_modelBasedAlwaysStart = convert_to_int(soll_id_value);
				NXOpen::Drawings::GeneralWorkFlowBuilder::ModelBasedAlwaysStartType modelBasedAlwaysStart;
				modelBasedAlwaysStart = (NXOpen::Drawings::GeneralWorkFlowBuilder::ModelBasedAlwaysStartType)int_result_modelBasedAlwaysStart;
				_preferencesBuilder->Workflow()->SetModelBasedAlwaysStart(modelBasedAlwaysStart);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not the Projected View command will be started after inserting a model view.
	id_name.assign("Drafting_AutoStartProjectedView");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			bool bool_modelBasedProjectedView;
			bool_modelBasedProjectedView = _preferencesBuilder->Workflow()->ModelBasedProjectedView();
			ist_id_value.assign(convert_to_string(bool_modelBasedProjectedView));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				bool_modelBasedProjectedView = convert_to_bool(soll_id_value);
				_preferencesBuilder->Workflow()->SetModelBasedProjectedView(bool_modelBasedProjectedView);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not drafting components will
	//be created when creating a view of the master model part.
	id_name.assign("Drafting_CreateComponentOfMasterModelPart");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;			
			bool bool_createDraftingComponent;
			bool_createDraftingComponent = _preferencesBuilder->Workflow()->CreateDraftingComponent();
			ist_id_value.assign(convert_to_string(bool_createDraftingComponent));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				bool_createDraftingComponent = convert_to_bool(soll_id_value);
				_preferencesBuilder->Workflow()->SetCreateDraftingComponent(bool_createDraftingComponent);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines if the new non-master drawing created from a template
	//inherits settings from the template part or the Drafting Standard.
	id_name.assign("Drafting_DrawingSettings");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::GeneralWorkFlowBuilder::SettingsOrientationType settingsOrigination;
			settingsOrigination = _preferencesBuilder->Workflow()->SettingsOrigination();
			int int_settingsOrigination;
			int_settingsOrigination = (int)settingsOrigination;
			ist_id_value.assign(convert_to_string(int_settingsOrigination));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_settingsOrigination = convert_to_int(soll_id_value);
				settingsOrigination = (NXOpen::Drawings::GeneralWorkFlowBuilder::SettingsOrientationType)int_settingsOrigination;
				_preferencesBuilder->Workflow()->SetSettingsOrigination(settingsOrigination);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines if the new non-master drawing created from a template
	//inherits settings from the template part or the Drafting Standard.
	id_name.assign("UG_gridInDrafting");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;			
			NXOpen::Drawings::GeneralWorkFlowBuilder::GridSettingsType gridSettingsType;
			gridSettingsType = _preferencesBuilder->Workflow()->GridSettings();
			int int_result_gridSettingsType;
			int_result_gridSettingsType = (int)gridSettingsType;
			ist_id_value.assign(convert_to_string(int_result_gridSettingsType));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_result_gridSettingsType = convert_to_int(soll_id_value);
				gridSettingsType = (NXOpen::Drawings::GeneralWorkFlowBuilder::GridSettingsType)int_result_gridSettingsType;
				_preferencesBuilder->Workflow()->SetGridSettings(gridSettingsType);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not model view PMI can be edited while in Drafting.
	id_name.assign("Drafting_AllowPMIBidirectionalEdits");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			bool readingDirection;
			readingDirection = _theSession->Preferences()->Pmi()->ReadingDirection();
			int int_readingDirection;
			int_readingDirection = (int)readingDirection;
			ist_id_value.assign(convert_to_string(int_readingDirection));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_readingDirection = convert_to_int(soll_id_value);
				readingDirection = false;
				if (int_readingDirection == 1) {
					readingDirection = true;
				}
				_theSession->Preferences()->Pmi()->SetReadingDirection(readingDirection);
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether settings for inherited PMI custom symbols will use 
	//drafting preferences or the settings from the PMI custom symbol instance.
	id_name.assign("Drafting_PMICustomSymbolSettings");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			NXOpen::Preferences::InheritPmiPreferences *inheritPmiPreferences;
			inheritPmiPreferences = _workPart->ViewPreferences()->InheritPmi();
			bool pmiOption;
			pmiOption = inheritPmiPreferences->InheritPmiToDrawing();
			int int_pmiOption;
			int_pmiOption = (int)pmiOption;
			ist_id_value.assign(convert_to_string(int_pmiOption));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_pmiOption = convert_to_int(soll_id_value);
				pmiOption = false;
				if (int_pmiOption == 1) {
					pmiOption = true;
				}
				NXOpen::Preferences::InheritPmiPreferences *inheritPmiPreferences;
				inheritPmiPreferences = _workPart->ViewPreferences()->InheritPmi();
				inheritPmiPreferences->SetInheritPmiToDrawing(pmiOption);
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the delay, in increments of 250 milliseconds, between pausing the cursor and when the on-screen dialog is displayed during dimension creation.
	id_name.assign("Drafting_EditSceneDialogDelay");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			int int_result_hoverSceneDialogDelay;
			int_result_hoverSceneDialogDelay = _preferencesBuilder->DimensionWorkflow()->HoverSceneDialogDelay();
			ist_id_value.assign(convert_to_string(int_result_hoverSceneDialogDelay));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_result_hoverSceneDialogDelay = convert_to_int(soll_id_value);
				_preferencesBuilder->DimensionWorkflow()->SetHoverSceneDialogDelay(int_result_hoverSceneDialogDelay);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- STOPP - %s --- \n", routineName.c_str());
}

/*
File - Utilities - Customer Defaults - Drafting - General/Setup - RetainedAnnotations -> Repair these preferences.
*/
void repair_site_Drafting_GneralSetup_RetainedAnnotations_prefs(NXOpen::Drafting::PreferencesBuilder *_preferencesBuilder, en_nx_dpv* _nx_dpv, Session * _theSession, Part* _workPart) {
	routineName.assign("repair_site_Drafting_GneralSetup_RetainedAnnotations_prefs");
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- START - %s --- \n", routineName.c_str());

	//This option determines whether or not drafting objects associated to objects 
	//that have been deleted by a modeling change should be retained (not deleted).
	id_name.assign("Drafting_retainAnnotationObjects");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			bool showRetainedAnnotations;
			showRetainedAnnotations = _preferencesBuilder->RetainedAnnotations()->ShowRetainedAnnotations();
			int int_showRetainedAnnotations;
			int_showRetainedAnnotations = (int)showRetainedAnnotations;
			ist_id_value.assign(convert_to_string(int_showRetainedAnnotations));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_showRetainedAnnotations = convert_to_int(soll_id_value);
				showRetainedAnnotations = false;
				if (int_showRetainedAnnotations == 1) {
					showRetainedAnnotations = true;
				}
				_preferencesBuilder->RetainedAnnotations()->SetShowRetainedAnnotations(showRetainedAnnotations);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the color of retained drafting objects.
	id_name.assign("Drafting_retainColor");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::LineColorFontWidthBuilder * linecolorfontwidhtBuilder;
			linecolorfontwidhtBuilder = _preferencesBuilder->RetainedAnnotations()->LineColorFontWidth();
			NXOpen::NXColor *lineColor;
			lineColor = linecolorfontwidhtBuilder->LineColor();
			int lineColorIndex;
			lineColorIndex = lineColor->Handle();
			ist_id_value.assign(convert_to_string(lineColorIndex));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				lineColorIndex = convert_to_int(soll_id_value);
				lineColor = _workPart->Colors()->Find(lineColorIndex);
				linecolorfontwidhtBuilder->SetLineColor(lineColor);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the line font for retained drafting objects.The option Original means that
	//the line font will not be changed from what it was before the drafting object became retained.
	id_name.assign("Drafting_retainFont");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::LineColorFontWidthBuilder * linecolorfontwidhtBuilder;
			linecolorfontwidhtBuilder = _preferencesBuilder->RetainedAnnotations()->LineColorFontWidth();
			NXOpen::LineFontBuilder::LineFontType retainFont;
			retainFont = linecolorfontwidhtBuilder->LineFont()->LineFont();
			int int_retainFont;
			if (retainFont == NXOpen::LineFontBuilder::LineFontTypeNoChange) {
				int_retainFont = -2;
			}
			else if (retainFont == NXOpen::LineFontBuilder::LineFontTypeOriginal) {
				int_retainFont = 0;
			}
			else if (retainFont == NXOpen::LineFontBuilder::LineFontTypeInvisible) {
				int_retainFont = -1;
			}
			else if (retainFont == NXOpen::LineFontBuilder::LineFontTypeSolid) {
				int_retainFont = 1;
			}
			else if (retainFont == NXOpen::LineFontBuilder::LineFontTypeDashed) {
				int_retainFont = 2;
			}
			else if (retainFont == NXOpen::LineFontBuilder::LineFontTypePhantom) {
				int_retainFont = 3;
			}
			else if (retainFont == NXOpen::LineFontBuilder::LineFontTypeCenterline) {
				int_retainFont = 4;
			}
			else if (retainFont == NXOpen::LineFontBuilder::LineFontTypeDotted) {
				int_retainFont = 5;
			}
			else if (retainFont == NXOpen::LineFontBuilder::LineFontTypeLongDashed) {
				int_retainFont = 6;
			}
			else if (retainFont == NXOpen::LineFontBuilder::LineFontTypeDottedDashed) {
				int_retainFont = 7;
			}
			ist_id_value.assign(convert_to_string(int_retainFont));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_retainFont = convert_to_int(soll_id_value);
				if (int_retainFont == -2) {
					retainFont = NXOpen::LineFontBuilder::LineFontTypeNoChange;
				}
				else if (int_retainFont == 0) {
					retainFont = NXOpen::LineFontBuilder::LineFontTypeOriginal;
				}
				else if (int_retainFont == -1) {
					retainFont = NXOpen::LineFontBuilder::LineFontTypeInvisible;
				}
				else if (int_retainFont == 1) {
					retainFont = NXOpen::LineFontBuilder::LineFontTypeSolid;
				}
				else if (int_retainFont == 2) {
					retainFont = NXOpen::LineFontBuilder::LineFontTypeDashed;
				}
				else if (int_retainFont == 3) {
					retainFont = NXOpen::LineFontBuilder::LineFontTypePhantom;
				}
				else if (int_retainFont == 4) {
					retainFont = NXOpen::LineFontBuilder::LineFontTypeCenterline;
				}
				else if (int_retainFont == 5) {
					retainFont = NXOpen::LineFontBuilder::LineFontTypeDotted;
				}
				else if (int_retainFont == 6) {
					retainFont = NXOpen::LineFontBuilder::LineFontTypeLongDashed;
				}
				else if (int_retainFont == 7) {
					retainFont = NXOpen::LineFontBuilder::LineFontTypeDottedDashed;
				}
				linecolorfontwidhtBuilder->LineFont()->SetLineFont(retainFont);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the line width for retained drafting objects. The option Original means that 
	//the line width will not be changed from what it was before the drafting object became retained.
	id_name.assign("Drafting_retainWidth");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::LineColorFontWidthBuilder * linecolorfontwidhtBuilder;
			linecolorfontwidhtBuilder = _preferencesBuilder->RetainedAnnotations()->LineColorFontWidth();
			NXOpen::DisplayableObject::ObjectWidth retainWidth;
			retainWidth = linecolorfontwidhtBuilder->LineWidth();
			int int_retainWidth;
			if (retainWidth == NXOpen::DisplayableObject::ObjectWidthNormal) {
				int_retainWidth = 0;
			}
			else if (retainWidth == NXOpen::DisplayableObject::ObjectWidthThick) {
				int_retainWidth = 1;
			}
			else if (retainWidth == NXOpen::DisplayableObject::ObjectWidthThin) {
				int_retainWidth = 2;
			}
			else if (retainWidth == NXOpen::DisplayableObject::ObjectWidthOne) {
				int_retainWidth = 5;
			}
			else if (retainWidth == NXOpen::DisplayableObject::ObjectWidthTwo) {
				int_retainWidth = 6;
			}
			else if (retainWidth == NXOpen::DisplayableObject::ObjectWidthThree) {
				int_retainWidth = 7;
			}
			else if (retainWidth == NXOpen::DisplayableObject::ObjectWidthFour) {
				int_retainWidth = 8;
			}
			else if (retainWidth == NXOpen::DisplayableObject::ObjectWidthFive) {
				int_retainWidth = 9;
			}
			else if (retainWidth == NXOpen::DisplayableObject::ObjectWidthSix) {
				int_retainWidth = 10;
			}
			else if (retainWidth == NXOpen::DisplayableObject::ObjectWidthSeven) {
				int_retainWidth = 11;
			}
			else if (retainWidth == NXOpen::DisplayableObject::ObjectWidthEight) {
				int_retainWidth = 12;
			}
			else if (retainWidth == NXOpen::DisplayableObject::ObjectWidthNine) {
				int_retainWidth = 13;
			}
			string id_name_tmp;
			std::map<const std::string, std::string>::iterator it_tmp;
			if (int_retainWidth == 0) {
				id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
				it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				int_retainWidth = convert_to_int(it_tmp->second);
			}
			if (int_retainWidth == 1) {
				id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
				it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				int_retainWidth = convert_to_int(it_tmp->second);
			}
			if (int_retainWidth == 2) {
				id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
				it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				int_retainWidth = convert_to_int(it_tmp->second);
			}
			//_nx_dpv->soll_dpv_map.find(id_name)->second = convert_to_string(int_retainWidth);
			ist_id_value.assign(convert_to_string(int_retainWidth));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
			int_retainWidth = convert_to_int(soll_id_value);
			if (int_retainWidth == 0) {
				//retainWidth = NXOpen::DisplayableObject::ObjectWidthNormal;
				id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
				it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				retainWidth = (NXOpen::DisplayableObject::ObjectWidth) convert_to_int(it_tmp->second);
			}
			else if (int_retainWidth == 1) {
				//retainWidth = NXOpen::DisplayableObject::ObjectWidthThick;
				id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
				it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				retainWidth = (NXOpen::DisplayableObject::ObjectWidth) convert_to_int(it_tmp->second);
			}
			else if (int_retainWidth == 2) {
				//retainWidth = NXOpen::DisplayableObject::ObjectWidthThin;
				id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
				it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				retainWidth = (NXOpen::DisplayableObject::ObjectWidth) convert_to_int(it_tmp->second);
			}
			else if (int_retainWidth == 5) {
				retainWidth = NXOpen::DisplayableObject::ObjectWidthOne;
			}
			else if (int_retainWidth == 6) {
				retainWidth = NXOpen::DisplayableObject::ObjectWidthTwo;
			}
			else if (int_retainWidth == 7) {
				retainWidth = NXOpen::DisplayableObject::ObjectWidthThree;
			}
			else if (int_retainWidth == 8) {
				retainWidth = NXOpen::DisplayableObject::ObjectWidthFour;
			}
			else if (int_retainWidth == 9) {
				retainWidth = NXOpen::DisplayableObject::ObjectWidthFive;
			}
			else if (int_retainWidth == 10) {
				retainWidth = NXOpen::DisplayableObject::ObjectWidthSix;
			}
			else if (int_retainWidth == 11) {
				retainWidth = NXOpen::DisplayableObject::ObjectWidthSeven;
			}
			else if (int_retainWidth == 12) {
				retainWidth = NXOpen::DisplayableObject::ObjectWidthEight;
			}
			else if (int_retainWidth == 13) {
				retainWidth = NXOpen::DisplayableObject::ObjectWidthNine;
			}
			linecolorfontwidhtBuilder->SetLineWidth(retainWidth);
			_preferencesBuilder->Commit();
			nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- STOPP - %s --- \n", routineName.c_str());
}

/*
File - Utilities - Customer Defaults - Drafting - General/Setup - WelcomePage -> Repair these preferences.
*/
void repair_site_Drafting_GneralSetup_WelcomePage_prefs(NXOpen::Drafting::PreferencesBuilder *_preferencesBuilder, en_nx_dpv* _nx_dpv, Session * _theSession, Part* _workPart) {
	routineName.assign("repair_site_Drafting_GneralSetup_WelcomePage_prefs");
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- START - %s --- \n", routineName.c_str());

	//This option determines whether or not the "Recommended Setup" section will appear in the Drafting Welcome Page.
	id_name.assign("Drafting_WelcomePageSetup");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Preferences::SessionPreferences *sessionPreferences;
			sessionPreferences = _theSession->Preferences();
			int welcomeEnterMode;
			welcomeEnterMode = sessionPreferences->Drafting()->ForcedWelcomeMode();
			bool bool_welcomeEnterMode = false;
			if (welcomeEnterMode == 1) {
				bool_welcomeEnterMode = true;
			}
			ist_id_value.assign(convert_to_string(bool_welcomeEnterMode));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				bool_welcomeEnterMode = convert_to_bool(soll_id_value);
				welcomeEnterMode = (int)bool_welcomeEnterMode;
				sessionPreferences->Drafting()->SetForcedWelcomeMode(welcomeEnterMode);
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines the number of NX sessions that will display the Drafting Welcome Page when entering the Drafting application.
	//Setting its value to 0 (zero)will result in it never being displayed.
	id_name.assign("Drafting_WelcomeSessionCount");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			ist_id_value.assign(convert_to_string(_theSession->OptionsManager()->GetIntValue(nx_id_name.GetLocaleText())));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				NXOpen::Options::ChangeList *changeList;
				changeList = _theSession->OptionsManager()->NewOptionsChangeList(NXOpen::Options::LevelTypeSite, NXOpen::Options::LevelLockedByDefaultFalse);
				changeList->SetValue(id_name.c_str(), soll_id_value.c_str());
				NXOpen::Options::DraftingStandardChangeList *draftingStandardChangeList;
				draftingStandardChangeList = _theSession->OptionsManager()->NewOptionsDraftingStandardChangeList(NXOpen::Options::LevelTypeSite, Standard_Site.c_str());
				draftingStandardChangeList->Load();
				delete draftingStandardChangeList;
				changeList->Save();
				changeList->LockValue(id_name.c_str());
				delete changeList;
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- STOPP - %s --- \n", routineName.c_str());
}

/*
File - Utilities - Customer Defaults - Drafting - General/Setup - Miscellaneous -> Repair these preferences.
*/
void repair_site_Drafting_GneralSetup_Miscellaneous_prefs(NXOpen::Drafting::PreferencesBuilder *_preferencesBuilder, en_nx_dpv* _nx_dpv, Session * _theSession, Part* _workPart) {
	routineName.assign("repair_site_Drafting_GneralSetup_Miscellaneous_prefs");
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- START - %s --- \n", routineName.c_str());

	//This option determines whether or not the Expressions editor is available in the Drafting application.
	id_name.assign("Drafting_AllowExpressions");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			ist_id_value.assign(convert_to_string(_theSession->OptionsManager()->GetLogicalValue(nx_id_name.GetLocaleText())));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				NXOpen::Options::ChangeList *changeList;
				changeList = _theSession->OptionsManager()->NewOptionsChangeList(NXOpen::Options::LevelTypeSite, NXOpen::Options::LevelLockedByDefaultFalse);
				changeList->SetValue(id_name.c_str(), soll_id_value.c_str());
				NXOpen::Options::DraftingStandardChangeList *draftingStandardChangeList;
				draftingStandardChangeList = _theSession->OptionsManager()->NewOptionsDraftingStandardChangeList(NXOpen::Options::LevelTypeSite, Standard_Site.c_str());
				draftingStandardChangeList->Load();
				delete draftingStandardChangeList;
				changeList->Save();
				changeList->LockValue(id_name.c_str());
				delete changeList;
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not CGM data should be saved for retrieval outside the context of NX.
	id_name.assign("Drafting_saveCGMImageWithPart");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			int int_id_value;
			int_id_value = _theSession->OptionsManager()->GetIntValue(nx_id_name.GetLocaleText());
			ist_id_value.assign(convert_to_string(int_id_value));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				NXOpen::Options::ChangeList *changeList;
				changeList = _theSession->OptionsManager()->NewOptionsChangeList(NXOpen::Options::LevelTypeSite, NXOpen::Options::LevelLockedByDefaultFalse);
				changeList->SetValue(id_name.c_str(), convert_to_int(soll_id_value));
				NXOpen::Options::DraftingStandardChangeList *draftingStandardChangeList;
				draftingStandardChangeList = _theSession->OptionsManager()->NewOptionsDraftingStandardChangeList(NXOpen::Options::LevelTypeSite, Standard_Site.c_str());
				draftingStandardChangeList->Load();
				delete draftingStandardChangeList;
				changeList->Save();
				changeList->LockValue(id_name.c_str());
				delete changeList;
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines from where font files will be read. System fonts are read from the 
	//systems standard font directory and in the directory pointed to by UGII_STANDARD_FONT_DIR. 
	//NX Fonts are located in the directory pointed to by UGII_CHARACTER_FONT_DIR.
	id_name.assign("Drafting_fontListOption");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			int int_id_value;
			int_id_value = _theSession->OptionsManager()->GetIntValue(nx_id_name.GetLocaleText());
			ist_id_value.assign(convert_to_string(int_id_value));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			if (it != _nx_dpv->soll_dpv_map.end()) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
				soll_id_value.assign(it->second);
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				NXOpen::Options::ChangeList *changeList;
				changeList = _theSession->OptionsManager()->NewOptionsChangeList(NXOpen::Options::LevelTypeSite, NXOpen::Options::LevelLockedByDefaultFalse);
				changeList->SetValue(id_name.c_str(), convert_to_int(soll_id_value));
				NXOpen::Options::DraftingStandardChangeList *draftingStandardChangeList;
				draftingStandardChangeList = _theSession->OptionsManager()->NewOptionsDraftingStandardChangeList(NXOpen::Options::LevelTypeSite, Standard_Site.c_str());
				draftingStandardChangeList->Load();
				delete draftingStandardChangeList;
				changeList->Save();
				changeList->LockValue(id_name.c_str());
				delete changeList;
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- STOPP - %s --- \n", routineName.c_str());
}

/*
File - Utilities - Customer Defaults - Drafting - General/Setup - TextEditor -> Repair these preferences.
*/
void repair_site_Drafting_GneralSetup_TextEditor_prefs(NXOpen::Drafting::PreferencesBuilder *_preferencesBuilder, en_nx_dpv* _nx_dpv, Session * _theSession, Part* _workPart) {
	routineName.assign("repair_site_Drafting_GneralSetup_TextEditor_prefs");
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- START - %s --- \n", routineName.c_str());

	//This option specifies the items to appear in the Character Scale Factor option menu in the Text Editor dialog box. 
	//The items are different scale factors that can be applied to the text. (The order of the items in the list will be 
	//the order of the items in the option menu.)
	id_name.assign("Drafting_AEcharSizeMenu");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Options::ChangeList *changeList;
			changeList = _theSession->OptionsManager()->NewOptionsChangeList(NXOpen::Options::LevelTypeSite, NXOpen::Options::LevelLockedByDefaultFalse);
			std::vector<NXString> editorText;
			ist_id_value.assign(_theSession->OptionsManager()->GetStringValue(nx_id_name).GetLocaleText());
			editorText = _theSession->GetSession()->OptionsManager()->GetStringListValue(id_name);
			//ist_id_value.assign(_theSession->GetSession()->OptionsManager()->GetStringValue(id_name).GetLocaleText());
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				NXOpen::Options::ChangeList *changeList;
				changeList = _theSession->OptionsManager()->NewOptionsChangeList(NXOpen::Options::LevelTypeSite, NXOpen::Options::LevelLockedByDefaultFalse);
				changeList->SetValue(id_name.c_str(), soll_id_value.c_str());
				NXOpen::Options::DraftingStandardChangeList *draftingStandardChangeList;
				draftingStandardChangeList = _theSession->OptionsManager()->NewOptionsDraftingStandardChangeList(NXOpen::Options::LevelTypeSite, Standard_Site.c_str());
				draftingStandardChangeList->Load();
				delete draftingStandardChangeList;
				changeList->Save();
				changeList->LockValue(id_name.c_str());
				delete changeList;
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies what line width should be used for the Bold text option.
	id_name.assign("Drafting_AEbold");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			int int_id_value;
			NXOpen::Options::ChangeList *changeList;
			changeList = _theSession->OptionsManager()->NewOptionsChangeList(NXOpen::Options::LevelTypeSite, NXOpen::Options::LevelLockedByDefaultFalse);
			int_id_value = _theSession->OptionsManager()->GetIntValue(nx_id_name);
			ist_id_value.assign(convert_to_string(int_id_value));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			if (it != _nx_dpv->soll_dpv_map.end()) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
				soll_id_value.assign(it->second);
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());

				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				NXOpen::Options::ChangeList *changeList;
				changeList = _theSession->OptionsManager()->NewOptionsChangeList(NXOpen::Options::LevelTypeSite, NXOpen::Options::LevelLockedByDefaultFalse);
				changeList->SetValue(id_name.c_str(), convert_to_int(soll_id_value));
				NXOpen::Options::DraftingStandardChangeList *draftingStandardChangeList;
				draftingStandardChangeList = _theSession->OptionsManager()->NewOptionsDraftingStandardChangeList(NXOpen::Options::LevelTypeSite, Standard_Site.c_str());
				draftingStandardChangeList->Load();
				delete draftingStandardChangeList;
				changeList->Save();
				changeList->LockValue(id_name.c_str());
				delete changeList;
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the slant angle that should be used for the Italic text option.
	id_name.assign("Drafting_AEitalic");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double double_id_value;
			NXOpen::Options::ChangeList *changeList;
			changeList = _theSession->OptionsManager()->NewOptionsChangeList(NXOpen::Options::LevelTypeSite, NXOpen::Options::LevelLockedByDefaultFalse);
			double_id_value = _theSession->OptionsManager()->GetRealValue(nx_id_name);
			ist_id_value.assign(convert_to_string(double_id_value));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				NXOpen::Options::ChangeList *changeList;
				changeList = _theSession->OptionsManager()->NewOptionsChangeList(NXOpen::Options::LevelTypeSite, NXOpen::Options::LevelLockedByDefaultFalse);
				changeList->SetValue(id_name.c_str(), convert_to_double(soll_id_value));
				NXOpen::Options::DraftingStandardChangeList *draftingStandardChangeList;
				draftingStandardChangeList = _theSession->OptionsManager()->NewOptionsDraftingStandardChangeList(NXOpen::Options::LevelTypeSite, Standard_Site.c_str());
				draftingStandardChangeList->Load();
				delete draftingStandardChangeList;
				changeList->Save();
				changeList->LockValue(id_name.c_str());
				delete changeList;
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not notes are created as vertical text.
	id_name.assign("Drafting_AEverticalText");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			int int_id_value;
			NXOpen::Options::ChangeList *changeList;
			changeList = _theSession->OptionsManager()->NewOptionsChangeList(NXOpen::Options::LevelTypeSite, NXOpen::Options::LevelLockedByDefaultFalse);
			int_id_value = _theSession->OptionsManager()->GetIntValue(nx_id_name);
			ist_id_value.assign(convert_to_string(int_id_value));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				NXOpen::Options::ChangeList *changeList;
				changeList = _theSession->OptionsManager()->NewOptionsChangeList(NXOpen::Options::LevelTypeSite, NXOpen::Options::LevelLockedByDefaultFalse);
				changeList->SetValue(id_name.c_str(), convert_to_int(soll_id_value));
				NXOpen::Options::DraftingStandardChangeList *draftingStandardChangeList;
				draftingStandardChangeList = _theSession->OptionsManager()->NewOptionsDraftingStandardChangeList(NXOpen::Options::LevelTypeSite, Standard_Site.c_str());
				draftingStandardChangeList->Load();
				delete draftingStandardChangeList;
				changeList->Save();
				changeList->LockValue(id_name.c_str());
				delete changeList;
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the visible vertical size (expressed as number of rows) of the text edit window.
	id_name.assign("Drafting_AErows");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			int int_id_value;
			int_id_value = _theSession->OptionsManager()->GetIntValue(nx_id_name.GetLocaleText());
			ist_id_value.assign(convert_to_string(int_id_value));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			if (it != _nx_dpv->soll_dpv_map.end()) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
				soll_id_value.assign(it->second);
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				NXOpen::Options::ChangeList *changeList;
				changeList = _theSession->OptionsManager()->NewOptionsChangeList(NXOpen::Options::LevelTypeSite, NXOpen::Options::LevelLockedByDefaultFalse);
				changeList->SetValue(id_name.c_str(), convert_to_int(soll_id_value));
				NXOpen::Options::DraftingStandardChangeList *draftingStandardChangeList;
				draftingStandardChangeList = _theSession->OptionsManager()->NewOptionsDraftingStandardChangeList(NXOpen::Options::LevelTypeSite, Standard_Site.c_str());
				draftingStandardChangeList->Load();
				delete draftingStandardChangeList;
				changeList->Save();
				changeList->LockValue(id_name.c_str());
				delete changeList;
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the visible horizontal size (expressed as number of columns) of the text edit window.
	id_name.assign("Drafting_AEcolumns");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			int int_id_value;
			int_id_value = _theSession->OptionsManager()->GetIntValue(nx_id_name.GetLocaleText());
			ist_id_value.assign(convert_to_string(int_id_value));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			if (it != _nx_dpv->soll_dpv_map.end()) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
				soll_id_value.assign(it->second);
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				NXOpen::Options::ChangeList *changeList;
				changeList = _theSession->OptionsManager()->NewOptionsChangeList(NXOpen::Options::LevelTypeSite, NXOpen::Options::LevelLockedByDefaultFalse);
				changeList->SetValue(id_name.c_str(), convert_to_int(soll_id_value));
				NXOpen::Options::DraftingStandardChangeList *draftingStandardChangeList;
				draftingStandardChangeList = _theSession->OptionsManager()->NewOptionsDraftingStandardChangeList(NXOpen::Options::LevelTypeSite, Standard_Site.c_str());
				draftingStandardChangeList->Load();
				delete draftingStandardChangeList;
				changeList->Save();
				changeList->LockValue(id_name.c_str());
				delete changeList;
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the size of the text in the preview window.
	id_name.assign("Drafting_AEpreviewSize");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			int int_id_value;
			int_id_value = _theSession->OptionsManager()->GetIntValue(nx_id_name.GetLocaleText());
			ist_id_value.assign(convert_to_string(int_id_value));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			if (it != _nx_dpv->soll_dpv_map.end()) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
				soll_id_value.assign(it->second);
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());	
				NXOpen::Options::ChangeList *changeList;
				changeList = _theSession->OptionsManager()->NewOptionsChangeList(NXOpen::Options::LevelTypeSite, NXOpen::Options::LevelLockedByDefaultFalse);
				changeList->SetValue(id_name.c_str(), convert_to_int(soll_id_value));
				NXOpen::Options::DraftingStandardChangeList *draftingStandardChangeList;
				draftingStandardChangeList = _theSession->OptionsManager()->NewOptionsDraftingStandardChangeList(NXOpen::Options::LevelTypeSite, Standard_Site.c_str());
				draftingStandardChangeList->Load();
				delete draftingStandardChangeList;
				changeList->Save();
				changeList->LockValue(id_name.c_str());
				delete changeList;
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the scale applied to the actual character size of the text in the preview window.
	id_name.assign("Drafting_AEpreviewScale");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double double_id_value;
			NXOpen::Options::ChangeList *changeList;
			changeList = _theSession->OptionsManager()->NewOptionsChangeList(NXOpen::Options::LevelTypeSite, NXOpen::Options::LevelLockedByDefaultFalse);
			double_id_value = _theSession->OptionsManager()->GetRealValue(nx_id_name);
			ist_id_value.assign(convert_to_string(double_id_value));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				NXOpen::Options::ChangeList *changeList;
				changeList = _theSession->OptionsManager()->NewOptionsChangeList(NXOpen::Options::LevelTypeSite, NXOpen::Options::LevelLockedByDefaultFalse);
				changeList->SetValue(id_name.c_str(), convert_to_double(soll_id_value));
				NXOpen::Options::DraftingStandardChangeList *draftingStandardChangeList;
				draftingStandardChangeList = _theSession->OptionsManager()->NewOptionsDraftingStandardChangeList(NXOpen::Options::LevelTypeSite, Standard_Site.c_str());
				draftingStandardChangeList->Load();
				delete draftingStandardChangeList;
				changeList->Save();
				changeList->LockValue(id_name.c_str());
				delete changeList;
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the fixed character size used for the text in the preview window.
	if (_nx_dpv->usedUnitValue.compare("1") == 0) {
		id_name.assign("Drafting_AEpreviewCharSize_MU");
	}
	else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
		id_name.assign("Drafting_AEpreviewCharSize_EU");
	}
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double double_id_value;
			NXOpen::Options::ChangeList *changeList;
			changeList = _theSession->OptionsManager()->NewOptionsChangeList(NXOpen::Options::LevelTypeSite, NXOpen::Options::LevelLockedByDefaultFalse);
			double_id_value = _theSession->OptionsManager()->GetRealValue(nx_id_name);
			ist_id_value.assign(convert_to_string(double_id_value));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
				soll_id_value.assign(it->second);
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
				if (ist_id_value.compare(soll_id_value) != 0) {
					//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
					NXOpen::Options::ChangeList *changeList;
					changeList = _theSession->OptionsManager()->NewOptionsChangeList(NXOpen::Options::LevelTypeSite, NXOpen::Options::LevelLockedByDefaultFalse);
					changeList->SetValue(id_name.c_str(), convert_to_double(soll_id_value));
					NXOpen::Options::DraftingStandardChangeList *draftingStandardChangeList;
					draftingStandardChangeList = _theSession->OptionsManager()->NewOptionsDraftingStandardChangeList(NXOpen::Options::LevelTypeSite, Standard_Site.c_str());
					draftingStandardChangeList->Load();
					delete draftingStandardChangeList;
					changeList->Save();
					changeList->LockValue(id_name.c_str());
					delete changeList;
					nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
				}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- STOPP - %s --- \n", routineName.c_str());
}

/*
File - Utilities - Customer Defaults - Drafting - Flat Pattern View - Lines -> Repair these preferences.
*/
void repair_site_Drafting_FlatPatternView_Lines_prefs(NXOpen::Drafting::PreferencesBuilder *_preferencesBuilder, en_nx_dpv* _nx_dpv, Session * _theSession, Part* _workPart) {
	routineName.assign("repair_site_Drafting_FlatPatternView_Lines_prefs");
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- START - %s --- \n", routineName.c_str());

	//This option specifies whether Bend-up Centerlines are enabled, or should be created, on flat pattern drawing views.
	id_name.assign("NXSM_bendUpCenterLine_FlatPatternView_Enabled");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::ViewStyleFPCurvesBuilder *viewStyleFPCurvesBuilder;
			viewStyleFPCurvesBuilder = _preferencesBuilder->ViewStyle()->GetViewStyleFPCurve(NXOpen::SheetMetal::FlatPatternSettings::FlatPatternObjectTypeBendUpCenterLine);
			bool state_bool;
			_preferencesBuilder->GetObject();
			state_bool = viewStyleFPCurvesBuilder->State();
			ist_id_value.assign(convert_to_string(state_bool));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				state_bool = convert_to_bool(soll_id_value);
				_preferencesBuilder->GetObject();
				viewStyleFPCurvesBuilder->SetState(state_bool);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the color of Bend-up Centerlines on flat pattern drawing views.
	id_name.assign("NXSM_bendUpCenterLine_FlatPatternView_Color");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::ViewStyleFPCurvesBuilder *viewStyleFPCurvesBuilder;
			viewStyleFPCurvesBuilder = _preferencesBuilder->ViewStyle()->GetViewStyleFPCurve(NXOpen::SheetMetal::FlatPatternSettings::FlatPatternObjectTypeBendUpCenterLine);
			NXOpen::NXColor * color;
			_preferencesBuilder->GetObject();
			color = viewStyleFPCurvesBuilder->Color();
			int colorIndex;
			colorIndex = color->Handle();
			ist_id_value.assign(convert_to_string(colorIndex));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				colorIndex = convert_to_int(soll_id_value);
				NXOpen::NXColor * color;
				color = _workPart->Colors()->Find(colorIndex);
				_preferencesBuilder->GetObject();
				viewStyleFPCurvesBuilder->SetColor(color);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the font for Bend-up Centerlines on flat pattern drawing views.
	id_name.assign("NXSM_bendUpCenterLine_FlatPatternView_Font");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::ViewStyleFPCurvesBuilder *viewStyleFPCurvesBuilder;
			viewStyleFPCurvesBuilder = _preferencesBuilder->ViewStyle()->GetViewStyleFPCurve(NXOpen::SheetMetal::FlatPatternSettings::FlatPatternObjectTypeBendUpCenterLine);
			NXOpen::Preferences::Font flatPatternView_Font;
			_preferencesBuilder->GetObject();
			flatPatternView_Font = viewStyleFPCurvesBuilder->Font();
			int int_flatPatternView_Font;
			if (flatPatternView_Font == NXOpen::Preferences::FontInvisible) {
				int_flatPatternView_Font = -1;
			}
			else if (flatPatternView_Font == NXOpen::Preferences::FontSolid) {
				int_flatPatternView_Font = 1;
			}
			else if (flatPatternView_Font == NXOpen::Preferences::FontDashed) {
				int_flatPatternView_Font = 2;
			}
			else if (flatPatternView_Font == NXOpen::Preferences::FontPhantom) {
				int_flatPatternView_Font = 3;
			}
			else if (flatPatternView_Font == NXOpen::Preferences::FontCenterline) {
				int_flatPatternView_Font = 4;
			}
			else if (flatPatternView_Font == NXOpen::Preferences::FontDotted) {
				int_flatPatternView_Font = 5;
			}
			else if (flatPatternView_Font == NXOpen::Preferences::FontLongDashed) {
				int_flatPatternView_Font = 6;
			}
			else if (flatPatternView_Font == NXOpen::Preferences::FontDottedDashed) {
				int_flatPatternView_Font = 7;
			}
			else if (flatPatternView_Font == NXOpen::Preferences::FontOriginal) {
				int_flatPatternView_Font = 0;
			}
			else {
				int_flatPatternView_Font = -999;
			}
			ist_id_value.assign(convert_to_string(int_flatPatternView_Font));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_flatPatternView_Font = convert_to_int(soll_id_value);
				NXOpen::Preferences::Font flatPatternView_Font;
				if (int_flatPatternView_Font == -1) {
					flatPatternView_Font = NXOpen::Preferences::FontInvisible;
				}
				else if (int_flatPatternView_Font == 1) {
					flatPatternView_Font = NXOpen::Preferences::FontSolid;
				}
				else if (int_flatPatternView_Font == 2) {
					flatPatternView_Font = NXOpen::Preferences::FontDashed;
				}
				else if (int_flatPatternView_Font == 3) {
					flatPatternView_Font = NXOpen::Preferences::FontPhantom;
				}
				else if (int_flatPatternView_Font == 4) {
					flatPatternView_Font = NXOpen::Preferences::FontCenterline;
				}
				else if (int_flatPatternView_Font == 5) {
					flatPatternView_Font = NXOpen::Preferences::FontDotted;
				}
				else if (int_flatPatternView_Font == 6) {
					flatPatternView_Font = NXOpen::Preferences::FontLongDashed;
				}
				else if (int_flatPatternView_Font == 7) {
					flatPatternView_Font = NXOpen::Preferences::FontDottedDashed;
				}
				else if (int_flatPatternView_Font == 0) {
					flatPatternView_Font = NXOpen::Preferences::FontOriginal;
				}
				_preferencesBuilder->GetObject();
				viewStyleFPCurvesBuilder->SetFont(flatPatternView_Font);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the width for Bend-up Centerlines on flat pattern drawing views.
	id_name.assign("NXSM_bendUpCenterLine_FlatPatternView_Width");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::ViewStyleFPCurvesBuilder *viewStyleFPCurvesBuilder;
			viewStyleFPCurvesBuilder = _preferencesBuilder->ViewStyle()->GetViewStyleFPCurve(NXOpen::SheetMetal::FlatPatternSettings::FlatPatternObjectTypeBendUpCenterLine);
			_preferencesBuilder->GetObject();
			NXOpen::Preferences::Width flatPatternView_Width;
			flatPatternView_Width = viewStyleFPCurvesBuilder->Width();
			int int_flatPatternView_Width;
			if (flatPatternView_Width == NXOpen::Preferences::WidthOriginal) {
				int_flatPatternView_Width = 0;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthThin) {
				int_flatPatternView_Width = 1;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthNormal) {
				int_flatPatternView_Width = 2;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthThick) {
				int_flatPatternView_Width = 3;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthOne) {
				int_flatPatternView_Width = 6;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthTwo) {
				int_flatPatternView_Width = 7;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthThree) {
				int_flatPatternView_Width = 8;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthFour) {
				int_flatPatternView_Width = 9;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthFive) {
				int_flatPatternView_Width = 10;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthSix) {
				int_flatPatternView_Width = 11;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthSeven) {
				int_flatPatternView_Width = 12;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthEight) {
				int_flatPatternView_Width = 13;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthNine) {
				int_flatPatternView_Width = 14;
			}
			else {
				int_flatPatternView_Width = -999;
			}
			string id_name_tmp;
			std::map<const std::string, std::string>::iterator it_tmp;
			if (int_flatPatternView_Width == 1) {
				id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
				it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				int_flatPatternView_Width = convert_to_int(it_tmp->second);
			}
			if (int_flatPatternView_Width == 2) {
				id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
				it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				int_flatPatternView_Width = convert_to_int(it_tmp->second);
			}
			if (int_flatPatternView_Width == 3) {
				id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
				it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				int_flatPatternView_Width = convert_to_int(it_tmp->second);
			}
			//_nx_dpv->soll_dpv_map.find(id_name)->second = convert_to_string(int_flatPatternView_Width);
			ist_id_value.assign(convert_to_string(int_flatPatternView_Width));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_flatPatternView_Width = convert_to_int(soll_id_value);
				NXOpen::Preferences::Width flatPatternView_Width;
				if (int_flatPatternView_Width == 0) {
					flatPatternView_Width = NXOpen::Preferences::WidthOriginal;
				}
				else if (int_flatPatternView_Width == 1) {
					//flatPatternView_Width = NXOpen::Preferences::WidthThin;
					id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
					it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					flatPatternView_Width = (NXOpen::Preferences::Width) convert_to_int(it_tmp->second);
				}
				else if (int_flatPatternView_Width == 2) {
					//flatPatternView_Width = NXOpen::Preferences::WidthNormal;
					id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
					it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					flatPatternView_Width = (NXOpen::Preferences::Width) convert_to_int(it_tmp->second);
				}
				else if (int_flatPatternView_Width == 3) {
					//flatPatternView_Width = NXOpen::Preferences::WidthThick;
					id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
					it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					flatPatternView_Width = (NXOpen::Preferences::Width) convert_to_int(it_tmp->second);
				}
				else if (int_flatPatternView_Width == 6) {
					flatPatternView_Width = NXOpen::Preferences::WidthOne;
				}
				else if (int_flatPatternView_Width == 7) {
					flatPatternView_Width = NXOpen::Preferences::WidthTwo;
				}
				else if (int_flatPatternView_Width == 8) {
					flatPatternView_Width = NXOpen::Preferences::WidthThree;
				}
				else if (int_flatPatternView_Width == 9) {
					flatPatternView_Width = NXOpen::Preferences::WidthFour;
				}
				else if (int_flatPatternView_Width == 10) {
					flatPatternView_Width = NXOpen::Preferences::WidthFive;
				}
				else if (int_flatPatternView_Width == 11) {
					flatPatternView_Width = NXOpen::Preferences::WidthSix;
				}
				else if (int_flatPatternView_Width == 12) {
					flatPatternView_Width = NXOpen::Preferences::WidthSeven;
				}
				else if (int_flatPatternView_Width == 13) {
					flatPatternView_Width = NXOpen::Preferences::WidthEight;
				}
				else if (int_flatPatternView_Width == 14) {
					flatPatternView_Width = NXOpen::Preferences::WidthNine;
				}
				_preferencesBuilder->GetObject();
				viewStyleFPCurvesBuilder->SetWidth(flatPatternView_Width);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies whether Bend-down Centerlines are enabled, or should be created, on flat pattern drawing views.
	id_name.assign("NXSM_bendDownCenterLine_FlatPatternView_Enabled");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::ViewStyleFPCurvesBuilder *viewStyleFPCurvesBuilder;
			viewStyleFPCurvesBuilder = _preferencesBuilder->ViewStyle()->GetViewStyleFPCurve(NXOpen::SheetMetal::FlatPatternSettings::FlatPatternObjectTypeBendDownCenterLine);
			bool state_bool;
			_preferencesBuilder->GetObject();
			state_bool = viewStyleFPCurvesBuilder->State();
			ist_id_value.assign(convert_to_string(state_bool));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				state_bool = convert_to_bool(soll_id_value);
				_preferencesBuilder->GetObject();
				viewStyleFPCurvesBuilder->SetState(state_bool);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the color of Bend-down Centerlines on flat pattern drawing views.
	id_name.assign("NXSM_bendDownCenterLine_FlatPatternView_Color");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::ViewStyleFPCurvesBuilder *viewStyleFPCurvesBuilder;
			viewStyleFPCurvesBuilder = _preferencesBuilder->ViewStyle()->GetViewStyleFPCurve(NXOpen::SheetMetal::FlatPatternSettings::FlatPatternObjectTypeBendDownCenterLine);
			NXOpen::NXColor * color;
			_preferencesBuilder->GetObject();
			color = viewStyleFPCurvesBuilder->Color();
			int colorIndex;
			colorIndex = color->Handle();
			ist_id_value.assign(convert_to_string(colorIndex));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				colorIndex = convert_to_int(soll_id_value);
				color = _workPart->Colors()->Find(colorIndex);
				viewStyleFPCurvesBuilder->SetColor(color);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the font for Bend-down Centerlines on flat pattern drawing views.
	id_name.assign("NXSM_bendDownCenterLine_FlatPatternView_Font");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::ViewStyleFPCurvesBuilder *viewStyleFPCurvesBuilder;
			viewStyleFPCurvesBuilder = _preferencesBuilder->ViewStyle()->GetViewStyleFPCurve(NXOpen::SheetMetal::FlatPatternSettings::FlatPatternObjectTypeBendDownCenterLine);
			NXOpen::Preferences::Font flatPatternView_Font;
			_preferencesBuilder->GetObject();
			flatPatternView_Font = viewStyleFPCurvesBuilder->Font();
			int int_flatPatternView_Font;
			if (flatPatternView_Font == NXOpen::Preferences::FontInvisible) {
				int_flatPatternView_Font = -1;
			}
			else if (flatPatternView_Font == NXOpen::Preferences::FontSolid) {
				int_flatPatternView_Font = 1;
			}
			else if (flatPatternView_Font == NXOpen::Preferences::FontDashed) {
				int_flatPatternView_Font = 2;
			}
			else if (flatPatternView_Font == NXOpen::Preferences::FontPhantom) {
				int_flatPatternView_Font = 3;
			}
			else if (flatPatternView_Font == NXOpen::Preferences::FontCenterline) {
				int_flatPatternView_Font = 4;
			}
			else if (flatPatternView_Font == NXOpen::Preferences::FontDotted) {
				int_flatPatternView_Font = 5;
			}
			else if (flatPatternView_Font == NXOpen::Preferences::FontLongDashed) {
				int_flatPatternView_Font = 6;
			}
			else if (flatPatternView_Font == NXOpen::Preferences::FontDottedDashed) {
				int_flatPatternView_Font = 7;
			}
			else if (flatPatternView_Font == NXOpen::Preferences::FontOriginal) {
				int_flatPatternView_Font = 0;
			}
			else {
				int_flatPatternView_Font = -999;
			}
			ist_id_value.assign(convert_to_string(int_flatPatternView_Font));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_flatPatternView_Font = convert_to_int(soll_id_value);
				if (int_flatPatternView_Font == -1) {
					flatPatternView_Font = NXOpen::Preferences::FontInvisible;
				}
				else if (int_flatPatternView_Font == 1) {
					flatPatternView_Font = NXOpen::Preferences::FontSolid;
				}
				else if (int_flatPatternView_Font == 2) {
					flatPatternView_Font = NXOpen::Preferences::FontDashed;
				}
				else if (int_flatPatternView_Font == 3) {
					flatPatternView_Font = NXOpen::Preferences::FontPhantom;
				}
				else if (int_flatPatternView_Font == 4) {
					flatPatternView_Font = NXOpen::Preferences::FontCenterline;
				}
				else if (int_flatPatternView_Font == 5) {
					flatPatternView_Font = NXOpen::Preferences::FontDotted;
				}
				else if (int_flatPatternView_Font == 6) {
					flatPatternView_Font = NXOpen::Preferences::FontLongDashed;
				}
				else if (int_flatPatternView_Font == 7) {
					flatPatternView_Font = NXOpen::Preferences::FontDottedDashed;
				}
				else if (int_flatPatternView_Font == 0) {
					flatPatternView_Font = NXOpen::Preferences::FontOriginal;
				}
				_preferencesBuilder->GetObject();
				viewStyleFPCurvesBuilder->SetFont(flatPatternView_Font);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the width for Bend-down Centerlines on flat pattern drawing views.
	id_name.assign("NXSM_bendDownCenterLine_FlatPatternView_Width");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::ViewStyleFPCurvesBuilder *viewStyleFPCurvesBuilder;
			viewStyleFPCurvesBuilder = _preferencesBuilder->ViewStyle()->GetViewStyleFPCurve(NXOpen::SheetMetal::FlatPatternSettings::FlatPatternObjectTypeBendDownCenterLine);
			_preferencesBuilder->GetObject();
			NXOpen::Preferences::Width flatPatternView_Width;
			flatPatternView_Width = viewStyleFPCurvesBuilder->Width();
			int int_flatPatternView_Width;
			if (flatPatternView_Width == NXOpen::Preferences::WidthOriginal) {
				int_flatPatternView_Width = 0;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthThin) {
				int_flatPatternView_Width = 1;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthNormal) {
				int_flatPatternView_Width = 2;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthThick) {
				int_flatPatternView_Width = 3;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthOne) {
				int_flatPatternView_Width = 6;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthTwo) {
				int_flatPatternView_Width = 7;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthThree) {
				int_flatPatternView_Width = 8;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthFour) {
				int_flatPatternView_Width = 9;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthFive) {
				int_flatPatternView_Width = 10;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthSix) {
				int_flatPatternView_Width = 11;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthSeven) {
				int_flatPatternView_Width = 12;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthEight) {
				int_flatPatternView_Width = 13;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthNine) {
				int_flatPatternView_Width = 14;
			}
			else {
				int_flatPatternView_Width = -999;
			}
			string id_name_tmp;
			std::map<const std::string, std::string>::iterator it_tmp;
			if (int_flatPatternView_Width == 1) {
				id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
				it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				int_flatPatternView_Width = convert_to_int(it_tmp->second);
			}
			if (int_flatPatternView_Width == 2) {
				id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
				it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				int_flatPatternView_Width = convert_to_int(it_tmp->second);
			}
			if (int_flatPatternView_Width == 3) {
				id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
				it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				int_flatPatternView_Width = convert_to_int(it_tmp->second);
			}
			//_nx_dpv->soll_dpv_map.find(id_name)->second = convert_to_string(int_flatPatternView_Width);
			ist_id_value.assign(convert_to_string(int_flatPatternView_Width));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_flatPatternView_Width = convert_to_int(soll_id_value);
				if (int_flatPatternView_Width == 0) {
					flatPatternView_Width = NXOpen::Preferences::WidthOriginal;
				}
				else if (int_flatPatternView_Width == 1) {
					//flatPatternView_Width = NXOpen::Preferences::WidthThin;
					id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
					it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					flatPatternView_Width = (NXOpen::Preferences::Width) convert_to_int(it_tmp->second);
				}
				else if (int_flatPatternView_Width == 2) {
					//flatPatternView_Width = NXOpen::Preferences::WidthNormal;
					id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
					it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					flatPatternView_Width = (NXOpen::Preferences::Width) convert_to_int(it_tmp->second);
				}
				else if (int_flatPatternView_Width == 3) {
					//flatPatternView_Width = NXOpen::Preferences::WidthThick;
					id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
					it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					flatPatternView_Width = (NXOpen::Preferences::Width) convert_to_int(it_tmp->second);
				}
				else if (int_flatPatternView_Width == 6) {
					flatPatternView_Width = NXOpen::Preferences::WidthOne;
				}
				else if (int_flatPatternView_Width == 7) {
					flatPatternView_Width = NXOpen::Preferences::WidthTwo;
				}
				else if (int_flatPatternView_Width == 8) {
					flatPatternView_Width = NXOpen::Preferences::WidthThree;
				}
				else if (int_flatPatternView_Width == 9) {
					flatPatternView_Width = NXOpen::Preferences::WidthFour;
				}
				else if (int_flatPatternView_Width == 10) {
					flatPatternView_Width = NXOpen::Preferences::WidthFive;
				}
				else if (int_flatPatternView_Width == 11) {
					flatPatternView_Width = NXOpen::Preferences::WidthSix;
				}
				else if (int_flatPatternView_Width == 12) {
					flatPatternView_Width = NXOpen::Preferences::WidthSeven;
				}
				else if (int_flatPatternView_Width == 13) {
					flatPatternView_Width = NXOpen::Preferences::WidthEight;
				}
				else if (int_flatPatternView_Width == 14) {
					flatPatternView_Width = NXOpen::Preferences::WidthNine;
				}
				_preferencesBuilder->GetObject();
				viewStyleFPCurvesBuilder->SetWidth(flatPatternView_Width);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies whether Bend Tangent Lines are enabled, or should be created, on flat pattern drawing views.
	id_name.assign("NXSM_bendTangentLine_FlatPatternView_Enabled");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::ViewStyleFPCurvesBuilder *viewStyleFPCurvesBuilder;
			viewStyleFPCurvesBuilder = _preferencesBuilder->ViewStyle()->GetViewStyleFPCurve(NXOpen::SheetMetal::FlatPatternSettings::FlatPatternObjectTypeBendTangentLine);
			bool state_bool;
			_preferencesBuilder->GetObject();
			state_bool = viewStyleFPCurvesBuilder->State();
			ist_id_value.assign(convert_to_string(state_bool));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				state_bool = convert_to_bool(soll_id_value);
				_preferencesBuilder->GetObject();
				viewStyleFPCurvesBuilder->SetState(state_bool);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the color of Bend Tangent Lines on flat pattern drawing views.
	id_name.assign("NXSM_bendTangentLine_FlatPatternView_Color");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::ViewStyleFPCurvesBuilder *viewStyleFPCurvesBuilder;
			viewStyleFPCurvesBuilder = _preferencesBuilder->ViewStyle()->GetViewStyleFPCurve(NXOpen::SheetMetal::FlatPatternSettings::FlatPatternObjectTypeBendTangentLine);
			NXOpen::NXColor * color;
			_preferencesBuilder->GetObject();
			color = viewStyleFPCurvesBuilder->Color();
			int colorIndex;
			colorIndex = color->Handle();
			ist_id_value.assign(convert_to_string(colorIndex));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				colorIndex = convert_to_int(soll_id_value);
				color = _workPart->Colors()->Find(colorIndex);
				_preferencesBuilder->GetObject();
				viewStyleFPCurvesBuilder->SetColor(color);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the font for Bend Tangent Lines on flat pattern drawing views.
	id_name.assign("NXSM_bendTangentLine_FlatPatternView_Font");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::ViewStyleFPCurvesBuilder *viewStyleFPCurvesBuilder;
			viewStyleFPCurvesBuilder = _preferencesBuilder->ViewStyle()->GetViewStyleFPCurve(NXOpen::SheetMetal::FlatPatternSettings::FlatPatternObjectTypeBendTangentLine);
			NXOpen::Preferences::Font flatPatternView_Font;
			_preferencesBuilder->GetObject();
			flatPatternView_Font = viewStyleFPCurvesBuilder->Font();
			int int_flatPatternView_Font;
			if (flatPatternView_Font == NXOpen::Preferences::FontInvisible) {
				int_flatPatternView_Font = 0;
			}
			else if (flatPatternView_Font == NXOpen::Preferences::FontSolid) {
				int_flatPatternView_Font = 1;
			}
			else if (flatPatternView_Font == NXOpen::Preferences::FontDashed) {
				int_flatPatternView_Font = 2;
			}
			else if (flatPatternView_Font == NXOpen::Preferences::FontPhantom) {
				int_flatPatternView_Font = 3;
			}
			else if (flatPatternView_Font == NXOpen::Preferences::FontCenterline) {
				int_flatPatternView_Font = 4;
			}
			else if (flatPatternView_Font == NXOpen::Preferences::FontDotted) {
				int_flatPatternView_Font = 5;
			}
			else if (flatPatternView_Font == NXOpen::Preferences::FontLongDashed) {
				int_flatPatternView_Font = 6;
			}
			else if (flatPatternView_Font == NXOpen::Preferences::FontDottedDashed) {
				int_flatPatternView_Font = 7;
			}
			else if (flatPatternView_Font == NXOpen::Preferences::FontOriginal) {
				int_flatPatternView_Font = 8;
			}
			else {
				int_flatPatternView_Font = -999;
			}
			ist_id_value.assign(convert_to_string(int_flatPatternView_Font));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_flatPatternView_Font = convert_to_int(soll_id_value);
				if (int_flatPatternView_Font == 0) {
					flatPatternView_Font = NXOpen::Preferences::FontInvisible;
				}
				else if (int_flatPatternView_Font == 1) {
					flatPatternView_Font = NXOpen::Preferences::FontSolid;
				}
				else if (int_flatPatternView_Font == 2) {
					flatPatternView_Font = NXOpen::Preferences::FontDashed;
				}
				else if (int_flatPatternView_Font == 3) {
					flatPatternView_Font = NXOpen::Preferences::FontPhantom;
				}
				else if (int_flatPatternView_Font == 4) {
					flatPatternView_Font = NXOpen::Preferences::FontCenterline;
				}
				else if (int_flatPatternView_Font == 5) {
					flatPatternView_Font = NXOpen::Preferences::FontDotted;
				}
				else if (int_flatPatternView_Font == 6) {
					flatPatternView_Font = NXOpen::Preferences::FontLongDashed;
				}
				else if (int_flatPatternView_Font == 7) {
					flatPatternView_Font = NXOpen::Preferences::FontDottedDashed;
				}
				else if (int_flatPatternView_Font == 8) {
					flatPatternView_Font = NXOpen::Preferences::FontOriginal;
				}
				_preferencesBuilder->GetObject();
				viewStyleFPCurvesBuilder->SetFont(flatPatternView_Font);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the width for Bend Tangent Lines on flat pattern drawing views.
	id_name.assign("NXSM_bendTangentLine_FlatPatternView_Width");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::ViewStyleFPCurvesBuilder *viewStyleFPCurvesBuilder;
			viewStyleFPCurvesBuilder = _preferencesBuilder->ViewStyle()->GetViewStyleFPCurve(NXOpen::SheetMetal::FlatPatternSettings::FlatPatternObjectTypeBendTangentLine);
			_preferencesBuilder->GetObject();
			NXOpen::Preferences::Width flatPatternView_Width;
			flatPatternView_Width = viewStyleFPCurvesBuilder->Width();
			int int_flatPatternView_Width;
			if (flatPatternView_Width == NXOpen::Preferences::WidthOriginal) {
				int_flatPatternView_Width = 0;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthThin) {
				int_flatPatternView_Width = 1;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthNormal) {
				int_flatPatternView_Width = 2;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthThick) {
				int_flatPatternView_Width = 3;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthOne) {
				int_flatPatternView_Width = 6;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthTwo) {
				int_flatPatternView_Width = 7;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthThree) {
				int_flatPatternView_Width = 8;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthFour) {
				int_flatPatternView_Width = 9;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthFive) {
				int_flatPatternView_Width = 10;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthSix) {
				int_flatPatternView_Width = 11;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthSeven) {
				int_flatPatternView_Width = 12;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthEight) {
				int_flatPatternView_Width = 13;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthNine) {
				int_flatPatternView_Width = 14;
			}
			else {
				int_flatPatternView_Width = -999;
			}
			int_flatPatternView_Width = int_flatPatternView_Width;
			string id_name_tmp;
			std::map<const std::string, std::string>::iterator it_tmp;
			if (int_flatPatternView_Width == 1) {
				id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
				it_tmp =_nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				int_flatPatternView_Width = convert_to_int( it_tmp->second.c_str() );
			}
			if (int_flatPatternView_Width == 2) {
				id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
				it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				int_flatPatternView_Width = convert_to_int(it_tmp->second);
			}
			if (int_flatPatternView_Width == 3) {
				id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
				it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				int_flatPatternView_Width = convert_to_int(it_tmp->second);
			}
			//_nx_dpv->soll_dpv_map.find(id_name)->second = convert_to_string(int_flatPatternView_Width);
			ist_id_value.assign(convert_to_string(int_flatPatternView_Width));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_flatPatternView_Width = convert_to_int(soll_id_value);
				if (int_flatPatternView_Width == 0) {
					flatPatternView_Width = NXOpen::Preferences::WidthOriginal;
				}
				else if (int_flatPatternView_Width == 1) {
					//flatPatternView_Width = NXOpen::Preferences::WidthThin;
					id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
					it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					flatPatternView_Width = (NXOpen::Preferences::Width) convert_to_int(it_tmp->second);
				}
				else if (int_flatPatternView_Width == 2) {
					//flatPatternView_Width = NXOpen::Preferences::WidthNormal;
					id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
					it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					flatPatternView_Width = (NXOpen::Preferences::Width) convert_to_int(it_tmp->second);
				}
				else if (int_flatPatternView_Width == 3) {
					//flatPatternView_Width = NXOpen::Preferences::WidthThick;
					id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
					it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					flatPatternView_Width = (NXOpen::Preferences::Width) convert_to_int(it_tmp->second);
				}
				else if (int_flatPatternView_Width == 6) {
					flatPatternView_Width = NXOpen::Preferences::WidthOne;
				}
				else if (int_flatPatternView_Width == 7) {
					flatPatternView_Width = NXOpen::Preferences::WidthTwo;
				}
				else if (int_flatPatternView_Width == 8) {
					flatPatternView_Width = NXOpen::Preferences::WidthThree;
				}
				else if (int_flatPatternView_Width == 9) {
					flatPatternView_Width = NXOpen::Preferences::WidthFour;
				}
				else if (int_flatPatternView_Width == 10) {
					flatPatternView_Width = NXOpen::Preferences::WidthFive;
				}
				else if (int_flatPatternView_Width == 11) {
					flatPatternView_Width = NXOpen::Preferences::WidthSix;
				}
				else if (int_flatPatternView_Width == 12) {
					flatPatternView_Width = NXOpen::Preferences::WidthSeven;
				}
				else if (int_flatPatternView_Width == 13) {
					flatPatternView_Width = NXOpen::Preferences::WidthEight;
				}
				else if (int_flatPatternView_Width == 14) {
					flatPatternView_Width = NXOpen::Preferences::WidthNine;
				}
				_preferencesBuilder->GetObject();
				viewStyleFPCurvesBuilder->SetWidth(flatPatternView_Width);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies whether Inner Mold Lines are enabled, or should be created, on flat pattern drawing views.
	id_name.assign("NXSM_bendInnerMoldLine_FlatPatternView_Enabled");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::ViewStyleFPCurvesBuilder *viewStyleFPCurvesBuilder;
			viewStyleFPCurvesBuilder = _preferencesBuilder->ViewStyle()->GetViewStyleFPCurve(NXOpen::SheetMetal::FlatPatternSettings::FlatPatternObjectTypeInnerMoldLine);
			bool state_bool;
			_preferencesBuilder->GetObject();
			state_bool = viewStyleFPCurvesBuilder->State();
			ist_id_value.assign(convert_to_string(state_bool));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				state_bool = convert_to_bool(soll_id_value);
				_preferencesBuilder->GetObject();
				viewStyleFPCurvesBuilder->SetState(state_bool);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the color of Inner Mold Lines on flat pattern drawing views.
	id_name.assign("NXSM_bendInnerMoldLine_FlatPatternView_Color");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::ViewStyleFPCurvesBuilder *viewStyleFPCurvesBuilder;
			viewStyleFPCurvesBuilder = _preferencesBuilder->ViewStyle()->GetViewStyleFPCurve(NXOpen::SheetMetal::FlatPatternSettings::FlatPatternObjectTypeInnerMoldLine);
			NXOpen::NXColor * color;
			_preferencesBuilder->GetObject();
			color = viewStyleFPCurvesBuilder->Color();
			int colorIndex;
			colorIndex = color->Handle();
			ist_id_value.assign(convert_to_string(colorIndex));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				colorIndex = convert_to_int(soll_id_value);
				color = _workPart->Colors()->Find(colorIndex);
				_preferencesBuilder->GetObject();
				viewStyleFPCurvesBuilder->SetColor(color);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the font for Inner Mold Lines on flat pattern drawing views.
	id_name.assign("NXSM_bendInnerMoldLine_FlatPatternView_Font");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::ViewStyleFPCurvesBuilder *viewStyleFPCurvesBuilder;
			viewStyleFPCurvesBuilder = _preferencesBuilder->ViewStyle()->GetViewStyleFPCurve(NXOpen::SheetMetal::FlatPatternSettings::FlatPatternObjectTypeInnerMoldLine);
			NXOpen::Preferences::Font flatPatternView_Font;
			_preferencesBuilder->GetObject();
			flatPatternView_Font = viewStyleFPCurvesBuilder->Font();
			int int_flatPatternView_Font;
			if (flatPatternView_Font == NXOpen::Preferences::FontInvisible) {
				int_flatPatternView_Font = -1;
			}
			else if (flatPatternView_Font == NXOpen::Preferences::FontSolid) {
				int_flatPatternView_Font = 1;
			}
			else if (flatPatternView_Font == NXOpen::Preferences::FontDashed) {
				int_flatPatternView_Font = 2;
			}
			else if (flatPatternView_Font == NXOpen::Preferences::FontPhantom) {
				int_flatPatternView_Font = 3;
			}
			else if (flatPatternView_Font == NXOpen::Preferences::FontCenterline) {
				int_flatPatternView_Font = 4;
			}
			else if (flatPatternView_Font == NXOpen::Preferences::FontDotted) {
				int_flatPatternView_Font = 5;
			}
			else if (flatPatternView_Font == NXOpen::Preferences::FontLongDashed) {
				int_flatPatternView_Font = 6;
			}
			else if (flatPatternView_Font == NXOpen::Preferences::FontDottedDashed) {
				int_flatPatternView_Font = 7;
			}
			else if (flatPatternView_Font == NXOpen::Preferences::FontOriginal) {
				int_flatPatternView_Font = 0;
			}
			ist_id_value.assign(convert_to_string(int_flatPatternView_Font));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_flatPatternView_Font = convert_to_int(soll_id_value);
				if (int_flatPatternView_Font == -1) {
					flatPatternView_Font = NXOpen::Preferences::FontInvisible;
				}
				else if (int_flatPatternView_Font == 1) {
					flatPatternView_Font = NXOpen::Preferences::FontSolid;
				}
				else if (int_flatPatternView_Font == 2) {
					flatPatternView_Font = NXOpen::Preferences::FontDashed;
				}
				else if (int_flatPatternView_Font == 3) {
					flatPatternView_Font = NXOpen::Preferences::FontPhantom;
				}
				else if (int_flatPatternView_Font == 4) {
					flatPatternView_Font = NXOpen::Preferences::FontCenterline;
				}
				else if (int_flatPatternView_Font == 5) {
					flatPatternView_Font = NXOpen::Preferences::FontDotted;
				}
				else if (int_flatPatternView_Font == 6) {
					flatPatternView_Font = NXOpen::Preferences::FontLongDashed;
				}
				else if (int_flatPatternView_Font == 7) {
					flatPatternView_Font = NXOpen::Preferences::FontDottedDashed;
				}
				else if (int_flatPatternView_Font == 0) {
					flatPatternView_Font = NXOpen::Preferences::FontOriginal;
				}
				_preferencesBuilder->GetObject();
				viewStyleFPCurvesBuilder->SetFont(flatPatternView_Font);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the width for Inner Mold Lines on flat pattern drawing views.
	id_name.assign("NXSM_bendInnerMoldLine_FlatPatternView_Width");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::ViewStyleFPCurvesBuilder *viewStyleFPCurvesBuilder;
			viewStyleFPCurvesBuilder = _preferencesBuilder->ViewStyle()->GetViewStyleFPCurve(NXOpen::SheetMetal::FlatPatternSettings::FlatPatternObjectTypeInnerMoldLine);
			_preferencesBuilder->GetObject();
			NXOpen::Preferences::Width flatPatternView_Width;
			flatPatternView_Width = viewStyleFPCurvesBuilder->Width();
			int int_flatPatternView_Width;
			if (flatPatternView_Width == NXOpen::Preferences::WidthOriginal) {
				int_flatPatternView_Width = 0;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthThin) {
				int_flatPatternView_Width = 1;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthNormal) {
				int_flatPatternView_Width = 2;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthThick) {
				int_flatPatternView_Width = 3;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthOne) {
				int_flatPatternView_Width = 6;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthTwo) {
				int_flatPatternView_Width = 7;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthThree) {
				int_flatPatternView_Width = 8;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthFour) {
				int_flatPatternView_Width = 9;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthFive) {
				int_flatPatternView_Width = 10;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthSix) {
				int_flatPatternView_Width = 11;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthSeven) {
				int_flatPatternView_Width = 12;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthEight) {
				int_flatPatternView_Width = 13;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthNine) {
				int_flatPatternView_Width = 14;
			}
			string id_name_tmp;
			std::map<const std::string, std::string>::iterator it_tmp;
			if (int_flatPatternView_Width == 1) {
				id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
				it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				int_flatPatternView_Width = convert_to_int(it_tmp->second);
			}
			if (int_flatPatternView_Width == 2) {
				id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
				it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				int_flatPatternView_Width = convert_to_int(it_tmp->second);
			}
			if (int_flatPatternView_Width == 3) {
				id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
				it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				int_flatPatternView_Width = convert_to_int(it_tmp->second);
			}
			//_nx_dpv->soll_dpv_map.find(id_name)->second = convert_to_string(int_flatPatternView_Width);
			ist_id_value.assign(convert_to_string(int_flatPatternView_Width));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_flatPatternView_Width = convert_to_int(soll_id_value);
				if (int_flatPatternView_Width == 0) {
					flatPatternView_Width = NXOpen::Preferences::WidthOriginal;
				}
				else if (int_flatPatternView_Width == 1) {
					//flatPatternView_Width = NXOpen::Preferences::WidthThin;
					id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
					it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					flatPatternView_Width = (NXOpen::Preferences::Width) convert_to_int(it_tmp->second);
				}
				else if (int_flatPatternView_Width == 2) {
					//flatPatternView_Width = NXOpen::Preferences::WidthNormal;
					id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
					it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					flatPatternView_Width = (NXOpen::Preferences::Width) convert_to_int(it_tmp->second);
				}
				else if (int_flatPatternView_Width == 3) {
					//flatPatternView_Width = NXOpen::Preferences::WidthThick;
					id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
					it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					flatPatternView_Width = (NXOpen::Preferences::Width) convert_to_int(it_tmp->second);
				}
				else if (int_flatPatternView_Width == 6) {
					flatPatternView_Width = NXOpen::Preferences::WidthOne;
				}
				else if (int_flatPatternView_Width == 7) {
					flatPatternView_Width = NXOpen::Preferences::WidthTwo;
				}
				else if (int_flatPatternView_Width == 8) {
					flatPatternView_Width = NXOpen::Preferences::WidthThree;
				}
				else if (int_flatPatternView_Width == 9) {
					flatPatternView_Width = NXOpen::Preferences::WidthFour;
				}
				else if (int_flatPatternView_Width == 10) {
					flatPatternView_Width = NXOpen::Preferences::WidthFive;
				}
				else if (int_flatPatternView_Width == 11) {
					flatPatternView_Width = NXOpen::Preferences::WidthSix;
				}
				else if (int_flatPatternView_Width == 12) {
					flatPatternView_Width = NXOpen::Preferences::WidthSeven;
				}
				else if (int_flatPatternView_Width == 13) {
					flatPatternView_Width = NXOpen::Preferences::WidthEight;
				}
				else if (int_flatPatternView_Width == 14) {
					flatPatternView_Width = NXOpen::Preferences::WidthNine;
				}
				_preferencesBuilder->GetObject();
				viewStyleFPCurvesBuilder->SetWidth(flatPatternView_Width);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies whether Outer Mold Lines are enabled, or should be created, on flat pattern drawing views.
	id_name.assign("NXSM_bendOuterMoldLine_FlatPatternView_Enabled");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::ViewStyleFPCurvesBuilder *viewStyleFPCurvesBuilder;
			viewStyleFPCurvesBuilder = _preferencesBuilder->ViewStyle()->GetViewStyleFPCurve(NXOpen::SheetMetal::FlatPatternSettings::FlatPatternObjectTypeOuterMoldLine);
			bool state_bool;
			_preferencesBuilder->GetObject();
			state_bool = viewStyleFPCurvesBuilder->State();
			ist_id_value.assign(convert_to_string(state_bool));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				state_bool = convert_to_bool(soll_id_value);
				_preferencesBuilder->GetObject();
				viewStyleFPCurvesBuilder->SetState(state_bool);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the color of Outer Mold Lines on flat pattern drawing views.
	id_name.assign("NXSM_bendOuterMoldLine_FlatPatternView_Color");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::ViewStyleFPCurvesBuilder *viewStyleFPCurvesBuilder;
			viewStyleFPCurvesBuilder = _preferencesBuilder->ViewStyle()->GetViewStyleFPCurve(NXOpen::SheetMetal::FlatPatternSettings::FlatPatternObjectTypeOuterMoldLine);
			NXOpen::NXColor * color;
			_preferencesBuilder->GetObject();
			color = viewStyleFPCurvesBuilder->Color();
			int colorIndex;
			colorIndex = color->Handle();
			ist_id_value.assign(convert_to_string(colorIndex));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				colorIndex = convert_to_int(soll_id_value);
				color = _workPart->Colors()->Find(colorIndex);
				_preferencesBuilder->GetObject();
				viewStyleFPCurvesBuilder->SetColor(color);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the font for Outer Mold Lines on flat pattern drawing views.
	id_name.assign("NXSM_bendOuterMoldLine_FlatPatternView_Font");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::ViewStyleFPCurvesBuilder *viewStyleFPCurvesBuilder;
			viewStyleFPCurvesBuilder = _preferencesBuilder->ViewStyle()->GetViewStyleFPCurve(NXOpen::SheetMetal::FlatPatternSettings::FlatPatternObjectTypeOuterMoldLine);
			NXOpen::Preferences::Font flatPatternView_Font;
			_preferencesBuilder->GetObject();
			flatPatternView_Font = viewStyleFPCurvesBuilder->Font();
			int int_flatPatternView_Font;
			if (flatPatternView_Font == NXOpen::Preferences::FontInvisible) {
				int_flatPatternView_Font = -1;
			}
			else if (flatPatternView_Font == NXOpen::Preferences::FontSolid) {
				int_flatPatternView_Font = 1;
			}
			else if (flatPatternView_Font == NXOpen::Preferences::FontDashed) {
				int_flatPatternView_Font = 2;
			}
			else if (flatPatternView_Font == NXOpen::Preferences::FontPhantom) {
				int_flatPatternView_Font = 3;
			}
			else if (flatPatternView_Font == NXOpen::Preferences::FontCenterline) {
				int_flatPatternView_Font = 4;
			}
			else if (flatPatternView_Font == NXOpen::Preferences::FontDotted) {
				int_flatPatternView_Font = 5;
			}
			else if (flatPatternView_Font == NXOpen::Preferences::FontLongDashed) {
				int_flatPatternView_Font = 6;
			}
			else if (flatPatternView_Font == NXOpen::Preferences::FontDottedDashed) {
				int_flatPatternView_Font = 7;
			}
			else if (flatPatternView_Font == NXOpen::Preferences::FontOriginal) {
				int_flatPatternView_Font = 0;
			}
			ist_id_value.assign(convert_to_string(int_flatPatternView_Font));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_flatPatternView_Font = convert_to_int(soll_id_value);
				if (int_flatPatternView_Font == -1) {
					flatPatternView_Font = NXOpen::Preferences::FontInvisible;
				}
				else if (int_flatPatternView_Font == 1) {
					flatPatternView_Font = NXOpen::Preferences::FontSolid;
				}
				else if (int_flatPatternView_Font == 2) {
					flatPatternView_Font = NXOpen::Preferences::FontDashed;
				}
				else if (int_flatPatternView_Font == 3) {
					flatPatternView_Font = NXOpen::Preferences::FontPhantom;
				}
				else if (int_flatPatternView_Font == 4) {
					flatPatternView_Font = NXOpen::Preferences::FontCenterline;
				}
				else if (int_flatPatternView_Font == 5) {
					flatPatternView_Font = NXOpen::Preferences::FontDotted;
				}
				else if (int_flatPatternView_Font == 6) {
					flatPatternView_Font = NXOpen::Preferences::FontLongDashed;
				}
				else if (int_flatPatternView_Font == 7) {
					flatPatternView_Font = NXOpen::Preferences::FontDottedDashed;
				}
				else if (int_flatPatternView_Font == 0) {
					flatPatternView_Font = NXOpen::Preferences::FontOriginal;
				}
				_preferencesBuilder->GetObject();
				viewStyleFPCurvesBuilder->SetFont(flatPatternView_Font);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the width for Outer Mold Lines on flat pattern drawing views.
	id_name.assign("NXSM_bendOuterMoldLine_FlatPatternView_Width");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::ViewStyleFPCurvesBuilder *viewStyleFPCurvesBuilder;
			viewStyleFPCurvesBuilder = _preferencesBuilder->ViewStyle()->GetViewStyleFPCurve(NXOpen::SheetMetal::FlatPatternSettings::FlatPatternObjectTypeOuterMoldLine);
			_preferencesBuilder->GetObject();
			NXOpen::Preferences::Width flatPatternView_Width;
			flatPatternView_Width = viewStyleFPCurvesBuilder->Width();
			int int_flatPatternView_Width;
			if (flatPatternView_Width == NXOpen::Preferences::WidthOriginal) {
				int_flatPatternView_Width = 0;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthThin) {
				int_flatPatternView_Width = 1;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthNormal) {
				int_flatPatternView_Width = 2;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthThick) {
				int_flatPatternView_Width = 3;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthOne) {
				int_flatPatternView_Width = 6;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthTwo) {
				int_flatPatternView_Width = 7;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthThree) {
				int_flatPatternView_Width = 8;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthFour) {
				int_flatPatternView_Width = 9;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthFive) {
				int_flatPatternView_Width = 10;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthSix) {
				int_flatPatternView_Width = 11;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthSeven) {
				int_flatPatternView_Width = 12;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthEight) {
				int_flatPatternView_Width = 13;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthNine) {
				int_flatPatternView_Width = 14;
			}
			string id_name_tmp;
			std::map<const std::string, std::string>::iterator it_tmp;
			if (int_flatPatternView_Width == 1) {
				id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
				it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				int_flatPatternView_Width = convert_to_int(it_tmp->second);
			}
			if (int_flatPatternView_Width == 2) {
				id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
				it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				int_flatPatternView_Width = convert_to_int(it_tmp->second);
			}
			if (int_flatPatternView_Width == 3) {
				id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
				it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				int_flatPatternView_Width = convert_to_int(it_tmp->second);
			}
			//_nx_dpv->soll_dpv_map.find(id_name)->second = convert_to_string(int_flatPatternView_Width);
			ist_id_value.assign(convert_to_string(int_flatPatternView_Width));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_flatPatternView_Width = convert_to_int(soll_id_value);
				if (int_flatPatternView_Width == 0) {
					flatPatternView_Width = NXOpen::Preferences::WidthOriginal;
				}
				else if (int_flatPatternView_Width == 1) {
					//flatPatternView_Width = NXOpen::Preferences::WidthThin;
					id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
					it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					flatPatternView_Width = (NXOpen::Preferences::Width) convert_to_int(it_tmp->second);
				}
				else if (int_flatPatternView_Width == 2) {
					//flatPatternView_Width = NXOpen::Preferences::WidthNormal;
					id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
					it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					flatPatternView_Width = (NXOpen::Preferences::Width) convert_to_int(it_tmp->second);
				}
				else if (int_flatPatternView_Width == 3) {
					//flatPatternView_Width = NXOpen::Preferences::WidthThick;
					id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
					it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					flatPatternView_Width = (NXOpen::Preferences::Width) convert_to_int(it_tmp->second);
				}
				else if (int_flatPatternView_Width == 6) {
					flatPatternView_Width = NXOpen::Preferences::WidthOne;
				}
				else if (int_flatPatternView_Width == 7) {
					flatPatternView_Width = NXOpen::Preferences::WidthTwo;
				}
				else if (int_flatPatternView_Width == 8) {
					flatPatternView_Width = NXOpen::Preferences::WidthThree;
				}
				else if (int_flatPatternView_Width == 9) {
					flatPatternView_Width = NXOpen::Preferences::WidthFour;
				}
				else if (int_flatPatternView_Width == 10) {
					flatPatternView_Width = NXOpen::Preferences::WidthFive;
				}
				else if (int_flatPatternView_Width == 11) {
					flatPatternView_Width = NXOpen::Preferences::WidthSix;
				}
				else if (int_flatPatternView_Width == 12) {
					flatPatternView_Width = NXOpen::Preferences::WidthSeven;
				}
				else if (int_flatPatternView_Width == 13) {
					flatPatternView_Width = NXOpen::Preferences::WidthEight;
				}
				else if (int_flatPatternView_Width == 14) {
					flatPatternView_Width = NXOpen::Preferences::WidthNine;
				}
				_preferencesBuilder->GetObject();
				viewStyleFPCurvesBuilder->SetWidth(flatPatternView_Width);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies whether Exterior Curves are enabled, or should be created, on flat pattern drawing views.
	id_name.assign("NXSM_exteriorCurves_FlatPatternView_Enabled");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::ViewStyleFPCurvesBuilder *viewStyleFPCurvesBuilder;
			viewStyleFPCurvesBuilder = _preferencesBuilder->ViewStyle()->GetViewStyleFPCurve(NXOpen::SheetMetal::FlatPatternSettings::FlatPatternObjectTypeExteriorCurves);
			bool state_bool;
			_preferencesBuilder->GetObject();
			state_bool = viewStyleFPCurvesBuilder->State();
			ist_id_value.assign(convert_to_string(state_bool));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				state_bool = convert_to_bool(soll_id_value);
				_preferencesBuilder->GetObject();
				viewStyleFPCurvesBuilder->SetState(state_bool);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the color of Exterior Curves on flat pattern drawing views.
	id_name.assign("NXSM_exteriorCurves_FlatPatternView_Color");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::ViewStyleFPCurvesBuilder *viewStyleFPCurvesBuilder;
			viewStyleFPCurvesBuilder = _preferencesBuilder->ViewStyle()->GetViewStyleFPCurve(NXOpen::SheetMetal::FlatPatternSettings::FlatPatternObjectTypeExteriorCurves);
			NXOpen::NXColor * color;
			_preferencesBuilder->GetObject();
			color = viewStyleFPCurvesBuilder->Color();
			int colorIndex;
			colorIndex = color->Handle();
			ist_id_value.assign(convert_to_string(colorIndex));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				colorIndex = convert_to_int(soll_id_value);
				color = _workPart->Colors()->Find(colorIndex);
				_preferencesBuilder->GetObject();
				viewStyleFPCurvesBuilder->SetColor(color);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the font for Exterior Curves on flat pattern drawing views.
	id_name.assign("NXSM_exteriorCurves_FlatPatternView_Font");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::ViewStyleFPCurvesBuilder *viewStyleFPCurvesBuilder;
			viewStyleFPCurvesBuilder = _preferencesBuilder->ViewStyle()->GetViewStyleFPCurve(NXOpen::SheetMetal::FlatPatternSettings::FlatPatternObjectTypeExteriorCurves);
			NXOpen::Preferences::Font flatPatternView_Font;
			_preferencesBuilder->GetObject();
			flatPatternView_Font = viewStyleFPCurvesBuilder->Font();
			int int_flatPatternView_Font;
			if (flatPatternView_Font == NXOpen::Preferences::FontInvisible) {
				int_flatPatternView_Font = -1;
			}
			else if (flatPatternView_Font == NXOpen::Preferences::FontSolid) {
				int_flatPatternView_Font = 1;
			}
			else if (flatPatternView_Font == NXOpen::Preferences::FontDashed) {
				int_flatPatternView_Font = 2;
			}
			else if (flatPatternView_Font == NXOpen::Preferences::FontPhantom) {
				int_flatPatternView_Font = 3;
			}
			else if (flatPatternView_Font == NXOpen::Preferences::FontCenterline) {
				int_flatPatternView_Font = 4;
			}
			else if (flatPatternView_Font == NXOpen::Preferences::FontDotted) {
				int_flatPatternView_Font = 5;
			}
			else if (flatPatternView_Font == NXOpen::Preferences::FontLongDashed) {
				int_flatPatternView_Font = 6;
			}
			else if (flatPatternView_Font == NXOpen::Preferences::FontDottedDashed) {
				int_flatPatternView_Font = 7;
			}
			else if (flatPatternView_Font == NXOpen::Preferences::FontOriginal) {
				int_flatPatternView_Font = 0;
			}
			ist_id_value.assign(convert_to_string(int_flatPatternView_Font));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_flatPatternView_Font = convert_to_int(soll_id_value);
				if (int_flatPatternView_Font == -1) {
					flatPatternView_Font = NXOpen::Preferences::FontInvisible;
				}
				else if (int_flatPatternView_Font == 1) {
					flatPatternView_Font = NXOpen::Preferences::FontSolid;
				}
				else if (int_flatPatternView_Font == 2) {
					flatPatternView_Font = NXOpen::Preferences::FontDashed;
				}
				else if (int_flatPatternView_Font == 3) {
					flatPatternView_Font = NXOpen::Preferences::FontPhantom;
				}
				else if (int_flatPatternView_Font == 4) {
					flatPatternView_Font = NXOpen::Preferences::FontCenterline;
				}
				else if (int_flatPatternView_Font == 5) {
					flatPatternView_Font = NXOpen::Preferences::FontDotted;
				}
				else if (int_flatPatternView_Font == 6) {
					flatPatternView_Font = NXOpen::Preferences::FontLongDashed;
				}
				else if (int_flatPatternView_Font == 7) {
					flatPatternView_Font = NXOpen::Preferences::FontDottedDashed;
				}
				else if (int_flatPatternView_Font == 0) {
					flatPatternView_Font = NXOpen::Preferences::FontOriginal;
				}
				_preferencesBuilder->GetObject();
				viewStyleFPCurvesBuilder->SetFont(flatPatternView_Font);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the width for Exterior Curves on flat pattern drawing views.
	id_name.assign("NXSM_exteriorCurves_FlatPatternView_Width");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::ViewStyleFPCurvesBuilder *viewStyleFPCurvesBuilder;
			viewStyleFPCurvesBuilder = _preferencesBuilder->ViewStyle()->GetViewStyleFPCurve(NXOpen::SheetMetal::FlatPatternSettings::FlatPatternObjectTypeExteriorCurves);
			_preferencesBuilder->GetObject();
			NXOpen::Preferences::Width flatPatternView_Width;
			flatPatternView_Width = viewStyleFPCurvesBuilder->Width();
			int int_flatPatternView_Width;
			if (flatPatternView_Width == NXOpen::Preferences::WidthOriginal) {
				int_flatPatternView_Width = 0;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthThin) {
				int_flatPatternView_Width = 1;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthNormal) {
				int_flatPatternView_Width = 2;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthThick) {
				int_flatPatternView_Width = 3;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthOne) {
				int_flatPatternView_Width = 6;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthTwo) {
				int_flatPatternView_Width = 7;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthThree) {
				int_flatPatternView_Width = 8;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthFour) {
				int_flatPatternView_Width = 9;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthFive) {
				int_flatPatternView_Width = 10;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthSix) {
				int_flatPatternView_Width = 11;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthSeven) {
				int_flatPatternView_Width = 12;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthEight) {
				int_flatPatternView_Width = 13;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthNine) {
				int_flatPatternView_Width = 14;
			}
			string id_name_tmp;
			std::map<const std::string, std::string>::iterator it_tmp;
			if (int_flatPatternView_Width == 1) {
				id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
				it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				int_flatPatternView_Width = convert_to_int(it_tmp->second);
			}
			if (int_flatPatternView_Width == 2) {
				id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
				it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				int_flatPatternView_Width = convert_to_int(it_tmp->second);
			}
			if (int_flatPatternView_Width == 3) {
				id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
				it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				int_flatPatternView_Width = convert_to_int(it_tmp->second);
			}
			//_nx_dpv->soll_dpv_map.find(id_name)->second = convert_to_string(int_flatPatternView_Width);
			ist_id_value.assign(convert_to_string(int_flatPatternView_Width));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_flatPatternView_Width = convert_to_int(soll_id_value);
				if (int_flatPatternView_Width == 0) {
					flatPatternView_Width = NXOpen::Preferences::WidthOriginal;
				}
				else if (int_flatPatternView_Width == 1) {
					//flatPatternView_Width = NXOpen::Preferences::WidthThin;
					id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
					it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					flatPatternView_Width = (NXOpen::Preferences::Width) convert_to_int(it_tmp->second);
				}
				else if (int_flatPatternView_Width == 2) {
					//flatPatternView_Width = NXOpen::Preferences::WidthNormal;
					id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
					it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					flatPatternView_Width = (NXOpen::Preferences::Width) convert_to_int(it_tmp->second);
				}
				else if (int_flatPatternView_Width == 3) {
					//flatPatternView_Width = NXOpen::Preferences::WidthThick;
					id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
					it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					flatPatternView_Width = (NXOpen::Preferences::Width) convert_to_int(it_tmp->second);
				}
				else if (int_flatPatternView_Width == 6) {
					flatPatternView_Width = NXOpen::Preferences::WidthOne;
				}
				else if (int_flatPatternView_Width == 7) {
					flatPatternView_Width = NXOpen::Preferences::WidthTwo;
				}
				else if (int_flatPatternView_Width == 8) {
					flatPatternView_Width = NXOpen::Preferences::WidthThree;
				}
				else if (int_flatPatternView_Width == 9) {
					flatPatternView_Width = NXOpen::Preferences::WidthFour;
				}
				else if (int_flatPatternView_Width == 10) {
					flatPatternView_Width = NXOpen::Preferences::WidthFive;
				}
				else if (int_flatPatternView_Width == 11) {
					flatPatternView_Width = NXOpen::Preferences::WidthSix;
				}
				else if (int_flatPatternView_Width == 12) {
					flatPatternView_Width = NXOpen::Preferences::WidthSeven;
				}
				else if (int_flatPatternView_Width == 13) {
					flatPatternView_Width = NXOpen::Preferences::WidthEight;
				}
				else if (int_flatPatternView_Width == 14) {
					flatPatternView_Width = NXOpen::Preferences::WidthNine;
				}
				_preferencesBuilder->GetObject();
				viewStyleFPCurvesBuilder->SetWidth(flatPatternView_Width);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies whether Interior Cutout Curves are enabled, or should be created, on flat pattern drawing views.
	id_name.assign("NXSM_interiorCutoutCurves_FlatPatternView_Enabled");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::ViewStyleFPCurvesBuilder *viewStyleFPCurvesBuilder;
			viewStyleFPCurvesBuilder = _preferencesBuilder->ViewStyle()->GetViewStyleFPCurve(NXOpen::SheetMetal::FlatPatternSettings::FlatPatternObjectTypeInteriorCutoutCurves);
			bool state_bool;
			_preferencesBuilder->GetObject();
			state_bool = viewStyleFPCurvesBuilder->State();
			ist_id_value.assign(convert_to_string(state_bool));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				state_bool = convert_to_bool(soll_id_value);
				_preferencesBuilder->GetObject();
				viewStyleFPCurvesBuilder->SetState(state_bool);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the color of Interior Cutout Curves on flat pattern drawing views.
	id_name.assign("NXSM_interiorCutoutCurves_FlatPatternView_Color");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::ViewStyleFPCurvesBuilder *viewStyleFPCurvesBuilder;
			viewStyleFPCurvesBuilder = _preferencesBuilder->ViewStyle()->GetViewStyleFPCurve(NXOpen::SheetMetal::FlatPatternSettings::FlatPatternObjectTypeInteriorCutoutCurves);
			NXOpen::NXColor * color;
			_preferencesBuilder->GetObject();
			color = viewStyleFPCurvesBuilder->Color();
			int colorIndex;
			colorIndex = color->Handle();
			ist_id_value.assign(convert_to_string(colorIndex));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				colorIndex = convert_to_int(soll_id_value);
				color = _workPart->Colors()->Find(colorIndex);
				_preferencesBuilder->GetObject();
				viewStyleFPCurvesBuilder->SetColor(color);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the font for Interior Cutout Curves on flat pattern drawing views.
	id_name.assign("NXSM_interiorCutoutCurves_FlatPatternView_Font");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::ViewStyleFPCurvesBuilder *viewStyleFPCurvesBuilder;
			viewStyleFPCurvesBuilder = _preferencesBuilder->ViewStyle()->GetViewStyleFPCurve(NXOpen::SheetMetal::FlatPatternSettings::FlatPatternObjectTypeInteriorCutoutCurves);
			NXOpen::Preferences::Font flatPatternView_Font;
			_preferencesBuilder->GetObject();
			flatPatternView_Font = viewStyleFPCurvesBuilder->Font();
			int int_flatPatternView_Font;
			if (flatPatternView_Font == NXOpen::Preferences::FontInvisible) {
				int_flatPatternView_Font = -1;
			}
			else if (flatPatternView_Font == NXOpen::Preferences::FontSolid) {
				int_flatPatternView_Font = 1;
			}
			else if (flatPatternView_Font == NXOpen::Preferences::FontDashed) {
				int_flatPatternView_Font = 2;
			}
			else if (flatPatternView_Font == NXOpen::Preferences::FontPhantom) {
				int_flatPatternView_Font = 3;
			}
			else if (flatPatternView_Font == NXOpen::Preferences::FontCenterline) {
				int_flatPatternView_Font = 4;
			}
			else if (flatPatternView_Font == NXOpen::Preferences::FontDotted) {
				int_flatPatternView_Font = 5;
			}
			else if (flatPatternView_Font == NXOpen::Preferences::FontLongDashed) {
				int_flatPatternView_Font = 6;
			}
			else if (flatPatternView_Font == NXOpen::Preferences::FontDottedDashed) {
				int_flatPatternView_Font = 7;
			}
			else if (flatPatternView_Font == NXOpen::Preferences::FontOriginal) {
				int_flatPatternView_Font = 0;
			}
			ist_id_value.assign(convert_to_string(int_flatPatternView_Font));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_flatPatternView_Font = convert_to_int(soll_id_value);
				if (int_flatPatternView_Font == -1) {
					flatPatternView_Font = NXOpen::Preferences::FontInvisible;
				}
				else if (int_flatPatternView_Font == 1) {
					flatPatternView_Font = NXOpen::Preferences::FontSolid;
				}
				else if (int_flatPatternView_Font == 2) {
					flatPatternView_Font = NXOpen::Preferences::FontDashed;
				}
				else if (int_flatPatternView_Font == 3) {
					flatPatternView_Font = NXOpen::Preferences::FontPhantom;
				}
				else if (int_flatPatternView_Font == 4) {
					flatPatternView_Font = NXOpen::Preferences::FontCenterline;
				}
				else if (int_flatPatternView_Font == 5) {
					flatPatternView_Font = NXOpen::Preferences::FontDotted;
				}
				else if (int_flatPatternView_Font == 6) {
					flatPatternView_Font = NXOpen::Preferences::FontLongDashed;
				}
				else if (int_flatPatternView_Font == 7) {
					flatPatternView_Font = NXOpen::Preferences::FontDottedDashed;
				}
				else if (int_flatPatternView_Font == 0) {
					flatPatternView_Font = NXOpen::Preferences::FontOriginal;
				}
				_preferencesBuilder->GetObject();
				viewStyleFPCurvesBuilder->SetFont(flatPatternView_Font);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the width for Interior Cutout Curves on flat pattern drawing views.
	id_name.assign("NXSM_interiorCutoutCurves_FlatPatternView_Width");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::ViewStyleFPCurvesBuilder *viewStyleFPCurvesBuilder;
			viewStyleFPCurvesBuilder = _preferencesBuilder->ViewStyle()->GetViewStyleFPCurve(NXOpen::SheetMetal::FlatPatternSettings::FlatPatternObjectTypeInteriorCutoutCurves);
			_preferencesBuilder->GetObject();
			NXOpen::Preferences::Width flatPatternView_Width;
			flatPatternView_Width = viewStyleFPCurvesBuilder->Width();
			int int_flatPatternView_Width;
			if (flatPatternView_Width == NXOpen::Preferences::WidthOriginal) {
				int_flatPatternView_Width = 0;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthThin) {
				int_flatPatternView_Width = 1;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthNormal) {
				int_flatPatternView_Width = 2;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthThick) {
				int_flatPatternView_Width = 3;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthOne) {
				int_flatPatternView_Width = 6;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthTwo) {
				int_flatPatternView_Width = 7;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthThree) {
				int_flatPatternView_Width = 8;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthFour) {
				int_flatPatternView_Width = 9;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthFive) {
				int_flatPatternView_Width = 10;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthSix) {
				int_flatPatternView_Width = 11;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthSeven) {
				int_flatPatternView_Width = 12;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthEight) {
				int_flatPatternView_Width = 13;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthNine) {
				int_flatPatternView_Width = 14;
			}
			string id_name_tmp;
			std::map<const std::string, std::string>::iterator it_tmp;
			if (int_flatPatternView_Width == 1) {
				id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
				it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				int_flatPatternView_Width = convert_to_int(it_tmp->second);
			}
			if (int_flatPatternView_Width == 2) {
				id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
				it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				int_flatPatternView_Width = convert_to_int(it_tmp->second);
			}
			if (int_flatPatternView_Width == 3) {
				id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
				it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				int_flatPatternView_Width = convert_to_int(it_tmp->second);
			}
			//_nx_dpv->soll_dpv_map.find(id_name)->second = convert_to_string(int_flatPatternView_Width);
			ist_id_value.assign(convert_to_string(int_flatPatternView_Width));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
				soll_id_value.assign(it->second);
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
				if (ist_id_value.compare(soll_id_value) != 0) {
					//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
					int_flatPatternView_Width = convert_to_int(soll_id_value);
					if (int_flatPatternView_Width == 0) {
						flatPatternView_Width = NXOpen::Preferences::WidthOriginal;
					}
					else if (int_flatPatternView_Width == 1) {
						//flatPatternView_Width = NXOpen::Preferences::WidthThin;
						id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
						it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
						flatPatternView_Width = (NXOpen::Preferences::Width) convert_to_int(it_tmp->second);
					}
					else if (int_flatPatternView_Width == 2) {
						//flatPatternView_Width = NXOpen::Preferences::WidthNormal;
						id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
						it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
						flatPatternView_Width = (NXOpen::Preferences::Width) convert_to_int(it_tmp->second);
					}
					else if (int_flatPatternView_Width == 3) {
						//flatPatternView_Width = NXOpen::Preferences::WidthThick;
						id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
						it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
						flatPatternView_Width = (NXOpen::Preferences::Width) convert_to_int(it_tmp->second);
					}
					else if (int_flatPatternView_Width == 6) {
						flatPatternView_Width = NXOpen::Preferences::WidthOne;
					}
					else if (int_flatPatternView_Width == 7) {
						flatPatternView_Width = NXOpen::Preferences::WidthTwo;
					}
					else if (int_flatPatternView_Width == 8) {
						flatPatternView_Width = NXOpen::Preferences::WidthThree;
					}
					else if (int_flatPatternView_Width == 9) {
						flatPatternView_Width = NXOpen::Preferences::WidthFour;
					}
					else if (int_flatPatternView_Width == 10) {
						flatPatternView_Width = NXOpen::Preferences::WidthFive;
					}
					else if (int_flatPatternView_Width == 11) {
						flatPatternView_Width = NXOpen::Preferences::WidthSix;
					}
					else if (int_flatPatternView_Width == 12) {
						flatPatternView_Width = NXOpen::Preferences::WidthSeven;
					}
					else if (int_flatPatternView_Width == 13) {
						flatPatternView_Width = NXOpen::Preferences::WidthEight;
					}
					else if (int_flatPatternView_Width == 14) {
						flatPatternView_Width = NXOpen::Preferences::WidthNine;
					}
					_preferencesBuilder->GetObject();
					viewStyleFPCurvesBuilder->SetWidth(flatPatternView_Width);
					_preferencesBuilder->Commit();
					nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
				}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies whether Interior Feature Curves are enabled, or should be created, on flat pattern drawing views.
	id_name.assign("NXSM_interiorFeatureCurves_FlatPatternView_Enabled");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::ViewStyleFPCurvesBuilder *viewStyleFPCurvesBuilder;
			viewStyleFPCurvesBuilder = _preferencesBuilder->ViewStyle()->GetViewStyleFPCurve(NXOpen::SheetMetal::FlatPatternSettings::FlatPatternObjectTypeInteriorFeatureCurves);
			bool state_bool;
			_preferencesBuilder->GetObject();
			state_bool = viewStyleFPCurvesBuilder->State();
			ist_id_value.assign(convert_to_string(state_bool));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				state_bool = convert_to_bool(soll_id_value);
				_preferencesBuilder->GetObject();
				viewStyleFPCurvesBuilder->SetState(state_bool);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the color of Interior Feature Curves on flat pattern drawing views.
	id_name.assign("NXSM_interiorFeatureCurves_FlatPatternView_Color");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::ViewStyleFPCurvesBuilder *viewStyleFPCurvesBuilder;
			viewStyleFPCurvesBuilder = _preferencesBuilder->ViewStyle()->GetViewStyleFPCurve(NXOpen::SheetMetal::FlatPatternSettings::FlatPatternObjectTypeInteriorFeatureCurves);
			NXOpen::NXColor * color;
			_preferencesBuilder->GetObject();
			color = viewStyleFPCurvesBuilder->Color();
			int colorIndex;
			colorIndex = color->Handle();
			ist_id_value.assign(convert_to_string(colorIndex));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				colorIndex = convert_to_int(soll_id_value);
				color = _workPart->Colors()->Find(colorIndex);
				_preferencesBuilder->GetObject();
				viewStyleFPCurvesBuilder->SetColor(color);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the font for Interior Feature Curves on flat pattern drawing views.
	id_name.assign("NXSM_interiorFeatureCurves_FlatPatternView_Font");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::ViewStyleFPCurvesBuilder *viewStyleFPCurvesBuilder;
			viewStyleFPCurvesBuilder = _preferencesBuilder->ViewStyle()->GetViewStyleFPCurve(NXOpen::SheetMetal::FlatPatternSettings::FlatPatternObjectTypeInteriorFeatureCurves);
			NXOpen::Preferences::Font flatPatternView_Font;
			_preferencesBuilder->GetObject();
			flatPatternView_Font = viewStyleFPCurvesBuilder->Font();
			int int_flatPatternView_Font;
			if (flatPatternView_Font == NXOpen::Preferences::FontInvisible) {
				int_flatPatternView_Font = -1;
			}
			else if (flatPatternView_Font == NXOpen::Preferences::FontSolid) {
				int_flatPatternView_Font = 1;
			}
			else if (flatPatternView_Font == NXOpen::Preferences::FontDashed) {
				int_flatPatternView_Font = 2;
			}
			else if (flatPatternView_Font == NXOpen::Preferences::FontPhantom) {
				int_flatPatternView_Font = 3;
			}
			else if (flatPatternView_Font == NXOpen::Preferences::FontCenterline) {
				int_flatPatternView_Font = 4;
			}
			else if (flatPatternView_Font == NXOpen::Preferences::FontDotted) {
				int_flatPatternView_Font = 5;
			}
			else if (flatPatternView_Font == NXOpen::Preferences::FontLongDashed) {
				int_flatPatternView_Font = 6;
			}
			else if (flatPatternView_Font == NXOpen::Preferences::FontDottedDashed) {
				int_flatPatternView_Font = 7;
			}
			else if (flatPatternView_Font == NXOpen::Preferences::FontOriginal) {
				int_flatPatternView_Font = 0;
			}
			ist_id_value.assign(convert_to_string(int_flatPatternView_Font));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
			int_flatPatternView_Font = convert_to_int(soll_id_value);
			if (int_flatPatternView_Font == -1) {
				flatPatternView_Font = NXOpen::Preferences::FontInvisible;
			}
			else if (int_flatPatternView_Font == 1) {
				flatPatternView_Font = NXOpen::Preferences::FontSolid;
			}
			else if (int_flatPatternView_Font == 2) {
				flatPatternView_Font = NXOpen::Preferences::FontDashed;
			}
			else if (int_flatPatternView_Font == 3) {
				flatPatternView_Font = NXOpen::Preferences::FontPhantom;
			}
			else if (int_flatPatternView_Font == 4) {
				flatPatternView_Font = NXOpen::Preferences::FontCenterline;
			}
			else if (int_flatPatternView_Font == 5) {
				flatPatternView_Font = NXOpen::Preferences::FontDotted;
			}
			else if (int_flatPatternView_Font == 6) {
				flatPatternView_Font = NXOpen::Preferences::FontLongDashed;
			}
			else if (int_flatPatternView_Font == 7) {
				flatPatternView_Font = NXOpen::Preferences::FontDottedDashed;
			}
			else if (int_flatPatternView_Font == 0) {
				flatPatternView_Font = NXOpen::Preferences::FontOriginal;
			}
			_preferencesBuilder->GetObject();
			viewStyleFPCurvesBuilder->SetFont(flatPatternView_Font);
			_preferencesBuilder->Commit();
			nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
		}
	} catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the width for Interior Feature Curves on flat pattern drawing views.
	id_name.assign("NXSM_interiorFeatureCurves_FlatPatternView_Width");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::ViewStyleFPCurvesBuilder *viewStyleFPCurvesBuilder;
			viewStyleFPCurvesBuilder = _preferencesBuilder->ViewStyle()->GetViewStyleFPCurve(NXOpen::SheetMetal::FlatPatternSettings::FlatPatternObjectTypeInteriorFeatureCurves);
			_preferencesBuilder->GetObject();
			NXOpen::Preferences::Width flatPatternView_Width;
			flatPatternView_Width = viewStyleFPCurvesBuilder->Width();
			int int_flatPatternView_Width;
			if (flatPatternView_Width == NXOpen::Preferences::WidthOriginal) {
				int_flatPatternView_Width = 0;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthThin) {
				int_flatPatternView_Width = 1;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthNormal) {
				int_flatPatternView_Width = 2;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthThick) {
				int_flatPatternView_Width = 3;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthOne) {
				int_flatPatternView_Width = 6;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthTwo) {
				int_flatPatternView_Width = 7;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthThree) {
				int_flatPatternView_Width = 8;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthFour) {
				int_flatPatternView_Width = 9;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthFive) {
				int_flatPatternView_Width = 10;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthSix) {
				int_flatPatternView_Width = 11;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthSeven) {
				int_flatPatternView_Width = 12;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthEight) {
				int_flatPatternView_Width = 13;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthNine) {
				int_flatPatternView_Width = 14;
			}
			string id_name_tmp;
			std::map<const std::string, std::string>::iterator it_tmp;
			if (int_flatPatternView_Width == 1) {
				id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
				it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				int_flatPatternView_Width = convert_to_int(it_tmp->second);
			}
			if (int_flatPatternView_Width == 2) {
				id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
				it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				int_flatPatternView_Width = convert_to_int(it_tmp->second);
			}
			if (int_flatPatternView_Width == 3) {
				id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
				it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				int_flatPatternView_Width = convert_to_int(it_tmp->second);
			}
			//_nx_dpv->soll_dpv_map.find(id_name)->second = convert_to_string(int_flatPatternView_Width);
			ist_id_value.assign(convert_to_string(int_flatPatternView_Width));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_flatPatternView_Width = convert_to_int(soll_id_value);
				if (int_flatPatternView_Width == 0) {
					flatPatternView_Width = NXOpen::Preferences::WidthOriginal;
				}
				else if (int_flatPatternView_Width == 1) {
					//flatPatternView_Width = NXOpen::Preferences::WidthThin;
					id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
					it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					flatPatternView_Width = (NXOpen::Preferences::Width) convert_to_int(it_tmp->second);
				}
				else if (int_flatPatternView_Width == 2) {
					//flatPatternView_Width = NXOpen::Preferences::WidthNormal;
					id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
					it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					flatPatternView_Width = (NXOpen::Preferences::Width) convert_to_int(it_tmp->second);
				}
				else if (int_flatPatternView_Width == 3) {
					//flatPatternView_Width = NXOpen::Preferences::WidthThick;
					id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
					it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					flatPatternView_Width = (NXOpen::Preferences::Width) convert_to_int(it_tmp->second);
				}
				else if (int_flatPatternView_Width == 6) {
					flatPatternView_Width = NXOpen::Preferences::WidthOne;
				}
				else if (int_flatPatternView_Width == 7) {
					flatPatternView_Width = NXOpen::Preferences::WidthTwo;
				}
				else if (int_flatPatternView_Width == 8) {
					flatPatternView_Width = NXOpen::Preferences::WidthThree;
				}
				else if (int_flatPatternView_Width == 9) {
					flatPatternView_Width = NXOpen::Preferences::WidthFour;
				}
				else if (int_flatPatternView_Width == 10) {
					flatPatternView_Width = NXOpen::Preferences::WidthFive;
				}
				else if (int_flatPatternView_Width == 11) {
					flatPatternView_Width = NXOpen::Preferences::WidthSix;
				}
				else if (int_flatPatternView_Width == 12) {
					flatPatternView_Width = NXOpen::Preferences::WidthSeven;
				}
				else if (int_flatPatternView_Width == 13) {
					flatPatternView_Width = NXOpen::Preferences::WidthEight;
				}
				else if (int_flatPatternView_Width == 14) {
					flatPatternView_Width = NXOpen::Preferences::WidthNine;
				}
				_preferencesBuilder->GetObject();
				viewStyleFPCurvesBuilder->SetWidth(flatPatternView_Width);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies whether Lightening Hole Center Markers are enabled, or should be created, on flat pattern drawing views.
	id_name.assign("NXSM_holeCenter_FlatPatternView_Enabled");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::ViewStyleFPCurvesBuilder *viewStyleFPCurvesBuilder;
			viewStyleFPCurvesBuilder = _preferencesBuilder->ViewStyle()->GetViewStyleFPCurve(NXOpen::SheetMetal::FlatPatternSettings::FlatPatternObjectTypeLighteningHoleCenter);
			bool state_bool;
			_preferencesBuilder->GetObject();
			state_bool = viewStyleFPCurvesBuilder->State();
			ist_id_value.assign(convert_to_string(state_bool));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				state_bool = convert_to_bool(soll_id_value);
				_preferencesBuilder->GetObject();
				viewStyleFPCurvesBuilder->SetState(state_bool);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the color of Lightening Hole Center Markers on flat pattern drawing views.
	id_name.assign("NXSM_holeCenter_FlatPatternView_Color");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::ViewStyleFPCurvesBuilder *viewStyleFPCurvesBuilder;
			viewStyleFPCurvesBuilder = _preferencesBuilder->ViewStyle()->GetViewStyleFPCurve(NXOpen::SheetMetal::FlatPatternSettings::FlatPatternObjectTypeLighteningHoleCenter);
			NXOpen::NXColor * color;
			_preferencesBuilder->GetObject();
			color = viewStyleFPCurvesBuilder->Color();
			int colorIndex;
			colorIndex = color->Handle();
			ist_id_value.assign(convert_to_string(colorIndex));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				colorIndex = convert_to_int(soll_id_value);
				color = _workPart->Colors()->Find(colorIndex);
				_preferencesBuilder->GetObject();
				viewStyleFPCurvesBuilder->SetColor(color);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the font for Lightening Hole Center Markers on flat pattern drawing views.
	id_name.assign("NXSM_holeCenter_FlatPatternView_Font");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::ViewStyleFPCurvesBuilder *viewStyleFPCurvesBuilder;
			viewStyleFPCurvesBuilder = _preferencesBuilder->ViewStyle()->GetViewStyleFPCurve(NXOpen::SheetMetal::FlatPatternSettings::FlatPatternObjectTypeLighteningHoleCenter);
			NXOpen::Preferences::Font flatPatternView_Font;
			_preferencesBuilder->GetObject();
			flatPatternView_Font = viewStyleFPCurvesBuilder->Font();
			int int_flatPatternView_Font;
			if (flatPatternView_Font == NXOpen::Preferences::FontInvisible) {
				int_flatPatternView_Font = -1;
			}
			else if (flatPatternView_Font == NXOpen::Preferences::FontSolid) {
				int_flatPatternView_Font = 1;
			}
			else if (flatPatternView_Font == NXOpen::Preferences::FontDashed) {
				int_flatPatternView_Font = 2;
			}
			else if (flatPatternView_Font == NXOpen::Preferences::FontPhantom) {
				int_flatPatternView_Font = 3;
			}
			else if (flatPatternView_Font == NXOpen::Preferences::FontCenterline) {
				int_flatPatternView_Font = 4;
			}
			else if (flatPatternView_Font == NXOpen::Preferences::FontDotted) {
				int_flatPatternView_Font = 5;
			}
			else if (flatPatternView_Font == NXOpen::Preferences::FontLongDashed) {
				int_flatPatternView_Font = 6;
			}
			else if (flatPatternView_Font == NXOpen::Preferences::FontDottedDashed) {
				int_flatPatternView_Font = 7;
			}
			else if (flatPatternView_Font == NXOpen::Preferences::FontOriginal) {
				int_flatPatternView_Font = 0;
			}
			ist_id_value.assign(convert_to_string(int_flatPatternView_Font));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_flatPatternView_Font = convert_to_int(soll_id_value);
				if (int_flatPatternView_Font == -1) {
					flatPatternView_Font = NXOpen::Preferences::FontInvisible;
				}
				else if (int_flatPatternView_Font == 1) {
					flatPatternView_Font = NXOpen::Preferences::FontSolid;
				}
				else if (int_flatPatternView_Font == 2) {
					flatPatternView_Font = NXOpen::Preferences::FontDashed;
				}
				else if (int_flatPatternView_Font == 3) {
					flatPatternView_Font = NXOpen::Preferences::FontPhantom;
				}
				else if (int_flatPatternView_Font == 4) {
					flatPatternView_Font = NXOpen::Preferences::FontCenterline;
				}
				else if (int_flatPatternView_Font == 5) {
					flatPatternView_Font = NXOpen::Preferences::FontDotted;
				}
				else if (int_flatPatternView_Font == 6) {
					flatPatternView_Font = NXOpen::Preferences::FontLongDashed;
				}
				else if (int_flatPatternView_Font == 7) {
					flatPatternView_Font = NXOpen::Preferences::FontDottedDashed;
				}
				else if (int_flatPatternView_Font == 0) {
					flatPatternView_Font = NXOpen::Preferences::FontOriginal;
				}
				_preferencesBuilder->GetObject();
				viewStyleFPCurvesBuilder->SetFont(flatPatternView_Font);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the width for Lightening Hole Center Markers on flat pattern drawing views.
	id_name.assign("NXSM_holeCenter_FlatPatternView_Width");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::ViewStyleFPCurvesBuilder *viewStyleFPCurvesBuilder;
			viewStyleFPCurvesBuilder = _preferencesBuilder->ViewStyle()->GetViewStyleFPCurve(NXOpen::SheetMetal::FlatPatternSettings::FlatPatternObjectTypeLighteningHoleCenter);
			_preferencesBuilder->GetObject();
			NXOpen::Preferences::Width flatPatternView_Width;
			flatPatternView_Width = viewStyleFPCurvesBuilder->Width();
			int int_flatPatternView_Width;
			if (flatPatternView_Width == NXOpen::Preferences::WidthOriginal) {
				int_flatPatternView_Width = 0;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthThin) {
				int_flatPatternView_Width = 1;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthNormal) {
				int_flatPatternView_Width = 2;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthThick) {
				int_flatPatternView_Width = 3;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthOne) {
				int_flatPatternView_Width = 6;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthTwo) {
				int_flatPatternView_Width = 7;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthThree) {
				int_flatPatternView_Width = 8;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthFour) {
				int_flatPatternView_Width = 9;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthFive) {
				int_flatPatternView_Width = 10;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthSix) {
				int_flatPatternView_Width = 11;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthSeven) {
				int_flatPatternView_Width = 12;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthEight) {
				int_flatPatternView_Width = 13;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthNine) {
				int_flatPatternView_Width = 14;
			}
			string id_name_tmp;
			std::map<const std::string, std::string>::iterator it_tmp;
			if (int_flatPatternView_Width == 1) {
				id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
				it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				int_flatPatternView_Width = convert_to_int(it_tmp->second);
			}
			if (int_flatPatternView_Width == 2) {
				id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
				it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				int_flatPatternView_Width = convert_to_int(it_tmp->second);
			}
			if (int_flatPatternView_Width == 3) {
				id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
				it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				int_flatPatternView_Width = convert_to_int(it_tmp->second);
			}
			//_nx_dpv->soll_dpv_map.find(id_name)->second = convert_to_string(int_flatPatternView_Width);
			ist_id_value.assign(convert_to_string(int_flatPatternView_Width));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_flatPatternView_Width = convert_to_int(soll_id_value);
				if (int_flatPatternView_Width == 0) {
					flatPatternView_Width = NXOpen::Preferences::WidthOriginal;
				}
				else if (int_flatPatternView_Width == 1) {
					//flatPatternView_Width = NXOpen::Preferences::WidthThin;
					id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
					it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					flatPatternView_Width = (NXOpen::Preferences::Width) convert_to_int(it_tmp->second);
				}
				else if (int_flatPatternView_Width == 2) {
					//flatPatternView_Width = NXOpen::Preferences::WidthNormal;
					id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
					it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					flatPatternView_Width = (NXOpen::Preferences::Width) convert_to_int(it_tmp->second);
				}
				else if (int_flatPatternView_Width == 3) {
					//flatPatternView_Width = NXOpen::Preferences::WidthThick;
					id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
					it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					flatPatternView_Width = (NXOpen::Preferences::Width) convert_to_int(it_tmp->second);
				}
				else if (int_flatPatternView_Width == 6) {
					flatPatternView_Width = NXOpen::Preferences::WidthOne;
				}
				else if (int_flatPatternView_Width == 7) {
					flatPatternView_Width = NXOpen::Preferences::WidthTwo;
				}
				else if (int_flatPatternView_Width == 8) {
					flatPatternView_Width = NXOpen::Preferences::WidthThree;
				}
				else if (int_flatPatternView_Width == 9) {
					flatPatternView_Width = NXOpen::Preferences::WidthFour;
				}
				else if (int_flatPatternView_Width == 10) {
					flatPatternView_Width = NXOpen::Preferences::WidthFive;
				}
				else if (int_flatPatternView_Width == 11) {
					flatPatternView_Width = NXOpen::Preferences::WidthSix;
				}
				else if (int_flatPatternView_Width == 12) {
					flatPatternView_Width = NXOpen::Preferences::WidthSeven;
				}
				else if (int_flatPatternView_Width == 13) {
					flatPatternView_Width = NXOpen::Preferences::WidthEight;
				}
				else if (int_flatPatternView_Width == 14) {
					flatPatternView_Width = NXOpen::Preferences::WidthNine;
				}
				_preferencesBuilder->GetObject();
				viewStyleFPCurvesBuilder->SetWidth(flatPatternView_Width);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}
	
	//This option specifies whether Joggle Lines are enabled, or should be created, on flat pattern drawing views.
	id_name.assign("NXSM_joggleLine_FlatPatternView_Enabled");
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::ViewStyleFPCurvesBuilder *viewStyleFPCurvesBuilder;
			viewStyleFPCurvesBuilder = _preferencesBuilder->ViewStyle()->GetViewStyleFPCurve(NXOpen::SheetMetal::FlatPatternSettings::FlatPatternObjectTypeJoggleLine);
			bool state_bool;
			_preferencesBuilder->GetObject();
			state_bool = viewStyleFPCurvesBuilder->State();
			ist_id_value.assign(convert_to_string(state_bool));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				state_bool = convert_to_bool(soll_id_value);
				_preferencesBuilder->GetObject();
				viewStyleFPCurvesBuilder->SetState(state_bool);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the color of Joggle Lines on flat pattern drawing views.
	id_name.assign("NXSM_joggleLine_FlatPatternView_Color");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::ViewStyleFPCurvesBuilder *viewStyleFPCurvesBuilder;
			viewStyleFPCurvesBuilder = _preferencesBuilder->ViewStyle()->GetViewStyleFPCurve(NXOpen::SheetMetal::FlatPatternSettings::FlatPatternObjectTypeJoggleLine);
			NXOpen::NXColor * color;
			_preferencesBuilder->GetObject();
			color = viewStyleFPCurvesBuilder->Color();
			int colorIndex;
			colorIndex = color->Handle();
			ist_id_value.assign(convert_to_string(colorIndex));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				colorIndex = convert_to_int(soll_id_value);
				color = _workPart->Colors()->Find(colorIndex);
				_preferencesBuilder->GetObject();
				viewStyleFPCurvesBuilder->SetColor(color);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the font for Joggle Lines on flat pattern drawing views.
	id_name.assign("NXSM_joggleLine_FlatPatternView_Font");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::ViewStyleFPCurvesBuilder *viewStyleFPCurvesBuilder;
			viewStyleFPCurvesBuilder = _preferencesBuilder->ViewStyle()->GetViewStyleFPCurve(NXOpen::SheetMetal::FlatPatternSettings::FlatPatternObjectTypeJoggleLine);
			NXOpen::Preferences::Font flatPatternView_Font;
			_preferencesBuilder->GetObject();
			flatPatternView_Font = viewStyleFPCurvesBuilder->Font();
			int int_flatPatternView_Font;
			if (flatPatternView_Font == NXOpen::Preferences::FontInvisible) {
				int_flatPatternView_Font = -1;
			}
			else if (flatPatternView_Font == NXOpen::Preferences::FontSolid) {
				int_flatPatternView_Font = 1;
			}
			else if (flatPatternView_Font == NXOpen::Preferences::FontDashed) {
				int_flatPatternView_Font = 2;
			}
			else if (flatPatternView_Font == NXOpen::Preferences::FontPhantom) {
				int_flatPatternView_Font = 3;
			}
			else if (flatPatternView_Font == NXOpen::Preferences::FontCenterline) {
				int_flatPatternView_Font = 4;
			}
			else if (flatPatternView_Font == NXOpen::Preferences::FontDotted) {
				int_flatPatternView_Font = 5;
			}
			else if (flatPatternView_Font == NXOpen::Preferences::FontLongDashed) {
				int_flatPatternView_Font = 6;
			}
			else if (flatPatternView_Font == NXOpen::Preferences::FontDottedDashed) {
				int_flatPatternView_Font = 7;
			}
			else if (flatPatternView_Font == NXOpen::Preferences::FontOriginal) {
				int_flatPatternView_Font = 0;
			}
			ist_id_value.assign(convert_to_string(int_flatPatternView_Font));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_flatPatternView_Font = convert_to_int(soll_id_value);
				if (int_flatPatternView_Font == -1) {
					flatPatternView_Font = NXOpen::Preferences::FontInvisible;
				}
				else if (int_flatPatternView_Font == 1) {
					flatPatternView_Font = NXOpen::Preferences::FontSolid;
				}
				else if (int_flatPatternView_Font == 2) {
					flatPatternView_Font = NXOpen::Preferences::FontDashed;
				}
				else if (int_flatPatternView_Font == 3) {
					flatPatternView_Font = NXOpen::Preferences::FontPhantom;
				}
				else if (int_flatPatternView_Font == 4) {
					flatPatternView_Font = NXOpen::Preferences::FontCenterline;
				}
				else if (int_flatPatternView_Font == 5) {
					flatPatternView_Font = NXOpen::Preferences::FontDotted;
				}
				else if (int_flatPatternView_Font == 6) {
					flatPatternView_Font = NXOpen::Preferences::FontLongDashed;
				}
				else if (int_flatPatternView_Font == 7) {
					flatPatternView_Font = NXOpen::Preferences::FontDottedDashed;
				}
				else if (int_flatPatternView_Font == 0) {
					flatPatternView_Font = NXOpen::Preferences::FontOriginal;
				}
				_preferencesBuilder->GetObject();
				viewStyleFPCurvesBuilder->SetFont(flatPatternView_Font);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the width for Joggle Lines on flat pattern drawing views.
	id_name.assign("NXSM_joggleLine_FlatPatternView_Width");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::ViewStyleFPCurvesBuilder *viewStyleFPCurvesBuilder;
			viewStyleFPCurvesBuilder = _preferencesBuilder->ViewStyle()->GetViewStyleFPCurve(NXOpen::SheetMetal::FlatPatternSettings::FlatPatternObjectTypeJoggleLine);
			_preferencesBuilder->GetObject();
			NXOpen::Preferences::Width flatPatternView_Width;
			flatPatternView_Width = viewStyleFPCurvesBuilder->Width();
			int int_flatPatternView_Width;
			if (flatPatternView_Width == NXOpen::Preferences::WidthOriginal) {
				int_flatPatternView_Width = 0;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthThin) {
				int_flatPatternView_Width = 1;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthNormal) {
				int_flatPatternView_Width = 2;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthThick) {
				int_flatPatternView_Width = 3;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthOne) {
				int_flatPatternView_Width = 6;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthTwo) {
				int_flatPatternView_Width = 7;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthThree) {
				int_flatPatternView_Width = 8;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthFour) {
				int_flatPatternView_Width = 9;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthFive) {
				int_flatPatternView_Width = 10;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthSix) {
				int_flatPatternView_Width = 11;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthSeven) {
				int_flatPatternView_Width = 12;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthEight) {
				int_flatPatternView_Width = 13;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthNine) {
				int_flatPatternView_Width = 14;
			}
			string id_name_tmp;
			std::map<const std::string, std::string>::iterator it_tmp;
			if (int_flatPatternView_Width == 1) {
				id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
				it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				int_flatPatternView_Width = convert_to_int(it_tmp->second);
			}
			if (int_flatPatternView_Width == 2) {
				id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
				it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				int_flatPatternView_Width = convert_to_int(it_tmp->second);
			}
			if (int_flatPatternView_Width == 3) {
				id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
				it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				int_flatPatternView_Width = convert_to_int(it_tmp->second);
			}
			//_nx_dpv->soll_dpv_map.find(id_name)->second = convert_to_string(int_flatPatternView_Width);
			ist_id_value.assign(convert_to_string(int_flatPatternView_Width));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_flatPatternView_Width = convert_to_int(soll_id_value);
				if (int_flatPatternView_Width == 0) {
					flatPatternView_Width = NXOpen::Preferences::WidthOriginal;
				}
				else if (int_flatPatternView_Width == 1) {
					//flatPatternView_Width = NXOpen::Preferences::WidthThin;
					id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
					it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					flatPatternView_Width = (NXOpen::Preferences::Width) convert_to_int(it_tmp->second);
				}
				else if (int_flatPatternView_Width == 2) {
					//flatPatternView_Width = NXOpen::Preferences::WidthNormal;
					id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
					it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					flatPatternView_Width = (NXOpen::Preferences::Width) convert_to_int(it_tmp->second);
				}
				else if (int_flatPatternView_Width == 3) {
					//flatPatternView_Width = NXOpen::Preferences::WidthThick;
					id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
					it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					flatPatternView_Width = (NXOpen::Preferences::Width) convert_to_int(it_tmp->second);
				}
				else if (int_flatPatternView_Width == 6) {
					flatPatternView_Width = NXOpen::Preferences::WidthOne;
				}
				else if (int_flatPatternView_Width == 7) {
					flatPatternView_Width = NXOpen::Preferences::WidthTwo;
				}
				else if (int_flatPatternView_Width == 8) {
					flatPatternView_Width = NXOpen::Preferences::WidthThree;
				}
				else if (int_flatPatternView_Width == 9) {
					flatPatternView_Width = NXOpen::Preferences::WidthFour;
				}
				else if (int_flatPatternView_Width == 10) {
					flatPatternView_Width = NXOpen::Preferences::WidthFive;
				}
				else if (int_flatPatternView_Width == 11) {
					flatPatternView_Width = NXOpen::Preferences::WidthSix;
				}
				else if (int_flatPatternView_Width == 12) {
					flatPatternView_Width = NXOpen::Preferences::WidthSeven;
				}
				else if (int_flatPatternView_Width == 13) {
					flatPatternView_Width = NXOpen::Preferences::WidthEight;
				}
				else if (int_flatPatternView_Width == 14) {
					flatPatternView_Width = NXOpen::Preferences::WidthNine;
				}
				_preferencesBuilder->GetObject();
				viewStyleFPCurvesBuilder->SetWidth(flatPatternView_Width);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies whether Added Top Objects are enabled, or should be created, on flat pattern drawing views.
	id_name.assign("NXSM_addedTop_FlatPatternView_Enabled");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::ViewStyleFPCurvesBuilder *viewStyleFPCurvesBuilder;
			viewStyleFPCurvesBuilder = _preferencesBuilder->ViewStyle()->GetViewStyleFPCurve(NXOpen::SheetMetal::FlatPatternSettings::FlatPatternObjectTypeAddedTopGeometry);
			bool state_bool;
			_preferencesBuilder->GetObject();
			state_bool = viewStyleFPCurvesBuilder->State();
			ist_id_value.assign(convert_to_string(state_bool));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				state_bool = convert_to_bool(soll_id_value);
				_preferencesBuilder->GetObject();
				viewStyleFPCurvesBuilder->SetState(state_bool);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}
	
	//This option specifies the color of Added Top Objects on flat pattern drawing views.
	id_name.assign("NXSM_addedTop_FlatPatternView_Color");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::ViewStyleFPCurvesBuilder *viewStyleFPCurvesBuilder;
			viewStyleFPCurvesBuilder = _preferencesBuilder->ViewStyle()->GetViewStyleFPCurve(NXOpen::SheetMetal::FlatPatternSettings::FlatPatternObjectTypeAddedTopGeometry);
			NXOpen::NXColor * color;
			_preferencesBuilder->GetObject();
			color = viewStyleFPCurvesBuilder->Color();
			int colorIndex;
			colorIndex = color->Handle();
			ist_id_value.assign(convert_to_string(colorIndex));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				colorIndex = convert_to_int(soll_id_value);
				color = _workPart->Colors()->Find(colorIndex);
				_preferencesBuilder->GetObject();
				viewStyleFPCurvesBuilder->SetColor(color);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the font for Added Top Objects on flat pattern drawing views.
	id_name.assign("NXSM_addedTop_FlatPatternView_Font");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::ViewStyleFPCurvesBuilder *viewStyleFPCurvesBuilder;
			viewStyleFPCurvesBuilder = _preferencesBuilder->ViewStyle()->GetViewStyleFPCurve(NXOpen::SheetMetal::FlatPatternSettings::FlatPatternObjectTypeAddedTopGeometry);
			NXOpen::Preferences::Font flatPatternView_Font;
			_preferencesBuilder->GetObject();
			flatPatternView_Font = viewStyleFPCurvesBuilder->Font();
			int int_flatPatternView_Font;
			if (flatPatternView_Font == NXOpen::Preferences::FontInvisible) {
				int_flatPatternView_Font = -1;
			}
			else if (flatPatternView_Font == NXOpen::Preferences::FontSolid) {
				int_flatPatternView_Font = 1;
			}
			else if (flatPatternView_Font == NXOpen::Preferences::FontDashed) {
				int_flatPatternView_Font = 2;
			}
			else if (flatPatternView_Font == NXOpen::Preferences::FontPhantom) {
				int_flatPatternView_Font = 3;
			}
			else if (flatPatternView_Font == NXOpen::Preferences::FontCenterline) {
				int_flatPatternView_Font = 4;
			}
			else if (flatPatternView_Font == NXOpen::Preferences::FontDotted) {
				int_flatPatternView_Font = 5;
			}
			else if (flatPatternView_Font == NXOpen::Preferences::FontLongDashed) {
				int_flatPatternView_Font = 6;
			}
			else if (flatPatternView_Font == NXOpen::Preferences::FontDottedDashed) {
				int_flatPatternView_Font = 7;
			}
			else if (flatPatternView_Font == NXOpen::Preferences::FontOriginal) {
				int_flatPatternView_Font = 0;
			}
			ist_id_value.assign(convert_to_string(int_flatPatternView_Font));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_flatPatternView_Font = convert_to_int(soll_id_value);
				if (int_flatPatternView_Font == -1) {
					flatPatternView_Font = NXOpen::Preferences::FontInvisible;
				}
				else if (int_flatPatternView_Font == 1) {
					flatPatternView_Font = NXOpen::Preferences::FontSolid;
				}
				else if (int_flatPatternView_Font == 2) {
					flatPatternView_Font = NXOpen::Preferences::FontDashed;
				}
				else if (int_flatPatternView_Font == 3) {
					flatPatternView_Font = NXOpen::Preferences::FontPhantom;
				}
				else if (int_flatPatternView_Font == 4) {
					flatPatternView_Font = NXOpen::Preferences::FontCenterline;
				}
				else if (int_flatPatternView_Font == 5) {
					flatPatternView_Font = NXOpen::Preferences::FontDotted;
				}
				else if (int_flatPatternView_Font == 6) {
					flatPatternView_Font = NXOpen::Preferences::FontLongDashed;
				}
				else if (int_flatPatternView_Font == 7) {
					flatPatternView_Font = NXOpen::Preferences::FontDottedDashed;
				}
				else if (int_flatPatternView_Font == 0) {
					flatPatternView_Font = NXOpen::Preferences::FontOriginal;
				}
				_preferencesBuilder->GetObject();
				viewStyleFPCurvesBuilder->SetFont(flatPatternView_Font);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the width for Added Top Objects on flat pattern drawing views.
	id_name.assign("NXSM_addedTop_FlatPatternView_Width");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::ViewStyleFPCurvesBuilder *viewStyleFPCurvesBuilder;
			viewStyleFPCurvesBuilder = _preferencesBuilder->ViewStyle()->GetViewStyleFPCurve(NXOpen::SheetMetal::FlatPatternSettings::FlatPatternObjectTypeAddedTopGeometry);
			_preferencesBuilder->GetObject();
			NXOpen::Preferences::Width flatPatternView_Width;
			flatPatternView_Width = viewStyleFPCurvesBuilder->Width();
			int int_flatPatternView_Width;
			if (flatPatternView_Width == NXOpen::Preferences::WidthOriginal) {
				int_flatPatternView_Width = 0;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthThin) {
				int_flatPatternView_Width = 1;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthNormal) {
				int_flatPatternView_Width = 2;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthThick) {
				int_flatPatternView_Width = 3;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthOne) {
				int_flatPatternView_Width = 6;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthTwo) {
				int_flatPatternView_Width = 7;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthThree) {
				int_flatPatternView_Width = 8;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthFour) {
				int_flatPatternView_Width = 9;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthFive) {
				int_flatPatternView_Width = 10;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthSix) {
				int_flatPatternView_Width = 11;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthSeven) {
				int_flatPatternView_Width = 12;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthEight) {
				int_flatPatternView_Width = 13;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthNine) {
				int_flatPatternView_Width = 14;
			}
			string id_name_tmp;
			std::map<const std::string, std::string>::iterator it_tmp;
			if (int_flatPatternView_Width == 1) {
				id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
				it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				int_flatPatternView_Width = convert_to_int(it_tmp->second);
			}
			if (int_flatPatternView_Width == 2) {
				id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
				it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				int_flatPatternView_Width = convert_to_int(it_tmp->second);
			}
			if (int_flatPatternView_Width == 3) {
				id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
				it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				int_flatPatternView_Width = convert_to_int(it_tmp->second);
			}
			//_nx_dpv->soll_dpv_map.find(id_name)->second = convert_to_string(int_flatPatternView_Width);
			ist_id_value.assign(convert_to_string(int_flatPatternView_Width));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_flatPatternView_Width = convert_to_int(soll_id_value);
				if (int_flatPatternView_Width == 0) {
					flatPatternView_Width = NXOpen::Preferences::WidthOriginal;
				}
				else if (int_flatPatternView_Width == 1) {
					//flatPatternView_Width = NXOpen::Preferences::WidthThin;
					id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
					it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					flatPatternView_Width = (NXOpen::Preferences::Width) convert_to_int(it_tmp->second);
				}
				else if (int_flatPatternView_Width == 2) {
					//flatPatternView_Width = NXOpen::Preferences::WidthNormal;
					id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
					it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					flatPatternView_Width = (NXOpen::Preferences::Width) convert_to_int(it_tmp->second);
				}
				else if (int_flatPatternView_Width == 3) {
					//flatPatternView_Width = NXOpen::Preferences::WidthThick;
					id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
					it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					flatPatternView_Width = (NXOpen::Preferences::Width) convert_to_int(it_tmp->second);
				}
				else if (int_flatPatternView_Width == 6) {
					flatPatternView_Width = NXOpen::Preferences::WidthOne;
				}
				else if (int_flatPatternView_Width == 7) {
					flatPatternView_Width = NXOpen::Preferences::WidthTwo;
				}
				else if (int_flatPatternView_Width == 8) {
					flatPatternView_Width = NXOpen::Preferences::WidthThree;
				}
				else if (int_flatPatternView_Width == 9) {
					flatPatternView_Width = NXOpen::Preferences::WidthFour;
				}
				else if (int_flatPatternView_Width == 10) {
					flatPatternView_Width = NXOpen::Preferences::WidthFive;
				}
				else if (int_flatPatternView_Width == 11) {
					flatPatternView_Width = NXOpen::Preferences::WidthSix;
				}
				else if (int_flatPatternView_Width == 12) {
					flatPatternView_Width = NXOpen::Preferences::WidthSeven;
				}
				else if (int_flatPatternView_Width == 13) {
					flatPatternView_Width = NXOpen::Preferences::WidthEight;
				}
				else if (int_flatPatternView_Width == 14) {
					flatPatternView_Width = NXOpen::Preferences::WidthNine;
				}
				_preferencesBuilder->GetObject();
				viewStyleFPCurvesBuilder->SetWidth(flatPatternView_Width);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies whether Added Bottom Objects are enabled, or should be created, on flat pattern drawing views.
	id_name.assign("NXSM_addedBottom_FlatPatternView_Enabled");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::ViewStyleFPCurvesBuilder *viewStyleFPCurvesBuilder;
			viewStyleFPCurvesBuilder = _preferencesBuilder->ViewStyle()->GetViewStyleFPCurve(NXOpen::SheetMetal::FlatPatternSettings::FlatPatternObjectTypeAddedBottomGeometry);
			bool state_bool;
			_preferencesBuilder->GetObject();
			state_bool = viewStyleFPCurvesBuilder->State();
			ist_id_value.assign(convert_to_string(state_bool));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				state_bool = convert_to_bool(soll_id_value);
				_preferencesBuilder->GetObject();
				viewStyleFPCurvesBuilder->SetState(state_bool);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}
	
	//This option specifies the color of Added Bottom Objects on flat pattern drawing views.
	id_name.assign("NXSM_addedBottom_FlatPatternView_Color");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::ViewStyleFPCurvesBuilder *viewStyleFPCurvesBuilder;
			viewStyleFPCurvesBuilder = _preferencesBuilder->ViewStyle()->GetViewStyleFPCurve(NXOpen::SheetMetal::FlatPatternSettings::FlatPatternObjectTypeAddedBottomGeometry);
			NXOpen::NXColor * color;
			_preferencesBuilder->GetObject();
			color = viewStyleFPCurvesBuilder->Color();
			int colorIndex;
			colorIndex = color->Handle();
			ist_id_value.assign(convert_to_string(colorIndex));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				colorIndex = convert_to_int(soll_id_value);
				color = _workPart->Colors()->Find(colorIndex);
				_preferencesBuilder->GetObject();
				viewStyleFPCurvesBuilder->SetColor(color);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the font for Added Bottom Objects on flat pattern drawing views.
	id_name.assign("NXSM_addedBottom_FlatPatternView_Font");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::ViewStyleFPCurvesBuilder *viewStyleFPCurvesBuilder;
			viewStyleFPCurvesBuilder = _preferencesBuilder->ViewStyle()->GetViewStyleFPCurve(NXOpen::SheetMetal::FlatPatternSettings::FlatPatternObjectTypeAddedBottomGeometry);
			NXOpen::Preferences::Font flatPatternView_Font;
			_preferencesBuilder->GetObject();
			flatPatternView_Font = viewStyleFPCurvesBuilder->Font();
			int int_flatPatternView_Font;
			if (flatPatternView_Font == NXOpen::Preferences::FontInvisible) {
				int_flatPatternView_Font = -1;
			}
			else if (flatPatternView_Font == NXOpen::Preferences::FontSolid) {
				int_flatPatternView_Font = 1;
			}
			else if (flatPatternView_Font == NXOpen::Preferences::FontDashed) {
				int_flatPatternView_Font = 2;
			}
			else if (flatPatternView_Font == NXOpen::Preferences::FontPhantom) {
				int_flatPatternView_Font = 3;
			}
			else if (flatPatternView_Font == NXOpen::Preferences::FontCenterline) {
				int_flatPatternView_Font = 4;
			}
			else if (flatPatternView_Font == NXOpen::Preferences::FontDotted) {
				int_flatPatternView_Font = 5;
			}
			else if (flatPatternView_Font == NXOpen::Preferences::FontLongDashed) {
				int_flatPatternView_Font = 6;
			}
			else if (flatPatternView_Font == NXOpen::Preferences::FontDottedDashed) {
				int_flatPatternView_Font = 7;
			}
			else if (flatPatternView_Font == NXOpen::Preferences::FontOriginal) {
				int_flatPatternView_Font = 0;
			}
			ist_id_value.assign(convert_to_string(int_flatPatternView_Font));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_flatPatternView_Font = convert_to_int(soll_id_value);
				if (int_flatPatternView_Font == -1) {
					flatPatternView_Font = NXOpen::Preferences::FontInvisible;
				}
				else if (int_flatPatternView_Font == 1) {
					flatPatternView_Font = NXOpen::Preferences::FontSolid;
				}
				else if (int_flatPatternView_Font == 2) {
					flatPatternView_Font = NXOpen::Preferences::FontDashed;
				}
				else if (int_flatPatternView_Font == 3) {
					flatPatternView_Font = NXOpen::Preferences::FontPhantom;
				}
				else if (int_flatPatternView_Font == 4) {
					flatPatternView_Font = NXOpen::Preferences::FontCenterline;
				}
				else if (int_flatPatternView_Font == 5) {
					flatPatternView_Font = NXOpen::Preferences::FontDotted;
				}
				else if (int_flatPatternView_Font == 6) {
					flatPatternView_Font = NXOpen::Preferences::FontLongDashed;
				}
				else if (int_flatPatternView_Font == 7) {
					flatPatternView_Font = NXOpen::Preferences::FontDottedDashed;
				}
				else if (int_flatPatternView_Font == 0) {
					flatPatternView_Font = NXOpen::Preferences::FontOriginal;
				}
				_preferencesBuilder->GetObject();
				viewStyleFPCurvesBuilder->SetFont(flatPatternView_Font);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the width for Added Bottom Objects on flat pattern drawing views.
	id_name.assign("NXSM_addedBottom_FlatPatternView_Width");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::ViewStyleFPCurvesBuilder *viewStyleFPCurvesBuilder;
			viewStyleFPCurvesBuilder = _preferencesBuilder->ViewStyle()->GetViewStyleFPCurve(NXOpen::SheetMetal::FlatPatternSettings::FlatPatternObjectTypeAddedBottomGeometry);
			_preferencesBuilder->GetObject();
			NXOpen::Preferences::Width flatPatternView_Width;
			flatPatternView_Width = viewStyleFPCurvesBuilder->Width();
			int int_flatPatternView_Width;
			if (flatPatternView_Width == NXOpen::Preferences::WidthOriginal) {
				int_flatPatternView_Width = 0;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthThin) {
				int_flatPatternView_Width = 1;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthNormal) {
				int_flatPatternView_Width = 2;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthThick) {
				int_flatPatternView_Width = 3;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthOne) {
				int_flatPatternView_Width = 6;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthTwo) {
				int_flatPatternView_Width = 7;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthThree) {
				int_flatPatternView_Width = 8;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthFour) {
				int_flatPatternView_Width = 9;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthFive) {
				int_flatPatternView_Width = 10;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthSix) {
				int_flatPatternView_Width = 11;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthSeven) {
				int_flatPatternView_Width = 12;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthEight) {
				int_flatPatternView_Width = 13;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthNine) {
				int_flatPatternView_Width = 14;
			}
			string id_name_tmp;
			std::map<const std::string, std::string>::iterator it_tmp;
			if (int_flatPatternView_Width == 1) {
				id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
				it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				int_flatPatternView_Width = convert_to_int(it_tmp->second);
			}
			if (int_flatPatternView_Width == 2) {
				id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
				it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				int_flatPatternView_Width = convert_to_int(it_tmp->second);
			}
			if (int_flatPatternView_Width == 3) {
				id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
				it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				int_flatPatternView_Width = convert_to_int(it_tmp->second);
			}
			//_nx_dpv->soll_dpv_map.find(id_name)->second = convert_to_string(int_flatPatternView_Width);
			ist_id_value.assign(convert_to_string(int_flatPatternView_Width));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_flatPatternView_Width = convert_to_int(soll_id_value);
				if (int_flatPatternView_Width == 0) {
					flatPatternView_Width = NXOpen::Preferences::WidthOriginal;
				}
				else if (int_flatPatternView_Width == 1) {
					//flatPatternView_Width = NXOpen::Preferences::WidthThin;
					id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
					it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					flatPatternView_Width = (NXOpen::Preferences::Width) convert_to_int(it_tmp->second);
				}
				else if (int_flatPatternView_Width == 2) {
					//flatPatternView_Width = NXOpen::Preferences::WidthNormal;
					id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
					it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					flatPatternView_Width = (NXOpen::Preferences::Width) convert_to_int(it_tmp->second);
				}
				else if (int_flatPatternView_Width == 3) {
					//flatPatternView_Width = NXOpen::Preferences::WidthThick;
					id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
					it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					flatPatternView_Width = (NXOpen::Preferences::Width) convert_to_int(it_tmp->second);
				}
				else if (int_flatPatternView_Width == 6) {
					flatPatternView_Width = NXOpen::Preferences::WidthOne;
				}
				else if (int_flatPatternView_Width == 7) {
					flatPatternView_Width = NXOpen::Preferences::WidthTwo;
				}
				else if (int_flatPatternView_Width == 8) {
					flatPatternView_Width = NXOpen::Preferences::WidthThree;
				}
				else if (int_flatPatternView_Width == 9) {
					flatPatternView_Width = NXOpen::Preferences::WidthFour;
				}
				else if (int_flatPatternView_Width == 10) {
					flatPatternView_Width = NXOpen::Preferences::WidthFive;
				}
				else if (int_flatPatternView_Width == 11) {
					flatPatternView_Width = NXOpen::Preferences::WidthSix;
				}
				else if (int_flatPatternView_Width == 12) {
					flatPatternView_Width = NXOpen::Preferences::WidthSeven;
				}
				else if (int_flatPatternView_Width == 13) {
					flatPatternView_Width = NXOpen::Preferences::WidthEight;
				}
				else if (int_flatPatternView_Width == 14) {
					flatPatternView_Width = NXOpen::Preferences::WidthNine;
				}
				_preferencesBuilder->GetObject();
				viewStyleFPCurvesBuilder->SetWidth(flatPatternView_Width);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies whether Tool Marker objects are enabled, or should be created, on flat pattern drawing views.
	id_name.assign("NXSM_toolMarker_FlatPatternView_Enabled");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::ViewStyleFPCurvesBuilder *viewStyleFPCurvesBuilder;
			viewStyleFPCurvesBuilder = _preferencesBuilder->ViewStyle()->GetViewStyleFPCurve(NXOpen::SheetMetal::FlatPatternSettings::FlatPatternObjectTypeToolMarker);
			bool state_bool;
			_preferencesBuilder->GetObject();
			state_bool = viewStyleFPCurvesBuilder->State();
			ist_id_value.assign(convert_to_string(state_bool));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				state_bool = convert_to_bool(soll_id_value);
				_preferencesBuilder->GetObject();
				viewStyleFPCurvesBuilder->SetState(state_bool);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the color of Tool Marker objects on flat pattern drawing views.
	id_name.assign("NXSM_toolMarker_FlatPatternView_Color");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::ViewStyleFPCurvesBuilder *viewStyleFPCurvesBuilder;
			viewStyleFPCurvesBuilder = _preferencesBuilder->ViewStyle()->GetViewStyleFPCurve(NXOpen::SheetMetal::FlatPatternSettings::FlatPatternObjectTypeToolMarker);
			NXOpen::NXColor * color;
			_preferencesBuilder->GetObject();
			color = viewStyleFPCurvesBuilder->Color();
			int colorIndex;
			colorIndex = color->Handle();
			ist_id_value.assign(convert_to_string(colorIndex));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				colorIndex = convert_to_int(soll_id_value);
				color = _workPart->Colors()->Find(colorIndex);
				_preferencesBuilder->GetObject();
				viewStyleFPCurvesBuilder->SetColor(color);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the font for Tool Marker objects on flat pattern drawing views.
	id_name.assign("NXSM_toolMarker_FlatPatternView_Font");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::ViewStyleFPCurvesBuilder *viewStyleFPCurvesBuilder;
			viewStyleFPCurvesBuilder = _preferencesBuilder->ViewStyle()->GetViewStyleFPCurve(NXOpen::SheetMetal::FlatPatternSettings::FlatPatternObjectTypeToolMarker);
			NXOpen::Preferences::Font flatPatternView_Font;
			_preferencesBuilder->GetObject();
			flatPatternView_Font = viewStyleFPCurvesBuilder->Font();
			int int_flatPatternView_Font;
			if (flatPatternView_Font == NXOpen::Preferences::FontInvisible) {
				int_flatPatternView_Font = -1;
			}
			else if (flatPatternView_Font == NXOpen::Preferences::FontSolid) {
				int_flatPatternView_Font = 1;
			}
			else if (flatPatternView_Font == NXOpen::Preferences::FontDashed) {
				int_flatPatternView_Font = 2;
			}
			else if (flatPatternView_Font == NXOpen::Preferences::FontPhantom) {
				int_flatPatternView_Font = 3;
			}
			else if (flatPatternView_Font == NXOpen::Preferences::FontCenterline) {
				int_flatPatternView_Font = 4;
			}
			else if (flatPatternView_Font == NXOpen::Preferences::FontDotted) {
				int_flatPatternView_Font = 5;
			}
			else if (flatPatternView_Font == NXOpen::Preferences::FontLongDashed) {
				int_flatPatternView_Font = 6;
			}
			else if (flatPatternView_Font == NXOpen::Preferences::FontDottedDashed) {
				int_flatPatternView_Font = 7;
			}
			else if (flatPatternView_Font == NXOpen::Preferences::FontOriginal) {
				int_flatPatternView_Font = 0;
			}
			ist_id_value.assign(convert_to_string(int_flatPatternView_Font));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_flatPatternView_Font = convert_to_int(soll_id_value);
				if (int_flatPatternView_Font == -1) {
					flatPatternView_Font = NXOpen::Preferences::FontInvisible;
				}
				else if (int_flatPatternView_Font == 1) {
					flatPatternView_Font = NXOpen::Preferences::FontSolid;
				}
				else if (int_flatPatternView_Font == 2) {
					flatPatternView_Font = NXOpen::Preferences::FontDashed;
				}
				else if (int_flatPatternView_Font == 3) {
					flatPatternView_Font = NXOpen::Preferences::FontPhantom;
				}
				else if (int_flatPatternView_Font == 4) {
					flatPatternView_Font = NXOpen::Preferences::FontCenterline;
				}
				else if (int_flatPatternView_Font == 5) {
					flatPatternView_Font = NXOpen::Preferences::FontDotted;
				}
				else if (int_flatPatternView_Font == 6) {
					flatPatternView_Font = NXOpen::Preferences::FontLongDashed;
				}
				else if (int_flatPatternView_Font == 7) {
					flatPatternView_Font = NXOpen::Preferences::FontDottedDashed;
				}
				else if (int_flatPatternView_Font == 0) {
					flatPatternView_Font = NXOpen::Preferences::FontOriginal;
				}
				_preferencesBuilder->GetObject();
				viewStyleFPCurvesBuilder->SetFont(flatPatternView_Font);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}
	
	//This option specifies the width for Tool Marker objects on flat pattern drawing views.
	id_name.assign("NXSM_toolMarker_FlatPatternView_Width");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::ViewStyleFPCurvesBuilder *viewStyleFPCurvesBuilder;
			viewStyleFPCurvesBuilder = _preferencesBuilder->ViewStyle()->GetViewStyleFPCurve(NXOpen::SheetMetal::FlatPatternSettings::FlatPatternObjectTypeToolMarker);
			_preferencesBuilder->GetObject();
			NXOpen::Preferences::Width flatPatternView_Width;
			flatPatternView_Width = viewStyleFPCurvesBuilder->Width();
			int int_flatPatternView_Width;
			if (flatPatternView_Width == NXOpen::Preferences::WidthOriginal) {
				int_flatPatternView_Width = 0;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthThin) {
				int_flatPatternView_Width = 1;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthNormal) {
				int_flatPatternView_Width = 2;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthThick) {
				int_flatPatternView_Width = 3;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthOne) {
				int_flatPatternView_Width = 6;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthTwo) {
				int_flatPatternView_Width = 7;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthThree) {
				int_flatPatternView_Width = 8;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthFour) {
				int_flatPatternView_Width = 9;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthFive) {
				int_flatPatternView_Width = 10;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthSix) {
				int_flatPatternView_Width = 11;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthSeven) {
				int_flatPatternView_Width = 12;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthEight) {
				int_flatPatternView_Width = 13;
			}
			else if (flatPatternView_Width == NXOpen::Preferences::WidthNine) {
				int_flatPatternView_Width = 14;
			}
			string id_name_tmp;
			std::map<const std::string, std::string>::iterator it_tmp;
			if (int_flatPatternView_Width == 1) {
				id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
				it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				int_flatPatternView_Width = convert_to_int(it_tmp->second);
			}
			if (int_flatPatternView_Width == 2) {
				id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
				it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				int_flatPatternView_Width = convert_to_int(it_tmp->second);
			}
			if (int_flatPatternView_Width == 3) {
				id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
				it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				int_flatPatternView_Width = convert_to_int(it_tmp->second);
			}
			//_nx_dpv->soll_dpv_map.find(id_name)->second = convert_to_string(int_flatPatternView_Width);
			ist_id_value.assign(convert_to_string(int_flatPatternView_Width));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_flatPatternView_Width = convert_to_int(soll_id_value);
				if (int_flatPatternView_Width == 0) {
					flatPatternView_Width = NXOpen::Preferences::WidthOriginal;
				}
				else if (int_flatPatternView_Width == 1) {
					//flatPatternView_Width = NXOpen::Preferences::WidthThin;
					id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
					it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					flatPatternView_Width = (NXOpen::Preferences::Width) convert_to_int(it_tmp->second);
				}
				else if (int_flatPatternView_Width == 2) {
					//flatPatternView_Width = NXOpen::Preferences::WidthNormal;
					id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
					it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					flatPatternView_Width = (NXOpen::Preferences::Width) convert_to_int(it_tmp->second);
				}
				else if (int_flatPatternView_Width == 3) {
					//flatPatternView_Width = NXOpen::Preferences::WidthThick;
					id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
					it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					flatPatternView_Width = (NXOpen::Preferences::Width) convert_to_int(it_tmp->second);
				}
				else if (int_flatPatternView_Width == 6) {
					flatPatternView_Width = NXOpen::Preferences::WidthOne;
				}
				else if (int_flatPatternView_Width == 7) {
					flatPatternView_Width = NXOpen::Preferences::WidthTwo;
				}
				else if (int_flatPatternView_Width == 8) {
					flatPatternView_Width = NXOpen::Preferences::WidthThree;
				}
				else if (int_flatPatternView_Width == 9) {
					flatPatternView_Width = NXOpen::Preferences::WidthFour;
				}
				else if (int_flatPatternView_Width == 10) {
					flatPatternView_Width = NXOpen::Preferences::WidthFive;
				}
				else if (int_flatPatternView_Width == 11) {
					flatPatternView_Width = NXOpen::Preferences::WidthSix;
				}
				else if (int_flatPatternView_Width == 12) {
					flatPatternView_Width = NXOpen::Preferences::WidthSeven;
				}
				else if (int_flatPatternView_Width == 13) {
					flatPatternView_Width = NXOpen::Preferences::WidthEight;
				}
				else if (int_flatPatternView_Width == 14) {
					flatPatternView_Width = NXOpen::Preferences::WidthNine;
				}
				_preferencesBuilder->GetObject();
				viewStyleFPCurvesBuilder->SetWidth(flatPatternView_Width);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- STOPP - %s --- \n", routineName.c_str());
}

/*
File - Utilities - Customer Defaults - Drafting - Flat Pattern View - Callouts -> Repair these preferences.
*/
void repair_site_Drafting_FlatPatternView_Callouts_prefs(NXOpen::Drafting::PreferencesBuilder *_preferencesBuilder, en_nx_dpv* _nx_dpv, Session * _theSession, Part* _workPart) {
	routineName.assign("repair_site_Drafting_FlatPatternView_Callouts_prefs");
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- START - %s --- \n", routineName.c_str());

	//This option determines whether or not Custom Callout 1 will be created on flat pattern drawings.
	id_name.assign("NXCustomCallout_FlatPatternView_1_Enabled");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			//NXOpen::Drawings::ViewStyleFPCalloutsBuilder *viewStyleFPCalloutsBuilder;
			vector<NXOpen::Drawings::ViewStyleFPCalloutsBuilder *> viewStyleFPCallouts;
			viewStyleFPCallouts = _preferencesBuilder->ViewStyle()->GetAllViewStyleFPCallouts();
			bool stateToggle;
			stateToggle = viewStyleFPCallouts[0]->State();
			ist_id_value.assign(convert_to_string(stateToggle));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				stateToggle = convert_to_bool(soll_id_value);
				viewStyleFPCallouts[0]->SetState(stateToggle);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not Custom Callout 2 will be created on flat pattern drawings.
	id_name.assign("NXCustomCallout_FlatPatternView_2_Enabled");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			vector<NXOpen::Drawings::ViewStyleFPCalloutsBuilder *> viewStyleFPCallouts;
			viewStyleFPCallouts = _preferencesBuilder->ViewStyle()->GetAllViewStyleFPCallouts();
			bool stateToggle;
			stateToggle = viewStyleFPCallouts[1]->State();
			ist_id_value.assign(convert_to_string(stateToggle));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				stateToggle = convert_to_bool(soll_id_value);
				viewStyleFPCallouts[1]->SetState(stateToggle);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}
	
	//This option determines whether or not Custom Callout 3 will be created on flat pattern drawings.
	id_name.assign("NXCustomCallout_FlatPatternView_3_Enabled");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			//NXOpen::Drawings::ViewStyleFPCalloutsBuilder *viewStyleFPCalloutsBuilder;
			vector<NXOpen::Drawings::ViewStyleFPCalloutsBuilder *> viewStyleFPCallouts;
			viewStyleFPCallouts = _preferencesBuilder->ViewStyle()->GetAllViewStyleFPCallouts();
			bool stateToggle;
			stateToggle = viewStyleFPCallouts[2]->State();
			ist_id_value.assign(convert_to_string(stateToggle));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				stateToggle = convert_to_bool(soll_id_value);
				viewStyleFPCallouts[2]->SetState(stateToggle);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not Custom Callout 4 will be created on flat pattern drawings.
	id_name.assign("NXCustomCallout_FlatPatternView_4_Enabled");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			//NXOpen::Drawings::ViewStyleFPCalloutsBuilder *viewStyleFPCalloutsBuilder;
			_preferencesBuilder->ViewStyle()->GetAllViewStyleFPCallouts();
			vector<NXOpen::Drawings::ViewStyleFPCalloutsBuilder *> viewStyleFPCallouts;
			viewStyleFPCallouts = _preferencesBuilder->ViewStyle()->GetAllViewStyleFPCallouts();
			bool stateToggle;
			stateToggle = viewStyleFPCallouts[3]->State();
			ist_id_value.assign(convert_to_string(stateToggle));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				stateToggle = convert_to_bool(soll_id_value);
				viewStyleFPCallouts[3]->SetState(stateToggle);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not Custom Callout 5 will be created on flat pattern drawings.
	id_name.assign("NXCustomCallout_FlatPatternView_5_Enabled");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			//NXOpen::Drawings::ViewStyleFPCalloutsBuilder *viewStyleFPCalloutsBuilder;
			vector<NXOpen::Drawings::ViewStyleFPCalloutsBuilder *> viewStyleFPCallouts;
			viewStyleFPCallouts = _preferencesBuilder->ViewStyle()->GetAllViewStyleFPCallouts();
			bool stateToggle;
			stateToggle = viewStyleFPCallouts[4]->State();
			ist_id_value.assign(convert_to_string(stateToggle));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				stateToggle = convert_to_bool(soll_id_value);
				viewStyleFPCallouts[4]->SetState(stateToggle);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not Custom Callout 6 will be created on flat pattern drawings.
	id_name.assign("NXCustomCallout_FlatPatternView_6_Enabled");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			//NXOpen::Drawings::ViewStyleFPCalloutsBuilder *viewStyleFPCalloutsBuilder;
			vector<NXOpen::Drawings::ViewStyleFPCalloutsBuilder *> viewStyleFPCallouts;
			viewStyleFPCallouts = _preferencesBuilder->ViewStyle()->GetAllViewStyleFPCallouts();
			bool stateToggle;
			stateToggle = viewStyleFPCallouts[5]->State();
			ist_id_value.assign(convert_to_string(stateToggle));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				stateToggle = convert_to_bool(soll_id_value);
				viewStyleFPCallouts[5]->SetState(stateToggle);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not Custom Callout 7 will be created on flat pattern drawings.
	id_name.assign("NXCustomCallout_FlatPatternView_7_Enabled");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			//NXOpen::Drawings::ViewStyleFPCalloutsBuilder *viewStyleFPCalloutsBuilder;
			vector<NXOpen::Drawings::ViewStyleFPCalloutsBuilder *> viewStyleFPCallouts;
			viewStyleFPCallouts = _preferencesBuilder->ViewStyle()->GetAllViewStyleFPCallouts();
			bool stateToggle;
			stateToggle = viewStyleFPCallouts[6]->State();
			ist_id_value.assign(convert_to_string(stateToggle));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				stateToggle = convert_to_bool(soll_id_value);
				viewStyleFPCallouts[6]->SetState(stateToggle);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not Custom Callout 8 will be created on flat pattern drawings.
	id_name.assign("NXCustomCallout_FlatPatternView_8_Enabled");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			//NXOpen::Drawings::ViewStyleFPCalloutsBuilder *viewStyleFPCalloutsBuilder;
			vector<NXOpen::Drawings::ViewStyleFPCalloutsBuilder *> viewStyleFPCallouts;
			viewStyleFPCallouts = _preferencesBuilder->ViewStyle()->GetAllViewStyleFPCallouts();
			bool stateToggle;
			stateToggle = viewStyleFPCallouts[7]->State();
			ist_id_value.assign(convert_to_string(stateToggle));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				stateToggle = convert_to_bool(soll_id_value);
				viewStyleFPCallouts[7]->SetState(stateToggle);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This field defines the content for Custom Callout 1.
	id_name.assign("NXCustomCallout_FlatPatternView_1_Content");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			//NXOpen::Drawings::ViewStyleFPCalloutsBuilder *viewStyleFPCalloutsBuilder;
			vector<NXOpen::Drawings::ViewStyleFPCalloutsBuilder *> viewStyleFPCallouts;
			viewStyleFPCallouts = _preferencesBuilder->ViewStyle()->GetAllViewStyleFPCallouts();
			NXOpen::NXString viewStyleFPCalloutsType;
			viewStyleFPCalloutsType = viewStyleFPCallouts[0]->Type();
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("NXCustomCallout_FlatPatternView_1_Content - viewStyleFPCalloutsType=\"%s\" \n", viewStyleFPCalloutsType.GetLocaleText());
			NXOpen::Drawings::ViewStyleFPCalloutConfigBuilder *viewStyleFPCalloutConfigBuilder;
			viewStyleFPCalloutConfigBuilder = _preferencesBuilder->ViewStyle()->GetViewStyleFPCalloutConfig();
			std::vector<NXOpen::NXString> contents(1);
			//viewStyleFPCalloutConfigBuilder->SetContents(NXOpen::NXString("FlatPatternView.Bend Radius_|_LEhAeRCkOV\177IMERmbYRdN`", NXOpen::NXString::UTF8), contents);
			contents = viewStyleFPCalloutConfigBuilder->GetContents(NXOpen::NXString(viewStyleFPCalloutsType.GetLocaleText()));
			string string_contents;
			string_contents = retrieveXml(string(contents[0].GetLocaleText()));
			ist_id_value.assign(string_contents.c_str());
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				string_contents.assign(soll_id_value);
				viewStyleFPCalloutsType = viewStyleFPCallouts[0]->Type();
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("NXCustomCallout_FlatPatternView_1_Content - viewStyleFPCalloutsType=\"%s\" \n", viewStyleFPCalloutsType.GetLocaleText());
				contents[0] = string_contents;
				//viewStyleFPCalloutConfigBuilder->SetContents(NXOpen::NXString("FlatPatternView.Bend Radius_|_LEhAeRCkOV\177IMERmbYRdN`", NXOpen::NXString::UTF8), contents);
				viewStyleFPCalloutConfigBuilder->SetContents(NXOpen::NXString(viewStyleFPCalloutsType.GetLocaleText(), NXOpen::NXString::UTF8), contents);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This field defines the content for Custom Callout 2.
	id_name.assign("NXCustomCallout_FlatPatternView_2_Content");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			//NXOpen::Drawings::ViewStyleFPCalloutsBuilder *viewStyleFPCalloutsBuilder;
			vector<NXOpen::Drawings::ViewStyleFPCalloutsBuilder *> viewStyleFPCallouts;
			viewStyleFPCallouts = _preferencesBuilder->ViewStyle()->GetAllViewStyleFPCallouts();
			NXOpen::NXString viewStyleFPCalloutsType;
			viewStyleFPCalloutsType = viewStyleFPCallouts[1]->Type();
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("NXCustomCallout_FlatPatternView_2_Content - viewStyleFPCalloutsType=\"%s\" \n", viewStyleFPCalloutsType.GetLocaleText());
			NXOpen::Drawings::ViewStyleFPCalloutConfigBuilder *viewStyleFPCalloutConfigBuilder;
			viewStyleFPCalloutConfigBuilder = _preferencesBuilder->ViewStyle()->GetViewStyleFPCalloutConfig();
			std::vector<NXOpen::NXString> contents(1);
			//viewStyleFPCalloutConfigBuilder->SetContents(NXOpen::NXString("FlatPatternView.Bend Radius_|_LEhAeRCkOV\177IMERmbYRdN`", NXOpen::NXString::UTF8), contents);
			contents = viewStyleFPCalloutConfigBuilder->GetContents(NXOpen::NXString(viewStyleFPCalloutsType.GetLocaleText()));
			string string_contents;
			string_contents = retrieveXml(string(contents[0].GetLocaleText()));
			ist_id_value.assign(string_contents.c_str());
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				string_contents.assign(soll_id_value);
				contents[0] = string_contents;
				//viewStyleFPCalloutConfigBuilder->SetContents(NXOpen::NXString("FlatPatternView.Bend Radius_|_LEhAeRCkOV\177IMERmbYRdN`", NXOpen::NXString::UTF8), contents);
				viewStyleFPCalloutConfigBuilder->SetContents(NXOpen::NXString(viewStyleFPCalloutsType.GetLocaleText(), NXOpen::NXString::UTF8), contents);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This field defines the content for Custom Callout 3.
	id_name.assign("NXCustomCallout_FlatPatternView_3_Content");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			//NXOpen::Drawings::ViewStyleFPCalloutsBuilder *viewStyleFPCalloutsBuilder;
			vector<NXOpen::Drawings::ViewStyleFPCalloutsBuilder *> viewStyleFPCallouts;
			viewStyleFPCallouts = _preferencesBuilder->ViewStyle()->GetAllViewStyleFPCallouts();
			NXOpen::NXString viewStyleFPCalloutsType;
			viewStyleFPCalloutsType = viewStyleFPCallouts[2]->Type();
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("NXCustomCallout_FlatPatternView_3_Content - viewStyleFPCalloutsType=\"%s\" \n", viewStyleFPCalloutsType.GetLocaleText());
			NXOpen::Drawings::ViewStyleFPCalloutConfigBuilder *viewStyleFPCalloutConfigBuilder;
			viewStyleFPCalloutConfigBuilder = _preferencesBuilder->ViewStyle()->GetViewStyleFPCalloutConfig();
			std::vector<NXOpen::NXString> contents(1);
			//viewStyleFPCalloutConfigBuilder->SetContents(NXOpen::NXString("FlatPatternView.Bend Radius_|_LEhAeRCkOV\177IMERmbYRdN`", NXOpen::NXString::UTF8), contents);
			contents = viewStyleFPCalloutConfigBuilder->GetContents(NXOpen::NXString(viewStyleFPCalloutsType.GetLocaleText()));
			string string_contents;
			string_contents = retrieveXml(string(contents[0].GetLocaleText()));
			ist_id_value.assign(string_contents.c_str());
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				string_contents.assign(soll_id_value);
				contents[0] = string_contents;
				//viewStyleFPCalloutConfigBuilder->SetContents(NXOpen::NXString("FlatPatternView.Bend Radius_|_LEhAeRCkOV\177IMERmbYRdN`", NXOpen::NXString::UTF8), contents);
				viewStyleFPCalloutConfigBuilder->SetContents(NXOpen::NXString(viewStyleFPCalloutsType.GetLocaleText(), NXOpen::NXString::UTF8), contents);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This field defines the content for Custom Callout 4.
	id_name.assign("NXCustomCallout_FlatPatternView_4_Content");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			//NXOpen::Drawings::ViewStyleFPCalloutsBuilder *viewStyleFPCalloutsBuilder;
			vector<NXOpen::Drawings::ViewStyleFPCalloutsBuilder *> viewStyleFPCallouts;
			viewStyleFPCallouts = _preferencesBuilder->ViewStyle()->GetAllViewStyleFPCallouts();
			NXOpen::NXString viewStyleFPCalloutsType;
			viewStyleFPCalloutsType = viewStyleFPCallouts[3]->Type();
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("NXCustomCallout_FlatPatternView_4_Content - viewStyleFPCalloutsType=\"%s\" \n", viewStyleFPCalloutsType.GetLocaleText());
			NXOpen::Drawings::ViewStyleFPCalloutConfigBuilder *viewStyleFPCalloutConfigBuilder;
			viewStyleFPCalloutConfigBuilder = _preferencesBuilder->ViewStyle()->GetViewStyleFPCalloutConfig();
			std::vector<NXOpen::NXString> contents(1);
			//viewStyleFPCalloutConfigBuilder->SetContents(NXOpen::NXString("FlatPatternView.Bend Radius_|_LEhAeRCkOV\177IMERmbYRdN`", NXOpen::NXString::UTF8), contents);
			contents = viewStyleFPCalloutConfigBuilder->GetContents(NXOpen::NXString(viewStyleFPCalloutsType.GetLocaleText()));
			string string_contents;
			string_contents = retrieveXml(string(contents[0].GetLocaleText()));
			ist_id_value.assign(string_contents.c_str());
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				string_contents.assign(soll_id_value);
				contents[0] = string_contents;
				//viewStyleFPCalloutConfigBuilder->SetContents(NXOpen::NXString("FlatPatternView.Bend Radius_|_LEhAeRCkOV\177IMERmbYRdN`", NXOpen::NXString::UTF8), contents);
				viewStyleFPCalloutConfigBuilder->SetContents(NXOpen::NXString(viewStyleFPCalloutsType.GetLocaleText(), NXOpen::NXString::UTF8), contents);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This field defines the content for Custom Callout 5.
	id_name.assign("NXCustomCallout_FlatPatternView_5_Content");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			//NXOpen::Drawings::ViewStyleFPCalloutsBuilder *viewStyleFPCalloutsBuilder;
			vector<NXOpen::Drawings::ViewStyleFPCalloutsBuilder *> viewStyleFPCallouts;
			viewStyleFPCallouts = _preferencesBuilder->ViewStyle()->GetAllViewStyleFPCallouts();
			NXOpen::NXString viewStyleFPCalloutsType;
			viewStyleFPCalloutsType = viewStyleFPCallouts[4]->Type();
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("NXCustomCallout_FlatPatternView_5_Content - viewStyleFPCalloutsType=\"%s\" \n", viewStyleFPCalloutsType.GetLocaleText());
			NXOpen::Drawings::ViewStyleFPCalloutConfigBuilder *viewStyleFPCalloutConfigBuilder;
			viewStyleFPCalloutConfigBuilder = _preferencesBuilder->ViewStyle()->GetViewStyleFPCalloutConfig();
			std::vector<NXOpen::NXString> contents(1);
			//viewStyleFPCalloutConfigBuilder->SetContents(NXOpen::NXString("FlatPatternView.Bend Radius_|_LEhAeRCkOV\177IMERmbYRdN`", NXOpen::NXString::UTF8), contents);
			contents = viewStyleFPCalloutConfigBuilder->GetContents(NXOpen::NXString(viewStyleFPCalloutsType.GetLocaleText()));
			string string_contents;
			string_contents = retrieveXml(string(contents[0].GetLocaleText()));
			ist_id_value.assign(string_contents.c_str());
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				string_contents.assign(soll_id_value);
				contents[0] = string_contents;
				//viewStyleFPCalloutConfigBuilder->SetContents(NXOpen::NXString("FlatPatternView.Bend Radius_|_LEhAeRCkOV\177IMERmbYRdN`", NXOpen::NXString::UTF8), contents);
				viewStyleFPCalloutConfigBuilder->SetContents(NXOpen::NXString(viewStyleFPCalloutsType.GetLocaleText(), NXOpen::NXString::UTF8), contents);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This field defines the content for Custom Callout 6.
	id_name.assign("NXCustomCallout_FlatPatternView_6_Content");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			//NXOpen::Drawings::ViewStyleFPCalloutsBuilder *viewStyleFPCalloutsBuilder;
			vector<NXOpen::Drawings::ViewStyleFPCalloutsBuilder *> viewStyleFPCallouts;
			viewStyleFPCallouts = _preferencesBuilder->ViewStyle()->GetAllViewStyleFPCallouts();
			NXOpen::NXString viewStyleFPCalloutsType;
			viewStyleFPCalloutsType = viewStyleFPCallouts[5]->Type();
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("NXCustomCallout_FlatPatternView_6_Content - viewStyleFPCalloutsType=\"%s\" \n", viewStyleFPCalloutsType.GetLocaleText());
			NXOpen::Drawings::ViewStyleFPCalloutConfigBuilder *viewStyleFPCalloutConfigBuilder;
			viewStyleFPCalloutConfigBuilder = _preferencesBuilder->ViewStyle()->GetViewStyleFPCalloutConfig();
			std::vector<NXOpen::NXString> contents(1);
			//viewStyleFPCalloutConfigBuilder->SetContents(NXOpen::NXString("FlatPatternView.Bend Radius_|_LEhAeRCkOV\177IMERmbYRdN`", NXOpen::NXString::UTF8), contents);
			contents = viewStyleFPCalloutConfigBuilder->GetContents(NXOpen::NXString(viewStyleFPCalloutsType.GetLocaleText()));
			string string_contents;
			string_contents = retrieveXml(string(contents[0].GetLocaleText()));
			ist_id_value.assign(string_contents.c_str());
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				string_contents.assign(soll_id_value);
				contents[0] = string_contents;
				//viewStyleFPCalloutConfigBuilder->SetContents(NXOpen::NXString("FlatPatternView.Bend Radius_|_LEhAeRCkOV\177IMERmbYRdN`", NXOpen::NXString::UTF8), contents);
				viewStyleFPCalloutConfigBuilder->SetContents(NXOpen::NXString(viewStyleFPCalloutsType.GetLocaleText(), NXOpen::NXString::UTF8), contents);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This field defines the content for Custom Callout 7.
	id_name.assign("NXCustomCallout_FlatPatternView_7_Content");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			//NXOpen::Drawings::ViewStyleFPCalloutsBuilder *viewStyleFPCalloutsBuilder;
			vector<NXOpen::Drawings::ViewStyleFPCalloutsBuilder *> viewStyleFPCallouts;
			viewStyleFPCallouts = _preferencesBuilder->ViewStyle()->GetAllViewStyleFPCallouts();
			NXOpen::NXString viewStyleFPCalloutsType;
			viewStyleFPCalloutsType = viewStyleFPCallouts[6]->Type();
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("NXCustomCallout_FlatPatternView_7_Content - viewStyleFPCalloutsType=\"%s\" \n", viewStyleFPCalloutsType.GetLocaleText());
			NXOpen::Drawings::ViewStyleFPCalloutConfigBuilder *viewStyleFPCalloutConfigBuilder;
			viewStyleFPCalloutConfigBuilder = _preferencesBuilder->ViewStyle()->GetViewStyleFPCalloutConfig();
			std::vector<NXOpen::NXString> contents(1);
			//viewStyleFPCalloutConfigBuilder->SetContents(NXOpen::NXString("FlatPatternView.Bend Radius_|_LEhAeRCkOV\177IMERmbYRdN`", NXOpen::NXString::UTF8), contents);
			contents = viewStyleFPCalloutConfigBuilder->GetContents(NXOpen::NXString(viewStyleFPCalloutsType.GetLocaleText()));
			string string_contents;
			string_contents = retrieveXml(string(contents[0].GetLocaleText()));
			ist_id_value.assign(string_contents.c_str());
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				string_contents.assign(soll_id_value);
				contents[0] = string_contents;
				//viewStyleFPCalloutConfigBuilder->SetContents(NXOpen::NXString("FlatPatternView.Bend Radius_|_LEhAeRCkOV\177IMERmbYRdN`", NXOpen::NXString::UTF8), contents);
				viewStyleFPCalloutConfigBuilder->SetContents(NXOpen::NXString(viewStyleFPCalloutsType.GetLocaleText(), NXOpen::NXString::UTF8), contents);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This field defines the content for Custom Callout 8.
	id_name.assign("NXCustomCallout_FlatPatternView_8_Content");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			//NXOpen::Drawings::ViewStyleFPCalloutsBuilder *viewStyleFPCalloutsBuilder;
			vector<NXOpen::Drawings::ViewStyleFPCalloutsBuilder *> viewStyleFPCallouts;
			viewStyleFPCallouts = _preferencesBuilder->ViewStyle()->GetAllViewStyleFPCallouts();
			NXOpen::NXString viewStyleFPCalloutsType;
			viewStyleFPCalloutsType = viewStyleFPCallouts[7]->Type();
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("NXCustomCallout_FlatPatternView_8_Content - viewStyleFPCalloutsType=\"%s\" \n", viewStyleFPCalloutsType.GetLocaleText());
			NXOpen::Drawings::ViewStyleFPCalloutConfigBuilder *viewStyleFPCalloutConfigBuilder;
			viewStyleFPCalloutConfigBuilder = _preferencesBuilder->ViewStyle()->GetViewStyleFPCalloutConfig();
			std::vector<NXOpen::NXString> contents(1);
			//viewStyleFPCalloutConfigBuilder->SetContents(NXOpen::NXString("FlatPatternView.Bend Radius_|_LEhAeRCkOV\177IMERmbYRdN`", NXOpen::NXString::UTF8), contents);
			contents = viewStyleFPCalloutConfigBuilder->GetContents(NXOpen::NXString(viewStyleFPCalloutsType.GetLocaleText()));
			string string_contents;
			string_contents = retrieveXml(string(contents[0].GetLocaleText()));
			ist_id_value.assign(string_contents.c_str());
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				string_contents.assign(soll_id_value);
				contents[0] = string_contents;
				//viewStyleFPCalloutConfigBuilder->SetContents(NXOpen::NXString("FlatPatternView.Bend Radius_|_LEhAeRCkOV\177IMERmbYRdN`", NXOpen::NXString::UTF8), contents);
				viewStyleFPCalloutConfigBuilder->SetContents(NXOpen::NXString(viewStyleFPCalloutsType.GetLocaleText(), NXOpen::NXString::UTF8), contents);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- STOPP - %s --- \n", routineName.c_str());
}

/*
File - Utilities - Customer Defaults - Drafting - Drawing Compare - Report General -> Repair these preferences.
*/
void repair_site_Drafting_DrawingCompare_ReportGeneral_prefs(NXOpen::Drafting::PreferencesBuilder *_preferencesBuilder, en_nx_dpv* _nx_dpv, Session * _theSession, Part* _workPart) {
	routineName.assign("repair_site_Drafting_DrawingCompare_ReportGeneral_prefs");
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- START - %s --- \n", routineName.c_str());

	//This option determines the compare method to use for tracking drawing changes.
	//Another Drawing / Revision: Compares the current drawing to another drawing file or drawing revision.
	//Active Drawing Snapshot Data : Compares the current drawing file to snapshot data within the same drawing file.
	//Open Saved Comparison Report : Opens a comparison report that is saved in the current drawing file.
	id_name.assign("Drawing_Compare_Method");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::TrackDrawingChangesGeneralBuilder::CompareMethodType comp_method_type;
			comp_method_type = _preferencesBuilder->TrackDrawingChangesGeneral()->CompareMethod();
			int comp_method_result;
			if (comp_method_type == NXOpen::Drawings::TrackDrawingChangesGeneralBuilder::CompareMethodTypeAgainstAnotherDrawing) {
				comp_method_result = 0;
			}
			else if (comp_method_type == NXOpen::Drawings::TrackDrawingChangesGeneralBuilder::CompareMethodTypeAgainstSnapshotDataInActiveDrawing) {
				comp_method_result = 1;
			}
			else if (comp_method_type == NXOpen::Drawings::TrackDrawingChangesGeneralBuilder::CompareMethodTypeOpenSavedComparisonReport) {
				comp_method_result = 2;
			}
			else {
				comp_method_result = -999;
			}
			//comp_method_result = (int)comp_method_type;
			ist_id_value.assign((convert_to_string(comp_method_result)));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				comp_method_result = convert_to_int(soll_id_value);
				comp_method_type = (NXOpen::Drawings::TrackDrawingChangesGeneralBuilder::CompareMethodType)comp_method_result;
				_preferencesBuilder->TrackDrawingChangesGeneral()->SetCompareMethod(comp_method_type);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines the baseline to use when comparing against snapshot data.
	//Previously Created in Part : Compares the current drawing file to snapshot data previously saved in the drawing file.
	//Temporarily Created at Last Report : Compares the current drawing file to snapshot data temporarily created in the 
	//drawing file at the last comparison report execution.
	id_name.assign("Drawing_Compare_Baseline");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::TrackDrawingChangesGeneralBuilder::BaselineOfComparisonType baselineOfComparison;
			baselineOfComparison = _preferencesBuilder->TrackDrawingChangesGeneral()->BaselineOfComparison();
			int comp_method_result;
			if (baselineOfComparison == NXOpen::Drawings::TrackDrawingChangesGeneralBuilder::BaselineOfComparisonTypeSnapshot) {
				comp_method_result = 0;
			}
			else if (baselineOfComparison == NXOpen::Drawings::TrackDrawingChangesGeneralBuilder::BaselineOfComparisonTypeTrackedChanges) {
				comp_method_result = 1;
			}
			else {
				comp_method_result = -999;
			}
			//comp_method_result = (int)comp_method_type;
			ist_id_value.assign((convert_to_string(comp_method_result)));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				comp_method_result = convert_to_int(soll_id_value);
				baselineOfComparison = (NXOpen::Drawings::TrackDrawingChangesGeneralBuilder::BaselineOfComparisonType)comp_method_result;
				_preferencesBuilder->TrackDrawingChangesGeneral()->SetBaselineOfComparison(baselineOfComparison);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}
	
	//This tolerance is used when comparing decimal numbers in the drawing comparison report. 
	//If the difference between the decimal numbers is greater than the compare tolerance, 
	//that number will be reported as a change.
	if (_nx_dpv->usedUnitValue.compare("1") == 0) {
		id_name.assign("Drawing_Compare_Tolerance_MU");
	}
	else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
		id_name.assign("Drawing_Compare_Tolerance_EU");
	}
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double compareTolerance;
			compareTolerance = _preferencesBuilder->TrackDrawingChangesGeneral()->CompareTolerance();
			ist_id_value.assign((convert_to_string(compareTolerance)));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				compareTolerance = convert_to_double(soll_id_value);
				_preferencesBuilder->TrackDrawingChangesGeneral()->SetCompareTolerance(compareTolerance);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not to restart the ID number at 1 when a new Execute Drawing Comparison Report is run. 
	//ID numbers will not be reused between new reports if this option is turned off.
	id_name.assign("Drawing_Compare_Restart_ReportId");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			bool restartIDNumbersWithNewReport;
			restartIDNumbersWithNewReport = _preferencesBuilder->TrackDrawingChangesGeneral()->RestartIDNumbersWithNewReport();
			ist_id_value.assign((convert_to_string(restartIDNumbersWithNewReport)));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				restartIDNumbersWithNewReport = convert_to_bool(soll_id_value);
				_preferencesBuilder->TrackDrawingChangesGeneral()->SetRestartIDNumbersWithNewReport(restartIDNumbersWithNewReport);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether the same revision ID number will be given for all changed objects 
	//that appear in the Comparison Report and in the change symbols. When this check box is turned off, 
	//then each changed object in the comparison report will have a unique ID number.
	id_name.assign("Drawing_Compare_Increment_ReportId");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			bool incrementIDNumberPerReport;
			incrementIDNumberPerReport = _preferencesBuilder->TrackDrawingChangesGeneral()->IncrementIDNumberPerReport();
			ist_id_value.assign((convert_to_string(incrementIDNumberPerReport)));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				incrementIDNumberPerReport = convert_to_bool(soll_id_value);
				_preferencesBuilder->TrackDrawingChangesGeneral()->SetRestartIDNumbersWithNewReport(incrementIDNumberPerReport);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not Overlay data used in the Visual Overlay command is created when Snapshot Data is created.
	id_name.assign("Drawing_Comapre_Create_Overlay_Data");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			bool createOverlayDataWithSnapshotData;
			createOverlayDataWithSnapshotData = _preferencesBuilder->TrackDrawingChangesGeneral()->CreateOverlayDataWithSnapshotData();
			ist_id_value.assign((convert_to_string(createOverlayDataWithSnapshotData)));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				createOverlayDataWithSnapshotData = convert_to_bool(soll_id_value);
				_preferencesBuilder->TrackDrawingChangesGeneral()->SetCreateOverlayDataWithSnapshotData(createOverlayDataWithSnapshotData);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines which snapshot data will be used when the comparison command is invoked.
	//Ask at Runtime : Prompts whether to use existing snapshot data or to create new snapshot data.
	//Always Use Existing Data : Always uses existing snapshot data.
	//Always Create New Data : Always creates new snapshot data regardless of existing data or not.
	//Create New Data if None Exists : Creates new snapshot data if none exists.
	id_name.assign("Drawing_SnapshotData_To_Use");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::TrackDrawingChangesGeneralBuilder::SnapshotDataToUseType snapshotDataToUseType;
			int int_snapshotDataToUseType;
			snapshotDataToUseType = _preferencesBuilder->TrackDrawingChangesGeneral()->SnapshotDataToUse();
			int_snapshotDataToUseType = (int)snapshotDataToUseType;
			ist_id_value.assign((convert_to_string(int_snapshotDataToUseType)));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_snapshotDataToUseType = convert_to_int(soll_id_value);
				snapshotDataToUseType = (NXOpen::Drawings::TrackDrawingChangesGeneralBuilder::SnapshotDataToUseType)int_snapshotDataToUseType;
				_preferencesBuilder->TrackDrawingChangesGeneral()->SetSnapshotDataToUse(snapshotDataToUseType);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not to display change symbols in the graphics 
	//window that corresponds to the number in the Drawing Comparison Report.
	id_name.assign("Drawing_Compare_Disp_CS");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			bool displayChangeSymbol;
			displayChangeSymbol = _preferencesBuilder->TrackDrawingChangesGeneral()->DisplayChangeSymbol();
			ist_id_value.assign((convert_to_string(displayChangeSymbol)));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				displayChangeSymbol = convert_to_bool(soll_id_value);
				_preferencesBuilder->TrackDrawingChangesGeneral()->SetDisplayChangeSymbol(displayChangeSymbol);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether to apply a preserve display status when a change symbol is created. 
	//The preserve display status determines whether a change symbol display will be maintained after running a new Drawing Comparison Report.
	id_name.assign("Drawing_Compare_Preserve_CS_Disp");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			bool preserveChangeSymbolDisplay;
			preserveChangeSymbolDisplay = _preferencesBuilder->TrackDrawingChangesGeneral()->PreserveChangeSymbolDisplay();
			ist_id_value.assign((convert_to_string(preserveChangeSymbolDisplay)));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				preserveChangeSymbolDisplay = convert_to_bool(soll_id_value);
				_preferencesBuilder->TrackDrawingChangesGeneral()->SetPreserveChangeSymbolDisplay(preserveChangeSymbolDisplay);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the type of symbol to use for the change symbol.
	id_name.assign("Drawing_Compare_CS_Type");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::TrackDrawingChangesGeneralBuilder::SymbolType symbolType;
			symbolType = _preferencesBuilder->TrackDrawingChangesGeneral()->ChangeSymbolType();
			int int_symbolType;
			int_symbolType = (int)symbolType;
			ist_id_value.assign((convert_to_string(int_symbolType)));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_symbolType = convert_to_int(soll_id_value);
				symbolType = (NXOpen::Drawings::TrackDrawingChangesGeneralBuilder::SymbolType)int_symbolType;
				_preferencesBuilder->TrackDrawingChangesGeneral()->SetChangeSymbolType(symbolType);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the size of the change symbol.
	if (_nx_dpv->usedUnitValue.compare("1") == 0) {
		id_name.assign("Drawing_Compare_CS_Size_MU");
	}
	else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
		id_name.assign("Drawing_Compare_CS_Size_EU");
	}
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double symbolSize;
			symbolSize = _preferencesBuilder->TrackDrawingChangesGeneral()->ChangeSymbolSize();
			ist_id_value.assign((convert_to_string(symbolSize)));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				symbolSize = convert_to_double(soll_id_value);
				_preferencesBuilder->TrackDrawingChangesGeneral()->SetChangeSymbolSize(symbolSize);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the color of the change symbol.
	id_name.assign("Drawing_Compare_CS_Color");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::LineColorFontWidthBuilder *lineColorFontWidthBuilder;
			lineColorFontWidthBuilder = _preferencesBuilder->TrackDrawingChangesGeneral()->ChangeSymbolLineColorFontWidth();
			int ColorIndex;
			ColorIndex=lineColorFontWidthBuilder->LineColor()->Handle();
			ist_id_value.assign((convert_to_string(ColorIndex)));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				ColorIndex = convert_to_int(soll_id_value);
				NXOpen::NXColor *color;
				color = _workPart->Colors()->Find(ColorIndex);
				lineColorFontWidthBuilder->SetLineColor(color);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the line font for the change symbol.
	id_name.assign("Drawing_Compare_CS_Font");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::LineColorFontWidthBuilder *lineColorFontWidthBuilder;
			lineColorFontWidthBuilder = _preferencesBuilder->TrackDrawingChangesGeneral()->ChangeSymbolLineColorFontWidth();
			NXOpen::LineFontBuilder * lineFont;
			lineFont = lineColorFontWidthBuilder->LineFont();
			NXOpen::LineFontBuilder::LineFontType lineFontType;
			lineFontType = lineFont->LineFont();
			int int_lineFontType;
			int_lineFontType = (int)lineFontType;
			if (lineFontType == NXOpen::LineFontBuilder::LineFontTypeNoChange) {
				int_lineFontType = -2;
			}
			else if (lineFontType == NXOpen::LineFontBuilder::LineFontTypeOriginal) {
				int_lineFontType = 0;
			}
			else if (lineFontType == NXOpen::LineFontBuilder::LineFontTypeInvisible) {
				int_lineFontType = -1;
			}
			else if (lineFontType == NXOpen::LineFontBuilder::LineFontTypeSolid) {
				int_lineFontType = 1;
			}
			else if (lineFontType == NXOpen::LineFontBuilder::LineFontTypeDashed) {
				int_lineFontType = 2;
			}
			else if (lineFontType == NXOpen::LineFontBuilder::LineFontTypePhantom) {
				int_lineFontType = 3;
			}
			else if (lineFontType == NXOpen::LineFontBuilder::LineFontTypeCenterline) {
				int_lineFontType = 4;
			}
			else if (lineFontType == NXOpen::LineFontBuilder::LineFontTypeDotted) {
				int_lineFontType = 5;
			}
			else if (lineFontType == NXOpen::LineFontBuilder::LineFontTypeLongDashed) {
				int_lineFontType = 6;
			}
			else if (lineFontType == NXOpen::LineFontBuilder::LineFontTypeDottedDashed) {
				int_lineFontType = 7;
			}
			ist_id_value.assign((convert_to_string(int_lineFontType)));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_lineFontType = convert_to_int(soll_id_value);
				if (int_lineFontType == -2) {
					lineFontType = NXOpen::LineFontBuilder::LineFontTypeNoChange;
				}
				else if (int_lineFontType == 0) {
					lineFontType = NXOpen::LineFontBuilder::LineFontTypeOriginal;
				}
				else if (int_lineFontType == -1) {
					lineFontType = NXOpen::LineFontBuilder::LineFontTypeInvisible;
				}
				else if (int_lineFontType == 1) {
					lineFontType = NXOpen::LineFontBuilder::LineFontTypeSolid;
				}
				else if (int_lineFontType == 2) {
					lineFontType = NXOpen::LineFontBuilder::LineFontTypeDashed;
				}
				else if (int_lineFontType == 3) {
					lineFontType = NXOpen::LineFontBuilder::LineFontTypePhantom;
				}
				else if (int_lineFontType == 4) {
					lineFontType = NXOpen::LineFontBuilder::LineFontTypeCenterline;
				}
				else if (int_lineFontType == 5) {
					lineFontType = NXOpen::LineFontBuilder::LineFontTypeDotted;
				}
				else if (int_lineFontType == 6) {
					lineFontType = NXOpen::LineFontBuilder::LineFontTypeLongDashed;
				}
				else if (int_lineFontType == 7) {
					lineFontType = NXOpen::LineFontBuilder::LineFontTypeDottedDashed;
				}
				lineFont->SetLineFont(lineFontType);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the line width for the change symbol.
	id_name.assign("Drawing_Compare_CS_Width");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::DisplayableObject::ObjectWidth compareCSWidth;
			compareCSWidth = _preferencesBuilder->TrackDrawingChangesGeneral()->ChangeSymbolLineColorFontWidth()->LineWidth();
			int int_compareCSWidth;
			if (compareCSWidth == NXOpen::DisplayableObject::ObjectWidthNormal) {
				int_compareCSWidth = 0;
			}
			else if (compareCSWidth == NXOpen::DisplayableObject::ObjectWidthThick) {
				int_compareCSWidth = 1;
			}
			else if (compareCSWidth == NXOpen::DisplayableObject::ObjectWidthThin) {
				int_compareCSWidth = 2;
			}
			else if (compareCSWidth == NXOpen::DisplayableObject::ObjectWidthOne) {
				int_compareCSWidth = 5;
			}
			else if (compareCSWidth == NXOpen::DisplayableObject::ObjectWidthTwo) {
				int_compareCSWidth = 6;
			}
			else if (compareCSWidth == NXOpen::DisplayableObject::ObjectWidthThree) {
				int_compareCSWidth = 7;
			}
			else if (compareCSWidth == NXOpen::DisplayableObject::ObjectWidthFour) {
				int_compareCSWidth = 8;
			}
			else if (compareCSWidth == NXOpen::DisplayableObject::ObjectWidthFive) {
				int_compareCSWidth = 9;
			}
			else if (compareCSWidth == NXOpen::DisplayableObject::ObjectWidthSix) {
				int_compareCSWidth = 10;
			}
			else if (compareCSWidth == NXOpen::DisplayableObject::ObjectWidthSeven) {
				int_compareCSWidth = 11;
			}
			else if (compareCSWidth == NXOpen::DisplayableObject::ObjectWidthEight) {
				int_compareCSWidth = 12;
			}
			else if (compareCSWidth == NXOpen::DisplayableObject::ObjectWidthNine) {
				int_compareCSWidth = 13;
			}
			else {
				int_compareCSWidth = -999;
			}
			string id_name_tmp;
			std::map<const std::string, std::string>::iterator it_tmp;
			if (int_compareCSWidth == 0) {
				id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
				it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				int_compareCSWidth = convert_to_int(it_tmp->second);
			}
			if (int_compareCSWidth == 1) {
				id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
				it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				int_compareCSWidth = convert_to_int(it_tmp->second);
			}
			if (int_compareCSWidth == 2) {
				id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
				it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				int_compareCSWidth = convert_to_int(it_tmp->second);
			}
			//_nx_dpv->soll_dpv_map.find(id_name)->second = convert_to_string(int_compareCSWidth);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - Drawing_Compare_CS_Width - int_compareCSWidth=%d \n", routineName.c_str(), int_compareCSWidth);
			ist_id_value.assign((convert_to_string(int_compareCSWidth)));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_compareCSWidth = convert_to_int(soll_id_value);
				if (int_compareCSWidth == 0) {
					//compareCSWidth = NXOpen::DisplayableObject::ObjectWidthNormal;
					id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
					it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					compareCSWidth = (NXOpen::DisplayableObject::ObjectWidth) convert_to_int(it_tmp->second);
				}
				else if (int_compareCSWidth == 1) {
					//compareCSWidth = NXOpen::DisplayableObject::ObjectWidthThick;
					id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
					it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					compareCSWidth = (NXOpen::DisplayableObject::ObjectWidth) convert_to_int(it_tmp->second);
				}
				else if (int_compareCSWidth == 2) {
					//compareCSWidth = NXOpen::DisplayableObject::ObjectWidthThin;
					id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
					it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					compareCSWidth = (NXOpen::DisplayableObject::ObjectWidth) convert_to_int(it_tmp->second);
				}
				else if (int_compareCSWidth == 5) {
					compareCSWidth = NXOpen::DisplayableObject::ObjectWidthOne;
				}
				else if (int_compareCSWidth == 6) {
					compareCSWidth = NXOpen::DisplayableObject::ObjectWidthTwo;
				}
				else if (int_compareCSWidth == 7) {
					compareCSWidth = NXOpen::DisplayableObject::ObjectWidthThree;
				}
				else if (int_compareCSWidth == 8) {
					compareCSWidth = NXOpen::DisplayableObject::ObjectWidthFour;
				}
				else if (int_compareCSWidth == 9) {
					compareCSWidth = NXOpen::DisplayableObject::ObjectWidthFive;
				}
				else if (int_compareCSWidth == 10) {
					compareCSWidth = NXOpen::DisplayableObject::ObjectWidthSix;
				}
				else if (int_compareCSWidth == 11) {
					compareCSWidth = NXOpen::DisplayableObject::ObjectWidthSeven;
				}
				else if (int_compareCSWidth == 12) {
					compareCSWidth = NXOpen::DisplayableObject::ObjectWidthEight;
				}
				else if (int_compareCSWidth == 13) {
					compareCSWidth = NXOpen::DisplayableObject::ObjectWidthNine;
				}
				_preferencesBuilder->TrackDrawingChangesGeneral()->ChangeSymbolLineColorFontWidth()->SetLineWidth(compareCSWidth);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- STOPP - %s --- \n", routineName.c_str());
}

/*
File - Utilities - Customer Defaults - Drafting - Drawing Compare - Report Filter -> Repair these preferences.
*/
void repair_site_Drafting_DrawingCompare_ReportFilter_prefs(NXOpen::Drafting::PreferencesBuilder *_preferencesBuilder, en_nx_dpv* _nx_dpv, Session * _theSession, Part* _workPart) {
	routineName.assign("repair_site_Drafting_DrawingCompare_ReportFilter_prefs");
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- START - %s --- \n", routineName.c_str());

	//This option determines whether or not the Drawing Comparison Report will include comparison information for sheets.
	id_name.assign("Drawing_Compare_Sheet_Toggle");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::TrackDrawingChangesReportFilterBuilder * trackDrawingChangesReportFilterBuilder;
			trackDrawingChangesReportFilterBuilder=_preferencesBuilder->TrackDrawingChangesReportFilter();
			NXOpen::Drawings::TrackDrawingChangesReportFilterBuilder::Filter filter;
			filter = _preferencesBuilder->TrackDrawingChangesReportFilter()->FilterSheets;
			bool reportFilterStatus;
			reportFilterStatus=trackDrawingChangesReportFilterBuilder->GetReportFilterStatus(filter);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - %s = %s \n", routineName.c_str(), id_name.c_str(), (reportFilterStatus ? "true" : "false"));
			ist_id_value.assign((convert_to_string(reportFilterStatus)));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				reportFilterStatus = convert_to_bool(soll_id_value);
				trackDrawingChangesReportFilterBuilder->SetReportFilterStatus(filter, reportFilterStatus);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not the Drawing Comparison Report will include comparison information for views.
	id_name.assign("Drawing_Compare_View_Toggle");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::TrackDrawingChangesReportFilterBuilder * trackDrawingChangesReportFilterBuilder;
			trackDrawingChangesReportFilterBuilder = _preferencesBuilder->TrackDrawingChangesReportFilter();
			NXOpen::Drawings::TrackDrawingChangesReportFilterBuilder::Filter filter;
			filter = _preferencesBuilder->TrackDrawingChangesReportFilter()->FilterViews;
			bool reportFilterStatus;
			reportFilterStatus = trackDrawingChangesReportFilterBuilder->GetReportFilterStatus(filter);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - %s = %s \n", routineName.c_str(), id_name.c_str(), (reportFilterStatus ? "true" : "false"));
			ist_id_value.assign((convert_to_string(reportFilterStatus)));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				reportFilterStatus = convert_to_bool(soll_id_value);
				trackDrawingChangesReportFilterBuilder->SetReportFilterStatus(filter, reportFilterStatus);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not the Drawing Comparison Report will include all comparison information for dimensions.
	id_name.assign("Drawing_Compare_Dim_Toggle");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::TrackDrawingChangesReportFilterBuilder * trackDrawingChangesReportFilterBuilder;
			trackDrawingChangesReportFilterBuilder = _preferencesBuilder->TrackDrawingChangesReportFilter();
			NXOpen::Drawings::TrackDrawingChangesReportFilterBuilder::Filter filter;
			filter = _preferencesBuilder->TrackDrawingChangesReportFilter()->FilterDimensionsAll;
			bool reportFilterStatus;
			reportFilterStatus = trackDrawingChangesReportFilterBuilder->GetReportFilterStatus(filter);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - %s = %s \n", routineName.c_str(), id_name.c_str(), (reportFilterStatus ? "true" : "false"));
			ist_id_value.assign((convert_to_string(reportFilterStatus)));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				reportFilterStatus = convert_to_bool(soll_id_value);
				trackDrawingChangesReportFilterBuilder->SetReportFilterStatus(filter, reportFilterStatus);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not the Drawing Comparison Report will include retained status 
	//information for dimensions. The Dimension All option supersedes this option.
	id_name.assign("Drawing_Compare_Dim_Retained_Toggle");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::TrackDrawingChangesReportFilterBuilder * trackDrawingChangesReportFilterBuilder;
			trackDrawingChangesReportFilterBuilder = _preferencesBuilder->TrackDrawingChangesReportFilter();
			NXOpen::Drawings::TrackDrawingChangesReportFilterBuilder::Filter filter;
			filter = _preferencesBuilder->TrackDrawingChangesReportFilter()->FilterDimensionsRetainedStatus;
			bool reportFilterStatus;
			reportFilterStatus = trackDrawingChangesReportFilterBuilder->GetReportFilterStatus(filter);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - %s = %s \n", routineName.c_str(), id_name.c_str(), (reportFilterStatus ? "true" : "false"));
			ist_id_value.assign((convert_to_string(reportFilterStatus)));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				reportFilterStatus = convert_to_bool(soll_id_value);
				trackDrawingChangesReportFilterBuilder->SetReportFilterStatus(filter, reportFilterStatus);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not the Drawing Comparison Report will include size information 
	//for dimensions. The Dimension All option supersedes this option.
	id_name.assign("Drawing_Compare_Dim_Size");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::TrackDrawingChangesReportFilterBuilder * trackDrawingChangesReportFilterBuilder;
			trackDrawingChangesReportFilterBuilder = _preferencesBuilder->TrackDrawingChangesReportFilter();
			NXOpen::Drawings::TrackDrawingChangesReportFilterBuilder::Filter filter;
			filter = _preferencesBuilder->TrackDrawingChangesReportFilter()->FilterDimensionsSize;
			bool reportFilterStatus;
			reportFilterStatus = trackDrawingChangesReportFilterBuilder->GetReportFilterStatus(filter);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - %s = %s \n", routineName.c_str(), id_name.c_str(), (reportFilterStatus ? "true" : "false"));
			ist_id_value.assign((convert_to_string(reportFilterStatus)));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				reportFilterStatus = convert_to_bool(soll_id_value);
				trackDrawingChangesReportFilterBuilder->SetReportFilterStatus(filter, reportFilterStatus);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not the Drawing Comparison Report will include origin 
	//information for dimensions. The Dimension All option supersedes this option.
	id_name.assign("Drawing_Compare_Dim_Origin");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::TrackDrawingChangesReportFilterBuilder * trackDrawingChangesReportFilterBuilder;
			trackDrawingChangesReportFilterBuilder = _preferencesBuilder->TrackDrawingChangesReportFilter();
			NXOpen::Drawings::TrackDrawingChangesReportFilterBuilder::Filter filter;
			filter = _preferencesBuilder->TrackDrawingChangesReportFilter()->FilterDimensionsOrigin;
			bool reportFilterStatus;
			reportFilterStatus = trackDrawingChangesReportFilterBuilder->GetReportFilterStatus(filter);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - %s = %s \n", routineName.c_str(), id_name.c_str(), (reportFilterStatus ? "true" : "false"));
			ist_id_value.assign((convert_to_string(reportFilterStatus)));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				reportFilterStatus = convert_to_bool(soll_id_value);
				trackDrawingChangesReportFilterBuilder->SetReportFilterStatus(filter, reportFilterStatus);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not the Drawing Comparison Report will include all comparison information for notes.
	id_name.assign("Drawing_Compare_Notes_Toggle");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::TrackDrawingChangesReportFilterBuilder * trackDrawingChangesReportFilterBuilder;
			trackDrawingChangesReportFilterBuilder = _preferencesBuilder->TrackDrawingChangesReportFilter();
			NXOpen::Drawings::TrackDrawingChangesReportFilterBuilder::Filter filter;
			filter = _preferencesBuilder->TrackDrawingChangesReportFilter()->FilterAnnotationNotes;
			bool reportFilterStatus;
			reportFilterStatus = trackDrawingChangesReportFilterBuilder->GetReportFilterStatus(filter);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - %s = %s \n", routineName.c_str(), id_name.c_str(), (reportFilterStatus ? "true" : "false"));
			ist_id_value.assign((convert_to_string(reportFilterStatus)));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				reportFilterStatus = convert_to_bool(soll_id_value);
				trackDrawingChangesReportFilterBuilder->SetReportFilterStatus(filter, reportFilterStatus);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not the Drawing Comparison Report will include 
	//retained status information for notes. The Notes All option supersedes this option.
	id_name.assign("Drawing_Compare_Notes_Retained_Toggle");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::TrackDrawingChangesReportFilterBuilder * trackDrawingChangesReportFilterBuilder;
			trackDrawingChangesReportFilterBuilder = _preferencesBuilder->TrackDrawingChangesReportFilter();
			NXOpen::Drawings::TrackDrawingChangesReportFilterBuilder::Filter filter;
			filter = _preferencesBuilder->TrackDrawingChangesReportFilter()->FilterAnnotationNotesRetainedStatus;
			bool reportFilterStatus;
			reportFilterStatus = trackDrawingChangesReportFilterBuilder->GetReportFilterStatus(filter);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - %s = %s \n", routineName.c_str(), id_name.c_str(), (reportFilterStatus ? "true" : "false"));
			ist_id_value.assign((convert_to_string(reportFilterStatus)));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				reportFilterStatus = convert_to_bool(soll_id_value);
				trackDrawingChangesReportFilterBuilder->SetReportFilterStatus(filter, reportFilterStatus);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not the Drawing Comparison Report will 
	//include text information for notes. The Notes All option supersedes this option.
	id_name.assign("Drawing_Compare_Notes_Text");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::TrackDrawingChangesReportFilterBuilder * trackDrawingChangesReportFilterBuilder;
			trackDrawingChangesReportFilterBuilder = _preferencesBuilder->TrackDrawingChangesReportFilter();
			NXOpen::Drawings::TrackDrawingChangesReportFilterBuilder::Filter filter;
			filter = _preferencesBuilder->TrackDrawingChangesReportFilter()->FilterAnnotationNotesText;
			bool reportFilterStatus;
			reportFilterStatus = trackDrawingChangesReportFilterBuilder->GetReportFilterStatus(filter);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - %s = %s \n", routineName.c_str(), id_name.c_str(), (reportFilterStatus ? "true" : "false"));
			ist_id_value.assign((convert_to_string(reportFilterStatus)));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				reportFilterStatus = convert_to_bool(soll_id_value);
				trackDrawingChangesReportFilterBuilder->SetReportFilterStatus(filter, reportFilterStatus);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not the Drawing Comparison Report will include 
	//origin information for notes. The Notes All option supersedes this option.
	id_name.assign("Drawing_Compare_Notes_Origin");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::TrackDrawingChangesReportFilterBuilder * trackDrawingChangesReportFilterBuilder;
			trackDrawingChangesReportFilterBuilder = _preferencesBuilder->TrackDrawingChangesReportFilter();
			NXOpen::Drawings::TrackDrawingChangesReportFilterBuilder::Filter filter;
			filter = _preferencesBuilder->TrackDrawingChangesReportFilter()->FilterAnnotationNotesOrigin;
			bool reportFilterStatus;
			reportFilterStatus = trackDrawingChangesReportFilterBuilder->GetReportFilterStatus(filter);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - %s = %s \n", routineName.c_str(), id_name.c_str(), (reportFilterStatus ? "true" : "false"));
			ist_id_value.assign((convert_to_string(reportFilterStatus)));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				reportFilterStatus = convert_to_bool(soll_id_value);
				trackDrawingChangesReportFilterBuilder->SetReportFilterStatus(filter, reportFilterStatus);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not the Drawing Comparison Report will include 
	//leader terminator information for notes. The Notes All option supersedes this option.
	id_name.assign("Drawing_Compare_Notes_LeaderTerminator");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::TrackDrawingChangesReportFilterBuilder * trackDrawingChangesReportFilterBuilder;
			trackDrawingChangesReportFilterBuilder = _preferencesBuilder->TrackDrawingChangesReportFilter();
			NXOpen::Drawings::TrackDrawingChangesReportFilterBuilder::Filter filter;
			filter = _preferencesBuilder->TrackDrawingChangesReportFilter()->FilterAnnotationNotesLeaderTerminator;
			bool reportFilterStatus;
			reportFilterStatus = trackDrawingChangesReportFilterBuilder->GetReportFilterStatus(filter);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - %s = %s \n", routineName.c_str(), id_name.c_str(), (reportFilterStatus ? "true" : "false"));
			ist_id_value.assign((convert_to_string(reportFilterStatus)));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				reportFilterStatus = convert_to_bool(soll_id_value);
				trackDrawingChangesReportFilterBuilder->SetReportFilterStatus(filter, reportFilterStatus);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not the Drawing Comparison Report will include 
	//all comparison information for feature control frames.
	id_name.assign("Drawing_Compare_FCF_Toggle");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::TrackDrawingChangesReportFilterBuilder * trackDrawingChangesReportFilterBuilder;
			trackDrawingChangesReportFilterBuilder = _preferencesBuilder->TrackDrawingChangesReportFilter();
			NXOpen::Drawings::TrackDrawingChangesReportFilterBuilder::Filter filter;
			filter = _preferencesBuilder->TrackDrawingChangesReportFilter()->FilterAnnotationFCF;
			bool reportFilterStatus;
			reportFilterStatus = trackDrawingChangesReportFilterBuilder->GetReportFilterStatus(filter);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - %s = %s \n", routineName.c_str(), id_name.c_str(), (reportFilterStatus ? "true" : "false"));
			ist_id_value.assign((convert_to_string(reportFilterStatus)));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				reportFilterStatus = convert_to_bool(soll_id_value);
				trackDrawingChangesReportFilterBuilder->SetReportFilterStatus(filter, reportFilterStatus);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not the Drawing Comparison Report will include retained status information 
	//for feature control frames. The Feature Control Frames All option supersedes this option.
	id_name.assign("Drawing_Compare_FCF_Retained_Toggle");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::TrackDrawingChangesReportFilterBuilder * trackDrawingChangesReportFilterBuilder;
			trackDrawingChangesReportFilterBuilder = _preferencesBuilder->TrackDrawingChangesReportFilter();
			NXOpen::Drawings::TrackDrawingChangesReportFilterBuilder::Filter filter;
			filter = _preferencesBuilder->TrackDrawingChangesReportFilter()->FilterAnnotationFCFRetainedStatus;
			bool reportFilterStatus;
			reportFilterStatus = trackDrawingChangesReportFilterBuilder->GetReportFilterStatus(filter);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - %s = %s \n", routineName.c_str(), id_name.c_str(), (reportFilterStatus ? "true" : "false"));
			ist_id_value.assign((convert_to_string(reportFilterStatus)));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				reportFilterStatus = convert_to_bool(soll_id_value);
				trackDrawingChangesReportFilterBuilder->SetReportFilterStatus(filter, reportFilterStatus);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}
	//This option determines whether or not the Drawing Comparison Report will include text information 
	//for feature control frames. The Feature Control Frames All option supersedes this option.
	id_name.assign("Drawing_Compare_FCF_Text");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::TrackDrawingChangesReportFilterBuilder * trackDrawingChangesReportFilterBuilder;
			trackDrawingChangesReportFilterBuilder = _preferencesBuilder->TrackDrawingChangesReportFilter();
			NXOpen::Drawings::TrackDrawingChangesReportFilterBuilder::Filter filter;
			filter = _preferencesBuilder->TrackDrawingChangesReportFilter()->FilterAnnotationFCFText;
			bool reportFilterStatus;
			reportFilterStatus = trackDrawingChangesReportFilterBuilder->GetReportFilterStatus(filter);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - %s = %s \n", routineName.c_str(), id_name.c_str(), (reportFilterStatus ? "true" : "false"));
			ist_id_value.assign((convert_to_string(reportFilterStatus)));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				reportFilterStatus = convert_to_bool(soll_id_value);
				trackDrawingChangesReportFilterBuilder->SetReportFilterStatus(filter, reportFilterStatus);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not the Drawing Comparison Report will include origin information for feature control frames. 
	//The Feature Control Frames All option supersedes this option.
	id_name.assign("Drawing_Compare_FCF_Origin");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::TrackDrawingChangesReportFilterBuilder * trackDrawingChangesReportFilterBuilder;
			trackDrawingChangesReportFilterBuilder = _preferencesBuilder->TrackDrawingChangesReportFilter();
			NXOpen::Drawings::TrackDrawingChangesReportFilterBuilder::Filter filter;
			filter = _preferencesBuilder->TrackDrawingChangesReportFilter()->FilterAnnotationFCFOrigin;
			bool reportFilterStatus;
			reportFilterStatus = trackDrawingChangesReportFilterBuilder->GetReportFilterStatus(filter);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - %s = %s \n", routineName.c_str(), id_name.c_str(), (reportFilterStatus ? "true" : "false"));
			ist_id_value.assign((convert_to_string(reportFilterStatus)));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				reportFilterStatus = convert_to_bool(soll_id_value);
				trackDrawingChangesReportFilterBuilder->SetReportFilterStatus(filter, reportFilterStatus);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not the Drawing Comparison Report will include leader terminator information 
	//for feature control frames. The Feature Control Frames All option supersedes this option.
	id_name.assign("Drawing_Compare_FCF_LeaderTerminator");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::TrackDrawingChangesReportFilterBuilder * trackDrawingChangesReportFilterBuilder;
			trackDrawingChangesReportFilterBuilder = _preferencesBuilder->TrackDrawingChangesReportFilter();
			NXOpen::Drawings::TrackDrawingChangesReportFilterBuilder::Filter filter;
			filter = _preferencesBuilder->TrackDrawingChangesReportFilter()->FilterAnnotationFCFLeaderTerminator;
			bool reportFilterStatus;
			reportFilterStatus = trackDrawingChangesReportFilterBuilder->GetReportFilterStatus(filter);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - %s = %s \n", routineName.c_str(), id_name.c_str(), (reportFilterStatus ? "true" : "false"));
			ist_id_value.assign((convert_to_string(reportFilterStatus)));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				reportFilterStatus = convert_to_bool(soll_id_value);
				trackDrawingChangesReportFilterBuilder->SetReportFilterStatus(filter, reportFilterStatus);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not the Drawing Comparison Report will include 
	//all comparison information for datum feature symbols.
	id_name.assign("Drawing_Compare_DFS_Toggle");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::TrackDrawingChangesReportFilterBuilder * trackDrawingChangesReportFilterBuilder;
			trackDrawingChangesReportFilterBuilder = _preferencesBuilder->TrackDrawingChangesReportFilter();
			NXOpen::Drawings::TrackDrawingChangesReportFilterBuilder::Filter filter;
			filter = _preferencesBuilder->TrackDrawingChangesReportFilter()->FilterAnnotationDFS;
			bool reportFilterStatus;
			reportFilterStatus = trackDrawingChangesReportFilterBuilder->GetReportFilterStatus(filter);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - %s = %s \n", routineName.c_str(), id_name.c_str(), (reportFilterStatus ? "true" : "false"));
			ist_id_value.assign((convert_to_string(reportFilterStatus)));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				reportFilterStatus = convert_to_bool(soll_id_value);
				trackDrawingChangesReportFilterBuilder->SetReportFilterStatus(filter, reportFilterStatus);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not the Drawing Comparison Report will include retained status information for datum feature symbols. 
	//The Datum Feature Symbols All option supersedes this option.
	id_name.assign("Drawing_Compare_DFS_Retained_Toggle");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::TrackDrawingChangesReportFilterBuilder * trackDrawingChangesReportFilterBuilder;
			trackDrawingChangesReportFilterBuilder = _preferencesBuilder->TrackDrawingChangesReportFilter();
			NXOpen::Drawings::TrackDrawingChangesReportFilterBuilder::Filter filter;
			filter = _preferencesBuilder->TrackDrawingChangesReportFilter()->FilterAnnotationDFSRetainedStatus;
			bool reportFilterStatus;
			reportFilterStatus = trackDrawingChangesReportFilterBuilder->GetReportFilterStatus(filter);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - %s = %s \n", routineName.c_str(), id_name.c_str(), (reportFilterStatus ? "true" : "false"));
			ist_id_value.assign((convert_to_string(reportFilterStatus)));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				reportFilterStatus = convert_to_bool(soll_id_value);
				trackDrawingChangesReportFilterBuilder->SetReportFilterStatus(filter, reportFilterStatus);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}
	//This option determines whether or not the Drawing Comparison Report will include text information 
	//for datum feature symbols. The Datum Feature Symbols All option supersedes this option.
	id_name.assign("Drawing_Compare_DFS_Text");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::TrackDrawingChangesReportFilterBuilder * trackDrawingChangesReportFilterBuilder;
			trackDrawingChangesReportFilterBuilder = _preferencesBuilder->TrackDrawingChangesReportFilter();
			NXOpen::Drawings::TrackDrawingChangesReportFilterBuilder::Filter filter;
			filter = _preferencesBuilder->TrackDrawingChangesReportFilter()->FilterAnnotationDFSText;
			bool reportFilterStatus;
			reportFilterStatus = trackDrawingChangesReportFilterBuilder->GetReportFilterStatus(filter);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - %s = %s \n", routineName.c_str(), id_name.c_str(), (reportFilterStatus ? "true" : "false"));
			ist_id_value.assign((convert_to_string(reportFilterStatus)));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				reportFilterStatus = convert_to_bool(soll_id_value);
				trackDrawingChangesReportFilterBuilder->SetReportFilterStatus(filter, reportFilterStatus);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not the Drawing Comparison Report will include origin 
	//information for datum feature symbols. The Datum Feature Symbols All option supersedes this option.
	id_name.assign("Drawing_Compare_DFS_Origin");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::TrackDrawingChangesReportFilterBuilder * trackDrawingChangesReportFilterBuilder;
			trackDrawingChangesReportFilterBuilder = _preferencesBuilder->TrackDrawingChangesReportFilter();
			NXOpen::Drawings::TrackDrawingChangesReportFilterBuilder::Filter filter;
			filter = _preferencesBuilder->TrackDrawingChangesReportFilter()->FilterAnnotationDFSOrigin;
			bool reportFilterStatus;
			reportFilterStatus = trackDrawingChangesReportFilterBuilder->GetReportFilterStatus(filter);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - %s = %s \n", routineName.c_str(), id_name.c_str(), (reportFilterStatus ? "true" : "false"));
			ist_id_value.assign((convert_to_string(reportFilterStatus)));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				reportFilterStatus = convert_to_bool(soll_id_value);
				trackDrawingChangesReportFilterBuilder->SetReportFilterStatus(filter, reportFilterStatus);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not the Drawing Comparison Report will include leader terminator 
	//information for datum feature symbols. The Datum Feature Symbols All option supersedes this option.
	id_name.assign("Drawing_Compare_DFS_LeaderTerminator");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::TrackDrawingChangesReportFilterBuilder * trackDrawingChangesReportFilterBuilder;
			trackDrawingChangesReportFilterBuilder = _preferencesBuilder->TrackDrawingChangesReportFilter();
			NXOpen::Drawings::TrackDrawingChangesReportFilterBuilder::Filter filter;
			filter = _preferencesBuilder->TrackDrawingChangesReportFilter()->FilterAnnotationDFSLeaderTerminator;
			bool reportFilterStatus;
			reportFilterStatus = trackDrawingChangesReportFilterBuilder->GetReportFilterStatus(filter);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - %s = %s \n", routineName.c_str(), id_name.c_str(), (reportFilterStatus ? "true" : "false"));
			ist_id_value.assign((convert_to_string(reportFilterStatus)));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				reportFilterStatus = convert_to_bool(soll_id_value);
				trackDrawingChangesReportFilterBuilder->SetReportFilterStatus(filter, reportFilterStatus);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not the Drawing Comparison Report will 
	//include all comparison information for datum targets symbols.
	id_name.assign("Drawing_Compare_Datum_Targets_Toggle");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::TrackDrawingChangesReportFilterBuilder * trackDrawingChangesReportFilterBuilder;
			trackDrawingChangesReportFilterBuilder = _preferencesBuilder->TrackDrawingChangesReportFilter();
			NXOpen::Drawings::TrackDrawingChangesReportFilterBuilder::Filter filter;
			filter = _preferencesBuilder->TrackDrawingChangesReportFilter()->FilterAnnotationDTS;
			bool reportFilterStatus;
			reportFilterStatus = trackDrawingChangesReportFilterBuilder->GetReportFilterStatus(filter);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - %s = %s \n", routineName.c_str(), id_name.c_str(), (reportFilterStatus ? "true" : "false"));
			ist_id_value.assign((convert_to_string(reportFilterStatus)));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				reportFilterStatus = convert_to_bool(soll_id_value);
				trackDrawingChangesReportFilterBuilder->SetReportFilterStatus(filter, reportFilterStatus);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not the Drawing Comparison Report will include retained status 
	//information for datum targets symbols. The Datum Targets Symbols All option supersedes this option.
	id_name.assign("Drawing_Compare_Datum_Targets_Retained_Toggle");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::TrackDrawingChangesReportFilterBuilder * trackDrawingChangesReportFilterBuilder;
			trackDrawingChangesReportFilterBuilder = _preferencesBuilder->TrackDrawingChangesReportFilter();
			NXOpen::Drawings::TrackDrawingChangesReportFilterBuilder::Filter filter;
			filter = _preferencesBuilder->TrackDrawingChangesReportFilter()->FilterAnnotationDTSRetainedStatus;
			bool reportFilterStatus;
			reportFilterStatus = trackDrawingChangesReportFilterBuilder->GetReportFilterStatus(filter);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - %s = %s \n", routineName.c_str(), id_name.c_str(), (reportFilterStatus ? "true" : "false"));
			ist_id_value.assign((convert_to_string(reportFilterStatus)));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				reportFilterStatus = convert_to_bool(soll_id_value);
				trackDrawingChangesReportFilterBuilder->SetReportFilterStatus(filter, reportFilterStatus);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not the Drawing Comparison Report will include text 
	//information for datum targets symbols. The Datum Targets Symbols All option supersedes this option.
	id_name.assign("Drawing_Compare_Datum_Targets_Text");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::TrackDrawingChangesReportFilterBuilder * trackDrawingChangesReportFilterBuilder;
			trackDrawingChangesReportFilterBuilder = _preferencesBuilder->TrackDrawingChangesReportFilter();
			NXOpen::Drawings::TrackDrawingChangesReportFilterBuilder::Filter filter;
			filter = _preferencesBuilder->TrackDrawingChangesReportFilter()->FilterAnnotationDTSText;
			bool reportFilterStatus;
			reportFilterStatus = trackDrawingChangesReportFilterBuilder->GetReportFilterStatus(filter);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - %s = %s \n", routineName.c_str(), id_name.c_str(), (reportFilterStatus ? "true" : "false"));
			ist_id_value.assign((convert_to_string(reportFilterStatus)));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				reportFilterStatus = convert_to_bool(soll_id_value);
				trackDrawingChangesReportFilterBuilder->SetReportFilterStatus(filter, reportFilterStatus);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not the Drawing Comparison Report will include origin 
	//information for datum targets symbols. The Datum Targets Symbols All option supersedes this option.
	id_name.assign("Drawing_Compare_Datum_Targets_Origin");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::TrackDrawingChangesReportFilterBuilder * trackDrawingChangesReportFilterBuilder;
			trackDrawingChangesReportFilterBuilder = _preferencesBuilder->TrackDrawingChangesReportFilter();
			NXOpen::Drawings::TrackDrawingChangesReportFilterBuilder::Filter filter;
			filter = _preferencesBuilder->TrackDrawingChangesReportFilter()->FilterAnnotationDTSOrigin;
			bool reportFilterStatus;
			reportFilterStatus = trackDrawingChangesReportFilterBuilder->GetReportFilterStatus(filter);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - %s = %s \n", routineName.c_str(), id_name.c_str(), (reportFilterStatus ? "true" : "false"));
			ist_id_value.assign((convert_to_string(reportFilterStatus)));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				reportFilterStatus = convert_to_bool(soll_id_value);
				trackDrawingChangesReportFilterBuilder->SetReportFilterStatus(filter, reportFilterStatus);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not the Drawing Comparison Report will include leader terminator 
	//information for datum targets symbols. The Datum Targets Symbols All option supersedes this option.
	id_name.assign("Drawing_Compare_Datum_Targets_LeaderTerminator");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::TrackDrawingChangesReportFilterBuilder * trackDrawingChangesReportFilterBuilder;
			trackDrawingChangesReportFilterBuilder = _preferencesBuilder->TrackDrawingChangesReportFilter();
			NXOpen::Drawings::TrackDrawingChangesReportFilterBuilder::Filter filter;
			filter = _preferencesBuilder->TrackDrawingChangesReportFilter()->FilterAnnotationDTSLeaderTerminator;
			bool reportFilterStatus;
			reportFilterStatus = trackDrawingChangesReportFilterBuilder->GetReportFilterStatus(filter);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - %s = %s \n", routineName.c_str(), id_name.c_str(), (reportFilterStatus ? "true" : "false"));
			ist_id_value.assign((convert_to_string(reportFilterStatus)));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				reportFilterStatus = convert_to_bool(soll_id_value);
				trackDrawingChangesReportFilterBuilder->SetReportFilterStatus(filter, reportFilterStatus);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not the Drawing Comparison Report 
	//will include all comparison information for balloons.
	id_name.assign("Drawing_Compare_Balloons_Toggle");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::TrackDrawingChangesReportFilterBuilder * trackDrawingChangesReportFilterBuilder;
			trackDrawingChangesReportFilterBuilder = _preferencesBuilder->TrackDrawingChangesReportFilter();
			NXOpen::Drawings::TrackDrawingChangesReportFilterBuilder::Filter filter;
			filter = _preferencesBuilder->TrackDrawingChangesReportFilter()->FilterAnnotationBalloons;
			bool reportFilterStatus;
			reportFilterStatus = trackDrawingChangesReportFilterBuilder->GetReportFilterStatus(filter);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - %s = %s \n", routineName.c_str(), id_name.c_str(), (reportFilterStatus ? "true" : "false"));
			ist_id_value.assign((convert_to_string(reportFilterStatus)));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				reportFilterStatus = convert_to_bool(soll_id_value);
				trackDrawingChangesReportFilterBuilder->SetReportFilterStatus(filter, reportFilterStatus);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not the Drawing Comparison Report will include 
	//retained status information for balloons. The Balloons All option supersedes this option.
	id_name.assign("Drawing_Compare_Balloons_Retained_Toggle");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::TrackDrawingChangesReportFilterBuilder * trackDrawingChangesReportFilterBuilder;
			trackDrawingChangesReportFilterBuilder = _preferencesBuilder->TrackDrawingChangesReportFilter();
			NXOpen::Drawings::TrackDrawingChangesReportFilterBuilder::Filter filter;
			filter = _preferencesBuilder->TrackDrawingChangesReportFilter()->FilterAnnotationBalloonsRetainedStatus;
			bool reportFilterStatus;
			reportFilterStatus = trackDrawingChangesReportFilterBuilder->GetReportFilterStatus(filter);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - %s = %s \n", routineName.c_str(), id_name.c_str(), (reportFilterStatus ? "true" : "false"));
			ist_id_value.assign((convert_to_string(reportFilterStatus)));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				reportFilterStatus = convert_to_bool(soll_id_value);
				trackDrawingChangesReportFilterBuilder->SetReportFilterStatus(filter, reportFilterStatus);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not the Drawing Comparison Report will 
	//include text information for balloons. The Balloons All option supersedes this option.
	id_name.assign("Drawing_Compare_Balloons_Text");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::TrackDrawingChangesReportFilterBuilder * trackDrawingChangesReportFilterBuilder;
			trackDrawingChangesReportFilterBuilder = _preferencesBuilder->TrackDrawingChangesReportFilter();
			NXOpen::Drawings::TrackDrawingChangesReportFilterBuilder::Filter filter;
			filter = _preferencesBuilder->TrackDrawingChangesReportFilter()->FilterAnnotationBalloonsText;
			bool reportFilterStatus;
			reportFilterStatus = trackDrawingChangesReportFilterBuilder->GetReportFilterStatus(filter);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - %s = %s \n", routineName.c_str(), id_name.c_str(), (reportFilterStatus ? "true" : "false"));
			ist_id_value.assign((convert_to_string(reportFilterStatus)));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				reportFilterStatus = convert_to_bool(soll_id_value);
				trackDrawingChangesReportFilterBuilder->SetReportFilterStatus(filter, reportFilterStatus);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not the Drawing Comparison Report will include 
	//origin information for balloons. The Balloons All option supersedes this option.
	id_name.assign("Drawing_Compare_Balloons_Origin");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::TrackDrawingChangesReportFilterBuilder * trackDrawingChangesReportFilterBuilder;
			trackDrawingChangesReportFilterBuilder = _preferencesBuilder->TrackDrawingChangesReportFilter();
			NXOpen::Drawings::TrackDrawingChangesReportFilterBuilder::Filter filter;
			filter = _preferencesBuilder->TrackDrawingChangesReportFilter()->FilterAnnotationBalloonsOrigin;
			bool reportFilterStatus;
			reportFilterStatus = trackDrawingChangesReportFilterBuilder->GetReportFilterStatus(filter);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - %s = %s \n", routineName.c_str(), id_name.c_str(), (reportFilterStatus ? "true" : "false"));
			ist_id_value.assign((convert_to_string(reportFilterStatus)));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				reportFilterStatus = convert_to_bool(soll_id_value);
				trackDrawingChangesReportFilterBuilder->SetReportFilterStatus(filter, reportFilterStatus);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not the Drawing Comparison Report will include leader 
	//terminator information for balloons. The Balloons All option supersedes this option.
	id_name.assign("Drawing_Compare_Balloons_LeaderTerminator");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::TrackDrawingChangesReportFilterBuilder * trackDrawingChangesReportFilterBuilder;
			trackDrawingChangesReportFilterBuilder = _preferencesBuilder->TrackDrawingChangesReportFilter();
			NXOpen::Drawings::TrackDrawingChangesReportFilterBuilder::Filter filter;
			filter = _preferencesBuilder->TrackDrawingChangesReportFilter()->FilterAnnotationBalloonsLeaderTerminator;
			bool reportFilterStatus;
			reportFilterStatus = trackDrawingChangesReportFilterBuilder->GetReportFilterStatus(filter);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - %s = %s \n", routineName.c_str(), id_name.c_str(), (reportFilterStatus ? "true" : "false"));
			ist_id_value.assign((convert_to_string(reportFilterStatus)));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				reportFilterStatus = convert_to_bool(soll_id_value);
				trackDrawingChangesReportFilterBuilder->SetReportFilterStatus(filter, reportFilterStatus);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not the Drawing Comparison Report will include 
	//all comparison information for surface finish symbols.
	id_name.assign("Drawing_Compare_SFS_Toggle");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::TrackDrawingChangesReportFilterBuilder * trackDrawingChangesReportFilterBuilder;
			trackDrawingChangesReportFilterBuilder = _preferencesBuilder->TrackDrawingChangesReportFilter();
			NXOpen::Drawings::TrackDrawingChangesReportFilterBuilder::Filter filter;
			filter = _preferencesBuilder->TrackDrawingChangesReportFilter()->FilterAnnotationSFS;
			bool reportFilterStatus;
			reportFilterStatus = trackDrawingChangesReportFilterBuilder->GetReportFilterStatus(filter);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - %s = %s \n", routineName.c_str(), id_name.c_str(), (reportFilterStatus ? "true" : "false"));
			ist_id_value.assign((convert_to_string(reportFilterStatus)));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				reportFilterStatus = convert_to_bool(soll_id_value);
				trackDrawingChangesReportFilterBuilder->SetReportFilterStatus(filter, reportFilterStatus);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not the Drawing Comparison Report will include retained status information 
	//for surface finish symbols. The Surface Finish Symbols All option supersedes this option.
	id_name.assign("Drawing_Compare_SFS_Retained_Toggle");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::TrackDrawingChangesReportFilterBuilder * trackDrawingChangesReportFilterBuilder;
			trackDrawingChangesReportFilterBuilder = _preferencesBuilder->TrackDrawingChangesReportFilter();
			NXOpen::Drawings::TrackDrawingChangesReportFilterBuilder::Filter filter;
			filter = _preferencesBuilder->TrackDrawingChangesReportFilter()->FilterAnnotationSFSRetainedStatus;
			bool reportFilterStatus;
			reportFilterStatus = trackDrawingChangesReportFilterBuilder->GetReportFilterStatus(filter);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - %s = %s \n", routineName.c_str(), id_name.c_str(), (reportFilterStatus ? "true" : "false"));
			ist_id_value.assign((convert_to_string(reportFilterStatus)));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				reportFilterStatus = convert_to_bool(soll_id_value);
				trackDrawingChangesReportFilterBuilder->SetReportFilterStatus(filter, reportFilterStatus);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not the Drawing Comparison Report will include text 
	//information for surface finish symbols. The Surface Finish Symbols All option supersedes this option.
	id_name.assign("Drawing_Compare_SFS_Text");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::TrackDrawingChangesReportFilterBuilder * trackDrawingChangesReportFilterBuilder;
			trackDrawingChangesReportFilterBuilder = _preferencesBuilder->TrackDrawingChangesReportFilter();
			NXOpen::Drawings::TrackDrawingChangesReportFilterBuilder::Filter filter;
			filter = _preferencesBuilder->TrackDrawingChangesReportFilter()->FilterAnnotationSFSText;
			bool reportFilterStatus;
			reportFilterStatus = trackDrawingChangesReportFilterBuilder->GetReportFilterStatus(filter);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - %s = %s \n", routineName.c_str(), id_name.c_str(), (reportFilterStatus ? "true" : "false"));
			ist_id_value.assign((convert_to_string(reportFilterStatus)));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				reportFilterStatus = convert_to_bool(soll_id_value);
				trackDrawingChangesReportFilterBuilder->SetReportFilterStatus(filter, reportFilterStatus);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not the Drawing Comparison Report will include origin information 
	//for surface finish symbols. The Surface Finish Symbols All option supersedes this option.
	id_name.assign("Drawing_Compare_SFS_Origin");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::TrackDrawingChangesReportFilterBuilder * trackDrawingChangesReportFilterBuilder;
			trackDrawingChangesReportFilterBuilder = _preferencesBuilder->TrackDrawingChangesReportFilter();
			NXOpen::Drawings::TrackDrawingChangesReportFilterBuilder::Filter filter;
			filter = _preferencesBuilder->TrackDrawingChangesReportFilter()->FilterAnnotationSFSOrigin;
			bool reportFilterStatus;
			reportFilterStatus = trackDrawingChangesReportFilterBuilder->GetReportFilterStatus(filter);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - %s = %s \n", routineName.c_str(), id_name.c_str(), (reportFilterStatus ? "true" : "false"));
			ist_id_value.assign((convert_to_string(reportFilterStatus)));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				reportFilterStatus = convert_to_bool(soll_id_value);
				trackDrawingChangesReportFilterBuilder->SetReportFilterStatus(filter, reportFilterStatus);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not the Drawing Comparison Report will include leader terminator information 
	//for surface finish symbols. The Surface Finish Symbols All option supersedes this option.
	id_name.assign("Drawing_Compare_SFS_LeaderTerminator");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::TrackDrawingChangesReportFilterBuilder * trackDrawingChangesReportFilterBuilder;
			trackDrawingChangesReportFilterBuilder = _preferencesBuilder->TrackDrawingChangesReportFilter();
			NXOpen::Drawings::TrackDrawingChangesReportFilterBuilder::Filter filter;
			filter = _preferencesBuilder->TrackDrawingChangesReportFilter()->FilterAnnotationSFSLeaderTerminator;
			bool reportFilterStatus;
			reportFilterStatus = trackDrawingChangesReportFilterBuilder->GetReportFilterStatus(filter);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - %s = %s \n", routineName.c_str(), id_name.c_str(), (reportFilterStatus ? "true" : "false"));
			ist_id_value.assign((convert_to_string(reportFilterStatus)));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				reportFilterStatus = convert_to_bool(soll_id_value);
				trackDrawingChangesReportFilterBuilder->SetReportFilterStatus(filter, reportFilterStatus);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not the Drawing Comparison Report will include all comparison information for weld symbols.
	id_name.assign("Drawing_Compare_Weld_Symbols_Toggle");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::TrackDrawingChangesReportFilterBuilder * trackDrawingChangesReportFilterBuilder;
			trackDrawingChangesReportFilterBuilder = _preferencesBuilder->TrackDrawingChangesReportFilter();
			NXOpen::Drawings::TrackDrawingChangesReportFilterBuilder::Filter filter;
			filter = _preferencesBuilder->TrackDrawingChangesReportFilter()->FilterAnnotationWeldSymbol;
			bool reportFilterStatus;
			reportFilterStatus = trackDrawingChangesReportFilterBuilder->GetReportFilterStatus(filter);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - %s = %s \n", routineName.c_str(), id_name.c_str(), (reportFilterStatus ? "true" : "false"));
			ist_id_value.assign((convert_to_string(reportFilterStatus)));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				reportFilterStatus = convert_to_bool(soll_id_value);
				trackDrawingChangesReportFilterBuilder->SetReportFilterStatus(filter, reportFilterStatus);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not the Drawing Comparison Report will include retained status 
	//information for weld symbols. The Weld Symbols All option supersedes this option.
	id_name.assign("Drawing_Compare_Weld_Symbols_Retained_Toggle");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::TrackDrawingChangesReportFilterBuilder * trackDrawingChangesReportFilterBuilder;
			trackDrawingChangesReportFilterBuilder = _preferencesBuilder->TrackDrawingChangesReportFilter();
			NXOpen::Drawings::TrackDrawingChangesReportFilterBuilder::Filter filter;
			filter = _preferencesBuilder->TrackDrawingChangesReportFilter()->FilterAnnotationWeldSymbolRetainedStatus;
			bool reportFilterStatus;
			reportFilterStatus = trackDrawingChangesReportFilterBuilder->GetReportFilterStatus(filter);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - %s = %s \n", routineName.c_str(), id_name.c_str(), (reportFilterStatus ? "true" : "false"));
			ist_id_value.assign((convert_to_string(reportFilterStatus)));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				reportFilterStatus = convert_to_bool(soll_id_value);
				trackDrawingChangesReportFilterBuilder->SetReportFilterStatus(filter, reportFilterStatus);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not the Drawing Comparison Report will include text 
	//information for weld symbols. The Weld Symbols All option supersedes this option.
	id_name.assign("Drawing_Compare_Weld_Symbols_Text");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::TrackDrawingChangesReportFilterBuilder * trackDrawingChangesReportFilterBuilder;
			trackDrawingChangesReportFilterBuilder = _preferencesBuilder->TrackDrawingChangesReportFilter();
			NXOpen::Drawings::TrackDrawingChangesReportFilterBuilder::Filter filter;
			filter = _preferencesBuilder->TrackDrawingChangesReportFilter()->FilterAnnotationWeldSymbolText;
			bool reportFilterStatus;
			reportFilterStatus = trackDrawingChangesReportFilterBuilder->GetReportFilterStatus(filter);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - %s = %s \n", routineName.c_str(), id_name.c_str(), (reportFilterStatus ? "true" : "false"));
			ist_id_value.assign((convert_to_string(reportFilterStatus)));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				reportFilterStatus = convert_to_bool(soll_id_value);
				trackDrawingChangesReportFilterBuilder->SetReportFilterStatus(filter, reportFilterStatus);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not the Drawing Comparison Report will include origin 
	//information for weld symbols. The Weld Symbols All option supersedes this option.
	id_name.assign("Drawing_Compare_Weld_Symbols_Origin");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::TrackDrawingChangesReportFilterBuilder * trackDrawingChangesReportFilterBuilder;
			trackDrawingChangesReportFilterBuilder = _preferencesBuilder->TrackDrawingChangesReportFilter();
			NXOpen::Drawings::TrackDrawingChangesReportFilterBuilder::Filter filter;
			filter = _preferencesBuilder->TrackDrawingChangesReportFilter()->FilterAnnotationWeldSymbolOrigin;
			bool reportFilterStatus;
			reportFilterStatus = trackDrawingChangesReportFilterBuilder->GetReportFilterStatus(filter);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - %s = %s \n", routineName.c_str(), id_name.c_str(), (reportFilterStatus ? "true" : "false"));
			ist_id_value.assign((convert_to_string(reportFilterStatus)));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				reportFilterStatus = convert_to_bool(soll_id_value);
				trackDrawingChangesReportFilterBuilder->SetReportFilterStatus(filter, reportFilterStatus);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not the Drawing Comparison Report will include leader terminator 
	//information for weld symbols. The Weld Symbols All option supersedes this option.
	id_name.assign("Drawing_Compare_Weld_Symbols_LeaderTerminator");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::TrackDrawingChangesReportFilterBuilder * trackDrawingChangesReportFilterBuilder;
			trackDrawingChangesReportFilterBuilder = _preferencesBuilder->TrackDrawingChangesReportFilter();
			NXOpen::Drawings::TrackDrawingChangesReportFilterBuilder::Filter filter;
			filter = _preferencesBuilder->TrackDrawingChangesReportFilter()->FilterAnnotationWeldSymbolLeaderTerminator;
			bool reportFilterStatus;
			reportFilterStatus = trackDrawingChangesReportFilterBuilder->GetReportFilterStatus(filter);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - %s = %s \n", routineName.c_str(), id_name.c_str(), (reportFilterStatus ? "true" : "false"));
			ist_id_value.assign((convert_to_string(reportFilterStatus)));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				reportFilterStatus = convert_to_bool(soll_id_value);
				trackDrawingChangesReportFilterBuilder->SetReportFilterStatus(filter, reportFilterStatus);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not the Drawing Comparison Report will include comparison information for target point symbols.
	id_name.assign("Drawing_Compare_TPS_Toggle");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::TrackDrawingChangesReportFilterBuilder * trackDrawingChangesReportFilterBuilder;
			trackDrawingChangesReportFilterBuilder = _preferencesBuilder->TrackDrawingChangesReportFilter();
			NXOpen::Drawings::TrackDrawingChangesReportFilterBuilder::Filter filter;
			filter = _preferencesBuilder->TrackDrawingChangesReportFilter()->FilterAnnotationTPS;
			bool reportFilterStatus;
			reportFilterStatus = trackDrawingChangesReportFilterBuilder->GetReportFilterStatus(filter);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - %s = %s \n", routineName.c_str(), id_name.c_str(), (reportFilterStatus ? "true" : "false"));
			ist_id_value.assign((convert_to_string(reportFilterStatus)));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				reportFilterStatus = convert_to_bool(soll_id_value);
				trackDrawingChangesReportFilterBuilder->SetReportFilterStatus(filter, reportFilterStatus);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not the Drawing Comparison Report will include comparison information for intersection symbols.
	id_name.assign("Drawing_Compare_Intersection_Symbols_Toggle");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::TrackDrawingChangesReportFilterBuilder * trackDrawingChangesReportFilterBuilder;
			trackDrawingChangesReportFilterBuilder = _preferencesBuilder->TrackDrawingChangesReportFilter();
			NXOpen::Drawings::TrackDrawingChangesReportFilterBuilder::Filter filter;
			filter = _preferencesBuilder->TrackDrawingChangesReportFilter()->FilterAnnotationInterSymbol;
			bool reportFilterStatus;
			reportFilterStatus = trackDrawingChangesReportFilterBuilder->GetReportFilterStatus(filter);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - %s = %s \n", routineName.c_str(), id_name.c_str(), (reportFilterStatus ? "true" : "false"));
			ist_id_value.assign((convert_to_string(reportFilterStatus)));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				reportFilterStatus = convert_to_bool(soll_id_value);
				trackDrawingChangesReportFilterBuilder->SetReportFilterStatus(filter, reportFilterStatus);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not the Drawing Comparison Report will include all comparison information for symbols.
	id_name.assign("Drawing_Compare_Symbols_Toggle");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::TrackDrawingChangesReportFilterBuilder * trackDrawingChangesReportFilterBuilder;
			trackDrawingChangesReportFilterBuilder = _preferencesBuilder->TrackDrawingChangesReportFilter();
			NXOpen::Drawings::TrackDrawingChangesReportFilterBuilder::Filter filter;
			filter = _preferencesBuilder->TrackDrawingChangesReportFilter()->FilterSymbols;
			bool reportFilterStatus;
			reportFilterStatus = trackDrawingChangesReportFilterBuilder->GetReportFilterStatus(filter);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - %s = %s \n", routineName.c_str(), id_name.c_str(), (reportFilterStatus ? "true" : "false"));
			ist_id_value.assign((convert_to_string(reportFilterStatus)));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				reportFilterStatus = convert_to_bool(soll_id_value);
				trackDrawingChangesReportFilterBuilder->SetReportFilterStatus(filter, reportFilterStatus);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not the Drawing Comparison Report will include retained status 
	//information for symbols. The Symbols All option supersedes this option.
	id_name.assign("Drawing_Compare_Symbols_Retained_Toggle");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::TrackDrawingChangesReportFilterBuilder * trackDrawingChangesReportFilterBuilder;
			trackDrawingChangesReportFilterBuilder = _preferencesBuilder->TrackDrawingChangesReportFilter();
			NXOpen::Drawings::TrackDrawingChangesReportFilterBuilder::Filter filter;
			filter = _preferencesBuilder->TrackDrawingChangesReportFilter()->FilterSymbolsRetainedStatus;
			bool reportFilterStatus;
			reportFilterStatus = trackDrawingChangesReportFilterBuilder->GetReportFilterStatus(filter);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - %s = %s \n", routineName.c_str(), id_name.c_str(), (reportFilterStatus ? "true" : "false"));
			ist_id_value.assign((convert_to_string(reportFilterStatus)));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				reportFilterStatus = convert_to_bool(soll_id_value);
				trackDrawingChangesReportFilterBuilder->SetReportFilterStatus(filter, reportFilterStatus);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not the Drawing Comparison Report will include 
	//text information for symbols. The Symbols All option supersedes this option.
	id_name.assign("Drawing_Compare_Symbols_Text");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::TrackDrawingChangesReportFilterBuilder * trackDrawingChangesReportFilterBuilder;
			trackDrawingChangesReportFilterBuilder = _preferencesBuilder->TrackDrawingChangesReportFilter();
			NXOpen::Drawings::TrackDrawingChangesReportFilterBuilder::Filter filter;
			filter = _preferencesBuilder->TrackDrawingChangesReportFilter()->FilterSymbolsText;
			bool reportFilterStatus;
			reportFilterStatus = trackDrawingChangesReportFilterBuilder->GetReportFilterStatus(filter);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - %s = %s \n", routineName.c_str(), id_name.c_str(), (reportFilterStatus ? "true" : "false"));
			ist_id_value.assign((convert_to_string(reportFilterStatus)));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				reportFilterStatus = convert_to_bool(soll_id_value);
				trackDrawingChangesReportFilterBuilder->SetReportFilterStatus(filter, reportFilterStatus);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not the Drawing Comparison Report will 
	//include origin information for symbols. The Symbols All option supersedes this option.
	id_name.assign("Drawing_Compare_Symbols_Origin");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::TrackDrawingChangesReportFilterBuilder * trackDrawingChangesReportFilterBuilder;
			trackDrawingChangesReportFilterBuilder = _preferencesBuilder->TrackDrawingChangesReportFilter();
			NXOpen::Drawings::TrackDrawingChangesReportFilterBuilder::Filter filter;
			filter = _preferencesBuilder->TrackDrawingChangesReportFilter()->FilterSymbolsOrigin;
			bool reportFilterStatus;
			reportFilterStatus = trackDrawingChangesReportFilterBuilder->GetReportFilterStatus(filter);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - %s = %s \n", routineName.c_str(), id_name.c_str(), (reportFilterStatus ? "true" : "false"));
			ist_id_value.assign((convert_to_string(reportFilterStatus)));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				reportFilterStatus = convert_to_bool(soll_id_value);
				trackDrawingChangesReportFilterBuilder->SetReportFilterStatus(filter, reportFilterStatus);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not the Drawing Comparison Report will include 
	//leader terminator information for symbols. The Symbols All option supersedes this option.
	id_name.assign("Drawing_Compare_Symbols_LeaderTerminator");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::TrackDrawingChangesReportFilterBuilder * trackDrawingChangesReportFilterBuilder;
			trackDrawingChangesReportFilterBuilder = _preferencesBuilder->TrackDrawingChangesReportFilter();
			NXOpen::Drawings::TrackDrawingChangesReportFilterBuilder::Filter filter;
			filter = _preferencesBuilder->TrackDrawingChangesReportFilter()->FilterSymbolsLeaderTerminator;
			bool reportFilterStatus;
			reportFilterStatus = trackDrawingChangesReportFilterBuilder->GetReportFilterStatus(filter);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - %s = %s \n", routineName.c_str(), id_name.c_str(), (reportFilterStatus ? "true" : "false"));
			ist_id_value.assign((convert_to_string(reportFilterStatus)));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				reportFilterStatus = convert_to_bool(soll_id_value);
				trackDrawingChangesReportFilterBuilder->SetReportFilterStatus(filter, reportFilterStatus);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not the Drawing Comparison Report will include comparison information for tabular notes.
	id_name.assign("Drawing_Compare_Tables_Toggle");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::TrackDrawingChangesReportFilterBuilder * trackDrawingChangesReportFilterBuilder;
			trackDrawingChangesReportFilterBuilder = _preferencesBuilder->TrackDrawingChangesReportFilter();
			NXOpen::Drawings::TrackDrawingChangesReportFilterBuilder::Filter filter;
			filter = _preferencesBuilder->TrackDrawingChangesReportFilter()->FilterTables;
			bool reportFilterStatus;
			reportFilterStatus = trackDrawingChangesReportFilterBuilder->GetReportFilterStatus(filter);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - %s = %s \n", routineName.c_str(), id_name.c_str(), (reportFilterStatus ? "true" : "false"));
			ist_id_value.assign((convert_to_string(reportFilterStatus)));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				reportFilterStatus = convert_to_bool(soll_id_value);
				trackDrawingChangesReportFilterBuilder->SetReportFilterStatus(filter, reportFilterStatus);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not the Drawing Comparison Report will include comparison information for parts lists.
	id_name.assign("Drawing_Compare_PartList_Toggle");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::TrackDrawingChangesReportFilterBuilder * trackDrawingChangesReportFilterBuilder;
			trackDrawingChangesReportFilterBuilder = _preferencesBuilder->TrackDrawingChangesReportFilter();
			NXOpen::Drawings::TrackDrawingChangesReportFilterBuilder::Filter filter;
			filter = _preferencesBuilder->TrackDrawingChangesReportFilter()->FilterPartsLists;
			bool reportFilterStatus;
			reportFilterStatus = trackDrawingChangesReportFilterBuilder->GetReportFilterStatus(filter);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - %s = %s \n", routineName.c_str(), id_name.c_str(), (reportFilterStatus ? "true" : "false"));
			ist_id_value.assign((convert_to_string(reportFilterStatus)));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				reportFilterStatus = convert_to_bool(soll_id_value);
				trackDrawingChangesReportFilterBuilder->SetReportFilterStatus(filter, reportFilterStatus);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not the Drawing Comparison Report will include comparison information for hole tables.
	id_name.assign("Drawing_Compare_HoleTable_Toggle");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::TrackDrawingChangesReportFilterBuilder * trackDrawingChangesReportFilterBuilder;
			trackDrawingChangesReportFilterBuilder = _preferencesBuilder->TrackDrawingChangesReportFilter();
			NXOpen::Drawings::TrackDrawingChangesReportFilterBuilder::Filter filter;
			filter = _preferencesBuilder->TrackDrawingChangesReportFilter()->FilterHoleTable;
			bool reportFilterStatus;
			reportFilterStatus = trackDrawingChangesReportFilterBuilder->GetReportFilterStatus(filter);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - %s = %s \n", routineName.c_str(), id_name.c_str(), (reportFilterStatus ? "true" : "false"));
			ist_id_value.assign((convert_to_string(reportFilterStatus)));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				reportFilterStatus = convert_to_bool(soll_id_value);
				trackDrawingChangesReportFilterBuilder->SetReportFilterStatus(filter, reportFilterStatus);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not the Drawing Comparison Report will include comparison information for centerlines.
	id_name.assign("Drawing_Compare_Centerlines_Toggle");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::TrackDrawingChangesReportFilterBuilder * trackDrawingChangesReportFilterBuilder;
			trackDrawingChangesReportFilterBuilder = _preferencesBuilder->TrackDrawingChangesReportFilter();
			NXOpen::Drawings::TrackDrawingChangesReportFilterBuilder::Filter filter;
			filter = _preferencesBuilder->TrackDrawingChangesReportFilter()->FilterAnnotationCenterlines;
			bool reportFilterStatus;
			reportFilterStatus = trackDrawingChangesReportFilterBuilder->GetReportFilterStatus(filter);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - %s = %s \n", routineName.c_str(), id_name.c_str(), (reportFilterStatus ? "true" : "false"));
			ist_id_value.assign((convert_to_string(reportFilterStatus)));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				reportFilterStatus = convert_to_bool(soll_id_value);
				trackDrawingChangesReportFilterBuilder->SetReportFilterStatus(filter, reportFilterStatus);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not the Drawing Comparison Report will include comparison information for crosshatches and area fills.
	id_name.assign("Drawing_Compare_XHatch_Toggle");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::TrackDrawingChangesReportFilterBuilder * trackDrawingChangesReportFilterBuilder;
			trackDrawingChangesReportFilterBuilder = _preferencesBuilder->TrackDrawingChangesReportFilter();
			NXOpen::Drawings::TrackDrawingChangesReportFilterBuilder::Filter filter;
			filter = _preferencesBuilder->TrackDrawingChangesReportFilter()->FilterAnnotationCrosshatch;
			bool reportFilterStatus;
			reportFilterStatus = trackDrawingChangesReportFilterBuilder->GetReportFilterStatus(filter);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - %s = %s \n", routineName.c_str(), id_name.c_str(), (reportFilterStatus ? "true" : "false"));
			ist_id_value.assign((convert_to_string(reportFilterStatus)));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				reportFilterStatus = convert_to_bool(soll_id_value);
				trackDrawingChangesReportFilterBuilder->SetReportFilterStatus(filter, reportFilterStatus);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not the Drawing Comparison Report will include comparison information for drafting sketch lines.
	id_name.assign("Drawing_Compare_Lines_Toggle");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::TrackDrawingChangesReportFilterBuilder * trackDrawingChangesReportFilterBuilder;
			trackDrawingChangesReportFilterBuilder = _preferencesBuilder->TrackDrawingChangesReportFilter();
			NXOpen::Drawings::TrackDrawingChangesReportFilterBuilder::Filter filter;
			filter = _preferencesBuilder->TrackDrawingChangesReportFilter()->FilterSketchCurvesLines;
			bool reportFilterStatus;
			reportFilterStatus = trackDrawingChangesReportFilterBuilder->GetReportFilterStatus(filter);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - %s = %s \n", routineName.c_str(), id_name.c_str(), (reportFilterStatus ? "true" : "false"));
			ist_id_value.assign((convert_to_string(reportFilterStatus)));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				reportFilterStatus = convert_to_bool(soll_id_value);
				trackDrawingChangesReportFilterBuilder->SetReportFilterStatus(filter, reportFilterStatus);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not the Drawing Comparison Report will include comparison information for drafting sketch arcs.
	id_name.assign("Drawing_Compare_Arcs_Toggle");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::TrackDrawingChangesReportFilterBuilder * trackDrawingChangesReportFilterBuilder;
			trackDrawingChangesReportFilterBuilder = _preferencesBuilder->TrackDrawingChangesReportFilter();
			NXOpen::Drawings::TrackDrawingChangesReportFilterBuilder::Filter filter;
			filter = _preferencesBuilder->TrackDrawingChangesReportFilter()->FilterSketchCurvesArcs;
			bool reportFilterStatus;
			reportFilterStatus = trackDrawingChangesReportFilterBuilder->GetReportFilterStatus(filter);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - %s = %s \n", routineName.c_str(), id_name.c_str(), (reportFilterStatus ? "true" : "false"));
			ist_id_value.assign((convert_to_string(reportFilterStatus)));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				reportFilterStatus = convert_to_bool(soll_id_value);
				trackDrawingChangesReportFilterBuilder->SetReportFilterStatus(filter, reportFilterStatus);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not the Drawing Comparison Report will include comparison information for drafting sketch circles.
	id_name.assign("Drawing_Compare_Circles_Toggle");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::TrackDrawingChangesReportFilterBuilder * trackDrawingChangesReportFilterBuilder;
			trackDrawingChangesReportFilterBuilder = _preferencesBuilder->TrackDrawingChangesReportFilter();
			NXOpen::Drawings::TrackDrawingChangesReportFilterBuilder::Filter filter;
			filter = _preferencesBuilder->TrackDrawingChangesReportFilter()->FilterSketchCurvesCircles;
			bool reportFilterStatus;
			reportFilterStatus = trackDrawingChangesReportFilterBuilder->GetReportFilterStatus(filter);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - %s = %s \n", routineName.c_str(), id_name.c_str(), (reportFilterStatus ? "true" : "false"));
			ist_id_value.assign((convert_to_string(reportFilterStatus)));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				reportFilterStatus = convert_to_bool(soll_id_value);
				trackDrawingChangesReportFilterBuilder->SetReportFilterStatus(filter, reportFilterStatus);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not the Drawing Comparison Report will include comparison information for drafting sketch conics.
	id_name.assign("Drawing_Compare_Conics_Toggle");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::TrackDrawingChangesReportFilterBuilder * trackDrawingChangesReportFilterBuilder;
			trackDrawingChangesReportFilterBuilder = _preferencesBuilder->TrackDrawingChangesReportFilter();
			NXOpen::Drawings::TrackDrawingChangesReportFilterBuilder::Filter filter;
			filter = _preferencesBuilder->TrackDrawingChangesReportFilter()->FilterSketchCurvesConics;
			bool reportFilterStatus;
			reportFilterStatus = trackDrawingChangesReportFilterBuilder->GetReportFilterStatus(filter);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - %s = %s \n", routineName.c_str(), id_name.c_str(), (reportFilterStatus ? "true" : "false"));
			ist_id_value.assign((convert_to_string(reportFilterStatus)));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				reportFilterStatus = convert_to_bool(soll_id_value);
				trackDrawingChangesReportFilterBuilder->SetReportFilterStatus(filter, reportFilterStatus);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not the Drawing Comparison Report will include comparison information for drafting sketch splines.
	id_name.assign("Drawing_Compare_Splines_Toggle");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::TrackDrawingChangesReportFilterBuilder * trackDrawingChangesReportFilterBuilder;
			trackDrawingChangesReportFilterBuilder = _preferencesBuilder->TrackDrawingChangesReportFilter();
			NXOpen::Drawings::TrackDrawingChangesReportFilterBuilder::Filter filter;
			filter = _preferencesBuilder->TrackDrawingChangesReportFilter()->FilterSketchCurvesSplines;
			bool reportFilterStatus;
			reportFilterStatus = trackDrawingChangesReportFilterBuilder->GetReportFilterStatus(filter);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - %s = %s \n", routineName.c_str(), id_name.c_str(), (reportFilterStatus ? "true" : "false"));
			ist_id_value.assign((convert_to_string(reportFilterStatus)));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				reportFilterStatus = convert_to_bool(soll_id_value);
				trackDrawingChangesReportFilterBuilder->SetReportFilterStatus(filter, reportFilterStatus);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- STOPP - %s --- \n", routineName.c_str());
}

/*
File - Utilities - Customer Defaults - Drafting - Drawing Compare - Visual Overlay -> Repair these preferences.
*/
void repair_site_Drafting_DrawingCompare_VisualOverlay_prefs(NXOpen::Drafting::PreferencesBuilder *_preferencesBuilder, en_nx_dpv* _nx_dpv, Session * _theSession, Part* _workPart) {
	routineName.assign("repair_site_Drafting_DrawingCompare_VisualOverlay_prefs");
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- START - %s --- \n", routineName.c_str());

	//This option determines the compare against method to use for the overlay command.
	//Another Drawing / Revision: Displays overlay data from another drawing file if in 
	//native mode or another revision if in managed mode on top of the current drawing.
	//Active Drawing Overlay : Displays previously created overlay data from the current drawing file on top of the current drawing.
	id_name.assign("Visual_Overlay_Compare_Method");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::VisualDrawingComparePrefsBuilder *visualDrawingComparePrefsBuilder;
			visualDrawingComparePrefsBuilder = _preferencesBuilder->VisualDrawingCompare();
			NXOpen::Drawings::VisualDrawingComparePrefsBuilder::VisualDrawingComparePrefsMethodType visualDrawingComparePrefsMethodType;
			visualDrawingComparePrefsMethodType=visualDrawingComparePrefsBuilder->CompareMethodType();
			int int_visualDrawingComparePrefsMethodType;
			int_visualDrawingComparePrefsMethodType = (int)visualDrawingComparePrefsMethodType;
			ist_id_value.assign((convert_to_string(int_visualDrawingComparePrefsMethodType)));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_visualDrawingComparePrefsMethodType = convert_to_int(soll_id_value);
				visualDrawingComparePrefsMethodType = (NXOpen::Drawings::VisualDrawingComparePrefsBuilder::VisualDrawingComparePrefsMethodType)int_visualDrawingComparePrefsMethodType;
				visualDrawingComparePrefsBuilder->SetCompareMethodType(visualDrawingComparePrefsMethodType);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines the color of the compare data that is overlaid on the active drawing sheet.
	id_name.assign("Visual_Overlay_Color");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::VisualDrawingComparePrefsBuilder *visualDrawingComparePrefsBuilder;
			visualDrawingComparePrefsBuilder = _preferencesBuilder->VisualDrawingCompare();
			int colorIndex;
			colorIndex = visualDrawingComparePrefsBuilder->OverlayColor()->Handle();
			ist_id_value.assign((convert_to_string(colorIndex)));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				colorIndex = convert_to_int(soll_id_value);
				NXOpen::NXColor *color;
				color = _workPart->Colors()->Find(colorIndex);
				visualDrawingComparePrefsBuilder->SetOverlayColor(color);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines which overlay data will be displayed from the comparison drawing on 
	//top of the active drawing sheet when the overlay command is invoked.
	//Ask at Runtime : Prompts whether to use existing overlay data or to create new overlay data.
	//Always Use Existing Data : Always uses existing overlay data.
	//Always Create New Data : Always creates new overlay data regardless of existing data or not.
	//Create New Data if None Exists : Creates new overlay data if none exists.
	id_name.assign("Visual_Overlay_Data_To_Use");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::VisualDrawingComparePrefsBuilder *visualDrawingComparePrefsBuilder;
			visualDrawingComparePrefsBuilder = _preferencesBuilder->VisualDrawingCompare();
			NXOpen::Drawings::VisualDrawingComparePrefsBuilder::VisualDrawingComparePrefsOverlayDataToUse visualDrawingComparePrefsOverlayDataToUse;
			visualDrawingComparePrefsOverlayDataToUse = visualDrawingComparePrefsBuilder->OverlayDataToUse();
			int int_visualDrawingComparePrefsOverlayDataToUse;
			int_visualDrawingComparePrefsOverlayDataToUse = (int)visualDrawingComparePrefsOverlayDataToUse;
			ist_id_value.assign((convert_to_string(int_visualDrawingComparePrefsOverlayDataToUse)));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_visualDrawingComparePrefsOverlayDataToUse = convert_to_int(soll_id_value);
				visualDrawingComparePrefsOverlayDataToUse = (NXOpen::Drawings::VisualDrawingComparePrefsBuilder::VisualDrawingComparePrefsOverlayDataToUse)int_visualDrawingComparePrefsOverlayDataToUse;
				visualDrawingComparePrefsBuilder->SetOverlayDataToUse(visualDrawingComparePrefsOverlayDataToUse);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- STOPP - %s --- \n", routineName.c_str());
}

/*
File - Utilities - Customer Defaults - Drafting - Drawing Automation - Booklet -> Repair these preferences.
*/
void repair_site_Drafting_DrawingAutomation_Booklet_prefs(NXOpen::Drafting::PreferencesBuilder *_preferencesBuilder, en_nx_dpv* _nx_dpv, Session * _theSession, Part* _workPart) {
	routineName.assign("repair_site_Drafting_DrawingAutomation_Booklet_prefs");
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- START - %s --- \n", routineName.c_str());

	//This option determines whether or not the Template step will be shown in the Drawing Automation
	//Wizard. If this step is turned off, no introductory template can be specified.
	id_name.assign("Drafting_wizardShowTemplateStep");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			ist_id_value.assign(_theSession->OptionsManager()->GetStringValue(nx_id_name).GetLocaleText());
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());	
				NXOpen::Options::ChangeList *changeList;
				changeList = _theSession->OptionsManager()->NewOptionsChangeList(NXOpen::Options::LevelTypeSite, NXOpen::Options::LevelLockedByDefaultFalse);
				changeList->SetValue(id_name.c_str(), soll_id_value.c_str());
				NXOpen::Options::DraftingStandardChangeList *draftingStandardChangeList;
				draftingStandardChangeList = _theSession->OptionsManager()->NewOptionsDraftingStandardChangeList(NXOpen::Options::LevelTypeSite, Standard_Site.c_str());
				draftingStandardChangeList->Load();
				delete draftingStandardChangeList;
				changeList->Save();
				changeList->LockValue(id_name.c_str());
				delete changeList;
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not the References step will be shown in the Drawing Automation Wizard. 
	//If this step is turned off, no references can be specified.
	id_name.assign("Drafting_wizardShowReferencesStep");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			ist_id_value.assign(_theSession->OptionsManager()->GetStringValue(nx_id_name).GetLocaleText());
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				NXOpen::Options::ChangeList *changeList;
				changeList = _theSession->OptionsManager()->NewOptionsChangeList(NXOpen::Options::LevelTypeSite, NXOpen::Options::LevelLockedByDefaultFalse);
				changeList->SetValue(id_name.c_str(), soll_id_value.c_str());
				NXOpen::Options::DraftingStandardChangeList *draftingStandardChangeList;
				draftingStandardChangeList = _theSession->OptionsManager()->NewOptionsDraftingStandardChangeList(NXOpen::Options::LevelTypeSite, Standard_Site.c_str());
				draftingStandardChangeList->Load();
				delete draftingStandardChangeList;
				changeList->Save();
				changeList->LockValue(id_name.c_str());
				delete changeList;
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not the Attributes step will be shown in the Drawing Automation Wizard. 
	//If this step is turned off, no attributes can be specified.
	id_name.assign("Drafting_wizardShowAttributesStep");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			ist_id_value.assign(_theSession->OptionsManager()->GetStringValue(nx_id_name).GetLocaleText());
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				NXOpen::Options::ChangeList *changeList;
				changeList = _theSession->OptionsManager()->NewOptionsChangeList(NXOpen::Options::LevelTypeSite, NXOpen::Options::LevelLockedByDefaultFalse);
				changeList->SetValue(id_name.c_str(), soll_id_value.c_str());
				NXOpen::Options::DraftingStandardChangeList *draftingStandardChangeList;
				draftingStandardChangeList = _theSession->OptionsManager()->NewOptionsDraftingStandardChangeList(NXOpen::Options::LevelTypeSite, Standard_Site.c_str());
				draftingStandardChangeList->Load();
				delete draftingStandardChangeList;
				changeList->Save();
				changeList->LockValue(id_name.c_str());
				delete changeList;
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the Teamcenter item type used for drawing booklets created using the Drawing Automation Wizard.
	id_name.assign("Drafting_bookletItemType");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			ist_id_value.assign(_theSession->OptionsManager()->GetStringValue(nx_id_name).GetLocaleText());
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				NXOpen::Options::ChangeList *changeList;
				changeList = _theSession->OptionsManager()->NewOptionsChangeList(NXOpen::Options::LevelTypeSite, NXOpen::Options::LevelLockedByDefaultFalse);
				changeList->SetValue(id_name.c_str(), soll_id_value.c_str());
				NXOpen::Options::DraftingStandardChangeList *draftingStandardChangeList;
				draftingStandardChangeList = _theSession->OptionsManager()->NewOptionsDraftingStandardChangeList(NXOpen::Options::LevelTypeSite, Standard_Site.c_str());
				draftingStandardChangeList->Load();
				delete draftingStandardChangeList;
				changeList->Save();
				changeList->LockValue(id_name.c_str());
				delete changeList;
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the Teamcenter item type used for booklet drawings created using the Drawing Automation Wizard.
	id_name.assign("Drafting_bookletDrawingItemType");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			ist_id_value.assign(_theSession->OptionsManager()->GetStringValue(nx_id_name).GetLocaleText());
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				NXOpen::Options::ChangeList *changeList;
				changeList = _theSession->OptionsManager()->NewOptionsChangeList(NXOpen::Options::LevelTypeSite, NXOpen::Options::LevelLockedByDefaultFalse);
				changeList->SetValue(id_name.c_str(), soll_id_value.c_str());
				NXOpen::Options::DraftingStandardChangeList *draftingStandardChangeList;
				draftingStandardChangeList = _theSession->OptionsManager()->NewOptionsDraftingStandardChangeList(NXOpen::Options::LevelTypeSite, Standard_Site.c_str());
				draftingStandardChangeList->Load();
				delete draftingStandardChangeList;
				changeList->Save();
				changeList->LockValue(id_name.c_str());
				delete changeList;
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the Teamcenter item type used for drawing booklet rule parts created using the Drawing Automation Wizard.
	id_name.assign("Drafting_bookletRuleItemType");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			ist_id_value.assign(_theSession->OptionsManager()->GetStringValue(nx_id_name).GetLocaleText());
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				NXOpen::Options::ChangeList *changeList;
				changeList = _theSession->OptionsManager()->NewOptionsChangeList(NXOpen::Options::LevelTypeSite, NXOpen::Options::LevelLockedByDefaultFalse);
				changeList->SetValue(id_name.c_str(), soll_id_value.c_str());
				NXOpen::Options::DraftingStandardChangeList *draftingStandardChangeList;
				draftingStandardChangeList = _theSession->OptionsManager()->NewOptionsDraftingStandardChangeList(NXOpen::Options::LevelTypeSite, Standard_Site.c_str());
				draftingStandardChangeList->Load();
				delete draftingStandardChangeList;
				changeList->Save();
				changeList->LockValue(id_name.c_str());
				delete changeList;
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the color of Secondary Content Visible Lines in all views of drawings created with the Automated Drawing Wizard.
	id_name.assign("Drafting_SecondaryContentVisibleColor");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::NXColor *color;
			color=_preferencesBuilder->ViewStyle()->SecondaryComponents()->SecondaryComponentsCFW()->VisibleCFW()->LineColor();
			int colorIndex;
			colorIndex = color->Handle();
			ist_id_value.assign(convert_to_string(colorIndex));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				colorIndex = convert_to_int(soll_id_value);
				color = _workPart->Colors()->Find(colorIndex);
				_preferencesBuilder->ViewStyle()->SecondaryComponents()->SecondaryComponentsCFW()->VisibleCFW()->SetLineColor(color);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the font of Secondary Content Visible Lines in all 
	//views of drawings created with the Automated Drawing Wizard.
	id_name.assign("Drafting_SecondaryContentVisibleFont");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::LineFontBuilder::LineFontType lineFontType;
			lineFontType = _preferencesBuilder->ViewStyle()->SecondaryComponents()->SecondaryComponentsCFW()->VisibleCFW()->LineFont()->LineFont();
			int int_lineFontType;
			if (lineFontType == NXOpen::LineFontBuilder::LineFontTypeNoChange) {
				int_lineFontType = -2;
			}
			else if (lineFontType == NXOpen::LineFontBuilder::LineFontTypeOriginal) {
				int_lineFontType = -1;
			}
			else if (lineFontType == NXOpen::LineFontBuilder::LineFontTypeInvisible) {
				int_lineFontType = 0;
			}
			else if (lineFontType == NXOpen::LineFontBuilder::LineFontTypeSolid) {
				int_lineFontType = 1;
			}
			else if (lineFontType == NXOpen::LineFontBuilder::LineFontTypeDashed) {
				int_lineFontType = 2;
			}
			else if (lineFontType == NXOpen::LineFontBuilder::LineFontTypePhantom) {
				int_lineFontType = 3;
			}
			else if (lineFontType == NXOpen::LineFontBuilder::LineFontTypeCenterline) {
				int_lineFontType = 4;
			}
			else if (lineFontType == NXOpen::LineFontBuilder::LineFontTypeDotted) {
				int_lineFontType = 5;
			}
			else if (lineFontType == NXOpen::LineFontBuilder::LineFontTypeLongDashed) {
				int_lineFontType = 6;
			}
			else if (lineFontType == NXOpen::LineFontBuilder::LineFontTypeDottedDashed) {
				int_lineFontType = 7;
			}
			ist_id_value.assign(convert_to_string(int_lineFontType));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_lineFontType = convert_to_int(soll_id_value);
				if (int_lineFontType == -2) {
					lineFontType = NXOpen::LineFontBuilder::LineFontTypeNoChange;
				}
				else if (int_lineFontType == -1) {
					lineFontType = NXOpen::LineFontBuilder::LineFontTypeOriginal;
				}
				else if (int_lineFontType == 0) {
					lineFontType = NXOpen::LineFontBuilder::LineFontTypeInvisible;
				}
				else if (int_lineFontType == 1) {
					lineFontType = NXOpen::LineFontBuilder::LineFontTypeSolid;
				}
				else if (int_lineFontType == 2) {
					lineFontType = NXOpen::LineFontBuilder::LineFontTypeDashed;
				}
				else if (int_lineFontType == 3) {
					lineFontType = NXOpen::LineFontBuilder::LineFontTypePhantom;
				}
				else if (int_lineFontType == 4) {
					lineFontType = NXOpen::LineFontBuilder::LineFontTypeCenterline;
				}
				else if (int_lineFontType == 5) {
					lineFontType = NXOpen::LineFontBuilder::LineFontTypeDotted;
				}
				else if (int_lineFontType == 6) {
					lineFontType = NXOpen::LineFontBuilder::LineFontTypeLongDashed;
				}
				else if (int_lineFontType == 7) {
					lineFontType = NXOpen::LineFontBuilder::LineFontTypeDottedDashed;
				}
				_preferencesBuilder->ViewStyle()->SecondaryComponents()->SecondaryComponentsCFW()->VisibleCFW()->LineFont()->SetLineFont(lineFontType);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the width of Secondary Content Visible Lines in all views of drawings created with the Automated Drawing Wizard.
	id_name.assign("Drafting_SecondaryContentVisibleWidth");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::DisplayableObject::ObjectWidth widthType;
			widthType = _preferencesBuilder->ViewStyle()->SecondaryComponents()->SecondaryComponentsCFW()->VisibleCFW()->LineWidth();
			int int_widthType;
			if (widthType == NXOpen::DisplayableObject::ObjectWidthNormal) {
				int_widthType = 0;
			}
			else if (widthType == NXOpen::DisplayableObject::ObjectWidthThick) {
				int_widthType = 1;
			}
			else if (widthType == NXOpen::DisplayableObject::ObjectWidthThin) {
				int_widthType = 2;
			}
			else if (widthType == NXOpen::DisplayableObject::ObjectWidthOne) {
				int_widthType = 5;
			}
			else if (widthType == NXOpen::DisplayableObject::ObjectWidthTwo) {
				int_widthType = 6;
			}
			else if (widthType == NXOpen::DisplayableObject::ObjectWidthThree) {
				int_widthType = 7;
			}
			else if (widthType == NXOpen::DisplayableObject::ObjectWidthFour) {
				int_widthType = 8;
			}
			else if (widthType == NXOpen::DisplayableObject::ObjectWidthFive) {
				int_widthType = 9;
			}
			else if (widthType == NXOpen::DisplayableObject::ObjectWidthSix) {
				int_widthType = 10;
			}
			else if (widthType == NXOpen::DisplayableObject::ObjectWidthSeven) {
				int_widthType = 11;
			}
			else if (widthType == NXOpen::DisplayableObject::ObjectWidthEight) {
				int_widthType = 12;
			}
			else if (widthType == NXOpen::DisplayableObject::ObjectWidthNine) {
				int_widthType = 13;
			}
			else {
				int_widthType = -999;
			}
			string id_name_tmp;
			std::map<const std::string, std::string>::iterator it_tmp;
			if (int_widthType == 0) {
				id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
				it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				int_widthType = convert_to_int(it_tmp->second);
			}
			if (int_widthType == 1) {
				id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
				it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				int_widthType = convert_to_int(it_tmp->second);
			}
			if (int_widthType == 2) {
				id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
				it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				int_widthType = convert_to_int(it_tmp->second);
			}
			//_nx_dpv->soll_dpv_map.find(id_name)->second = convert_to_string(int_widthType);
			ist_id_value.assign(convert_to_string(int_widthType));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_widthType = convert_to_int(soll_id_value);
				if (int_widthType == 0) {
					//widthType = NXOpen::DisplayableObject::ObjectWidthNormal;
					id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
					it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					widthType = (NXOpen::DisplayableObject::ObjectWidth) convert_to_int(it_tmp->second);
				}
				else if (int_widthType == 1) {
					//widthType = NXOpen::DisplayableObject::ObjectWidthThick;
					id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
					it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					widthType = (NXOpen::DisplayableObject::ObjectWidth) convert_to_int(it_tmp->second);
				}
				else if (int_widthType == 2) {
					//widthType = NXOpen::DisplayableObject::ObjectWidthThin;
					id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
					it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					widthType = (NXOpen::DisplayableObject::ObjectWidth) convert_to_int(it_tmp->second);
				}
				else if (int_widthType == 5) {
					widthType = NXOpen::DisplayableObject::ObjectWidthOne;
				}
				else if (int_widthType == 6) {
					widthType = NXOpen::DisplayableObject::ObjectWidthTwo;
				}
				else if (int_widthType == 7) {
					widthType = NXOpen::DisplayableObject::ObjectWidthThree;
				}
				else if (int_widthType == 8) {
					widthType = NXOpen::DisplayableObject::ObjectWidthFour;
				}
				else if (int_widthType == 9) {
					widthType = NXOpen::DisplayableObject::ObjectWidthFive;
				}
				else if (int_widthType == 10) {
					widthType = NXOpen::DisplayableObject::ObjectWidthSix;
				}
				else if (int_widthType == 11) {
					widthType = NXOpen::DisplayableObject::ObjectWidthSeven;
				}
				else if (int_widthType == 12) {
					widthType = NXOpen::DisplayableObject::ObjectWidthEight;
				}
				else if (int_widthType == 13) {
					widthType = NXOpen::DisplayableObject::ObjectWidthNine;
				}
				_preferencesBuilder->ViewStyle()->SecondaryComponents()->SecondaryComponentsCFW()->VisibleCFW()->SetLineWidth(widthType);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the color of Secondary Content Hidden Lines in all views of drawings created with the Automated Drawing Wizard.
	id_name.assign("Drafting_SecondaryContentHiddenColor");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::NXColor *color;
			color = _preferencesBuilder->ViewStyle()->SecondaryComponents()->SecondaryComponentsCFW()->HiddenCFW()->LineColor();
			int colorIndex;
			colorIndex = color->Handle();
			ist_id_value.assign(convert_to_string(colorIndex));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				colorIndex = convert_to_int(soll_id_value);
				color = _workPart->Colors()->Find(colorIndex);
				_preferencesBuilder->ViewStyle()->SecondaryComponents()->SecondaryComponentsCFW()->HiddenCFW()->SetLineColor(color);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the font of Secondary Content Hidden Lines in all views of drawings created with the Automated Drawing Wizard.
	id_name.assign("Drafting_SecondaryContentHiddenFont");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::LineFontBuilder::LineFontType lineFontType;
			lineFontType = _preferencesBuilder->ViewStyle()->SecondaryComponents()->SecondaryComponentsCFW()->HiddenCFW()->LineFont()->LineFont();
			int int_lineFontType;
			if (lineFontType == NXOpen::LineFontBuilder::LineFontTypeNoChange) {
				int_lineFontType = -2;
			}
			else if (lineFontType == NXOpen::LineFontBuilder::LineFontTypeOriginal) {
				int_lineFontType = -1;
			}
			else if (lineFontType == NXOpen::LineFontBuilder::LineFontTypeInvisible) {
				int_lineFontType = 0;
			}
			else if (lineFontType == NXOpen::LineFontBuilder::LineFontTypeSolid) {
				int_lineFontType = 1;
			}
			else if (lineFontType == NXOpen::LineFontBuilder::LineFontTypeDashed) {
				int_lineFontType = 2;
			}
			else if (lineFontType == NXOpen::LineFontBuilder::LineFontTypePhantom) {
				int_lineFontType = 3;
			}
			else if (lineFontType == NXOpen::LineFontBuilder::LineFontTypeCenterline) {
				int_lineFontType = 4;
			}
			else if (lineFontType == NXOpen::LineFontBuilder::LineFontTypeDotted) {
				int_lineFontType = 5;
			}
			else if (lineFontType == NXOpen::LineFontBuilder::LineFontTypeLongDashed) {
				int_lineFontType = 6;
			}
			else if (lineFontType == NXOpen::LineFontBuilder::LineFontTypeDottedDashed) {
				int_lineFontType = 7;
			}
			ist_id_value.assign(convert_to_string(int_lineFontType));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_lineFontType = convert_to_int(soll_id_value);
				if (int_lineFontType == -2) {
					lineFontType = NXOpen::LineFontBuilder::LineFontTypeNoChange;
				}
				else if (int_lineFontType == -1) {
					lineFontType = NXOpen::LineFontBuilder::LineFontTypeOriginal;
				}
				else if (int_lineFontType == 0) {
					lineFontType = NXOpen::LineFontBuilder::LineFontTypeInvisible;
				}
				else if (int_lineFontType == 1) {
					lineFontType = NXOpen::LineFontBuilder::LineFontTypeSolid;
				}
				else if (int_lineFontType == 2) {
					lineFontType = NXOpen::LineFontBuilder::LineFontTypeDashed;
				}
				else if (int_lineFontType == 3) {
					lineFontType = NXOpen::LineFontBuilder::LineFontTypePhantom;
				}
				else if (int_lineFontType == 4) {
					lineFontType = NXOpen::LineFontBuilder::LineFontTypeCenterline;
				}
				else if (int_lineFontType == 5) {
					lineFontType = NXOpen::LineFontBuilder::LineFontTypeDotted;
				}
				else if (int_lineFontType == 6) {
					lineFontType = NXOpen::LineFontBuilder::LineFontTypeLongDashed;
				}
				else if (int_lineFontType == 7) {
					lineFontType = NXOpen::LineFontBuilder::LineFontTypeDottedDashed;
				}
				_preferencesBuilder->ViewStyle()->SecondaryComponents()->SecondaryComponentsCFW()->HiddenCFW()->LineFont()->SetLineFont(lineFontType);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the width of Secondary Content Hidden Lines in all views of drawings created with the Automated Drawing Wizard.
	id_name.assign("Drafting_SecondaryContentHiddenWidth");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::DisplayableObject::ObjectWidth widthType;
			widthType = _preferencesBuilder->ViewStyle()->SecondaryComponents()->SecondaryComponentsCFW()->HiddenCFW()->LineWidth();
			int int_widthType;
			if (widthType == NXOpen::DisplayableObject::ObjectWidthNormal) {
				int_widthType = 0;
			}
			else if (widthType == NXOpen::DisplayableObject::ObjectWidthThick) {
				int_widthType = 1;
			}
			else if (widthType == NXOpen::DisplayableObject::ObjectWidthThin) {
				int_widthType = 2;
			}
			else if (widthType == NXOpen::DisplayableObject::ObjectWidthOne) {
				int_widthType = 5;
			}
			else if (widthType == NXOpen::DisplayableObject::ObjectWidthTwo) {
				int_widthType = 6;
			}
			else if (widthType == NXOpen::DisplayableObject::ObjectWidthThree) {
				int_widthType = 7;
			}
			else if (widthType == NXOpen::DisplayableObject::ObjectWidthFour) {
				int_widthType = 8;
			}
			else if (widthType == NXOpen::DisplayableObject::ObjectWidthFive) {
				int_widthType = 9;
			}
			else if (widthType == NXOpen::DisplayableObject::ObjectWidthSix) {
				int_widthType = 10;
			}
			else if (widthType == NXOpen::DisplayableObject::ObjectWidthSeven) {
				int_widthType = 11;
			}
			else if (widthType == NXOpen::DisplayableObject::ObjectWidthEight) {
				int_widthType = 12;
			}
			else if (widthType == NXOpen::DisplayableObject::ObjectWidthNine) {
				int_widthType = 13;
			}
			else {
				int_widthType = -999;
			}
			string id_name_tmp;
			std::map<const std::string, std::string>::iterator it_tmp;
			if (int_widthType == 0) {
				id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
				it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				int_widthType = convert_to_int(it_tmp->second);
			}
			if (int_widthType == 1) {
				id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
				it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				int_widthType = convert_to_int(it_tmp->second);
			}
			if (int_widthType == 2) {
				id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
				it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				int_widthType = convert_to_int(it_tmp->second);
			}
			//_nx_dpv->soll_dpv_map.find(id_name)->second = convert_to_string(int_widthType);
			ist_id_value.assign(convert_to_string(int_widthType));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_widthType = convert_to_int(soll_id_value);
				if (int_widthType == 0) {
					//widthType = NXOpen::DisplayableObject::ObjectWidthNormal;
					id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
					it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					widthType = (NXOpen::DisplayableObject::ObjectWidth) convert_to_int(it_tmp->second);
				}
				else if (int_widthType == 1) {
					//widthType = NXOpen::DisplayableObject::ObjectWidthThick;
					id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
					it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					widthType = (NXOpen::DisplayableObject::ObjectWidth) convert_to_int(it_tmp->second);
				}
				else if (int_widthType == 2) {
					//widthType = NXOpen::DisplayableObject::ObjectWidthThin;
					id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
					it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					widthType = (NXOpen::DisplayableObject::ObjectWidth) convert_to_int(it_tmp->second);
				}
				else if (int_widthType == 5) {
					widthType = NXOpen::DisplayableObject::ObjectWidthOne;
				}
				else if (int_widthType == 6) {
					widthType = NXOpen::DisplayableObject::ObjectWidthTwo;
				}
				else if (int_widthType == 7) {
					widthType = NXOpen::DisplayableObject::ObjectWidthThree;
				}
				else if (int_widthType == 8) {
					widthType = NXOpen::DisplayableObject::ObjectWidthFour;
				}
				else if (int_widthType == 9) {
					widthType = NXOpen::DisplayableObject::ObjectWidthFive;
				}
				else if (int_widthType == 10) {
					widthType = NXOpen::DisplayableObject::ObjectWidthSix;
				}
				else if (int_widthType == 11) {
					widthType = NXOpen::DisplayableObject::ObjectWidthSeven;
				}
				else if (int_widthType == 12) {
					widthType = NXOpen::DisplayableObject::ObjectWidthEight;
				}
				else if (int_widthType == 13) {
					widthType = NXOpen::DisplayableObject::ObjectWidthNine;
				}
				_preferencesBuilder->ViewStyle()->SecondaryComponents()->SecondaryComponentsCFW()->HiddenCFW()->SetLineWidth(widthType);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- STOPP - %s --- \n", routineName.c_str());
}

/*
File - Utilities - Customer Defaults - Drafting - Drawing Automation - Rule -> Repair these preferences.
*/
void repair_site_Drafting_DrawingAutomation_Rule_prefs(NXOpen::Drafting::PreferencesBuilder *_preferencesBuilder, en_nx_dpv* _nx_dpv, Session * _theSession, Part* _workPart) {
	routineName.assign("repair_site_Drafting_DrawingAutomation_Rule_prefs");
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- START - %s --- \n", routineName.c_str());

	//This options determines whether or not the annotations can be placed inside the view geometry.
	id_name.assign("Distribution_Rules_AnnotationInsideGeometry");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drafting::AutomationRuleBuilder *automationRuleBuilder;
			automationRuleBuilder = _preferencesBuilder->AutomationRule();
			bool allowInsideGeometry;
			allowInsideGeometry = automationRuleBuilder->AllowInsideGeometry();
			ist_id_value.assign(convert_to_string(allowInsideGeometry));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				allowInsideGeometry = convert_to_bool(soll_id_value);
				automationRuleBuilder->SetAllowInsideGeometry(allowInsideGeometry);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This options specifies the minimum distance from the view geometry to the annotation.
	id_name.assign("Distribution_Rules_MinGeomDistance_Real_MM");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drafting::AutomationRuleBuilder *automationRuleBuilder;
			automationRuleBuilder = _preferencesBuilder->AutomationRule();
			double minimumGapToGeometry;
			minimumGapToGeometry = automationRuleBuilder->MinimumGapToGeometry();
			ist_id_value.assign(convert_to_string(minimumGapToGeometry));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				minimumGapToGeometry = convert_to_double(soll_id_value);
				automationRuleBuilder->SetMinimumGapToGeometry(minimumGapToGeometry);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This options specifies the minimum distance from the view geometry to the annotation.
	id_name.assign("Distribution_Rules_MinGeomDistance_Real_IN");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drafting::AutomationRuleBuilder *automationRuleBuilder;
			automationRuleBuilder = _preferencesBuilder->AutomationRule();
			double minimumGapToGeometry;
			minimumGapToGeometry = automationRuleBuilder->MinimumGapToGeometry();
			ist_id_value.assign(convert_to_string(minimumGapToGeometry));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				minimumGapToGeometry = convert_to_double(soll_id_value);
				automationRuleBuilder->SetMinimumGapToGeometry(minimumGapToGeometry);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This options specifies the maximum distance from the view geometry to the annotation.
	id_name.assign("Distribution_Rules_MaxGeomDistance_Real_MM");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drafting::AutomationRuleBuilder *automationRuleBuilder;
			automationRuleBuilder = _preferencesBuilder->AutomationRule();
			double maximumGapToGeometry;
			maximumGapToGeometry = automationRuleBuilder->MaximumGapToGeometry();
			ist_id_value.assign(convert_to_string(maximumGapToGeometry));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				maximumGapToGeometry = convert_to_double(soll_id_value);
				automationRuleBuilder->SetMaximumGapToGeometry(maximumGapToGeometry);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This options specifies the maximum distance from the view geometry to the annotation.
	id_name.assign("Distribution_Rules_MaxGeomDistance_Real_IN");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drafting::AutomationRuleBuilder *automationRuleBuilder;
			automationRuleBuilder = _preferencesBuilder->AutomationRule();
			double maximumGapToGeometry;
			maximumGapToGeometry = automationRuleBuilder->MaximumGapToGeometry();
			ist_id_value.assign(convert_to_string(maximumGapToGeometry));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				maximumGapToGeometry = convert_to_double(soll_id_value);
				automationRuleBuilder->SetMaximumGapToGeometry(maximumGapToGeometry);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This options specifies the minimum distance between the annotations.
	id_name.assign("Distribution_Rules_MinAnnDistance_Real_MM");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drafting::AutomationRuleBuilder *automationRuleBuilder;
			automationRuleBuilder = _preferencesBuilder->AutomationRule();
			double minimumGapBetweenAnnotations;
			minimumGapBetweenAnnotations = automationRuleBuilder->MinimumGapBetweenAnnotations();
			ist_id_value.assign(convert_to_string(minimumGapBetweenAnnotations));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				minimumGapBetweenAnnotations = convert_to_double(soll_id_value);
				automationRuleBuilder->SetMinimumGapBetweenAnnotations(minimumGapBetweenAnnotations);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This options specifies the minimum distance between the annotations.
	id_name.assign("Distribution_Rules_MinAnnDistance_Real_IN");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drafting::AutomationRuleBuilder *automationRuleBuilder;
			automationRuleBuilder = _preferencesBuilder->AutomationRule();
			double minimumGapBetweenAnnotations;
			minimumGapBetweenAnnotations = automationRuleBuilder->MinimumGapBetweenAnnotations();
			ist_id_value.assign(convert_to_string(minimumGapBetweenAnnotations));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				minimumGapBetweenAnnotations = convert_to_double(soll_id_value);
				automationRuleBuilder->SetMinimumGapBetweenAnnotations(minimumGapBetweenAnnotations);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the rule priority order. The rule at the top is the most likely to be satisfied whereas 
	//the rule at the bottom is the least likely to be satisified while distributing annotations.
	id_name.assign("Distribution_Rules_Order");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drafting::AutomationRuleBuilder *automationRuleBuilder;
			automationRuleBuilder = _preferencesBuilder->AutomationRule();
			std::vector<NXString> rules;
			rules = automationRuleBuilder->GetRulesList();
			ist_id_value.assign(retrieveXmlList(_theSession->OptionsManager()->GetStringValue(nx_id_name).GetLocaleText()));
			//ist_id_value.assign("sowas");
			//ist_id_value.assign(_theSession->OptionsManager()->GetStringValue(nx_id_name).GetLocaleText());
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				string string_alt;
				string_alt.assign("&quot;");
				string string_neu;
				string_neu.assign("");
				short int x = 0;
				while (soll_id_value.find(string_alt, x) < soll_id_value.length()) {
					soll_id_value.replace(soll_id_value.find(string_alt, x), string_alt.length(), string_neu);
					x++;
				}
				string_alt.assign("\\");
				string_neu.assign(";");
				x = 0;
				while (soll_id_value.find(string_alt, x) < soll_id_value.length()) {
					soll_id_value.replace(soll_id_value.find(string_alt, x), string_alt.length(), string_neu);
					x++;
				}
				//nxLog("soll_id_value = \"%s\" \n", soll_id_value.c_str());
				rules.clear();
				rules.resize(1);

				string_alt.assign(";");
				x = 0;
				short int z;
				z = 0;
				size_t start_pos, end_pos;
				start_pos = 0;
				end_pos = 0;
				while ((end_pos = soll_id_value.find(string_alt, x)) < soll_id_value.length()) {
					rules[z] = (NXString)soll_id_value.substr(start_pos, end_pos - start_pos).c_str();
					//nxLog("start_pos=%d end_pos=%d \n", start_pos, end_pos);
					nxLog("rules[%d]=\"%s\" \n", z, rules[z].GetLocaleText());
					start_pos = end_pos + 1;
					x = (short int)start_pos;
					z++;
					rules.resize(z + 1);
				}
				rules[z] = (NXString)soll_id_value.substr(start_pos, soll_id_value.length()).c_str();
				//nxLog("start_pos=%d end_pos=%d \n", start_pos, end_pos);
				nxLog("rules[%d]=\"%s\" \n", z, rules[z].GetLocaleText());

				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
				//FEHLERHAFT!
				//automationRuleBuilder->SetRulesList( rules );
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not to hide the feet and inch marks for a dimension.
	id_name.assign("Dimension_Rules_HideFeetInch");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drafting::AutomationRuleBuilder *automationRuleBuilder;
			automationRuleBuilder = _preferencesBuilder->AutomationRule();
			bool hideFeetAndInchMarks;
			hideFeetAndInchMarks = automationRuleBuilder->HideFeetAndInchMarks();
			ist_id_value.assign(convert_to_string(hideFeetAndInchMarks));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				hideFeetAndInchMarks = convert_to_bool(soll_id_value);
				automationRuleBuilder->SetHideFeetAndInchMarks(hideFeetAndInchMarks);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not to display the dimension in engineering feet, 
	//inches, and fractions if it is greater than the specified value.
	id_name.assign("Dimension_Rules_AllowDisplayInInchFeetGreaterThan");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drafting::AutomationRuleBuilder *automationRuleBuilder;
			automationRuleBuilder = _preferencesBuilder->AutomationRule();
			bool useFeetInchesAndFraction;
			useFeetInchesAndFraction = automationRuleBuilder->UseFeetInchesAndFraction();
			ist_id_value.assign(convert_to_string(useFeetInchesAndFraction));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				useFeetInchesAndFraction = convert_to_bool(soll_id_value);
				automationRuleBuilder->SetUseFeetInchesAndFraction(useFeetInchesAndFraction);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This options displays dimension value in engineering feet, inches, and fractions if it is greater than the specified value.
	id_name.assign("Dimension_Rules_DisplayInInchFeetGreaterThan");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drafting::AutomationRuleBuilder *automationRuleBuilder;
			automationRuleBuilder = _preferencesBuilder->AutomationRule();
			double lowerThreshold;
			lowerThreshold = automationRuleBuilder->LowerThreshold();
			ist_id_value.assign(convert_to_string(lowerThreshold));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				lowerThreshold = convert_to_double(soll_id_value);
				automationRuleBuilder->SetLowerThreshold(lowerThreshold);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not to display the dimension in inches and fractions to nearest specified value.
	id_name.assign("Dimension_Rules_AllowDisplayInInchFeetNearest");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drafting::AutomationRuleBuilder *automationRuleBuilder;
			automationRuleBuilder = _preferencesBuilder->AutomationRule();
			bool roundFeetAndInches;
			roundFeetAndInches = automationRuleBuilder->RoundFeetAndInches();
			ist_id_value.assign(convert_to_string(roundFeetAndInches));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				roundFeetAndInches = convert_to_bool(soll_id_value);
				automationRuleBuilder->SetRoundFeetAndInches(roundFeetAndInches);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This options displays dimension value in inches and fractions to nearest specified value.
	id_name.assign("Dimension_Rules_DisplayInInchFeetNearest");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drafting::AutomationRuleBuilder *automationRuleBuilder;
			automationRuleBuilder = _preferencesBuilder->AutomationRule();
			double increment;
			increment = automationRuleBuilder->Increment();
			ist_id_value.assign(convert_to_string(increment));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				increment = convert_to_double(soll_id_value);
				automationRuleBuilder->SetIncrement(increment);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This options specifies tolerance to compare dimension values to determine whether or not the dimensions are equal.
	id_name.assign("Dimension_Rules_ComparsionTol_MM");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drafting::AutomationRuleBuilder *automationRuleBuilder;
			automationRuleBuilder = _preferencesBuilder->AutomationRule();
			double equalDimensionTolerance;
			equalDimensionTolerance = automationRuleBuilder->EqualDimensionTolerance();
			ist_id_value.assign(convert_to_string(equalDimensionTolerance));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				equalDimensionTolerance = convert_to_double(soll_id_value);
				automationRuleBuilder->SetEqualDimensionTolerance(equalDimensionTolerance);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This options specifies tolerance to compare dimension values to determine whether or not the dimensions are equal.
	id_name.assign("Dimension_Rules_ComparisonTol_IN");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drafting::AutomationRuleBuilder *automationRuleBuilder;
			automationRuleBuilder = _preferencesBuilder->AutomationRule();
			double equalDimensionTolerance;
			equalDimensionTolerance = automationRuleBuilder->EqualDimensionTolerance();
			ist_id_value.assign(convert_to_string(equalDimensionTolerance));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				equalDimensionTolerance = convert_to_double(soll_id_value);
				automationRuleBuilder->SetEqualDimensionTolerance(equalDimensionTolerance);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This options specifies the distance to be used when searching for a reference geometry that will be used for dimensioning.
	id_name.assign("Dimension_Rules_ReferenceGeomDistance_MM");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drafting::AutomationRuleBuilder *automationRuleBuilder;
			automationRuleBuilder = _preferencesBuilder->AutomationRule();
			double referenceGeometryGapTolerance;
			referenceGeometryGapTolerance = automationRuleBuilder->ReferenceGeometryGapTolerance();
			ist_id_value.assign(convert_to_string(referenceGeometryGapTolerance));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				referenceGeometryGapTolerance = convert_to_double(soll_id_value);
				automationRuleBuilder->SetReferenceGeometryGapTolerance(referenceGeometryGapTolerance);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This options specifies the distance to be used when searching for a reference geometry that will be used for dimensioning.
	id_name.assign("Dimension_Rules_ReferenceGeomDistance_IN");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drafting::AutomationRuleBuilder *automationRuleBuilder;
			automationRuleBuilder = _preferencesBuilder->AutomationRule();
			double referenceGeometryGapTolerance;
			referenceGeometryGapTolerance = automationRuleBuilder->ReferenceGeometryGapTolerance();
			ist_id_value.assign(convert_to_string(referenceGeometryGapTolerance));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				referenceGeometryGapTolerance = convert_to_double(soll_id_value);
				automationRuleBuilder->SetReferenceGeometryGapTolerance(referenceGeometryGapTolerance);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- STOPP - %s --- \n", routineName.c_str());
}

/*
File - Utilities - Customer Defaults - Drafting - Drawing Automation - Region -> Repair these preferences.
*/
void repair_site_Drafting_DrawingAutomation_Region_prefs(NXOpen::Drafting::PreferencesBuilder *_preferencesBuilder, en_nx_dpv* _nx_dpv, Session * _theSession, Part* _workPart) {
	routineName.assign("repair_site_Drafting_DrawingAutomation_Region_prefs");
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- START - %s --- \n", routineName.c_str());

	//This option determines whether or not regions should be displayed in a non-template part.
	id_name.assign("Drafting_regionDisplayObject");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::AutomationTemplateRegionBuilder *automationTemplateRegionBuilder;
			automationTemplateRegionBuilder = _preferencesBuilder->AutomationTemplateRegion();
			bool displayTemplatePart;
			displayTemplatePart = automationTemplateRegionBuilder->DisplayTemplatePart();
			ist_id_value.assign(convert_to_string(displayTemplatePart));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				displayTemplatePart = convert_to_bool(soll_id_value);
				automationTemplateRegionBuilder->SetDisplayTemplatePart(displayTemplatePart);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not region labels should be displayed.
	id_name.assign("Drafting_regionDisplayLabel");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::AutomationTemplateRegionBuilder *automationTemplateRegionBuilder;
			automationTemplateRegionBuilder = _preferencesBuilder->AutomationTemplateRegion();
			bool displayRegionLabel;
			displayRegionLabel = automationTemplateRegionBuilder->DisplayRegionLabel();
			ist_id_value.assign(convert_to_string(displayRegionLabel));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				displayRegionLabel = convert_to_bool(soll_id_value);
				automationTemplateRegionBuilder->SetDisplayRegionLabel(displayRegionLabel);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the color of region objects.
	id_name.assign("Drafting_regionColor");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::AutomationTemplateRegionBuilder *automationTemplateRegionBuilder;
			automationTemplateRegionBuilder = _preferencesBuilder->AutomationTemplateRegion();			
			NXOpen::NXColor *lineColor;
			lineColor=automationTemplateRegionBuilder->LineColorFontWidth()->LineColor();
			int lineColorIndex;
			lineColorIndex = lineColor->Handle();
			ist_id_value.assign(convert_to_string(lineColorIndex));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				lineColorIndex = convert_to_int(soll_id_value);
				lineColor = _workPart->Colors()->Find(lineColorIndex);
				automationTemplateRegionBuilder->LineColorFontWidth()->SetLineColor(lineColor);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	/*
	//This option specifies the line font for region objects.
	id_name.assign("Drafting_regionFont");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::AutomationTemplateRegionBuilder *automationTemplateRegionBuilder;
			automationTemplateRegionBuilder = _preferencesBuilder->AutomationTemplateRegion();
			NXOpen::LineFontBuilder *lineFont;
			lineFont = automationTemplateRegionBuilder->LineColorFontWidth()->LineFont();
			int int_lineFont;
			int_lineFont = (int)lineFont;
			ist_id_value.assign(convert_to_string(int_lineFont));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			if (it != _nx_dpv->soll_dpv_map.end()) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
				soll_id_value.assign(it->second);
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
				if (ist_id_value.compare(soll_id_value) != 0) {
					//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
					int_lineFont = convert_to_int(soll_id_value);
					automationTemplateRegionBuilder->LineColorFontWidth()->LineFont();
					_preferencesBuilder->Commit();
					nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
				}
			}
			else {
				nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	*/

	//This option specifies the line width for region objects.
	id_name.assign("Drafting_regionWidth");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::AutomationTemplateRegionBuilder *automationTemplateRegionBuilder;
			automationTemplateRegionBuilder = _preferencesBuilder->AutomationTemplateRegion();
			NXOpen::DisplayableObject::ObjectWidth lineWidth;
			lineWidth = automationTemplateRegionBuilder->LineColorFontWidth()->LineWidth();
			int int_lineWidth;
			if (lineWidth == NXOpen::DisplayableObject::ObjectWidthNormal) {
				int_lineWidth = 0;
			}
			else if (lineWidth == NXOpen::DisplayableObject::ObjectWidthThick) {
				int_lineWidth = 1;
			}
			else if (lineWidth == NXOpen::DisplayableObject::ObjectWidthThin) {
				int_lineWidth = 2;
			}
			else if (lineWidth == NXOpen::DisplayableObject::ObjectWidthOne) {
				int_lineWidth = 5;
			}
			else if (lineWidth == NXOpen::DisplayableObject::ObjectWidthTwo) {
				int_lineWidth = 6;
			}
			else if (lineWidth == NXOpen::DisplayableObject::ObjectWidthThree) {
				int_lineWidth = 7;
			}
			else if (lineWidth == NXOpen::DisplayableObject::ObjectWidthFour) {
				int_lineWidth = 8;
			}
			else if (lineWidth == NXOpen::DisplayableObject::ObjectWidthFive) {
				int_lineWidth = 9;
			}
			else if (lineWidth == NXOpen::DisplayableObject::ObjectWidthSix) {
				int_lineWidth = 10;
			}
			else if (lineWidth == NXOpen::DisplayableObject::ObjectWidthSeven) {
				int_lineWidth = 11;
			}
			else if (lineWidth == NXOpen::DisplayableObject::ObjectWidthEight) {
				int_lineWidth = 12;
			}
			else if (lineWidth == NXOpen::DisplayableObject::ObjectWidthNine) {
				int_lineWidth = 13;
			}
			else {
				int_lineWidth = -999;
			}
			string id_name_tmp;
			std::map<const std::string, std::string>::iterator it_tmp;
			if (int_lineWidth == 0) {
				id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
				it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				int_lineWidth = convert_to_int(it_tmp->second);
			}
			if (int_lineWidth == 1) {
				id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
				it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				int_lineWidth = convert_to_int(it_tmp->second);
			}
			if (int_lineWidth == 2) {
				id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
				it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				int_lineWidth = convert_to_int(it_tmp->second);
			}
			//_nx_dpv->soll_dpv_map.find(id_name)->second = convert_to_string(int_lineWidth);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - %s - int_lineWidth = %d \n", routineName.c_str(), id_name.c_str(), int_lineWidth);
			ist_id_value.assign(convert_to_string(int_lineWidth));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_lineWidth = convert_to_int(soll_id_value);
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - %s - soll_id_value (int_lineWidth) = %d \n", routineName.c_str(), id_name.c_str(), int_lineWidth);
				if (int_lineWidth == 0) {
					//lineWidth = NXOpen::DisplayableObject::ObjectWidthNormal;
					id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
					it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					lineWidth = (NXOpen::DisplayableObject::ObjectWidth) convert_to_int(it_tmp->second);
				}
				else if (int_lineWidth == 1) {
					//lineWidth = NXOpen::DisplayableObject::ObjectWidthThick;
					id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
					it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					lineWidth = (NXOpen::DisplayableObject::ObjectWidth) convert_to_int(it_tmp->second);
				}
				else if (int_lineWidth == 2) {
					//lineWidth = NXOpen::DisplayableObject::ObjectWidthThin;
					id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
					it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					lineWidth = (NXOpen::DisplayableObject::ObjectWidth) convert_to_int(it_tmp->second);
				}
				else if (int_lineWidth == 5) {
					lineWidth = NXOpen::DisplayableObject::ObjectWidthOne;
				}
				else if (int_lineWidth == 6) {
					lineWidth = NXOpen::DisplayableObject::ObjectWidthTwo;
				}
				else if (int_lineWidth == 7) {
					lineWidth = NXOpen::DisplayableObject::ObjectWidthThree;
				}
				else if (int_lineWidth == 8) {
					lineWidth = NXOpen::DisplayableObject::ObjectWidthFour;
				}
				else if (int_lineWidth == 9) {
					lineWidth = NXOpen::DisplayableObject::ObjectWidthFive;
				}
				else if (int_lineWidth == 10) {
					lineWidth = NXOpen::DisplayableObject::ObjectWidthSix;
				}
				else if (int_lineWidth == 11) {
					lineWidth = NXOpen::DisplayableObject::ObjectWidthSeven;
				}
				else if (int_lineWidth == 12) {
					lineWidth = NXOpen::DisplayableObject::ObjectWidthEight;
				}
				else if (int_lineWidth == 13) {
					lineWidth = NXOpen::DisplayableObject::ObjectWidthNine;
				}
				automationTemplateRegionBuilder->LineColorFontWidth()->SetLineWidth(lineWidth);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- STOPP - %s --- \n", routineName.c_str());
}

/*
File - Utilities - Customer Defaults - Drafting - Convert to PMI - General -> Repair these preferences.
*/
void repair_site_Drafting_ConvertToPMI_General_prefs(NXOpen::Drafting::PreferencesBuilder *_preferencesBuilder, en_nx_dpv* _nx_dpv, Session * _theSession, Part* _workPart) {
	routineName.assign("repair_site_Drafting_ConvertToPMI_General_prefs");
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- START - %s --- \n", routineName.c_str());

	//this->function_list.push_back("Drafting_ConvertToPMI_SettingsFile_WIN");
	//this->function_list.push_back("Drafting_ConvertToPMI_SettingsFile_UNX");

	//This field specifies the conversion settings file (.def) that the Convert to PMI product should use.
	id_name.assign("Drafting_ConvertToPMI_SettingsFile_WIN");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			ist_id_value.assign(_theSession->GetEnvironmentVariableValue(id_name.c_str()).GetLocaleText());
			//ist_id_value.assign(convert_to_string(int_lineFontType));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				NXOpen::Options::ChangeList *changeList;
				changeList = _theSession->OptionsManager()->NewOptionsChangeList(NXOpen::Options::LevelTypeSite, NXOpen::Options::LevelLockedByDefaultFalse);
				changeList->SetValue(id_name.c_str(), soll_id_value.c_str());
				NXOpen::Options::DraftingStandardChangeList *draftingStandardChangeList;
				draftingStandardChangeList = _theSession->OptionsManager()->NewOptionsDraftingStandardChangeList(NXOpen::Options::LevelTypeSite, Standard_Site.c_str());
				draftingStandardChangeList->Load();
				delete draftingStandardChangeList;
				changeList->Save();
				changeList->LockValue(id_name.c_str());
				delete changeList;
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This field specifies the conversion settings file (.def) that the Convert to PMI product should use.
	id_name.assign("Drafting_ConvertToPMI_SettingsFile_UNX");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			ist_id_value.assign(_theSession->GetEnvironmentVariableValue(id_name.c_str()).GetLocaleText());
			//ist_id_value.assign(convert_to_string(int_lineFontType));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				NXOpen::Options::ChangeList *changeList;
				changeList = _theSession->OptionsManager()->NewOptionsChangeList(NXOpen::Options::LevelTypeSite, NXOpen::Options::LevelLockedByDefaultFalse);
				changeList->SetValue(id_name.c_str(), soll_id_value.c_str());
				NXOpen::Options::DraftingStandardChangeList *draftingStandardChangeList;
				draftingStandardChangeList = _theSession->OptionsManager()->NewOptionsDraftingStandardChangeList(NXOpen::Options::LevelTypeSite, Standard_Site.c_str());
				draftingStandardChangeList->Load();
				delete draftingStandardChangeList;
				changeList->Save();
				changeList->LockValue(id_name.c_str());
				delete changeList;
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- STOPP - %s --- \n", routineName.c_str());
}

/*
File - Preferences - Drafting - General - Standard - Standard -> Repair these preferences.
*/
void repair_DraftingStandard_General_Standard_prefs(NXOpen::Drafting::PreferencesBuilder *_preferencesBuilder, en_nx_dpv* _nx_dpv, Session * _theSession, Part* _workPart) {
	routineName.assign("repair_DraftingStandard_General_Standard_prefs");
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- START - %s --- \n", routineName.c_str());
	
	//This option specifies the standard for the Drafting surface finish symbol.
	id_name.assign("Drafting_SFsymbolStandard");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::SurfaceFinishStandard standard;
			standard = _preferencesBuilder->AnnotationStyle()->SymbolStyle()->DraftingSurfaceFinishStandard();
			int int_standard;
			int_standard = (int)standard;
			ist_id_value.assign(convert_to_string(int_standard));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_standard = convert_to_int(soll_id_value);
				standard = (NXOpen::Annotations::SurfaceFinishStandard)int_standard;
				_preferencesBuilder->AnnotationStyle()->SymbolStyle()->SetDraftingSurfaceFinishStandard(standard);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the standard for weld symbols.
	if (_nx_dpv->usedUnitValue.compare("1") == 0) {
		id_name.assign("Drafting_weldSymbolStandard_MU");
	}
	else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
		id_name.assign("Drafting_weldSymbolStandard_EU");
	}
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::WeldStandard standard;
			standard = _preferencesBuilder->AnnotationStyle()->SymbolStyle()->WeldSymbolStandard();

			string string_standard;

			if (standard == NXOpen::Annotations::WeldStandardAnsi) {
				string_standard.assign("ANSI");
			}
			else if (standard == NXOpen::Annotations::WeldStandardDin) {
				string_standard.assign("DIN");
			}
			else if (standard == NXOpen::Annotations::WeldStandardJis) {
				string_standard.assign("JIS");
			}
			else if (standard == NXOpen::Annotations::WeldStandardIso) {
				string_standard.assign("ISO");
			}
			else if (standard == NXOpen::Annotations::WeldStandardEskd) {
				string_standard.assign("ESKD");
			}
			else if (standard == NXOpen::Annotations::WeldStandardGb) {
				string_standard.assign("GB");
			}
			else {
				//standard = NXOpen::Annotations::WeldStandardLast;
				string_standard.assign("LAST");
			}
			ist_id_value.assign(string_standard);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				string_standard.assign(soll_id_value);
				if (string_standard.compare("ANSI") == 0) {
					standard = NXOpen::Annotations::WeldStandardAnsi;
				}
				else if (string_standard.compare("DIN") == 0) {
					standard = NXOpen::Annotations::WeldStandardDin;
				}
				else if (string_standard.compare("JIS") == 0) {
					standard = NXOpen::Annotations::WeldStandardJis;
				}
				else if (string_standard.compare("ISO") == 0) {
					standard = NXOpen::Annotations::WeldStandardIso;
				}
				else if (string_standard.compare("ESKD") == 0) {
					standard = NXOpen::Annotations::WeldStandardEskd;
				}
				else if (string_standard.compare("GB") == 0) {
					standard = NXOpen::Annotations::WeldStandardGb;
				}
				else {
					standard = NXOpen::Annotations::WeldStandardLast;
				}
				_preferencesBuilder->AnnotationStyle()->SymbolStyle()->SetWeldSymbolStandard(standard);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- STOPP - %s --- \n", routineName.c_str());
}

/*
File - Preferences - Drafting - Common - Lettering -> Repair these preferences.
*/
void repair_DraftingStandard_Common_Lettering_prefs(NXOpen::Drafting::PreferencesBuilder *_preferencesBuilder, en_nx_dpv* _nx_dpv, Session * _theSession, Part* _workPart) {
	routineName.assign("repair_DraftingStandard_General_Standard_prefs");
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- START - %s --- \n", routineName.c_str());

	//This option specifies a position relative to the text which is used when positioning the text on the drawing.
	id_name.assign("Drafting_entitySite");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::AlignmentPosition alignPosition;
			alignPosition = _preferencesBuilder->AnnotationStyle()->LetteringStyle()->AlignPosition();
			int int_alignPosition;
			int_alignPosition = (int)alignPosition;
			ist_id_value.assign(convert_to_string(int_alignPosition));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_alignPosition = convert_to_int(soll_id_value);
				alignPosition = (NXOpen::Annotations::AlignmentPosition)int_alignPosition;
				_preferencesBuilder->AnnotationStyle()->LetteringStyle()->SetAlignPosition(alignPosition);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the horizontal text justification.
	id_name.assign("Drafting_horizontalTextJust");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::TextJustification horizontalTextJustification;
			horizontalTextJustification = _preferencesBuilder->AnnotationStyle()->LetteringStyle()->HorizontalTextJustification();
			int int_horizontalTextJustification;
			int_horizontalTextJustification = (int)horizontalTextJustification;
			ist_id_value.assign(convert_to_string(int_horizontalTextJustification));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_horizontalTextJustification = convert_to_int(soll_id_value);
				horizontalTextJustification = (NXOpen::Annotations::TextJustification)int_horizontalTextJustification;
				_preferencesBuilder->AnnotationStyle()->LetteringStyle()->SetHorizontalTextJustification(horizontalTextJustification);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the color of general text.
	id_name.assign("Drafting_draftTextColor");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::NXColor *generalTextColor;
			generalTextColor = _preferencesBuilder->AnnotationStyle()->LetteringStyle()->GeneralTextColor();
			int generalTextColorIndex;
			generalTextColorIndex = generalTextColor->Handle();
			ist_id_value.assign(convert_to_string(generalTextColorIndex));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				generalTextColorIndex = convert_to_int(soll_id_value);
				generalTextColor = _workPart->Colors()->Find(generalTextColorIndex);
				_preferencesBuilder->AnnotationStyle()->LetteringStyle()->SetGeneralTextColor(generalTextColor);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the character font for general text. Any font present in the directory pointed to by the UGII_CHARACTER_FONT_DIR environment variable can be specified here.
	id_name.assign("Drafting_draftTextFont");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			int generalTextFontIndex;
			generalTextFontIndex = _preferencesBuilder->AnnotationStyle()->LetteringStyle()->GeneralTextFont();
			NXString generalTextFontName;
			generalTextFontName = _workPart->Fonts()->GetFontName(generalTextFontIndex);
			ist_id_value.assign(generalTextFontName.GetLocaleText());
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				NXOpen::FontCollection::Type generalTextFont;
				generalTextFont = _workPart->Fonts()->GetFontType(generalTextFontIndex);
				generalTextFontIndex = _workPart->Fonts()->AddFont(soll_id_value.c_str(), generalTextFont);
				_preferencesBuilder->AnnotationStyle()->LetteringStyle()->SetGeneralTextFont(generalTextFontIndex);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the font style for general text.
	id_name.assign("Drafting_draftTextFontStyle");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			soll_id_value.assign(it->second);
			int generalTextFontStyle;
			generalTextFontStyle = convert_to_int(soll_id_value);
			bool generalTextItalicized;
			generalTextItalicized = _preferencesBuilder->AnnotationStyle()->LetteringStyle()->GeneralTextItalicized();
			if (generalTextItalicized == true) {
				generalTextFontStyle = 2;
			}
			else {
				generalTextFontStyle = 0;
			}
			ist_id_value.assign(soll_id_value);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());

			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				generalTextFontStyle = convert_to_int(soll_id_value);
				if (generalTextFontStyle == 2) {
					generalTextItalicized = true;
				}
				else {
					generalTextItalicized = false;
				}
				_preferencesBuilder->AnnotationStyle()->LetteringStyle()->SetGeneralTextItalicized(generalTextItalicized);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the line width for the font for general text.
	id_name.assign("Drafting_draftTextWidth");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::LineWidth generalTextLineWidth;
			generalTextLineWidth = _preferencesBuilder->AnnotationStyle()->LetteringStyle()->GeneralTextLineWidth();
			int int_generalTextLineWidth;
			if (generalTextLineWidth == NXOpen::Annotations::LineWidthNormal) {
				int_generalTextLineWidth = 1;
			}
			else if (generalTextLineWidth == NXOpen::Annotations::LineWidthThick) {
				int_generalTextLineWidth = 2;
			}
			else if (generalTextLineWidth == NXOpen::Annotations::LineWidthThin) {
				int_generalTextLineWidth = 3;
			}
			else if (generalTextLineWidth == NXOpen::Annotations::LineWidthOne) {
				int_generalTextLineWidth = 6;
			}
			else if (generalTextLineWidth == NXOpen::Annotations::LineWidthTwo) {
				int_generalTextLineWidth = 7;
			}
			else if (generalTextLineWidth == NXOpen::Annotations::LineWidthThree) {
				int_generalTextLineWidth = 8;
			}
			else if (generalTextLineWidth == NXOpen::Annotations::LineWidthFour) {
				int_generalTextLineWidth = 9;
			}
			else if (generalTextLineWidth == NXOpen::Annotations::LineWidthFive) {
				int_generalTextLineWidth = 10;
			}
			else if (generalTextLineWidth == NXOpen::Annotations::LineWidthSix) {
				int_generalTextLineWidth = 11;
			}
			else if (generalTextLineWidth == NXOpen::Annotations::LineWidthSeven) {
				int_generalTextLineWidth = 12;
			}
			else if (generalTextLineWidth == NXOpen::Annotations::LineWidthEight) {
				int_generalTextLineWidth = 13;
			}
			else if (generalTextLineWidth == NXOpen::Annotations::LineWidthNine) {
				int_generalTextLineWidth = 14;
			}
			//string id_name_tmp;
			//std::map<const std::string, std::string>::iterator it_tmp;
			//if (int_generalTextLineWidth == 1) {
			//	id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
			//	it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
			//	int_generalTextLineWidth = convert_to_int(it_tmp->second);
			//}
			//if (int_generalTextLineWidth == 2) {
			//	id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
			//	it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
			//	int_generalTextLineWidth = convert_to_int(it_tmp->second);
			//}
			//if (int_generalTextLineWidth == 3) {
			//	id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
			//	it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
			//	int_generalTextLineWidth = convert_to_int(it_tmp->second);
			//}
			//_nx_dpv->soll_dpv_map.find(id_name)->second = convert_to_string(int_generalTextLineWidth );
			ist_id_value.assign(convert_to_string(int_generalTextLineWidth));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				//int_generalTextLineWidth = convert_to_int(soll_id_value);
				if (int_generalTextLineWidth == 1) {
					generalTextLineWidth = NXOpen::Annotations::LineWidthNormal;
					//id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
					//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					//generalTextLineWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
				}
				else if (int_generalTextLineWidth == 2) {
					generalTextLineWidth = NXOpen::Annotations::LineWidthThick;
					//id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
					//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					//generalTextLineWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
				}
				else if (int_generalTextLineWidth == 3) {
					generalTextLineWidth = NXOpen::Annotations::LineWidthThin;
					//id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
					//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					//generalTextLineWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
				}
				else if (int_generalTextLineWidth == 6) {
					generalTextLineWidth = NXOpen::Annotations::LineWidthOne;
				}
				else if (int_generalTextLineWidth == 7) {
					generalTextLineWidth = NXOpen::Annotations::LineWidthTwo;
				}
				else if (int_generalTextLineWidth == 8) {
					generalTextLineWidth = NXOpen::Annotations::LineWidthThree;
				}
				else if (int_generalTextLineWidth == 9) {
					generalTextLineWidth = NXOpen::Annotations::LineWidthFour;
				}
				else if (int_generalTextLineWidth == 10) {
					generalTextLineWidth = NXOpen::Annotations::LineWidthFive;
				}
				else if (int_generalTextLineWidth == 11) {
					generalTextLineWidth = NXOpen::Annotations::LineWidthSix;
				}
				else if (int_generalTextLineWidth == 12) {
					generalTextLineWidth = NXOpen::Annotations::LineWidthSeven;
				}
				else if (int_generalTextLineWidth == 13) {
					generalTextLineWidth = NXOpen::Annotations::LineWidthEight;
				}
				else if (int_generalTextLineWidth == 14) {
					generalTextLineWidth = NXOpen::Annotations::LineWidthNine;
				}
				_preferencesBuilder->AnnotationStyle()->LetteringStyle()->SetGeneralTextLineWidth(generalTextLineWidth);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the character height for general text.
	if (_nx_dpv->usedUnitValue.compare("1") == 0) {
		id_name.assign("Drafting_draftTextCharSize_MU");
	}
	else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
		id_name.assign("Drafting_draftTextCharSize_EU");
	}
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double generalTextSize = 0.0;
			generalTextSize = _preferencesBuilder->AnnotationStyle()->LetteringStyle()->GeneralTextSize();
			ist_id_value.assign(convert_to_string(generalTextSize));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				generalTextSize = convert_to_double(soll_id_value);
				_preferencesBuilder->AnnotationStyle()->LetteringStyle()->SetGeneralTextSize(generalTextSize);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the NX Font spacing between the characters in the general text as a multiple of the standard character spacing for the current font.
	id_name.assign("Drafting_draftTextSpaceFactor");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double generalNxTextCharSpaceFactor = 0.0;
			generalNxTextCharSpaceFactor = _preferencesBuilder->AnnotationStyle()->LetteringStyle()->GeneralNxTextCharacterSpaceFactor();
			ist_id_value.assign(convert_to_string(generalNxTextCharSpaceFactor));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				generalNxTextCharSpaceFactor = convert_to_double(soll_id_value);
				_preferencesBuilder->AnnotationStyle()->LetteringStyle()->SetGeneralNxTextCharacterSpaceFactor(generalNxTextCharSpaceFactor);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the Standard Font spacing between the characters in the general text as a multiple of the standard character spacing for the current font.
	id_name.assign("Drafting_standardDraftTextSpaceFactor");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			//_preferencesBuilder->InheritSettingsFromPreferences();
			double generalStandardTextCharSpaceFactor = 0.0;
			generalStandardTextCharSpaceFactor = _preferencesBuilder->AnnotationStyle()->LetteringStyle()->GeneralStandardTextCharacterSpaceFactor();
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - %s - generalStandardTextCharSpaceFactor=%f \n", id_name.c_str(), routineName.c_str(), generalStandardTextCharSpaceFactor);
			ist_id_value.assign(convert_to_string(generalStandardTextCharSpaceFactor));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				generalStandardTextCharSpaceFactor = convert_to_double(soll_id_value);
				_preferencesBuilder->AnnotationStyle()->LetteringStyle()->SetGeneralStandardTextCharacterSpaceFactor(generalStandardTextCharSpaceFactor);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the aspect ratio at which general text is displayed in relation to the original size of the current font. The aspect ratio is the ratio of the character's width to its height.
	id_name.assign("Drafting_draftTextAspectRatio");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double generalTextAspectRatio = 0.0;
			generalTextAspectRatio = _preferencesBuilder->AnnotationStyle()->LetteringStyle()->GeneralTextAspectRatio();
			ist_id_value.assign(convert_to_string(generalTextAspectRatio));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				generalTextAspectRatio = convert_to_double(soll_id_value);
				_preferencesBuilder->AnnotationStyle()->LetteringStyle()->SetGeneralTextAspectRatio(generalTextAspectRatio);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the aspect ratio at which the symbols are displayed in relation to the original size of the current symbol. 
	//The aspect ratio is the ratio of the symbol's width to its height. Only symbols created using the NX control characters are supported.
	id_name.assign("Drafting_draftTextSymbolAspectRatio");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double generalTextSymbolAspectRatio = 0.0;
			generalTextSymbolAspectRatio = _preferencesBuilder->AnnotationStyle()->LetteringStyle()->GeneralTextSymbolAspectRatio();
			ist_id_value.assign(convert_to_string(generalTextSymbolAspectRatio));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				generalTextSymbolAspectRatio = convert_to_double(soll_id_value);
				_preferencesBuilder->AnnotationStyle()->LetteringStyle()->SetGeneralTextSymbolAspectRatio(generalTextSymbolAspectRatio);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the line spacing value for general text as a multiple of the standard spacing for the current font.
	id_name.assign("Drafting_draftTextLineFactor");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double generalTextLineSpaceFactor = 0.0;
			generalTextLineSpaceFactor = _preferencesBuilder->AnnotationStyle()->LetteringStyle()->GeneralTextLineSpaceFactor();
			ist_id_value.assign(convert_to_string(generalTextLineSpaceFactor));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				generalTextLineSpaceFactor = convert_to_double(soll_id_value);
				_preferencesBuilder->AnnotationStyle()->LetteringStyle()->SetGeneralTextLineSpaceFactor(generalTextLineSpaceFactor);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the angle of general text (notes and labels) and balloons.
	id_name.assign("Drafting_draftingAidAngle");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double letteringAngle = 0.0;
			letteringAngle = _preferencesBuilder->AnnotationStyle()->LetteringStyle()->Angle();
			ist_id_value.assign(convert_to_string(letteringAngle));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				letteringAngle = convert_to_double(soll_id_value);
				_preferencesBuilder->AnnotationStyle()->LetteringStyle()->SetAngle(letteringAngle);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the size of the geometric tolerance symbol frame relative to the character size.
	id_name.assign("Drafting_frameSize");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;_preferencesBuilder->Commit();
			double gdtFrameHeightFactor = 0.0;
			gdtFrameHeightFactor = _preferencesBuilder->AnnotationStyle()->LetteringStyle()->GdtFrameHeightFactor();
			ist_id_value.assign(convert_to_string(gdtFrameHeightFactor));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				gdtFrameHeightFactor = convert_to_double(soll_id_value);
				_preferencesBuilder->AnnotationStyle()->LetteringStyle()->SetGdtFrameHeightFactor(gdtFrameHeightFactor);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the symbol font file used for symbols if the text type is of standard font.
	id_name.assign("Drafting_symbolTextFont");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXString symbolFontFile;
			symbolFontFile = _preferencesBuilder->AnnotationStyle()->LetteringStyle()->SymbolFontFile();
			ist_id_value.assign(symbolFontFile.GetLocaleText());
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				symbolFontFile = (NXString)soll_id_value.c_str();
				_preferencesBuilder->AnnotationStyle()->LetteringStyle()->SetSymbolFontFile(symbolFontFile);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- STOPP - %s --- \n", routineName.c_str());
}

/*
File - Preferences - Drafting - Common - Line/Arrow - Arrowhaead -> Repair these preferences.
*/
void repair_DraftingStandard_Common_LineArrow_Arrowhead_prefs(NXOpen::Drafting::PreferencesBuilder *_preferencesBuilder, en_nx_dpv* _nx_dpv, Session * _theSession, Part* _workPart) {
	routineName.assign("repair_DraftingStandard_Common_LineArrow_Arrowhead_prefs");
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- START - %s --- \n", routineName.c_str());

	//This option determines whether or not the arrow orientation for dimensions will be automatically determined or based on the arrowhead orientation defaults.
	id_name.assign("Drafting_automaticOrientation");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::TextPlacement textPlacement;
			textPlacement = _preferencesBuilder->AnnotationStyle()->DimensionStyle()->TextArrowPlacement();
			bool textArrowPlacement;
			if (textPlacement == NXOpen::Annotations::TextPlacementAutomatic) {
				textArrowPlacement = true;
			}
			else {
				textArrowPlacement = false;
			}
			ist_id_value.assign(convert_to_string(textArrowPlacement));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				textArrowPlacement = convert_to_bool(soll_id_value);
				string id_name_tmp;
				id_name_tmp.assign("Drafting_arrowhead1Type");
				std::map<const std::string, std::string>::iterator it_tmp;
				it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				int int_firstArrowType;
				int_firstArrowType = convert_to_int(it_tmp->second);
				NXOpen::Annotations::ArrowheadType firstArrowType;
				if (int_firstArrowType == -2) {
					firstArrowType = NXOpen::Annotations::ArrowheadTypeFilledDatumArrow;
				}
				else if (int_firstArrowType == -1) {
					firstArrowType = NXOpen::Annotations::ArrowheadTypeFilledDot;
				}
				else if (int_firstArrowType == 0) {
					firstArrowType = NXOpen::Annotations::ArrowheadTypeFilledArrow;
				}
				else if (int_firstArrowType == 1) {
					firstArrowType = NXOpen::Annotations::ArrowheadTypeClosedArrow;
				}
				else if (int_firstArrowType == 2) {
					firstArrowType = NXOpen::Annotations::ArrowheadTypeOpenArrow;
				}
				else if (int_firstArrowType == 3) {
					firstArrowType = NXOpen::Annotations::ArrowheadTypeCrossArrow;
				}
				else if (int_firstArrowType == 4) {
					firstArrowType = NXOpen::Annotations::ArrowheadTypeDotArrow;
				}
				else if (int_firstArrowType == 5) {
					firstArrowType = NXOpen::Annotations::ArrowheadTypeOriginSymbolArrow;
				}
				else if (int_firstArrowType == 6) {
					firstArrowType = NXOpen::Annotations::ArrowheadTypeNoArrow;
				}
				else if (int_firstArrowType == 7) {
					firstArrowType = NXOpen::Annotations::ArrowheadTypeUnfilledDatumArrow;
				}
				else if (int_firstArrowType == 8) {
					firstArrowType = NXOpen::Annotations::ArrowheadTypeClosedSolidArrow;
				}
				else if (int_firstArrowType == 9) {
					firstArrowType = NXOpen::Annotations::ArrowheadTypeClosedDoubleArrow;
				}
				else if (int_firstArrowType == 10) {
					firstArrowType = NXOpen::Annotations::ArrowheadTypeClosedDoubleSolidArrow;
				}
				else if (int_firstArrowType == 11) {
					firstArrowType = NXOpen::Annotations::ArrowheadTypeOpenDoubleArrow;
				}
				else if (int_firstArrowType == 12) {
					firstArrowType = NXOpen::Annotations::ArrowheadTypeIntegralArrow;
				}
				else if (int_firstArrowType == 13) {
					firstArrowType = NXOpen::Annotations::ArrowheadTypeBoxArrow;
				}
				else if (int_firstArrowType == 14) {
					firstArrowType = NXOpen::Annotations::ArrowheadTypeFilledBox;
				}
				else if (int_firstArrowType == 15) {
					firstArrowType = NXOpen::Annotations::ArrowheadTypeFilledDoubleArrow;
				}
				else if (int_firstArrowType == 16) {
					firstArrowType = NXOpen::Annotations::ArrowheadTypeTopOpenArrow;
				}
				else if (int_firstArrowType == 17) {
					firstArrowType = NXOpen::Annotations::ArrowheadTypeBottomOpenArrow;
				}
				else if (int_firstArrowType == 18) {
					firstArrowType = NXOpen::Annotations::ArrowheadTypeTopFilledArrow;
				}
				else if (int_firstArrowType == 19) {
					firstArrowType = NXOpen::Annotations::ArrowheadTypeBottomFilledArrow;
				}
				if (textArrowPlacement == true) {
					//TRUE
					_preferencesBuilder->AnnotationStyle()->DimensionStyle()->SetTextArrowPlacement(NXOpen::Annotations::TextPlacementAutomatic);
					_preferencesBuilder->AnnotationStyle()->LineArrowStyle()->SetFirstArrowType(firstArrowType);
					_preferencesBuilder->AnnotationStyle()->LineArrowStyle()->SetSecondArrowType(firstArrowType);
					//_preferencesBuilder->AnnotationStyle()->DimensionStyle()->SetReverseArrowDirection(ReversArrowDirection);
				}
				else if (textArrowPlacement == false) {
					//FALSE
					_preferencesBuilder->AnnotationStyle()->DimensionStyle()->SetTextArrowPlacement(NXOpen::Annotations::TextPlacementManualArrowsIn);
					_preferencesBuilder->AnnotationStyle()->LineArrowStyle()->SetFirstArrowType(firstArrowType);
					_preferencesBuilder->AnnotationStyle()->LineArrowStyle()->SetSecondArrowType(firstArrowType);
					bool ReversArrowDirection;
					ReversArrowDirection = _preferencesBuilder->AnnotationStyle()->DimensionStyle()->ReverseArrowDirection();
					//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ReversArrowDirection = %s! \n", routineName.c_str(), ReversArrowDirection ? "true" : "false" );
					_preferencesBuilder->AnnotationStyle()->DimensionStyle()->SetReverseArrowDirection(ReversArrowDirection);
				}
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the type of arrowhead for the first dimension arrow. This option also specifies the arrowhead for other drafting aids.
	id_name.assign("Drafting_arrowhead1Type");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::ArrowheadType firstArrowType;
			firstArrowType = _preferencesBuilder->AnnotationStyle()->LineArrowStyle()->FirstArrowType();
			int int_firstArrowType;
			if (firstArrowType == NXOpen::Annotations::ArrowheadTypeFilledDatumArrow) {
				int_firstArrowType = -2;
			}
			else if (firstArrowType == NXOpen::Annotations::ArrowheadTypeFilledDot) {
				int_firstArrowType = -1;
			}
			else if (firstArrowType == NXOpen::Annotations::ArrowheadTypeFilledArrow) {
				int_firstArrowType = 0;
			}
			else if (firstArrowType == NXOpen::Annotations::ArrowheadTypeClosedArrow) {
				int_firstArrowType = 1;
			}
			else if (firstArrowType == NXOpen::Annotations::ArrowheadTypeOpenArrow) {
				int_firstArrowType = 2;
			}
			else if (firstArrowType == NXOpen::Annotations::ArrowheadTypeCrossArrow) {
				int_firstArrowType = 3;
			}
			else if (firstArrowType == NXOpen::Annotations::ArrowheadTypeDotArrow) {
				int_firstArrowType = 4;
			}
			else if (firstArrowType == NXOpen::Annotations::ArrowheadTypeOriginSymbolArrow) {
				int_firstArrowType = 5;
			}
			else if (firstArrowType == NXOpen::Annotations::ArrowheadTypeNoArrow) {
				int_firstArrowType = 6;
			}
			else if (firstArrowType == NXOpen::Annotations::ArrowheadTypeUnfilledDatumArrow) {
				int_firstArrowType = 7;
			}
			else if (firstArrowType == NXOpen::Annotations::ArrowheadTypeClosedSolidArrow) {
				int_firstArrowType = 8;
			}
			else if (firstArrowType == NXOpen::Annotations::ArrowheadTypeClosedDoubleArrow) {
				int_firstArrowType = 9;
			}
			else if (firstArrowType == NXOpen::Annotations::ArrowheadTypeClosedDoubleSolidArrow) {
				int_firstArrowType = 10;
			}
			else if (firstArrowType == NXOpen::Annotations::ArrowheadTypeOpenDoubleArrow) {
				int_firstArrowType = 11;
			}
			else if (firstArrowType == NXOpen::Annotations::ArrowheadTypeIntegralArrow) {
				int_firstArrowType = 12;
			}
			else if (firstArrowType == NXOpen::Annotations::ArrowheadTypeBoxArrow) {
				int_firstArrowType = 13;
			}
			else if (firstArrowType == NXOpen::Annotations::ArrowheadTypeFilledBox) {
				int_firstArrowType = 14;
			}
			else if (firstArrowType == NXOpen::Annotations::ArrowheadTypeFilledDoubleArrow) {
				int_firstArrowType = 15;
			}
			else if (firstArrowType == NXOpen::Annotations::ArrowheadTypeTopOpenArrow) {
				int_firstArrowType = 16;
			}
			else if (firstArrowType == NXOpen::Annotations::ArrowheadTypeBottomOpenArrow) {
				int_firstArrowType = 17;
			}
			else if (firstArrowType == NXOpen::Annotations::ArrowheadTypeTopFilledArrow) {
				int_firstArrowType = 18;
			}
			else if (firstArrowType == NXOpen::Annotations::ArrowheadTypeBottomFilledArrow) {
				int_firstArrowType = 19;
			}
			else {
				int_firstArrowType = -999;
			}
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - Drafting_arrowhead1Type - %s = %d \n", routineName.c_str(), id_name.c_str(), int_firstArrowType);
			ist_id_value.assign(convert_to_string(int_firstArrowType));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_firstArrowType = convert_to_int(soll_id_value);
				if (int_firstArrowType == -2) {
					firstArrowType = NXOpen::Annotations::ArrowheadTypeFilledDatumArrow;
				}
				else if (int_firstArrowType == -1) {
					firstArrowType = NXOpen::Annotations::ArrowheadTypeFilledDot;
				}
				else if (int_firstArrowType == 0) {
					firstArrowType = NXOpen::Annotations::ArrowheadTypeFilledArrow;
				}
				else if (int_firstArrowType == 1) {
					firstArrowType = NXOpen::Annotations::ArrowheadTypeClosedArrow;
				}
				else if (int_firstArrowType == 2) {
					firstArrowType = NXOpen::Annotations::ArrowheadTypeOpenArrow;
				}
				else if (int_firstArrowType == 3) {
					firstArrowType = NXOpen::Annotations::ArrowheadTypeCrossArrow;
				}
				else if (int_firstArrowType == 4) {
					firstArrowType = NXOpen::Annotations::ArrowheadTypeDotArrow;
				}
				else if (int_firstArrowType == 5) {
					firstArrowType = NXOpen::Annotations::ArrowheadTypeOriginSymbolArrow;
				}
				else if (int_firstArrowType == 6) {
					firstArrowType = NXOpen::Annotations::ArrowheadTypeNoArrow;
				}
				else if (int_firstArrowType == 7) {
					firstArrowType = NXOpen::Annotations::ArrowheadTypeUnfilledDatumArrow;
				}
				else if (int_firstArrowType == 8) {
					firstArrowType = NXOpen::Annotations::ArrowheadTypeClosedSolidArrow;
				}
				else if (int_firstArrowType == 9) {
					firstArrowType = NXOpen::Annotations::ArrowheadTypeClosedDoubleArrow;
				}
				else if (int_firstArrowType == 10) {
					firstArrowType = NXOpen::Annotations::ArrowheadTypeClosedDoubleSolidArrow;
				}
				else if (int_firstArrowType == 11) {
					firstArrowType = NXOpen::Annotations::ArrowheadTypeOpenDoubleArrow;
				}
				else if (int_firstArrowType == 12) {
					firstArrowType = NXOpen::Annotations::ArrowheadTypeIntegralArrow;
				}
				else if (int_firstArrowType == 13) {
					firstArrowType = NXOpen::Annotations::ArrowheadTypeBoxArrow;
				}
				else if (int_firstArrowType == 14) {
					firstArrowType = NXOpen::Annotations::ArrowheadTypeFilledBox;
				}
				else if (int_firstArrowType == 15) {
					firstArrowType = NXOpen::Annotations::ArrowheadTypeFilledDoubleArrow;
				}
				else if (int_firstArrowType == 16) {
					firstArrowType = NXOpen::Annotations::ArrowheadTypeTopOpenArrow;
				}
				else if (int_firstArrowType == 17) {
					firstArrowType = NXOpen::Annotations::ArrowheadTypeBottomOpenArrow;
				}
				else if (int_firstArrowType == 18) {
					firstArrowType = NXOpen::Annotations::ArrowheadTypeTopFilledArrow;
				}
				else if (int_firstArrowType == 19) {
					firstArrowType = NXOpen::Annotations::ArrowheadTypeBottomFilledArrow;
				}
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s -  %s - firstArrowType = %d \n", routineName.c_str(), id_name.c_str(), (int)firstArrowType);
				_preferencesBuilder->AnnotationStyle()->LineArrowStyle()->SetFirstArrowType(firstArrowType);
				//_preferencesBuilder->AnnotationStyle()->LineArrowStyle()->SetSecondArrowType(firstArrowType);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the color of the first arrowhead.
	if (_nx_dpv->usedUnitValue.compare("1") == 0) {
		id_name.assign("Drafting_arrowHead1Color_MU");
	}
	else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
		id_name.assign("Drafting_arrowHead1Color_EU");
	}
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			//int_firstArrowheadColor = _workPart->Annotations()->Preferences()->GetLineAndArrowPreferences()->GetFirstArrowheadCfw().Color;
			NXOpen::NXColor *firstArrowheadColor = NULL;
			firstArrowheadColor = _preferencesBuilder->AnnotationStyle()->LineArrowStyle()->FirstArrowheadColor();
			int firstArrowheadColorIndex = firstArrowheadColor->Handle();
			ist_id_value.assign(convert_to_string(firstArrowheadColorIndex));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				firstArrowheadColorIndex = convert_to_int(soll_id_value);
				firstArrowheadColor = _workPart->Colors()->Find(firstArrowheadColorIndex);
				_preferencesBuilder->AnnotationStyle()->LineArrowStyle()->SetFirstArrowheadColor(firstArrowheadColor);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the line font for the first arrowhead.
	id_name.assign("Drafting_arrowHead1Font");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::DisplayableObject::ObjectFont firstExtensionLineFont;
			firstExtensionLineFont = _preferencesBuilder->AnnotationStyle()->LineArrowStyle()->FirstExtensionLineFont();
			int int_firstExtensionLineFont;
			if (firstExtensionLineFont == NXOpen::DisplayableObject::ObjectFontSolid) {
				int_firstExtensionLineFont = 1;
			}
			else if (firstExtensionLineFont == NXOpen::DisplayableObject::ObjectFontDashed) {
				int_firstExtensionLineFont = 2;
			}
			else if (firstExtensionLineFont == NXOpen::DisplayableObject::ObjectFontPhantom) {
				int_firstExtensionLineFont = 3;
			}
			else if (firstExtensionLineFont == NXOpen::DisplayableObject::ObjectFontCenterline) {
				int_firstExtensionLineFont = 4;
			}
			else if (firstExtensionLineFont == NXOpen::DisplayableObject::ObjectFontDotted) {
				int_firstExtensionLineFont = 5;
			}
			else if (firstExtensionLineFont == NXOpen::DisplayableObject::ObjectFontLongDashed) {
				int_firstExtensionLineFont = 6;
			}
			else if (firstExtensionLineFont == NXOpen::DisplayableObject::ObjectFontDottedDashed) {
				int_firstExtensionLineFont = 7;
			}
			ist_id_value.assign(convert_to_string(int_firstExtensionLineFont));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_firstExtensionLineFont = convert_to_int(soll_id_value);
				if (int_firstExtensionLineFont == 1) {
					firstExtensionLineFont = NXOpen::DisplayableObject::ObjectFontSolid;
				}
				else if (int_firstExtensionLineFont == 2) {
					firstExtensionLineFont = NXOpen::DisplayableObject::ObjectFontDashed;
				}
				else if (int_firstExtensionLineFont == 3) {
					firstExtensionLineFont = NXOpen::DisplayableObject::ObjectFontPhantom;
				}
				else if (int_firstExtensionLineFont == 4) {
					firstExtensionLineFont = NXOpen::DisplayableObject::ObjectFontCenterline;
				}
				else if (int_firstExtensionLineFont == 5) {
					firstExtensionLineFont = NXOpen::DisplayableObject::ObjectFontDotted;
				}
				else if (int_firstExtensionLineFont == 6) {
					firstExtensionLineFont = NXOpen::DisplayableObject::ObjectFontLongDashed;
				}
				else if (int_firstExtensionLineFont == 7) {
					firstExtensionLineFont = NXOpen::DisplayableObject::ObjectFontDottedDashed;
				}
				_preferencesBuilder->AnnotationStyle()->LineArrowStyle()->SetFirstExtensionLineFont(firstExtensionLineFont);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the line width for the first arrowhead.
	id_name.assign("Drafting_arrowHead1Width");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::LineWidth firstArrowheadWidth;
			firstArrowheadWidth = _preferencesBuilder->AnnotationStyle()->LineArrowStyle()->FirstArrowheadWidth();
			int int_firstArrowheadWidth;

			if (firstArrowheadWidth == NXOpen::Annotations::LineWidthNormal) {
				int_firstArrowheadWidth = 1;
			}
			else if (firstArrowheadWidth == NXOpen::Annotations::LineWidthThick) {
				int_firstArrowheadWidth = 2;
			}
			else if (firstArrowheadWidth == NXOpen::Annotations::LineWidthThin) {
				int_firstArrowheadWidth = 3;
			}
			else if (firstArrowheadWidth == NXOpen::Annotations::LineWidthOne) {
				int_firstArrowheadWidth = 6;
			}
			else if (firstArrowheadWidth == NXOpen::Annotations::LineWidthTwo) {
				int_firstArrowheadWidth = 7;
			}
			else if (firstArrowheadWidth == NXOpen::Annotations::LineWidthThree) {
				int_firstArrowheadWidth = 8;
			}
			else if (firstArrowheadWidth == NXOpen::Annotations::LineWidthFour) {
				int_firstArrowheadWidth = 9;
			}
			else if (firstArrowheadWidth == NXOpen::Annotations::LineWidthFive) {
				int_firstArrowheadWidth = 10;
			}
			else if (firstArrowheadWidth == NXOpen::Annotations::LineWidthSix) {
				int_firstArrowheadWidth = 11;
			}
			else if (firstArrowheadWidth == NXOpen::Annotations::LineWidthSeven) {
				int_firstArrowheadWidth = 12;
			}
			else if (firstArrowheadWidth == NXOpen::Annotations::LineWidthEight) {
				int_firstArrowheadWidth = 13;
			}
			else if (firstArrowheadWidth == NXOpen::Annotations::LineWidthNine) {
				int_firstArrowheadWidth = 14;
			}
			else {
				int_firstArrowheadWidth = -999;
			}
			//string id_name_tmp;
			//std::map<const std::string, std::string>::iterator it_tmp;
			//if (int_firstArrowheadWidth == 1) {
			//	id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
			//	it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
			//	int_firstArrowheadWidth = convert_to_int(it_tmp->second);
			//}
			//if (int_firstArrowheadWidth == 2) {
			//	id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
			//	it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
			//	int_firstArrowheadWidth = convert_to_int(it_tmp->second);
			//}
			//if (int_firstArrowheadWidth == 3) {
			//	id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
			//	it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
			//	int_firstArrowheadWidth = convert_to_int(it_tmp->second);
			//}
			//_nx_dpv->soll_dpv_map.find(id_name)->second = convert_to_string(int_firstArrowheadWidth);
			//int_firstArrowheadWidth = (int)firstArrowheadWidth;
			ist_id_value.assign(convert_to_string(int_firstArrowheadWidth));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_firstArrowheadWidth = convert_to_int(soll_id_value);
				if (int_firstArrowheadWidth == 1) {
					firstArrowheadWidth = NXOpen::Annotations::LineWidthNormal;
					//id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
					//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					//firstArrowheadWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
				}
				else if (int_firstArrowheadWidth == 2) {
					firstArrowheadWidth = NXOpen::Annotations::LineWidthThick;
					//id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
					//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					//firstArrowheadWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
				}
				else if (int_firstArrowheadWidth == 3) {
					firstArrowheadWidth = NXOpen::Annotations::LineWidthThin;
					//id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
					//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					//firstArrowheadWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
				}
				else if (int_firstArrowheadWidth == 6) {
					firstArrowheadWidth = NXOpen::Annotations::LineWidthOne;
				}
				else if (int_firstArrowheadWidth == 7) {
					firstArrowheadWidth = NXOpen::Annotations::LineWidthTwo;
				}
				else if (int_firstArrowheadWidth == 8) {
					firstArrowheadWidth = NXOpen::Annotations::LineWidthThree;
				}
				else if (int_firstArrowheadWidth == 9) {
					firstArrowheadWidth = NXOpen::Annotations::LineWidthFour;
				}
				else if (int_firstArrowheadWidth == 10) {
					firstArrowheadWidth = NXOpen::Annotations::LineWidthFive;
				}
				else if (int_firstArrowheadWidth == 11) {
					firstArrowheadWidth = NXOpen::Annotations::LineWidthSix;
				}
				else if (int_firstArrowheadWidth == 12) {
					firstArrowheadWidth = NXOpen::Annotations::LineWidthSeven;
				}
				else if (int_firstArrowheadWidth == 13) {
					firstArrowheadWidth = NXOpen::Annotations::LineWidthEight;
				}
				else if (int_firstArrowheadWidth == 14) {
					firstArrowheadWidth = NXOpen::Annotations::LineWidthNine;
				}
				_preferencesBuilder->AnnotationStyle()->LineArrowStyle()->SetFirstArrowheadWidth(firstArrowheadWidth);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the arrowhead orientation for leaders and dimension line side 1 when automatic orientation is turned off.
	id_name.assign("Drafting_textArrowPlacementSideOne");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::TextPlacement textArrowPlacement;
			textArrowPlacement = _preferencesBuilder->AnnotationStyle()->DimensionStyle()->TextArrowPlacement();
			int int_textArrowPlacement;
			//int_textArrowPlacement = (int)textArrowPlacement;
			if (textArrowPlacement == NXOpen::Annotations::TextPlacementManualArrowsIn) {
				int_textArrowPlacement = 2;
			} else if (textArrowPlacement == NXOpen::Annotations::TextPlacementManualArrowsOut) {
				int_textArrowPlacement = 3;
			}
			ist_id_value.assign(convert_to_string(int_textArrowPlacement));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_textArrowPlacement = convert_to_int(soll_id_value);
				NXOpen::Annotations::TextPlacement textArrowPlacement;
				//textArrowPlacement = (NXOpen::Annotations::TextPlacement)int_textArrowPlacement;
				if (int_textArrowPlacement == 2) {
					textArrowPlacement = NXOpen::Annotations::TextPlacementManualArrowsIn;
				}
				else if (int_textArrowPlacement == 3) {
					textArrowPlacement = NXOpen::Annotations::TextPlacementManualArrowsOut;
				}
				_preferencesBuilder->AnnotationStyle()->DimensionStyle()->SetTextArrowPlacement(textArrowPlacement);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the type of arrowhead for the second dimension arrow.
	id_name.assign("Drafting_arrowhead2Type");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::ArrowheadType secondArrowType;
			//secondArrowType = _workPart->Annotations()->Preferences()->GetLineAndArrowPreferences()->SecondArrowType();
			secondArrowType = _preferencesBuilder->AnnotationStyle()->LineArrowStyle()->SecondArrowType();
			int int_secondArrowType;
			if (secondArrowType == NXOpen::Annotations::ArrowheadTypeFilledDatumArrow) {
				int_secondArrowType = -2;
			}
			else if (secondArrowType == NXOpen::Annotations::ArrowheadTypeFilledDot) {
				int_secondArrowType = -1;
			}
			else if (secondArrowType == NXOpen::Annotations::ArrowheadTypeFilledArrow) {
				int_secondArrowType = 0;
			}
			else if (secondArrowType == NXOpen::Annotations::ArrowheadTypeClosedArrow) {
				int_secondArrowType = 1;
			}
			else if (secondArrowType == NXOpen::Annotations::ArrowheadTypeOpenArrow) {
				int_secondArrowType = 2;
			}
			else if (secondArrowType == NXOpen::Annotations::ArrowheadTypeCrossArrow) {
				int_secondArrowType = 3;
			}
			else if (secondArrowType == NXOpen::Annotations::ArrowheadTypeDotArrow) {
				int_secondArrowType = 4;
			}
			else if (secondArrowType == NXOpen::Annotations::ArrowheadTypeOriginSymbolArrow) {
				int_secondArrowType = 5;
			}
			else if (secondArrowType == NXOpen::Annotations::ArrowheadTypeNoArrow) {
				int_secondArrowType = 6;
			}
			else if (secondArrowType == NXOpen::Annotations::ArrowheadTypeUnfilledDatumArrow) {
				int_secondArrowType = 7;
			}
			else if (secondArrowType == NXOpen::Annotations::ArrowheadTypeClosedSolidArrow) {
				int_secondArrowType = 8;
			}
			else if (secondArrowType == NXOpen::Annotations::ArrowheadTypeClosedDoubleArrow) {
				int_secondArrowType = 9;
			}
			else if (secondArrowType == NXOpen::Annotations::ArrowheadTypeClosedDoubleSolidArrow) {
				int_secondArrowType = 10;
			}
			else if (secondArrowType == NXOpen::Annotations::ArrowheadTypeOpenDoubleArrow) {
				int_secondArrowType = 11;
			}
			else if (secondArrowType == NXOpen::Annotations::ArrowheadTypeIntegralArrow) {
				int_secondArrowType = 12;
			}
			else if (secondArrowType == NXOpen::Annotations::ArrowheadTypeBoxArrow) {
				int_secondArrowType = 13;
			}
			else if (secondArrowType == NXOpen::Annotations::ArrowheadTypeFilledBox) {
				int_secondArrowType = 14;
			}
			else if (secondArrowType == NXOpen::Annotations::ArrowheadTypeFilledDoubleArrow) {
				int_secondArrowType = 15;
			}
			else if (secondArrowType == NXOpen::Annotations::ArrowheadTypeTopOpenArrow) {
				int_secondArrowType = 16;
			}
			else if (secondArrowType == NXOpen::Annotations::ArrowheadTypeBottomOpenArrow) {
				int_secondArrowType = 17;
			}
			else if (secondArrowType == NXOpen::Annotations::ArrowheadTypeTopFilledArrow) {
				int_secondArrowType = 18;
			}
			else if (secondArrowType == NXOpen::Annotations::ArrowheadTypeBottomFilledArrow) {
				int_secondArrowType = 19;
			}
			else {
				int_secondArrowType = -999;
			}
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - %s - int_secondArrowType = %d \n", routineName.c_str(), id_name.c_str(), int_secondArrowType);
			ist_id_value.assign(convert_to_string(int_secondArrowType));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_secondArrowType = convert_to_int(soll_id_value);
				if (int_secondArrowType == -2) {
					secondArrowType = NXOpen::Annotations::ArrowheadTypeFilledDatumArrow;
				}
				else if (int_secondArrowType == -1) {
					secondArrowType = NXOpen::Annotations::ArrowheadTypeFilledDot;
				}
				else if (int_secondArrowType == 0) {
					secondArrowType = NXOpen::Annotations::ArrowheadTypeFilledArrow;
				}
				else if (int_secondArrowType == 1) {
					secondArrowType = NXOpen::Annotations::ArrowheadTypeClosedArrow;
				}
				else if (int_secondArrowType == 2) {
					secondArrowType = NXOpen::Annotations::ArrowheadTypeOpenArrow;
				}
				else if (int_secondArrowType == 3) {
					secondArrowType = NXOpen::Annotations::ArrowheadTypeCrossArrow;
				}
				else if (int_secondArrowType == 4) {
					secondArrowType = NXOpen::Annotations::ArrowheadTypeDotArrow;
				}
				else if (int_secondArrowType == 5) {
					secondArrowType = NXOpen::Annotations::ArrowheadTypeOriginSymbolArrow;
				}
				else if (int_secondArrowType == 6) {
					secondArrowType = NXOpen::Annotations::ArrowheadTypeNoArrow;
				}
				else if (int_secondArrowType == 7) {
					secondArrowType = NXOpen::Annotations::ArrowheadTypeUnfilledDatumArrow;
				}
				else if (int_secondArrowType == 8) {
					secondArrowType = NXOpen::Annotations::ArrowheadTypeClosedSolidArrow;
				}
				else if (int_secondArrowType == 9) {
					secondArrowType = NXOpen::Annotations::ArrowheadTypeClosedDoubleArrow;
				}
				else if (int_secondArrowType == 10) {
					secondArrowType = NXOpen::Annotations::ArrowheadTypeClosedDoubleSolidArrow;
				}
				else if (int_secondArrowType == 11) {
					secondArrowType = NXOpen::Annotations::ArrowheadTypeOpenDoubleArrow;
				}
				else if (int_secondArrowType == 12) {
					secondArrowType = NXOpen::Annotations::ArrowheadTypeIntegralArrow;
				}
				else if (int_secondArrowType == 13) {
					secondArrowType = NXOpen::Annotations::ArrowheadTypeBoxArrow;
				}
				else if (int_secondArrowType == 14) {
					secondArrowType = NXOpen::Annotations::ArrowheadTypeFilledBox;
				}
				else if (int_secondArrowType == 15) {
					secondArrowType = NXOpen::Annotations::ArrowheadTypeFilledDoubleArrow;
				}
				else if (int_secondArrowType == 16) {
					secondArrowType = NXOpen::Annotations::ArrowheadTypeTopOpenArrow;
				}
				else if (int_secondArrowType == 17) {
					secondArrowType = NXOpen::Annotations::ArrowheadTypeBottomOpenArrow;
				}
				else if (int_secondArrowType == 18) {
					secondArrowType = NXOpen::Annotations::ArrowheadTypeTopFilledArrow;
				}
				else if (int_secondArrowType == 19) {
					secondArrowType = NXOpen::Annotations::ArrowheadTypeBottomFilledArrow;
				}
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("set - Drafting_arrowhead2Type - secondArrowType = %d \n", routineName.c_str(), id_name.c_str(), (int)secondArrowType);
				_preferencesBuilder->AnnotationStyle()->LineArrowStyle()->SetSecondArrowType(secondArrowType);
				//_preferencesBuilder->AnnotationStyle()->LineArrowStyle()->SetFirstArrowType(secondArrowType);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the color of the second arrowhead.
	if (_nx_dpv->usedUnitValue.compare("1") == 0) {
		id_name.assign("Drafting_arrowHead2Color_MU");
	}
	else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
		id_name.assign("Drafting_arrowHead2Color_EU");
	}
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::NXColor *secondArrowheadColor = NULL;
			secondArrowheadColor = _preferencesBuilder->AnnotationStyle()->LineArrowStyle()->SecondArrowheadColor();
			int secondArrowheadColorIndex;
			secondArrowheadColorIndex = secondArrowheadColor->Handle();
			ist_id_value.assign(convert_to_string(secondArrowheadColorIndex));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				secondArrowheadColorIndex = convert_to_int(soll_id_value);
				secondArrowheadColor = _workPart->Colors()->Find(secondArrowheadColorIndex);
				_preferencesBuilder->AnnotationStyle()->LineArrowStyle()->SetSecondArrowheadColor(secondArrowheadColor);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the line font for the second arrowhead.
	id_name.assign("Drafting_arrowHead2Font");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::DisplayableObject::ObjectFont secondArrowHeadFont;
			secondArrowHeadFont = _preferencesBuilder->AnnotationStyle()->LineArrowStyle()->SecondExtensionLineFont();
			int int_secondArrowHeadFont;
			if (secondArrowHeadFont == NXOpen::DisplayableObject::ObjectFontSolid) {
				int_secondArrowHeadFont = 1;
			}
			else if (secondArrowHeadFont == NXOpen::DisplayableObject::ObjectFontDashed) {
				int_secondArrowHeadFont = 2;
			}
			else if (secondArrowHeadFont == NXOpen::DisplayableObject::ObjectFontPhantom) {
				int_secondArrowHeadFont = 3;
			}
			else if (secondArrowHeadFont == NXOpen::DisplayableObject::ObjectFontCenterline) {
				int_secondArrowHeadFont = 4;
			}
			else if (secondArrowHeadFont == NXOpen::DisplayableObject::ObjectFontDotted) {
				int_secondArrowHeadFont = 5;
			}
			else if (secondArrowHeadFont == NXOpen::DisplayableObject::ObjectFontLongDashed) {
				int_secondArrowHeadFont = 6;
			}
			else if (secondArrowHeadFont == NXOpen::DisplayableObject::ObjectFontDottedDashed) {
				int_secondArrowHeadFont = 7;
			}
			ist_id_value.assign(convert_to_string(int_secondArrowHeadFont));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_secondArrowHeadFont = convert_to_int(soll_id_value);
				if (int_secondArrowHeadFont == 1) {
					secondArrowHeadFont = NXOpen::DisplayableObject::ObjectFontSolid;
				}
				else if (int_secondArrowHeadFont == 2) {
					secondArrowHeadFont = NXOpen::DisplayableObject::ObjectFontDashed;
				}
				else if (int_secondArrowHeadFont == 3) {
					secondArrowHeadFont = NXOpen::DisplayableObject::ObjectFontPhantom;
				}
				else if (int_secondArrowHeadFont == 4) {
					secondArrowHeadFont = NXOpen::DisplayableObject::ObjectFontCenterline;
				}
				else if (int_secondArrowHeadFont == 5) {
					secondArrowHeadFont = NXOpen::DisplayableObject::ObjectFontDotted;
				}
				else if (int_secondArrowHeadFont == 6) {
					secondArrowHeadFont = NXOpen::DisplayableObject::ObjectFontLongDashed;
				}
				else if (int_secondArrowHeadFont == 7) {
					secondArrowHeadFont = NXOpen::DisplayableObject::ObjectFontDottedDashed;
				}
				_preferencesBuilder->AnnotationStyle()->LineArrowStyle()->SetSecondExtensionLineFont(secondArrowHeadFont);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the line width for the second arrowhead.
	id_name.assign("Drafting_arrowHead2Width");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::LineWidth secondArrowheadWidth;
			secondArrowheadWidth = _preferencesBuilder->AnnotationStyle()->LineArrowStyle()->SecondArrowheadWidth();
			int int_secondArrowheadWidth;

			if (secondArrowheadWidth == NXOpen::Annotations::LineWidthNormal) {
				int_secondArrowheadWidth = 1;
			}
			else if (secondArrowheadWidth == NXOpen::Annotations::LineWidthThick) {
				int_secondArrowheadWidth = 2;
			}
			else if (secondArrowheadWidth == NXOpen::Annotations::LineWidthThin) {
				int_secondArrowheadWidth = 3;
			}
			else if (secondArrowheadWidth == NXOpen::Annotations::LineWidthOne) {
				int_secondArrowheadWidth = 6;
			}
			else if (secondArrowheadWidth == NXOpen::Annotations::LineWidthTwo) {
				int_secondArrowheadWidth = 7;
			}
			else if (secondArrowheadWidth == NXOpen::Annotations::LineWidthThree) {
				int_secondArrowheadWidth = 8;
			}
			else if (secondArrowheadWidth == NXOpen::Annotations::LineWidthFour) {
				int_secondArrowheadWidth = 9;
			}
			else if (secondArrowheadWidth == NXOpen::Annotations::LineWidthFive) {
				int_secondArrowheadWidth = 10;
			}
			else if (secondArrowheadWidth == NXOpen::Annotations::LineWidthSix) {
				int_secondArrowheadWidth = 11;
			}
			else if (secondArrowheadWidth == NXOpen::Annotations::LineWidthSeven) {
				int_secondArrowheadWidth = 12;
			}
			else if (secondArrowheadWidth == NXOpen::Annotations::LineWidthEight) {
				int_secondArrowheadWidth = 13;
			}
			else if (secondArrowheadWidth == NXOpen::Annotations::LineWidthNine) {
				int_secondArrowheadWidth = 14;
			}
			else {
				int_secondArrowheadWidth = -999;
			}
			//string id_name_tmp;
			//std::map<const std::string, std::string>::iterator it_tmp;
			//if (int_secondArrowheadWidth == 1) {
			//	id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
			//	it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
			//	int_secondArrowheadWidth = convert_to_int(it_tmp->second);
			//}
			//if (int_secondArrowheadWidth == 2) {
			//	id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
			//	it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
			//	int_secondArrowheadWidth = convert_to_int(it_tmp->second);
			//}
			//if (int_secondArrowheadWidth == 3) {
			//	id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
			//	it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
			//	int_secondArrowheadWidth = convert_to_int(it_tmp->second);
			//}
			//_nx_dpv->soll_dpv_map.find(id_name)->second = convert_to_string(int_secondArrowheadWidth);
			ist_id_value.assign(convert_to_string(int_secondArrowheadWidth));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_secondArrowheadWidth = convert_to_int(soll_id_value);
				if (int_secondArrowheadWidth == 1) {
					secondArrowheadWidth = NXOpen::Annotations::LineWidthNormal;
					//id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
					//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					//secondArrowheadWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
				}
				else if (int_secondArrowheadWidth == 2) {
					secondArrowheadWidth = NXOpen::Annotations::LineWidthThick;
					//id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
					//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					//secondArrowheadWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
				}
				else if (int_secondArrowheadWidth == 3) {
					secondArrowheadWidth = NXOpen::Annotations::LineWidthThin;
					//id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
					//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					//secondArrowheadWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
				}
				else if (int_secondArrowheadWidth == 6) {
					secondArrowheadWidth = NXOpen::Annotations::LineWidthOne;
				}
				else if (int_secondArrowheadWidth == 7) {
					secondArrowheadWidth = NXOpen::Annotations::LineWidthTwo;
				}
				else if (int_secondArrowheadWidth == 8) {
					secondArrowheadWidth = NXOpen::Annotations::LineWidthThree;
				}
				else if (int_secondArrowheadWidth == 9) {
					secondArrowheadWidth = NXOpen::Annotations::LineWidthFour;
				}
				else if (int_secondArrowheadWidth == 10) {
					secondArrowheadWidth = NXOpen::Annotations::LineWidthFive;
				}
				else if (int_secondArrowheadWidth == 11) {
					secondArrowheadWidth = NXOpen::Annotations::LineWidthSix;
				}
				else if (int_secondArrowheadWidth == 12) {
					secondArrowheadWidth = NXOpen::Annotations::LineWidthSeven;
				}
				else if (int_secondArrowheadWidth == 13) {
					secondArrowheadWidth = NXOpen::Annotations::LineWidthEight;
				}
				else if (int_secondArrowheadWidth == 14) {
					secondArrowheadWidth = NXOpen::Annotations::LineWidthNine;
				}
				_preferencesBuilder->AnnotationStyle()->LineArrowStyle()->SetSecondArrowheadWidth(secondArrowheadWidth);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the arrowhead orientation for dimension line side 2 when automatic orientation is turned off.
	id_name.assign("Drafting_textArrowPlacementSideTwo");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			//bool is_direction;
			//is_direction = _preferencesBuilder->AnnotationStyle()->DimensionStyle()->ReverseArrowDirection();
			//_preferencesBuilder->AnnotationStyle()->DimensionStyle()->SetReverseArrowDirection(false);
			NXOpen::Annotations::TextPlacement textArrowPlacement;
			textArrowPlacement = _preferencesBuilder->AnnotationStyle()->DimensionStyle()->TextArrowPlacement();
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("Drafting_textArrowPlacementSideOne : textArrowPlacement = %d \n", (int)textArrowPlacement);
			//_preferencesBuilder->AnnotationStyle()->DimensionStyle()->SetReverseArrowDirection(is_direction);
			//
			int int_textArrowPlacement;
			//Achtung: Rückgabewert falsch
			//int_textArrowPlacement = (int)textArrowPlacement;
			if (textArrowPlacement == NXOpen::Annotations::TextPlacementManualArrowsIn) {
				int_textArrowPlacement = 2;
			}
			else if (textArrowPlacement == NXOpen::Annotations::TextPlacementManualArrowsOut) {
				int_textArrowPlacement = 3;
			}

			ist_id_value.assign(convert_to_string(int_textArrowPlacement));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_textArrowPlacement = convert_to_int(soll_id_value);
				NXOpen::Annotations::TextPlacement textArrowPlacement;
				//textArrowPlacement = (NXOpen::Annotations::TextPlacement)int_textArrowPlacement;
				if (int_textArrowPlacement == 2) {
					textArrowPlacement = NXOpen::Annotations::TextPlacementManualArrowsIn;
				}
				else if (int_textArrowPlacement == 3) {
					textArrowPlacement = NXOpen::Annotations::TextPlacementManualArrowsOut;
				}
				_preferencesBuilder->AnnotationStyle()->DimensionStyle()->SetTextArrowPlacement(textArrowPlacement);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the arrowhead length.
	if (_nx_dpv->usedUnitValue.compare("1") == 0) {
		id_name.assign("Drafting_arrowSize_MU");
	}
	else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
		id_name.assign("Drafting_arrowSize_EU");
	}
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double arrowheadLength;
			arrowheadLength = _preferencesBuilder->AnnotationStyle()->LineArrowStyle()->ArrowheadLength();
			ist_id_value.assign(convert_to_string(arrowheadLength));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				arrowheadLength = convert_to_double(soll_id_value);
				_preferencesBuilder->AnnotationStyle()->LineArrowStyle()->SetArrowheadLength(arrowheadLength);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the included angle for arrowheads.
	id_name.assign("Drafting_includedAngle");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double arrowheadIncludedAngle;
			arrowheadIncludedAngle = _preferencesBuilder->AnnotationStyle()->LineArrowStyle()->ArrowheadIncludedAngle();
			string string_arrowheadIncludedAngle;
			string_arrowheadIncludedAngle = convert_to_string(arrowheadIncludedAngle);
			arrowheadIncludedAngle = convert_to_double(string_arrowheadIncludedAngle);
			ist_id_value.assign(convert_to_string(arrowheadIncludedAngle));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				arrowheadIncludedAngle = convert_to_double(soll_id_value);
				_preferencesBuilder->AnnotationStyle()->LineArrowStyle()->SetArrowheadIncludedAngle(arrowheadIncludedAngle);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the dot diameter.
	if (_nx_dpv->usedUnitValue.compare("1") == 0) {
		id_name.assign("Drafting_dotDiameter_MU");
	}
	else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
		id_name.assign("Drafting_dotDiameter_EU");
	}
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double dotArrowheadDiameter;
			dotArrowheadDiameter = _preferencesBuilder->AnnotationStyle()->LineArrowStyle()->DotArrowheadDiameter();
			ist_id_value.assign(convert_to_string(dotArrowheadDiameter));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				dotArrowheadDiameter = convert_to_double(soll_id_value);
				_preferencesBuilder->AnnotationStyle()->LineArrowStyle()->SetDotArrowheadDiameter(dotArrowheadDiameter);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not the ordinate dimension lines will be clipped at their intersection with the view border of the view containing the reference object.
	id_name.assign("Drafting_clipOrdinateDimLine");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			bool clipOrdinateDimLine;
			clipOrdinateDimLine = _preferencesBuilder->AnnotationStyle()->LineArrowStyle()->ClipOrdinateDimensionLine();
			ist_id_value.assign(convert_to_string(clipOrdinateDimLine));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				clipOrdinateDimLine = convert_to_bool(soll_id_value);
				_preferencesBuilder->AnnotationStyle()->LineArrowStyle()->SetClipOrdinateDimensionLine(clipOrdinateDimLine);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- STOPP - %s --- \n", routineName.c_str());
}

/*
File - Preferences - Drafting - Common - Line/Arrow - Arrow Line/Leader -> Repair these preferences.
*/
void repair_DraftingStandard_Common_LineArrow_ArrowLineLeader_prefs(NXOpen::Drafting::PreferencesBuilder *_preferencesBuilder, en_nx_dpv* _nx_dpv, Session * _theSession, Part* _workPart) {
	routineName.assign("repair_DraftingStandard_Common_LineArrow_ArrowLineLeader_prefs");
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- START - %s --- \n", routineName.c_str());

	//This option determines whether or not the dimension line is displayed for leaders and side one of dimensions.
	id_name.assign("Drafting_showArrowLineSideOne");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::ArrowDisplay dimArrowDisplay;
			dimArrowDisplay = _preferencesBuilder->AnnotationStyle()->DimensionStyle()->DimArrowDisplay();
			bool bool_dimArrowDisplay;
			if (dimArrowDisplay != NXOpen::Annotations::ArrowDisplayNone && dimArrowDisplay != NXOpen::Annotations::ArrowDisplayLast) {
				bool_dimArrowDisplay = true;
			}
			else {
				bool_dimArrowDisplay = false;
			}
			ist_id_value.assign(convert_to_string(bool_dimArrowDisplay));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				bool_dimArrowDisplay = convert_to_bool(soll_id_value);
				if (bool_dimArrowDisplay == false) {
					dimArrowDisplay = NXOpen::Annotations::ArrowDisplayNone;
				}
				else {
					dimArrowDisplay = NXOpen::Annotations::ArrowDisplayFirst;
				}
				_preferencesBuilder->AnnotationStyle()->DimensionStyle()->SetDimArrowDisplay(dimArrowDisplay);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the color of the first arrow line.
	if (_nx_dpv->usedUnitValue.compare("1") == 0) {
		id_name.assign("Drafting_arrowLine1Color_MU");
	}
	else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
		id_name.assign("Drafting_arrowLine1Color_EU");
	}
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::NXColor *firstArrowLineColor;
			firstArrowLineColor = _preferencesBuilder->AnnotationStyle()->LineArrowStyle()->FirstArrowLineColor();
			int firstArrowLineColorIndex;
			firstArrowLineColorIndex = firstArrowLineColor->Handle();
			ist_id_value.assign(convert_to_string(firstArrowLineColorIndex));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				firstArrowLineColorIndex = convert_to_int(soll_id_value);
				firstArrowLineColor = _workPart->Colors()->Find(firstArrowLineColorIndex);
				_preferencesBuilder->AnnotationStyle()->LineArrowStyle()->SetFirstArrowLineColor(firstArrowLineColor);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the line font for the first arrow line.
	id_name.assign("Drafting_arrowLine1Font");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::DisplayableObject::ObjectFont firstArrowLineFont;
			firstArrowLineFont = _preferencesBuilder->AnnotationStyle()->LineArrowStyle()->FirstArrowLineFont();
			int int_firstArrowLineFont;
			if (firstArrowLineFont == NXOpen::DisplayableObject::ObjectFontSolid) {
				int_firstArrowLineFont = 1;
			}
			else if (firstArrowLineFont == NXOpen::DisplayableObject::ObjectFontDashed) {
				int_firstArrowLineFont = 2;
			}
			else if (firstArrowLineFont == NXOpen::DisplayableObject::ObjectFontPhantom) {
				int_firstArrowLineFont = 3;
			}
			else if (firstArrowLineFont == NXOpen::DisplayableObject::ObjectFontCenterline) {
				int_firstArrowLineFont = 4;
			}
			else if (firstArrowLineFont == NXOpen::DisplayableObject::ObjectFontDotted) {
				int_firstArrowLineFont = 5;
			}
			else if (firstArrowLineFont == NXOpen::DisplayableObject::ObjectFontLongDashed) {
				int_firstArrowLineFont = 6;
			}
			else if (firstArrowLineFont == NXOpen::DisplayableObject::ObjectFontDottedDashed) {
				int_firstArrowLineFont = 7;
			}
			ist_id_value.assign(convert_to_string(int_firstArrowLineFont));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_firstArrowLineFont = convert_to_int(soll_id_value);
				if (int_firstArrowLineFont == 1) {
					firstArrowLineFont = NXOpen::DisplayableObject::ObjectFontSolid;
				}
				else if (int_firstArrowLineFont == 2) {
					firstArrowLineFont = NXOpen::DisplayableObject::ObjectFontDashed;
				}
				else if (int_firstArrowLineFont == 3) {
					firstArrowLineFont = NXOpen::DisplayableObject::ObjectFontPhantom;
				}
				else if (int_firstArrowLineFont == 4) {
					firstArrowLineFont = NXOpen::DisplayableObject::ObjectFontCenterline;
				}
				else if (int_firstArrowLineFont == 5) {
					firstArrowLineFont = NXOpen::DisplayableObject::ObjectFontDotted;
				}
				else if (int_firstArrowLineFont == 6) {
					firstArrowLineFont = NXOpen::DisplayableObject::ObjectFontLongDashed;
				}
				else if (int_firstArrowLineFont == 7) {
					firstArrowLineFont = NXOpen::DisplayableObject::ObjectFontDottedDashed;
				}
				_preferencesBuilder->AnnotationStyle()->LineArrowStyle()->SetFirstArrowLineFont(firstArrowLineFont);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the line width for the first arrow line.
	id_name.assign("Drafting_arrowLine1Width");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::LineWidth firstArrowLineWidth;
			firstArrowLineWidth = _preferencesBuilder->AnnotationStyle()->LineArrowStyle()->FirstArrowLineWidth();
			int int_firstArrowLineWidth;

			if (firstArrowLineWidth == NXOpen::Annotations::LineWidthNormal) {
				int_firstArrowLineWidth = 1;
			}
			else if (firstArrowLineWidth == NXOpen::Annotations::LineWidthThick) {
				int_firstArrowLineWidth = 2;
			}
			else if (firstArrowLineWidth == NXOpen::Annotations::LineWidthThin) {
				int_firstArrowLineWidth = 3;
			}
			else if (firstArrowLineWidth == NXOpen::Annotations::LineWidthOne) {
				int_firstArrowLineWidth = 6;
			}
			else if (firstArrowLineWidth == NXOpen::Annotations::LineWidthTwo) {
				int_firstArrowLineWidth = 7;
			}
			else if (firstArrowLineWidth == NXOpen::Annotations::LineWidthThree) {
				int_firstArrowLineWidth = 8;
			}
			else if (firstArrowLineWidth == NXOpen::Annotations::LineWidthFour) {
				int_firstArrowLineWidth = 9;
			}
			else if (firstArrowLineWidth == NXOpen::Annotations::LineWidthFive) {
				int_firstArrowLineWidth = 10;
			}
			else if (firstArrowLineWidth == NXOpen::Annotations::LineWidthSix) {
				int_firstArrowLineWidth = 11;
			}
			else if (firstArrowLineWidth == NXOpen::Annotations::LineWidthSeven) {
				int_firstArrowLineWidth = 12;
			}
			else if (firstArrowLineWidth == NXOpen::Annotations::LineWidthEight) {
				int_firstArrowLineWidth = 13;
			}
			else if (firstArrowLineWidth == NXOpen::Annotations::LineWidthNine) {
				int_firstArrowLineWidth = 14;
			}
			else {
				int_firstArrowLineWidth = -999;
			}
			//string id_name_tmp;
			//std::map<const std::string, std::string>::iterator it_tmp;
			//if (int_firstArrowLineWidth == 1) {
			//	id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
			//	it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
			//	int_firstArrowLineWidth = convert_to_int(it_tmp->second);
			//}
			//if (int_firstArrowLineWidth == 2) {
			//	id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
			//	it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
			//	int_firstArrowLineWidth = convert_to_int(it_tmp->second);
			//}
			//if (int_firstArrowLineWidth == 3) {
			//	id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
			//	it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
			//	int_firstArrowLineWidth = convert_to_int(it_tmp->second);
			//}
			//int_firstArrowLineWidth = (int)firstArrowLineWidth;
			//_nx_dpv->soll_dpv_map.find(id_name)->second = convert_to_string(int_firstArrowLineWidth );
			ist_id_value.assign(convert_to_string(int_firstArrowLineWidth));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_firstArrowLineWidth = convert_to_int(soll_id_value);
				if (int_firstArrowLineWidth == 1) {
					firstArrowLineWidth = NXOpen::Annotations::LineWidthNormal;
					//id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
					//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					//firstArrowLineWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
				}
				else if (int_firstArrowLineWidth == 2) {
					firstArrowLineWidth = NXOpen::Annotations::LineWidthThick;
					//id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
					//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					//firstArrowLineWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
				}
				else if (int_firstArrowLineWidth == 3) {
					firstArrowLineWidth = NXOpen::Annotations::LineWidthThin;
					//id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
					//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					//firstArrowLineWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
				}
				else if (int_firstArrowLineWidth == 6) {
					firstArrowLineWidth = NXOpen::Annotations::LineWidthOne;
				}
				else if (int_firstArrowLineWidth == 7) {
					firstArrowLineWidth = NXOpen::Annotations::LineWidthTwo;
				}
				else if (int_firstArrowLineWidth == 8) {
					firstArrowLineWidth = NXOpen::Annotations::LineWidthThree;
				}
				else if (int_firstArrowLineWidth == 9) {
					firstArrowLineWidth = NXOpen::Annotations::LineWidthFour;
				}
				else if (int_firstArrowLineWidth == 10) {
					firstArrowLineWidth = NXOpen::Annotations::LineWidthFive;
				}
				else if (int_firstArrowLineWidth == 11) {
					firstArrowLineWidth = NXOpen::Annotations::LineWidthSix;
				}
				else if (int_firstArrowLineWidth == 12) {
					firstArrowLineWidth = NXOpen::Annotations::LineWidthSeven;
				}
				else if (int_firstArrowLineWidth == 13) {
					firstArrowLineWidth = NXOpen::Annotations::LineWidthEight;
				}
				else if (int_firstArrowLineWidth == 14) {
					firstArrowLineWidth = NXOpen::Annotations::LineWidthNine;
				}
				_preferencesBuilder->AnnotationStyle()->LineArrowStyle()->SetFirstArrowLineWidth(firstArrowLineWidth);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not the dimension line is displayed for side two of dimensions.
	id_name.assign("Drafting_showArrowLineSideTwo");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::ArrowDisplay dimArrowDisplay;
			dimArrowDisplay = _preferencesBuilder->AnnotationStyle()->DimensionStyle()->DimArrowDisplay();
			bool bool_dimArrowDisplay;
			if (dimArrowDisplay != NXOpen::Annotations::ArrowDisplayNone && dimArrowDisplay != NXOpen::Annotations::ArrowDisplayLast) {
				bool_dimArrowDisplay = true;
			}
			else {
				bool_dimArrowDisplay = false;
			}
			ist_id_value.assign(convert_to_string(bool_dimArrowDisplay));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				bool_dimArrowDisplay = convert_to_bool(soll_id_value);
				if (bool_dimArrowDisplay == false) {
					dimArrowDisplay = NXOpen::Annotations::ArrowDisplayNone;
				}
				else {
					dimArrowDisplay = NXOpen::Annotations::ArrowDisplaySecond;
				}
				_preferencesBuilder->AnnotationStyle()->DimensionStyle()->SetDimArrowDisplay(dimArrowDisplay);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the color of the second arrow line.
	if (_nx_dpv->usedUnitValue.compare("1") == 0) {
		id_name.assign("Drafting_arrowLine2Color_MU");
	}
	else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
		id_name.assign("Drafting_arrowLine2Color_EU");
	}
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::NXColor *secondArrowLineColor;
			secondArrowLineColor = _preferencesBuilder->AnnotationStyle()->LineArrowStyle()->SecondArrowLineColor();
			int secondArrowLineColorIndex;
			secondArrowLineColorIndex = secondArrowLineColor->Handle();
			ist_id_value.assign(convert_to_string(secondArrowLineColorIndex));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				secondArrowLineColorIndex = convert_to_int(soll_id_value);
				secondArrowLineColor = _workPart->Colors()->Find(secondArrowLineColorIndex);
				_preferencesBuilder->AnnotationStyle()->LineArrowStyle()->SetSecondArrowLineColor(secondArrowLineColor);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the line font for the second arrow line.
	id_name.assign("Drafting_arrowLine2Font");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::DisplayableObject::ObjectFont secondArrowLineFont;
			secondArrowLineFont = _preferencesBuilder->AnnotationStyle()->LineArrowStyle()->SecondArrowLineFont();
			int int_secondArrowLineFont;
			if (secondArrowLineFont == NXOpen::DisplayableObject::ObjectFontSolid) {
				int_secondArrowLineFont = 1;
			}
			else if (secondArrowLineFont == NXOpen::DisplayableObject::ObjectFontDashed) {
				int_secondArrowLineFont = 2;
			}
			else if (secondArrowLineFont == NXOpen::DisplayableObject::ObjectFontPhantom) {
				int_secondArrowLineFont = 3;
			}
			else if (secondArrowLineFont == NXOpen::DisplayableObject::ObjectFontCenterline) {
				int_secondArrowLineFont = 4;
			}
			else if (secondArrowLineFont == NXOpen::DisplayableObject::ObjectFontDotted) {
				int_secondArrowLineFont = 5;
			}
			else if (secondArrowLineFont == NXOpen::DisplayableObject::ObjectFontLongDashed) {
				int_secondArrowLineFont = 6;
			}
			else if (secondArrowLineFont == NXOpen::DisplayableObject::ObjectFontDottedDashed) {
				int_secondArrowLineFont = 7;
			}
			ist_id_value.assign(convert_to_string(int_secondArrowLineFont));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_secondArrowLineFont = convert_to_int(soll_id_value);
				NXOpen::DisplayableObject::ObjectFont secondArrowLineFont;
				if (int_secondArrowLineFont == 1) {
					secondArrowLineFont = NXOpen::DisplayableObject::ObjectFontSolid;
				}
				else if (int_secondArrowLineFont == 2) {
					secondArrowLineFont = NXOpen::DisplayableObject::ObjectFontDashed;
				}
				else if (int_secondArrowLineFont == 3) {
					secondArrowLineFont = NXOpen::DisplayableObject::ObjectFontPhantom;
				}
				else if (int_secondArrowLineFont == 4) {
					secondArrowLineFont = NXOpen::DisplayableObject::ObjectFontCenterline;
				}
				else if (int_secondArrowLineFont == 5) {
					secondArrowLineFont = NXOpen::DisplayableObject::ObjectFontDotted;
				}
				else if (int_secondArrowLineFont == 6) {
					secondArrowLineFont = NXOpen::DisplayableObject::ObjectFontLongDashed;
				}
				else if (int_secondArrowLineFont == 7) {
					secondArrowLineFont = NXOpen::DisplayableObject::ObjectFontDottedDashed;
				}
				_preferencesBuilder->AnnotationStyle()->LineArrowStyle()->SetSecondArrowLineFont(secondArrowLineFont);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the line width for the second arrow line.
	id_name.assign("Drafting_arrowLine2Width");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::LineWidth secondArrowLineWidth;
			secondArrowLineWidth = _preferencesBuilder->AnnotationStyle()->LineArrowStyle()->SecondArrowLineWidth();
			int int_secondArrowLineWidth;

			if (secondArrowLineWidth == NXOpen::Annotations::LineWidthNormal) {
				int_secondArrowLineWidth = 1;
			}
			else if (secondArrowLineWidth == NXOpen::Annotations::LineWidthThick) {
				int_secondArrowLineWidth = 2;
			}
			else if (secondArrowLineWidth == NXOpen::Annotations::LineWidthThin) {
				int_secondArrowLineWidth = 3;
			}
			else if (secondArrowLineWidth == NXOpen::Annotations::LineWidthOne) {
				int_secondArrowLineWidth = 6;
			}
			else if (secondArrowLineWidth == NXOpen::Annotations::LineWidthTwo) {
				int_secondArrowLineWidth = 7;
			}
			else if (secondArrowLineWidth == NXOpen::Annotations::LineWidthThree) {
				int_secondArrowLineWidth = 8;
			}
			else if (secondArrowLineWidth == NXOpen::Annotations::LineWidthFour) {
				int_secondArrowLineWidth = 9;
			}
			else if (secondArrowLineWidth == NXOpen::Annotations::LineWidthFive) {
				int_secondArrowLineWidth = 10;
			}
			else if (secondArrowLineWidth == NXOpen::Annotations::LineWidthSix) {
				int_secondArrowLineWidth = 11;
			}
			else if (secondArrowLineWidth == NXOpen::Annotations::LineWidthSeven) {
				int_secondArrowLineWidth = 12;
			}
			else if (secondArrowLineWidth == NXOpen::Annotations::LineWidthEight) {
				int_secondArrowLineWidth = 13;
			}
			else if (secondArrowLineWidth == NXOpen::Annotations::LineWidthNine) {
				int_secondArrowLineWidth = 14;
			}
			else {
				int_secondArrowLineWidth = -999;
			}
			//string id_name_tmp;
			//std::map<const std::string, std::string>::iterator it_tmp;
			//if (int_secondArrowLineWidth == 1) {
			//	id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
			//	it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
			//	int_secondArrowLineWidth = convert_to_int(it_tmp->second);
			//}
			//if (int_secondArrowLineWidth == 2) {
			//	id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
			//	it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
			//	int_secondArrowLineWidth = convert_to_int(it_tmp->second);
			//}
			//if (int_secondArrowLineWidth == 3) {
			//	id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
			//	it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
			//	int_secondArrowLineWidth = convert_to_int(it_tmp->second);
			//}
			//_nx_dpv->soll_dpv_map.find(id_name)->second = convert_to_string(int_secondArrowLineWidth);
			ist_id_value.assign(convert_to_string(int_secondArrowLineWidth));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_secondArrowLineWidth = convert_to_int(soll_id_value);
				if (int_secondArrowLineWidth == 1) {
					secondArrowLineWidth = NXOpen::Annotations::LineWidthNormal;
					//id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
					//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					//secondArrowLineWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
				}
				else if (int_secondArrowLineWidth == 2) {
					secondArrowLineWidth = NXOpen::Annotations::LineWidthThick;
					//id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
					//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					//secondArrowLineWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
				}
				else if (int_secondArrowLineWidth == 3) {
					secondArrowLineWidth = NXOpen::Annotations::LineWidthThin;
					//id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
					//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					//secondArrowLineWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
				}
				else if (int_secondArrowLineWidth == 6) {
					secondArrowLineWidth = NXOpen::Annotations::LineWidthOne;
				}
				else if (int_secondArrowLineWidth == 7) {
					secondArrowLineWidth = NXOpen::Annotations::LineWidthTwo;
				}
				else if (int_secondArrowLineWidth == 8) {
					secondArrowLineWidth = NXOpen::Annotations::LineWidthThree;
				}
				else if (int_secondArrowLineWidth == 9) {
					secondArrowLineWidth = NXOpen::Annotations::LineWidthFour;
				}
				else if (int_secondArrowLineWidth == 10) {
					secondArrowLineWidth = NXOpen::Annotations::LineWidthFive;
				}
				else if (int_secondArrowLineWidth == 11) {
					secondArrowLineWidth = NXOpen::Annotations::LineWidthSix;
				}
				else if (int_secondArrowLineWidth == 12) {
					secondArrowLineWidth = NXOpen::Annotations::LineWidthSeven;
				}
				else if (int_secondArrowLineWidth == 13) {
					secondArrowLineWidth = NXOpen::Annotations::LineWidthEight;
				}
				else if (int_secondArrowLineWidth == 14) {
					secondArrowLineWidth = NXOpen::Annotations::LineWidthNine;
				}
				_preferencesBuilder->AnnotationStyle()->LineArrowStyle()->SetSecondArrowLineWidth(secondArrowLineWidth);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the distance from the dimension text to the dimension line (stub).
	if (_nx_dpv->usedUnitValue.compare("1") == 0) {
		id_name.assign("Drafting_textLine_MU");
	}
	else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
		id_name.assign("Drafting_textLine_EU");
	}
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double textToLineDistance;
			textToLineDistance = _preferencesBuilder->AnnotationStyle()->LineArrowStyle()->TextToLineDistance();
			ist_id_value.assign(convert_to_string(textToLineDistance));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				textToLineDistance = convert_to_double(soll_id_value);
				_preferencesBuilder->AnnotationStyle()->LineArrowStyle()->SetTextToLineDistance(textToLineDistance);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the position of the leader line to the left or right of the dimension or drafting object.
	id_name.assign("Drafting_leaderOrientation");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double textToLineDistance;
			textToLineDistance = _preferencesBuilder->AnnotationStyle()->LineArrowStyle()->TextToLineDistance();
			NXOpen::Annotations::LeaderSide leaderOrientation;
			leaderOrientation=_preferencesBuilder->AnnotationStyle()->LineArrowStyle()->LeaderOrientation();
			int int_leaderOrientation;
			if (leaderOrientation == NXOpen::Annotations::LeaderSideNull) {
				int_leaderOrientation = -1;
			}
			else if (leaderOrientation == NXOpen::Annotations::LeaderSideLeft) {
				int_leaderOrientation = 0;
			}
			else if (leaderOrientation == NXOpen::Annotations::LeaderSideRight) {
				int_leaderOrientation = 1;
			}
			else if (leaderOrientation == NXOpen::Annotations::LeaderSideInferred) {
				int_leaderOrientation = 2;
			}
			else if (leaderOrientation == NXOpen::Annotations::LeaderSideLast) {
				int_leaderOrientation = 3;
			}
			ist_id_value.assign(convert_to_string(int_leaderOrientation));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_leaderOrientation = convert_to_int(soll_id_value);
				if (int_leaderOrientation == -1) {
					leaderOrientation = NXOpen::Annotations::LeaderSideNull;
				}
				else if (int_leaderOrientation == 0) {
					leaderOrientation = NXOpen::Annotations::LeaderSideLeft;
				}
				else if (int_leaderOrientation == 1) {
					leaderOrientation = NXOpen::Annotations::LeaderSideRight;
				}
				else if (int_leaderOrientation == 2) {
					leaderOrientation = NXOpen::Annotations::LeaderSideInferred;
				}
				else if (int_leaderOrientation == 3) {
					leaderOrientation = NXOpen::Annotations::LeaderSideLast;
				}
				_preferencesBuilder->AnnotationStyle()->LineArrowStyle()->SetLeaderOrientation(leaderOrientation);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the stub size (the dogleg on a label or dimension).
	if (_nx_dpv->usedUnitValue.compare("1") == 0) {
		id_name.assign("Drafting_stubbSize_MU");
	}
	else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
		id_name.assign("Drafting_stubbSize_EU");
	}
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double stubLength;
			stubLength = _preferencesBuilder->AnnotationStyle()->LineArrowStyle()->StubLength();
			ist_id_value.assign(convert_to_string(stubLength));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				stubLength = convert_to_double(soll_id_value);
				_preferencesBuilder->AnnotationStyle()->LineArrowStyle()->SetStubLength(stubLength);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the character size factor used to define the space between label text and the stub when the text is displayed above the stub line.
	id_name.assign("Drafting_textOverStubFactor");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double textOverStubFactor;
			textOverStubFactor = _preferencesBuilder->AnnotationStyle()->LineArrowStyle()->TextOverStubFactor();
			ist_id_value.assign(convert_to_string(textOverStubFactor));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				textOverStubFactor = convert_to_double(soll_id_value);
				_preferencesBuilder->AnnotationStyle()->LineArrowStyle()->SetTextOverStubFactor(textOverStubFactor);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the symbol to be displayed on the stub line of radial and chamfer dimensions.
	id_name.assign("Drafting_stubSymbolType");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::StubSymbolType stubSymbolType;
			stubSymbolType = _preferencesBuilder->AnnotationStyle()->LineArrowStyle()->StubSymbolType();
			int int_stubSymbolType;
			int_stubSymbolType = (int)stubSymbolType;
			ist_id_value.assign(convert_to_string(int_stubSymbolType));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_stubSymbolType = convert_to_int(soll_id_value);
				stubSymbolType = (NXOpen::Annotations::StubSymbolType)int_stubSymbolType;
				_preferencesBuilder->AnnotationStyle()->LineArrowStyle()->SetStubSymbolType(stubSymbolType);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the vertical alignment of the leader from a multi-line text label.
	id_name.assign("Drafting_verticalTextJust");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::VerticalTextJustification leaderLocation;
			leaderLocation = _preferencesBuilder->AnnotationStyle()->LineArrowStyle()->LeaderLocation();
			int int_leaderLocation;
			int_leaderLocation = (int)leaderLocation;
			ist_id_value.assign(convert_to_string(int_leaderLocation));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_leaderLocation = convert_to_int(soll_id_value);
				leaderLocation = (NXOpen::Annotations::VerticalTextJustification)int_leaderLocation;
				_preferencesBuilder->AnnotationStyle()->LineArrowStyle()->SetLeaderLocation(leaderLocation);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the character size factor used to define the space between text and the leader when the text is displayed along the leader.
	id_name.assign("Drafting_textOverLeaderGapFactor");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double textOverLeaderGapFactor;
			textOverLeaderGapFactor = _preferencesBuilder->AnnotationStyle()->LineArrowStyle()->TextOverLeaderGapFactor();
			ist_id_value.assign(convert_to_string(textOverLeaderGapFactor));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				textOverLeaderGapFactor = convert_to_double(soll_id_value);
				_preferencesBuilder->AnnotationStyle()->LineArrowStyle()->SetTextOverLeaderGapFactor(textOverLeaderGapFactor);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the size of all around symbol and size of inner diameter of all over symbol.
	if (_nx_dpv->usedUnitValue.compare("1") == 0) {
		id_name.assign("Drafting_allAroundSymbolSize_MU");
	}
	else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
		id_name.assign("Drafting_allAroundSymbolSize_EU");
	}
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double allArroundSymbol;
			allArroundSymbol = _preferencesBuilder->AnnotationStyle()->LineArrowStyle()->AllAroundSymbolSize();
			ist_id_value.assign(convert_to_string(allArroundSymbol));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				allArroundSymbol = convert_to_double(soll_id_value);
				_preferencesBuilder->AnnotationStyle()->LineArrowStyle()->SetAllAroundSymbolSize(allArroundSymbol);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- STOPP - %s --- \n", routineName.c_str());
}

/*
File - Preferences - Drafting - Common - Line/Arrow - Extension Line -> Repair these preferences.
*/
void repair_DraftingStandard_Common_LineArrow_ExtensionLine_prefs(NXOpen::Drafting::PreferencesBuilder *_preferencesBuilder, en_nx_dpv* _nx_dpv, Session * _theSession, Part* _workPart) {
	routineName.assign("repair_DraftingStandard_Common_LineArrow_ExtensionLine_prefs");
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- START - %s --- \n", routineName.c_str());

	//This option determines whether or not the extension line is displayed for leaders and side one of dimensions.
	id_name.assign("Drafting_showExtensionLinesSideOne");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::ExtensionLineDisplay extensionLineDisplay;
			extensionLineDisplay = _preferencesBuilder->AnnotationStyle()->DimensionStyle()->ExtensionLineDisplay();
			bool bool_extensionLineDisplay;
			if (extensionLineDisplay == NXOpen::Annotations::ExtensionLineDisplayNone) {
				bool_extensionLineDisplay = false;
			}
			else {
				bool_extensionLineDisplay = true;
			}
			ist_id_value.assign(convert_to_string(bool_extensionLineDisplay));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				bool_extensionLineDisplay = convert_to_bool(soll_id_value);
				if (!bool_extensionLineDisplay) {
					extensionLineDisplay = NXOpen::Annotations::ExtensionLineDisplayNone;
					_preferencesBuilder->AnnotationStyle()->DimensionStyle()->SetExtensionLineDisplay(extensionLineDisplay);
					_preferencesBuilder->Commit();
				}
				else {
					extensionLineDisplay = _preferencesBuilder->AnnotationStyle()->DimensionStyle()->ExtensionLineDisplay();
					if (extensionLineDisplay == NXOpen::Annotations::ExtensionLineDisplayNone) {
						extensionLineDisplay = NXOpen::Annotations::ExtensionLineDisplayTwo;
					}
					_preferencesBuilder->AnnotationStyle()->DimensionStyle()->SetExtensionLineDisplay(extensionLineDisplay);
					_preferencesBuilder->Commit();
				}
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the color of the first extension line.
	if (_nx_dpv->usedUnitValue.compare("1") == 0) {
		id_name.assign("Drafting_extensionLine1Color_MU");
	}
	else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
		id_name.assign("Drafting_extensionLine1Color_EU");
	}
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::NXColor *firstExtensionLineColor;
			firstExtensionLineColor = _preferencesBuilder->AnnotationStyle()->LineArrowStyle()->FirstExtensionLineColor();
			int firstExtensionLineColorIndex;
			firstExtensionLineColorIndex = firstExtensionLineColor->Handle();
			ist_id_value.assign(convert_to_string(firstExtensionLineColorIndex));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				firstExtensionLineColorIndex = convert_to_int(soll_id_value);
				firstExtensionLineColor = _workPart->Colors()->Find(firstExtensionLineColorIndex);
				_preferencesBuilder->AnnotationStyle()->LineArrowStyle()->SetFirstExtensionLineColor(firstExtensionLineColor);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the line font for the first extension line.
	id_name.assign("Drafting_extensionLine1Font");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::DisplayableObject::ObjectFont firstExtensionLineFont;
			firstExtensionLineFont = _preferencesBuilder->AnnotationStyle()->LineArrowStyle()->FirstExtensionLineFont();
			int int_firstExtensionLineFont;
			if (firstExtensionLineFont == NXOpen::DisplayableObject::ObjectFontSolid) {
				int_firstExtensionLineFont = 1;
			}
			else if (firstExtensionLineFont == NXOpen::DisplayableObject::ObjectFontDashed) {
				int_firstExtensionLineFont = 2;
			}
			else if (firstExtensionLineFont == NXOpen::DisplayableObject::ObjectFontPhantom) {
				int_firstExtensionLineFont = 3;
			}
			else if (firstExtensionLineFont == NXOpen::DisplayableObject::ObjectFontCenterline) {
				int_firstExtensionLineFont = 4;
			}
			else if (firstExtensionLineFont == NXOpen::DisplayableObject::ObjectFontDotted) {
				int_firstExtensionLineFont = 5;
			}
			else if (firstExtensionLineFont == NXOpen::DisplayableObject::ObjectFontLongDashed) {
				int_firstExtensionLineFont = 6;
			}
			else if (firstExtensionLineFont == NXOpen::DisplayableObject::ObjectFontDottedDashed) {
				int_firstExtensionLineFont = 7;
			}
			ist_id_value.assign(convert_to_string(int_firstExtensionLineFont));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_firstExtensionLineFont = convert_to_int(soll_id_value);
				if (int_firstExtensionLineFont == 1) {
					firstExtensionLineFont = NXOpen::DisplayableObject::ObjectFontSolid;
				}
				else if (int_firstExtensionLineFont == 2) {
					firstExtensionLineFont = NXOpen::DisplayableObject::ObjectFontDashed;
				}
				else if (int_firstExtensionLineFont == 3) {
					firstExtensionLineFont = NXOpen::DisplayableObject::ObjectFontPhantom;
				}
				else if (int_firstExtensionLineFont == 4) {
					firstExtensionLineFont = NXOpen::DisplayableObject::ObjectFontCenterline;
				}
				else if (int_firstExtensionLineFont == 5) {
					firstExtensionLineFont = NXOpen::DisplayableObject::ObjectFontDotted;
				}
				else if (int_firstExtensionLineFont == 6) {
					firstExtensionLineFont = NXOpen::DisplayableObject::ObjectFontLongDashed;
				}
				else if (int_firstExtensionLineFont == 7) {
					firstExtensionLineFont = NXOpen::DisplayableObject::ObjectFontDottedDashed;
				}
				_preferencesBuilder->AnnotationStyle()->LineArrowStyle()->SetFirstExtensionLineFont(firstExtensionLineFont);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the line width for the first extension line.
	id_name.assign("Drafting_extensionLine1Width");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::LineWidth firstExtensionLineWidth;
			firstExtensionLineWidth = _preferencesBuilder->AnnotationStyle()->LineArrowStyle()->FirstExtensionLineWidth();
			int int_firstExtensionLineWidth;
			if (firstExtensionLineWidth == NXOpen::Annotations::LineWidthNormal) {
				int_firstExtensionLineWidth = 1;
			}
			else if (firstExtensionLineWidth == NXOpen::Annotations::LineWidthThick) {
				int_firstExtensionLineWidth = 2;
			}
			else if (firstExtensionLineWidth == NXOpen::Annotations::LineWidthThin) {
				int_firstExtensionLineWidth = 3;
			}
			else if (firstExtensionLineWidth == NXOpen::Annotations::LineWidthOne) {
				int_firstExtensionLineWidth = 6;
			}
			else if (firstExtensionLineWidth == NXOpen::Annotations::LineWidthTwo) {
				int_firstExtensionLineWidth = 7;
			}
			else if (firstExtensionLineWidth == NXOpen::Annotations::LineWidthThree) {
				int_firstExtensionLineWidth = 8;
			}
			else if (firstExtensionLineWidth == NXOpen::Annotations::LineWidthFour) {
				int_firstExtensionLineWidth = 9;
			}
			else if (firstExtensionLineWidth == NXOpen::Annotations::LineWidthFive) {
				int_firstExtensionLineWidth = 10;
			}
			else if (firstExtensionLineWidth == NXOpen::Annotations::LineWidthSix) {
				int_firstExtensionLineWidth = 11;
			}
			else if (firstExtensionLineWidth == NXOpen::Annotations::LineWidthSeven) {
				int_firstExtensionLineWidth = 12;
			}
			else if (firstExtensionLineWidth == NXOpen::Annotations::LineWidthEight) {
				int_firstExtensionLineWidth = 13;
			}
			else if (firstExtensionLineWidth == NXOpen::Annotations::LineWidthNine) {
				int_firstExtensionLineWidth = 14;
			}
			else {
				int_firstExtensionLineWidth = -999;
			}
			//string id_name_tmp;
			//std::map<const std::string, std::string>::iterator it_tmp;
			//if (int_firstExtensionLineWidth == 1) {
			//	id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
			//	it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
			//	int_firstExtensionLineWidth = convert_to_int(it_tmp->second);
			//}
			//if (int_firstExtensionLineWidth == 2) {
			//	id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
			//	it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
			//	int_firstExtensionLineWidth = convert_to_int(it_tmp->second);
			//}
			//if (int_firstExtensionLineWidth == 3) {
			//	id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
			//	it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
			//	int_firstExtensionLineWidth = convert_to_int(it_tmp->second);
			//}
			//_nx_dpv->soll_dpv_map.find(id_name)->second = convert_to_string(int_firstExtensionLineWidth);
			//int_firstExtensionLineWidth = (int) firstExtensionLineWidth;
			ist_id_value.assign(convert_to_string(int_firstExtensionLineWidth));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_firstExtensionLineWidth = convert_to_int(soll_id_value);
				if (int_firstExtensionLineWidth == 1) {
					firstExtensionLineWidth = NXOpen::Annotations::LineWidthNormal;
					//id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
					//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					//firstExtensionLineWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
				}
				else if (int_firstExtensionLineWidth == 2) {
					firstExtensionLineWidth = NXOpen::Annotations::LineWidthThick;
					//id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
					//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					//firstExtensionLineWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
				}
				else if (int_firstExtensionLineWidth == 3) {
					firstExtensionLineWidth = NXOpen::Annotations::LineWidthThin;
					//id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
					//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					//firstExtensionLineWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
				}
				else if (int_firstExtensionLineWidth == 6) {
					firstExtensionLineWidth = NXOpen::Annotations::LineWidthOne;
				}
				else if (int_firstExtensionLineWidth == 7) {
					firstExtensionLineWidth = NXOpen::Annotations::LineWidthTwo;
				}
				else if (int_firstExtensionLineWidth == 8) {
					firstExtensionLineWidth = NXOpen::Annotations::LineWidthThree;
				}
				else if (int_firstExtensionLineWidth == 9) {
					firstExtensionLineWidth = NXOpen::Annotations::LineWidthFour;
				}
				else if (int_firstExtensionLineWidth == 10) {
					firstExtensionLineWidth = NXOpen::Annotations::LineWidthFive;
				}
				else if (int_firstExtensionLineWidth == 11) {
					firstExtensionLineWidth = NXOpen::Annotations::LineWidthSix;
				}
				else if (int_firstExtensionLineWidth == 12) {
					firstExtensionLineWidth = NXOpen::Annotations::LineWidthSeven;
				}
				else if (int_firstExtensionLineWidth == 13) {
					firstExtensionLineWidth = NXOpen::Annotations::LineWidthEight;
				}
				else if (int_firstExtensionLineWidth == 14) {
					firstExtensionLineWidth = NXOpen::Annotations::LineWidthNine;
				}
				_preferencesBuilder->AnnotationStyle()->LineArrowStyle()->SetFirstExtensionLineWidth(firstExtensionLineWidth);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the distance from the position on the object being dimensioned to the end of the first extension line.
	if (_nx_dpv->usedUnitValue.compare("1") == 0) {
		id_name.assign("Drafting_pointLine1_MU");
	}
	else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
		id_name.assign("Drafting_pointLine1_EU");
	}
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double firstPosToExtensionLineDistance;
			firstPosToExtensionLineDistance = _preferencesBuilder->AnnotationStyle()->LineArrowStyle()->FirstPosToExtensionLineDistance();
			ist_id_value.assign(convert_to_string(firstPosToExtensionLineDistance));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				firstPosToExtensionLineDistance = convert_to_double(soll_id_value);
				_preferencesBuilder->AnnotationStyle()->LineArrowStyle()->SetFirstPosToExtensionLineDistance(firstPosToExtensionLineDistance);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not the extension line is displayed for side two of dimensions.
	id_name.assign("Drafting_showExtensionLinesSideTwo");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::ExtensionLineDisplay extensionLineDisplay;
			extensionLineDisplay = _preferencesBuilder->AnnotationStyle()->DimensionStyle()->ExtensionLineDisplay();
			bool bool_extensionLineDisplay;
			if (extensionLineDisplay == NXOpen::Annotations::ExtensionLineDisplayNone) {
				bool_extensionLineDisplay = false;
			}
			else {
				bool_extensionLineDisplay = true;
			}
			ist_id_value.assign(convert_to_string(bool_extensionLineDisplay));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				bool_extensionLineDisplay = convert_to_bool(soll_id_value);
				if (!bool_extensionLineDisplay) {
					extensionLineDisplay = NXOpen::Annotations::ExtensionLineDisplayNone;
					_preferencesBuilder->AnnotationStyle()->DimensionStyle()->SetExtensionLineDisplay(extensionLineDisplay);
					_preferencesBuilder->Commit();
				}
				else {
					extensionLineDisplay = _preferencesBuilder->AnnotationStyle()->DimensionStyle()->ExtensionLineDisplay();
					if (extensionLineDisplay == NXOpen::Annotations::ExtensionLineDisplayNone) {
						extensionLineDisplay = NXOpen::Annotations::ExtensionLineDisplayTwo;
					}
					_preferencesBuilder->AnnotationStyle()->DimensionStyle()->SetExtensionLineDisplay(extensionLineDisplay);
					_preferencesBuilder->Commit();
				}
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the color of the first extension line.
	if (_nx_dpv->usedUnitValue.compare("1") == 0) {
		id_name.assign("Drafting_extensionLine2Color_MU");
	}
	else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
		id_name.assign("Drafting_extensionLine2Color_EU");
	}
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::NXColor *secondExtensionLineColor;
			secondExtensionLineColor = _preferencesBuilder->AnnotationStyle()->LineArrowStyle()->SecondExtensionLineColor();
			int secondExtensionLineColorIndex;
			secondExtensionLineColorIndex = secondExtensionLineColor->Handle();
			ist_id_value.assign(convert_to_string(secondExtensionLineColorIndex));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				secondExtensionLineColorIndex = convert_to_int(soll_id_value);
				secondExtensionLineColor = _workPart->Colors()->Find(secondExtensionLineColorIndex);
				_preferencesBuilder->AnnotationStyle()->LineArrowStyle()->SetSecondExtensionLineColor(secondExtensionLineColor);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the line font for the second extension line.
	id_name.assign("Drafting_extensionLine2Font");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::DisplayableObject::ObjectFont secondExtensionLineFont;
			secondExtensionLineFont = _preferencesBuilder->AnnotationStyle()->LineArrowStyle()->FirstExtensionLineFont();
			int int_secondExtensionLineFont;
			if (secondExtensionLineFont == NXOpen::DisplayableObject::ObjectFontSolid) {
				int_secondExtensionLineFont = 1;
			}
			else if (secondExtensionLineFont == NXOpen::DisplayableObject::ObjectFontDashed) {
				int_secondExtensionLineFont = 2;
			}
			else if (secondExtensionLineFont == NXOpen::DisplayableObject::ObjectFontPhantom) {
				int_secondExtensionLineFont = 3;
			}
			else if (secondExtensionLineFont == NXOpen::DisplayableObject::ObjectFontCenterline) {
				int_secondExtensionLineFont = 4;
			}
			else if (secondExtensionLineFont == NXOpen::DisplayableObject::ObjectFontDotted) {
				int_secondExtensionLineFont = 5;
			}
			else if (secondExtensionLineFont == NXOpen::DisplayableObject::ObjectFontLongDashed) {
				int_secondExtensionLineFont = 6;
			}
			else if (secondExtensionLineFont == NXOpen::DisplayableObject::ObjectFontDottedDashed) {
				int_secondExtensionLineFont = 7;
			}
			ist_id_value.assign(convert_to_string(int_secondExtensionLineFont));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_secondExtensionLineFont = convert_to_int(soll_id_value);
				if (int_secondExtensionLineFont == 1) {
					secondExtensionLineFont = NXOpen::DisplayableObject::ObjectFontSolid;
				}
				else if (int_secondExtensionLineFont == 2) {
					secondExtensionLineFont = NXOpen::DisplayableObject::ObjectFontDashed;
				}
				else if (int_secondExtensionLineFont == 3) {
					secondExtensionLineFont = NXOpen::DisplayableObject::ObjectFontPhantom;
				}
				else if (int_secondExtensionLineFont == 4) {
					secondExtensionLineFont = NXOpen::DisplayableObject::ObjectFontCenterline;
				}
				else if (int_secondExtensionLineFont == 5) {
					secondExtensionLineFont = NXOpen::DisplayableObject::ObjectFontDotted;
				}
				else if (int_secondExtensionLineFont == 6) {
					secondExtensionLineFont = NXOpen::DisplayableObject::ObjectFontLongDashed;
				}
				else if (int_secondExtensionLineFont == 7) {
					secondExtensionLineFont = NXOpen::DisplayableObject::ObjectFontDottedDashed;
				}
				_preferencesBuilder->AnnotationStyle()->LineArrowStyle()->SetSecondExtensionLineFont(secondExtensionLineFont);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the line width for the second extension line.
	id_name.assign("Drafting_extensionLine2Width");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::LineWidth secondExtensionLineWidth;
			secondExtensionLineWidth = _preferencesBuilder->AnnotationStyle()->LineArrowStyle()->SecondExtensionLineWidth();
			int int_secondExtensionLineWidth;

			if (secondExtensionLineWidth == NXOpen::Annotations::LineWidthNormal) {
				int_secondExtensionLineWidth = 1;
			}
			else if (secondExtensionLineWidth == NXOpen::Annotations::LineWidthThick) {
				int_secondExtensionLineWidth = 2;
			}
			else if (secondExtensionLineWidth == NXOpen::Annotations::LineWidthThin) {
				int_secondExtensionLineWidth = 3;
			}
			else if (secondExtensionLineWidth == NXOpen::Annotations::LineWidthOne) {
				int_secondExtensionLineWidth = 6;
			}
			else if (secondExtensionLineWidth == NXOpen::Annotations::LineWidthTwo) {
				int_secondExtensionLineWidth = 7;
			}
			else if (secondExtensionLineWidth == NXOpen::Annotations::LineWidthThree) {
				int_secondExtensionLineWidth = 8;
			}
			else if (secondExtensionLineWidth == NXOpen::Annotations::LineWidthFour) {
				int_secondExtensionLineWidth = 9;
			}
			else if (secondExtensionLineWidth == NXOpen::Annotations::LineWidthFive) {
				int_secondExtensionLineWidth = 10;
			}
			else if (secondExtensionLineWidth == NXOpen::Annotations::LineWidthSix) {
				int_secondExtensionLineWidth = 11;
			}
			else if (secondExtensionLineWidth == NXOpen::Annotations::LineWidthSeven) {
				int_secondExtensionLineWidth = 12;
			}
			else if (secondExtensionLineWidth == NXOpen::Annotations::LineWidthEight) {
				int_secondExtensionLineWidth = 13;
			}
			else if (secondExtensionLineWidth == NXOpen::Annotations::LineWidthNine) {
				int_secondExtensionLineWidth = 14;
			}
			else {
				int_secondExtensionLineWidth = -999;
			}
			//string id_name_tmp;
			//std::map<const std::string, std::string>::iterator it_tmp;
			//if (int_secondExtensionLineWidth == 1) {
			//	id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
			//	it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
			//	int_secondExtensionLineWidth = convert_to_int(it_tmp->second);
			//}
			//if (int_secondExtensionLineWidth == 2) {
			//	id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
			//	it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
			//	int_secondExtensionLineWidth = convert_to_int(it_tmp->second);
			//}
			//if (int_secondExtensionLineWidth == 3) {
			//	id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
			//	it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
			//	int_secondExtensionLineWidth = convert_to_int(it_tmp->second);
			//}
			//_nx_dpv->soll_dpv_map.find(id_name)->second = convert_to_string(int_secondExtensionLineWidth);
			ist_id_value.assign(convert_to_string(int_secondExtensionLineWidth));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_secondExtensionLineWidth = convert_to_int(soll_id_value);
				if (int_secondExtensionLineWidth == 1) {
					secondExtensionLineWidth = NXOpen::Annotations::LineWidthNormal;
					//id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
					//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					//secondExtensionLineWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
				}
				else if (int_secondExtensionLineWidth == 2) {
					secondExtensionLineWidth = NXOpen::Annotations::LineWidthThick;
					//id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
					//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					//secondExtensionLineWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
				}
				else if (int_secondExtensionLineWidth == 3) {
					secondExtensionLineWidth = NXOpen::Annotations::LineWidthThin;
					//id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
					//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					//secondExtensionLineWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
				}
				else if (int_secondExtensionLineWidth == 6) {
					secondExtensionLineWidth = NXOpen::Annotations::LineWidthOne;
				}
				else if (int_secondExtensionLineWidth == 7) {
					secondExtensionLineWidth = NXOpen::Annotations::LineWidthTwo;
				}
				else if (int_secondExtensionLineWidth == 8) {
					secondExtensionLineWidth = NXOpen::Annotations::LineWidthThree;
				}
				else if (int_secondExtensionLineWidth == 9) {
					secondExtensionLineWidth = NXOpen::Annotations::LineWidthFour;
				}
				else if (int_secondExtensionLineWidth == 10) {
					secondExtensionLineWidth = NXOpen::Annotations::LineWidthFive;
				}
				else if (int_secondExtensionLineWidth == 11) {
					secondExtensionLineWidth = NXOpen::Annotations::LineWidthSix;
				}
				else if (int_secondExtensionLineWidth == 12) {
					secondExtensionLineWidth = NXOpen::Annotations::LineWidthSeven;
				}
				else if (int_secondExtensionLineWidth == 13) {
					secondExtensionLineWidth = NXOpen::Annotations::LineWidthEight;
				}
				else if (int_secondExtensionLineWidth == 14) {
					secondExtensionLineWidth = NXOpen::Annotations::LineWidthNine;
				}
				_preferencesBuilder->AnnotationStyle()->LineArrowStyle()->SetSecondExtensionLineWidth(secondExtensionLineWidth);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the distance from the position on the object being dimensioned to the end of the second extension line.
	if (_nx_dpv->usedUnitValue.compare("1") == 0) {
		id_name.assign("Drafting_pointLine2_MU");
	}
	else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
		id_name.assign("Drafting_pointLine2_EU");
	}
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double secondPosToExtensionLineDistance;
			secondPosToExtensionLineDistance = _preferencesBuilder->AnnotationStyle()->LineArrowStyle()->SecondPosToExtensionLineDistance();
			ist_id_value.assign(convert_to_string(secondPosToExtensionLineDistance));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				secondPosToExtensionLineDistance = convert_to_double(soll_id_value);
				_preferencesBuilder->AnnotationStyle()->LineArrowStyle()->SetSecondPosToExtensionLineDistance(secondPosToExtensionLineDistance);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the distance an extension line extends past the dimension line.
	if (_nx_dpv->usedUnitValue.compare("1") == 0) {
		id_name.assign("Drafting_lineArrow_MU");
	}
	else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
		id_name.assign("Drafting_lineArrow_EU");
	}
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double linePastArrowDistance;
			linePastArrowDistance = _preferencesBuilder->AnnotationStyle()->LineArrowStyle()->LinePastArrowDistance();
			ist_id_value.assign(convert_to_string(linePastArrowDistance));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				linePastArrowDistance = convert_to_double(soll_id_value);
				_preferencesBuilder->AnnotationStyle()->LineArrowStyle()->SetLinePastArrowDistance(linePastArrowDistance);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the angle at which extension lines are placed. This angle only applies to vertical and horizontal dimensions.
	id_name.assign("Drafting_extensionLineAngle");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double obliqueExtensionLineAngle;
			obliqueExtensionLineAngle = _preferencesBuilder->AnnotationStyle()->LineArrowStyle()->ObliqueExtensionLineAngle();
			ist_id_value.assign(convert_to_string(obliqueExtensionLineAngle));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				obliqueExtensionLineAngle = convert_to_double(soll_id_value);
				_preferencesBuilder->AnnotationStyle()->LineArrowStyle()->SetObliqueExtensionLineAngle(obliqueExtensionLineAngle);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the distance an extension line extends past the attachment point for datum, plain, all around, all over, and without stub leader types with extension lines.
	if (_nx_dpv->usedUnitValue.compare("1") == 0) {
		id_name.assign("Drafting_datumExtLine_MU");
	}
	else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
		id_name.assign("Drafting_datumExtLine_EU");
	}
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double datumLengthPastArrow;
			datumLengthPastArrow = _preferencesBuilder->AnnotationStyle()->LineArrowStyle()->DatumLengthPastArrow();
			ist_id_value.assign(convert_to_string(datumLengthPastArrow));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				datumLengthPastArrow = convert_to_double(soll_id_value);
				_preferencesBuilder->AnnotationStyle()->LineArrowStyle()->SetDatumLengthPastArrow(datumLengthPastArrow);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- STOPP - %s --- \n", routineName.c_str());
}

/*
File - Preferences - Drafting - Common - Line/Arrow - Break -> Repair these preferences.
*/
void repair_DraftingStandard_Common_LineArrow_Break_prefs(NXOpen::Drafting::PreferencesBuilder *_preferencesBuilder, en_nx_dpv* _nx_dpv, Session * _theSession, Part* _workPart){
	routineName.assign("repair_DraftingStandard_Common_LineArrow_Breal_prefs");
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- START - %s --- \n", routineName.c_str());

	//This option determines whether or not breaks will be created at the annotation/dimension lines where they intersect with another annotation/dimension line.
	id_name.assign("Drafting_createBreaks");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			bool createBreak;
			createBreak = _preferencesBuilder->AnnotationStyle()->BreakSettings()->CreateBreaks();
			ist_id_value.assign(convert_to_string(createBreak));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				createBreak = convert_to_bool(soll_id_value);
				_preferencesBuilder->AnnotationStyle()->BreakSettings()->SetCreateBreaks(createBreak);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the size of annotation/dimension line breaks.
	if (_nx_dpv->usedUnitValue.compare("1") == 0) {
		id_name.assign("Drafting_breakSize_MU");
	}
	else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
		id_name.assign("Drafting_breakSize_EU");
	}
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double breakSize;
			breakSize = _preferencesBuilder->AnnotationStyle()->BreakSettings()->BreakSize();
			ist_id_value.assign(convert_to_string(breakSize));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				breakSize = convert_to_double(soll_id_value);
				_preferencesBuilder->AnnotationStyle()->BreakSettings()->SetBreakSize(breakSize);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- STOPP - %s --- \n", routineName.c_str());
}

/*
File - Preferences - Drafting - Common - Line/Arrow - Foreshortening Symbol -> Repair these preferences.
*/
void repair_DraftingStandard_Common_LineArrow_ForeshorteningSymbol_prefs(NXOpen::Drafting::PreferencesBuilder *_preferencesBuilder, en_nx_dpv* _nx_dpv, Session * _theSession, Part* _workPart){
	routineName.assign("repair_DraftingStandard_Common_LineArrow_ForeshorteningSymbol_prefs");
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- START - %s --- \n", routineName.c_str());
	
	//This option specifies the type of foreshortening symbol to use: regular or stretched.
	id_name.assign("Drafting_foreshorteningSymbolType");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::ForeshorteningSymbolSettingsBuilder::SymbolType foreshorteningSymbolType;
			foreshorteningSymbolType = _preferencesBuilder->AnnotationStyle()->ForeshorteningSymbolSettings()->ForeshorteningSymbolType();
			int int_foreshorteningSymbolType;
			int_foreshorteningSymbolType = (int)foreshorteningSymbolType;
			ist_id_value.assign(convert_to_string(int_foreshorteningSymbolType));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_foreshorteningSymbolType = convert_to_int(soll_id_value);
				foreshorteningSymbolType = (NXOpen::Annotations::ForeshorteningSymbolSettingsBuilder::SymbolType)int_foreshorteningSymbolType;
				_preferencesBuilder->AnnotationStyle()->ForeshorteningSymbolSettings()->SetForeshorteningSymbolType(foreshorteningSymbolType);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies whether the shape of the symbol is defined by specifying width and height or width and angle
	id_name.assign("Drafting_foreshorteningSymbolMethod");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::ForeshorteningSymbolSettingsBuilder::MethodType foreshorteningSymbolMethod;
			foreshorteningSymbolMethod = _preferencesBuilder->AnnotationStyle()->ForeshorteningSymbolSettings()->ForeshorteningSymbolMethodType();
			int int_foreshorteningSymbolMethod;
			int_foreshorteningSymbolMethod = (int)foreshorteningSymbolMethod;
			ist_id_value.assign(convert_to_string(int_foreshorteningSymbolMethod));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_foreshorteningSymbolMethod = convert_to_int(soll_id_value);
				foreshorteningSymbolMethod = (NXOpen::Annotations::ForeshorteningSymbolSettingsBuilder::MethodType)int_foreshorteningSymbolMethod;
				_preferencesBuilder->AnnotationStyle()->ForeshorteningSymbolSettings()->SetForeshorteningSymbolMethodType(foreshorteningSymbolMethod);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the width of a foreshortening symbol.
	if (_nx_dpv->usedUnitValue.compare("1") == 0) {
		id_name.assign("Drafting_foreshorteningSymbolWidth_MU");
	}
	else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
		id_name.assign("Drafting_foreshorteningSymbolWidth_EU");
	}
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double foreshorteningSymbolWidth;
			foreshorteningSymbolWidth = _preferencesBuilder->AnnotationStyle()->ForeshorteningSymbolSettings()->Width();
			ist_id_value.assign(convert_to_string(foreshorteningSymbolWidth));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				foreshorteningSymbolWidth = convert_to_double(soll_id_value);
				_preferencesBuilder->AnnotationStyle()->ForeshorteningSymbolSettings()->SetWidth(foreshorteningSymbolWidth);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the height of a foreshortening symbol.
	if (_nx_dpv->usedUnitValue.compare("1") == 0) {
		id_name.assign("Drafting_foreshorteningSymbolHeight_MU");
	}
	else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
		id_name.assign("Drafting_foreshorteningSymbolHeight_EU");
	}
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double foreshorteningSymbolHeight;
			foreshorteningSymbolHeight = _preferencesBuilder->AnnotationStyle()->ForeshorteningSymbolSettings()->Height();
			ist_id_value.assign(convert_to_string(foreshorteningSymbolHeight));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				foreshorteningSymbolHeight = convert_to_double(soll_id_value);
				_preferencesBuilder->AnnotationStyle()->ForeshorteningSymbolSettings()->SetHeight(foreshorteningSymbolHeight);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the foreshortening symbol angle.
	id_name.assign("Drafting_foreshorteningSymbolAngle");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double foreshorteningSymbolAngle;
			foreshorteningSymbolAngle = _preferencesBuilder->AnnotationStyle()->ForeshorteningSymbolSettings()->Angle();
			ist_id_value.assign(convert_to_string(foreshorteningSymbolAngle));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				foreshorteningSymbolAngle = convert_to_double(soll_id_value);
				_preferencesBuilder->AnnotationStyle()->ForeshorteningSymbolSettings()->SetAngle(foreshorteningSymbolAngle);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- STOPP - %s --- \n", routineName.c_str());
}

/*
File - Preferences - Drafting - Common - Stacking -> Repair these preferences.
*/
void repair_DraftingStandard_Common_Stacking_prefs(NXOpen::Drafting::PreferencesBuilder *_preferencesBuilder, en_nx_dpv* _nx_dpv, Session * _theSession, Part* _workPart) {
	routineName.assign("repair_DraftingStandard_Common_Stacking_prefs");
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- START - %s --- \n", routineName.c_str());
	
	//This option specifies the horizontal alignment option within a stack.
	id_name.assign("Drafting_StackLeftRightAlignment");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::StackHorizontalAlignment stackHorizontalAlignment;
			stackHorizontalAlignment = _preferencesBuilder->AnnotationStyle()->LetteringStyle()->StackHorizontalAlignment();
			int int_stackHorizontalAlignment;
			int_stackHorizontalAlignment = (int)stackHorizontalAlignment;
			ist_id_value.assign(convert_to_string(int_stackHorizontalAlignment));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_stackHorizontalAlignment = convert_to_int(soll_id_value);
				stackHorizontalAlignment = (NXOpen::Annotations::StackHorizontalAlignment)int_stackHorizontalAlignment;
				_preferencesBuilder->AnnotationStyle()->LetteringStyle()->SetStackHorizontalAlignment(stackHorizontalAlignment);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the space buffer left to the annotation within a stack, as a factor of a multiple of the character size.
	id_name.assign("Drafting_StackSpacingLeft");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double stackLeftSpaceFactor;
			stackLeftSpaceFactor = _preferencesBuilder->AnnotationStyle()->LetteringStyle()->StackLeftSpaceFactor();
			string string_stackLeftSpaceFactor;
			string_stackLeftSpaceFactor = convert_to_string(stackLeftSpaceFactor);
			stackLeftSpaceFactor = convert_to_double(string_stackLeftSpaceFactor);
			ist_id_value.assign(convert_to_string(stackLeftSpaceFactor));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				stackLeftSpaceFactor = convert_to_double(soll_id_value);
				_preferencesBuilder->AnnotationStyle()->LetteringStyle()->SetStackLeftSpaceFactor(stackLeftSpaceFactor);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the space buffer right to the annotation within a stack, as a factor of a multiple of the character size.
	id_name.assign("Drafting_StackSpacingRight");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double stackRightSpaceFactor;
			stackRightSpaceFactor = _preferencesBuilder->AnnotationStyle()->LetteringStyle()->StackRightSpaceFactor();
			string string_stackRightSpaceFactor;
			string_stackRightSpaceFactor = convert_to_string(stackRightSpaceFactor);
			stackRightSpaceFactor = convert_to_double(string_stackRightSpaceFactor);
			ist_id_value.assign(convert_to_string(stackRightSpaceFactor));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				stackRightSpaceFactor = convert_to_double(soll_id_value);
				_preferencesBuilder->AnnotationStyle()->LetteringStyle()->SetStackRightSpaceFactor(stackRightSpaceFactor);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the vertical alignment option within a stack.
	id_name.assign("Drafting_StackAboveBelowAlignment");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::StackVerticalAlignment stackVerticalAlignment;
			stackVerticalAlignment = _preferencesBuilder->AnnotationStyle()->LetteringStyle()->StackVerticalAlignment();
			int int_stackVerticalAlignment;
			int_stackVerticalAlignment = (int)stackVerticalAlignment;
			ist_id_value.assign(convert_to_string(int_stackVerticalAlignment));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_stackVerticalAlignment = convert_to_int(soll_id_value);
				stackVerticalAlignment = (NXOpen::Annotations::StackVerticalAlignment)int_stackVerticalAlignment;
				_preferencesBuilder->AnnotationStyle()->LetteringStyle()->SetStackVerticalAlignment(stackVerticalAlignment);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the space buffer above the annotation within a stack, as a factor of a multiple of the character size.
	id_name.assign("Drafting_StackSpacingAbove");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double stackAboveSpaceFactor;
			stackAboveSpaceFactor = _preferencesBuilder->AnnotationStyle()->LetteringStyle()->StackAboveSpaceFactor();
			string string_stackAboveSpaceFactor;
			string_stackAboveSpaceFactor = convert_to_string(stackAboveSpaceFactor);
			stackAboveSpaceFactor = convert_to_double(string_stackAboveSpaceFactor);
			ist_id_value.assign(convert_to_string(stackAboveSpaceFactor));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				stackAboveSpaceFactor = convert_to_double(soll_id_value);
				_preferencesBuilder->AnnotationStyle()->LetteringStyle()->SetStackAboveSpaceFactor(stackAboveSpaceFactor);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the space buffer below the annotation within a stack, as a factor of a multiple of the character size.
	id_name.assign("Drafting_StackSpacingBelow");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double stackBelowSpaceFactor;
			stackBelowSpaceFactor = _preferencesBuilder->AnnotationStyle()->LetteringStyle()->StackBelowSpaceFactor();
			string string_stackBelowSpaceFactor;
			string_stackBelowSpaceFactor = convert_to_string(stackBelowSpaceFactor);
			stackBelowSpaceFactor = convert_to_double(string_stackBelowSpaceFactor);
			ist_id_value.assign(convert_to_string(stackBelowSpaceFactor));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				stackBelowSpaceFactor = convert_to_double(soll_id_value);
				_preferencesBuilder->AnnotationStyle()->LetteringStyle()->SetStackBelowSpaceFactor(stackBelowSpaceFactor);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether to use system defined spacing values when inserting a symbol into a stack.
	id_name.assign("Drafting_StackAutospace");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			bool stackAutospace;
			stackAutospace = _preferencesBuilder->AnnotationStyle()->LetteringStyle()->StackAutospace();
			ist_id_value.assign(convert_to_string(stackAutospace));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				stackAutospace = convert_to_bool(soll_id_value);
				_preferencesBuilder->AnnotationStyle()->LetteringStyle()->SetStackAutospace(stackAutospace);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not the annotation being added to a stack will automatically inherit the associated objects of the stack.
	id_name.assign("Drafting_StackInheritAssociatedObjects");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			bool stackInheritAssociatedObjects;
			stackInheritAssociatedObjects = _preferencesBuilder->AnnotationStyle()->LetteringStyle()->StackInheritAssociatedObjects();
			ist_id_value.assign(convert_to_string(stackInheritAssociatedObjects));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				stackInheritAssociatedObjects = convert_to_bool(soll_id_value);
				_preferencesBuilder->AnnotationStyle()->LetteringStyle()->SetStackInheritAssociatedObjects(stackInheritAssociatedObjects);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- STOPP - %s --- \n", routineName.c_str());
}

/*
File - Preferences - Drafting - Common - Origin -> Repair these preferences.
*/
void repair_DraftingStandard_Common_Origin_prefs(NXOpen::Drafting::PreferencesBuilder *_preferencesBuilder, en_nx_dpv* _nx_dpv, Session * _theSession, Part* _workPart) {
	routineName.assign("repair_DraftingStandard_Common_Origin_prefs");
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- START - %s --- \n", routineName.c_str());
	
	//This option specifies the offset for the first margin.
	if (_nx_dpv->usedUnitValue.compare("1") == 0) {
		id_name.assign("Drafting_marginOffset_MU");
	}
	else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
		id_name.assign("Drafting_marginOffset_EU");
	}
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double marginSpacing;
			marginSpacing = _preferencesBuilder->AnnotationStyle()->OrdinateStyle()->MarginFirstOffset();
			ist_id_value.assign(convert_to_string(marginSpacing));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				marginSpacing = convert_to_double(soll_id_value);
				_preferencesBuilder->AnnotationStyle()->OrdinateStyle()->SetMarginFirstOffset(marginSpacing);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the spacing between margins.
	if (_nx_dpv->usedUnitValue.compare("1") == 0) {
		id_name.assign("Drafting_marginSpacing_MU");
	}
	else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
		id_name.assign("Drafting_marginSpacing_EU");
	}
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double marginSpacing;
			marginSpacing = _preferencesBuilder->AnnotationStyle()->OrdinateStyle()->MarginSpacing();
			ist_id_value.assign(convert_to_string(marginSpacing));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				marginSpacing = convert_to_double(soll_id_value);
				_preferencesBuilder->AnnotationStyle()->OrdinateStyle()->SetMarginSpacing(marginSpacing);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- STOPP - %s --- \n", routineName.c_str());
}

/*
File - Preferences - Drafting - Common - Prefix/Suffix -> Repair these preferences.
*/
void repair_DraftingStandard_Common_PrefixSuffix_prefs(NXOpen::Drafting::PreferencesBuilder *_preferencesBuilder, en_nx_dpv* _nx_dpv, Session * _theSession, Part* _workPart) {
	routineName.assign("repair_DraftingStandard_Common_PrefixSuffix_prefs");
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- START - %s --- \n", routineName.c_str());

	//This option specifies the location of the Diameter or Radius symbols with respect to the dimension text.
	id_name.assign("Drafting_diaRadPlacementSite");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::DiameterRadiusSymbolPlacement diameterRadiusPlacement;
			diameterRadiusPlacement = _preferencesBuilder->AnnotationStyle()->RadialStyle()->DiameterRadiusPlacement();
			int int_diameterRadiusPlacement;
			if (diameterRadiusPlacement == NXOpen::Annotations::DiameterRadiusSymbolPlacementOmit) {
				int_diameterRadiusPlacement = 5;
			}
			else if (diameterRadiusPlacement == NXOpen::Annotations::DiameterRadiusSymbolPlacementBefore) {
				int_diameterRadiusPlacement = 4;
			}
			else if (diameterRadiusPlacement == NXOpen::Annotations::DiameterRadiusSymbolPlacementAfter) {
				int_diameterRadiusPlacement = 2;
			}
			else if (diameterRadiusPlacement == NXOpen::Annotations::DiameterRadiusSymbolPlacementAbove) {
				int_diameterRadiusPlacement = 3;
			}
			else if (diameterRadiusPlacement == NXOpen::Annotations::DiameterRadiusSymbolPlacementBelow) {
				int_diameterRadiusPlacement = 1;
			}
			ist_id_value.assign(convert_to_string(int_diameterRadiusPlacement));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_diameterRadiusPlacement = convert_to_int(soll_id_value);
				if (int_diameterRadiusPlacement == 5) {
					diameterRadiusPlacement = NXOpen::Annotations::DiameterRadiusSymbolPlacementOmit;
				}
				else if (int_diameterRadiusPlacement == 4) {
					diameterRadiusPlacement = NXOpen::Annotations::DiameterRadiusSymbolPlacementBefore;
				}
				else if (int_diameterRadiusPlacement == 2) {
					diameterRadiusPlacement = NXOpen::Annotations::DiameterRadiusSymbolPlacementAfter;
				}
				else if (int_diameterRadiusPlacement == 3) {
					diameterRadiusPlacement = NXOpen::Annotations::DiameterRadiusSymbolPlacementAbove;
				}
				else if (int_diameterRadiusPlacement == 1) {
					diameterRadiusPlacement = NXOpen::Annotations::DiameterRadiusSymbolPlacementBelow;
				}
				_preferencesBuilder->AnnotationStyle()->RadialStyle()->SetDiameterRadiusPlacement(diameterRadiusPlacement);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the space between the symbol and dimension text in character spaces.
	id_name.assign("Drafting_diaRadSymAndDimTextDistance");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double symbolToDimensionTextDistance;
			symbolToDimensionTextDistance = _preferencesBuilder->AnnotationStyle()->RadialStyle()->SymbolToDimensionTextDistance();
			ist_id_value.assign(convert_to_string(symbolToDimensionTextDistance));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				symbolToDimensionTextDistance = convert_to_double(soll_id_value);
				_preferencesBuilder->AnnotationStyle()->RadialStyle()->SetSymbolToDimensionTextDistance(symbolToDimensionTextDistance);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the display position of the text on true length dimensions.
	id_name.assign("Drafting_TrueLengthTextPosition");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::TrueLengthTextPosition trueLengthTextPosition;
			trueLengthTextPosition = _preferencesBuilder->AnnotationStyle()->DimensionStyle()->TrueLengthTextPosition();
			int int_trueLengthTextPosition;
			int_trueLengthTextPosition = (int)trueLengthTextPosition;
			ist_id_value.assign(convert_to_string(int_trueLengthTextPosition));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_trueLengthTextPosition = convert_to_int(soll_id_value);
				NXOpen::Annotations::TrueLengthTextPosition trueLengthTextPosition;
				trueLengthTextPosition = (NXOpen::Annotations::TrueLengthTextPosition)int_trueLengthTextPosition;
				_preferencesBuilder->AnnotationStyle()->DimensionStyle()->SetTrueLengthTextPosition(trueLengthTextPosition);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the prefix or suffix to use for true length dimensions.
	id_name.assign("Drafting_TrueLengthText");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXString trueLengthText;
			trueLengthText = _preferencesBuilder->AnnotationStyle()->DimensionStyle()->TrueLengthText();
			ist_id_value.assign(trueLengthText.GetLocaleText());
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				trueLengthText = (NXString)soll_id_value.c_str();
				_preferencesBuilder->AnnotationStyle()->DimensionStyle()->SetTrueLengthText(trueLengthText);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies if there is prefix or suffix special text (other than appended, tolerance, or dual text) as part of the chamfer dimension.
	id_name.assign("Drafting_chamferDimensionSymbol");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::ChamferSymbolPlacement chamferSymbolType;
			chamferSymbolType = _preferencesBuilder->AnnotationStyle()->DimensionStyle()->ChamferSymbolType();
			int int_chamferSymbolType;
			if (chamferSymbolType == NXOpen::Annotations::ChamferSymbolPlacementNone) {
				int_chamferSymbolType = 1;
			}
			else if (chamferSymbolType == NXOpen::Annotations::ChamferSymbolPlacementPrefix) {
				int_chamferSymbolType = 2;
			}
			else if (chamferSymbolType == NXOpen::Annotations::ChamferSymbolPlacementSuffix) {
				int_chamferSymbolType = 3;
			}
			else if (chamferSymbolType == NXOpen::Annotations::ChamferSymbolPlacementLast) {
				int_chamferSymbolType = -1;
			}
			ist_id_value.assign(convert_to_string(int_chamferSymbolType));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_chamferSymbolType = convert_to_int(soll_id_value);
				if (int_chamferSymbolType == 1) {
					chamferSymbolType = NXOpen::Annotations::ChamferSymbolPlacementNone;
				}
				else if (int_chamferSymbolType == 2) {
					chamferSymbolType = NXOpen::Annotations::ChamferSymbolPlacementPrefix;
				}
				else if (int_chamferSymbolType == 3) {
					chamferSymbolType = NXOpen::Annotations::ChamferSymbolPlacementSuffix;
				}
				else if (int_chamferSymbolType == -1) {
					chamferSymbolType = NXOpen::Annotations::ChamferSymbolPlacementLast;
				}
				if (int_chamferSymbolType != -1) {
					_preferencesBuilder->AnnotationStyle()->DimensionStyle()->SetChamferSymbolType(chamferSymbolType);
				}
				else {
					_preferencesBuilder->AnnotationStyle()->DimensionStyle()->SetChamferSymbolType(NXOpen::Annotations::ChamferSymbolPlacementNone);
				}
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the prefix or suffix characters to use if the Symbol is set to Prefix or Suffix.
	id_name.assign("Drafting_chamferDimensionSymbolName");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXString chamferSymbolName;
			chamferSymbolName = _preferencesBuilder->AnnotationStyle()->DimensionStyle()->ChamferSymbolName();
			ist_id_value.assign(chamferSymbolName.GetLocaleText());
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				chamferSymbolName = (NXString)soll_id_value.c_str();
				_preferencesBuilder->AnnotationStyle()->DimensionStyle()->SetChamferSymbolName(chamferSymbolName);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- STOPP - %s --- \n", routineName.c_str());
}

/*
File - Preferences - Drafting - Common - Symbol -> Repair these preferences.
*/
void repair_DraftingStandard_Common_Symbol_prefs(NXOpen::Drafting::PreferencesBuilder *_preferencesBuilder, en_nx_dpv* _nx_dpv, Session * _theSession, Part* _workPart) {
	routineName.assign("repair_DraftingStandard_Common_Symbol_prefs");
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- START - %s --- \n", routineName.c_str());

	//This option specifies the color of the user-defined symbol.
	id_name.assign("Drafting_userDefSymColor");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::NXColor *userDefinedSymbolColor;
			userDefinedSymbolColor = _preferencesBuilder->AnnotationStyle()->SymbolStyle()->UserDefinedSymbolColor();
			int userDefinedSymbolColorIndex;
			userDefinedSymbolColorIndex = userDefinedSymbolColor->Handle();
			ist_id_value.assign(convert_to_string(userDefinedSymbolColorIndex));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				userDefinedSymbolColorIndex = convert_to_int(soll_id_value);
				NXOpen::NXColor *userDefinedSymbolColor;
				userDefinedSymbolColor = _workPart->Colors()->Find(userDefinedSymbolColorIndex);
				_preferencesBuilder->AnnotationStyle()->SymbolStyle()->SetUserDefinedSymbolColor(userDefinedSymbolColor);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the line font for the user-defined symbol.
	id_name.assign("Drafting_userDefSymFont");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::DisplayableObject::ObjectFont userDefinedSymbolFont;
			userDefinedSymbolFont = _preferencesBuilder->AnnotationStyle()->SymbolStyle()->UserDefinedSymbolFont();
			int int_userDefinedSymbolFont;
			if (userDefinedSymbolFont == NXOpen::DisplayableObject::ObjectFontSolid) {
				int_userDefinedSymbolFont = 1;
			}
			else if (userDefinedSymbolFont == NXOpen::DisplayableObject::ObjectFontDashed) {
				int_userDefinedSymbolFont = 2;
			}
			else if (userDefinedSymbolFont == NXOpen::DisplayableObject::ObjectFontPhantom) {
				int_userDefinedSymbolFont = 3;
			}
			else if (userDefinedSymbolFont == NXOpen::DisplayableObject::ObjectFontCenterline) {
				int_userDefinedSymbolFont = 4;
			}
			else if (userDefinedSymbolFont == NXOpen::DisplayableObject::ObjectFontDotted) {
				int_userDefinedSymbolFont = 5;
			}
			else if (userDefinedSymbolFont == NXOpen::DisplayableObject::ObjectFontLongDashed) {
				int_userDefinedSymbolFont = 6;
			}
			else if (userDefinedSymbolFont == NXOpen::DisplayableObject::ObjectFontDottedDashed) {
				int_userDefinedSymbolFont = 7;
			}
			ist_id_value.assign(convert_to_string(int_userDefinedSymbolFont));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_userDefinedSymbolFont = convert_to_int(soll_id_value);
				if (int_userDefinedSymbolFont == 1) {
					userDefinedSymbolFont = NXOpen::DisplayableObject::ObjectFontSolid;
				}
				else if (int_userDefinedSymbolFont == 2) {
					userDefinedSymbolFont = NXOpen::DisplayableObject::ObjectFontDashed;
				}
				else if (int_userDefinedSymbolFont == 3) {
					userDefinedSymbolFont = NXOpen::DisplayableObject::ObjectFontPhantom;
				}
				else if (int_userDefinedSymbolFont == 4) {
					userDefinedSymbolFont = NXOpen::DisplayableObject::ObjectFontCenterline;
				}
				else if (int_userDefinedSymbolFont == 5) {
					userDefinedSymbolFont = NXOpen::DisplayableObject::ObjectFontDotted;
				}
				else if (int_userDefinedSymbolFont == 6) {
					userDefinedSymbolFont = NXOpen::DisplayableObject::ObjectFontLongDashed;
				}
				else if (int_userDefinedSymbolFont == 7) {
					userDefinedSymbolFont = NXOpen::DisplayableObject::ObjectFontDottedDashed;
				}
				_preferencesBuilder->AnnotationStyle()->SymbolStyle()->SetUserDefinedSymbolFont(userDefinedSymbolFont);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the line width for the user-defined symbol.
	id_name.assign("Drafting_userDefSymWidth");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::LineWidth userDefinedSymbolWidth;
			userDefinedSymbolWidth = _workPart->Annotations()->Preferences()->GetSymbolPreferences()->GetUserDefinedSymbolCfw().Width;
			int int_userDefinedSymbolWidth;
			if (userDefinedSymbolWidth == NXOpen::Annotations::LineWidthNormal) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("get - Drafting_userDefSymWidth - LineWidthNormal \n");
				int_userDefinedSymbolWidth = 1;
			}
			else if (userDefinedSymbolWidth == NXOpen::Annotations::LineWidthThick) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("get - Drafting_userDefSymWidth - LineWidthThick \n");
				int_userDefinedSymbolWidth = 2;
			}
			else if (userDefinedSymbolWidth == NXOpen::Annotations::LineWidthThin) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("get - Drafting_userDefSymWidth - LineWidthThin \n");
				int_userDefinedSymbolWidth = 3;
			}
			else if (userDefinedSymbolWidth == NXOpen::Annotations::LineWidthOne) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("get - Drafting_userDefSymWidth - LineWidthOne \n");
				int_userDefinedSymbolWidth = 6;
			}
			else if (userDefinedSymbolWidth == NXOpen::Annotations::LineWidthTwo) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("get - Drafting_userDefSymWidth - LineWidthTwo \n");
				int_userDefinedSymbolWidth = 7;
			}
			else if (userDefinedSymbolWidth == NXOpen::Annotations::LineWidthThree) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("get - Drafting_userDefSymWidth - LineWidthThree \n");
				int_userDefinedSymbolWidth = 8;
			}
			else if (userDefinedSymbolWidth == NXOpen::Annotations::LineWidthFour) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("get - Drafting_userDefSymWidth - LineWidthFour \n");
				int_userDefinedSymbolWidth = 9;
			}
			else if (userDefinedSymbolWidth == NXOpen::Annotations::LineWidthFive) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("get - Drafting_userDefSymWidth - LineWidthFive \n");
				int_userDefinedSymbolWidth = 10;
			}
			else if (userDefinedSymbolWidth == NXOpen::Annotations::LineWidthSix) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("get - Drafting_userDefSymWidth - LineWidthSix \n");
				int_userDefinedSymbolWidth = 11;
			}
			else if (userDefinedSymbolWidth == NXOpen::Annotations::LineWidthSeven) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("get - Drafting_userDefSymWidth - LineWidthSeven \n");
				int_userDefinedSymbolWidth = 12;
			}
			else if (userDefinedSymbolWidth == NXOpen::Annotations::LineWidthEight) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("get - Drafting_userDefSymWidth - LineWidthEight \n");
				int_userDefinedSymbolWidth = 13;
			}
			else if (userDefinedSymbolWidth == NXOpen::Annotations::LineWidthNine) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("get - Drafting_userDefSymWidth - LineWidthNine \n");
				int_userDefinedSymbolWidth = 14;
			}
			else {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("get - Drafting_userDefSymWidth - ERROR \n");
				int_userDefinedSymbolWidth = -999;
			}
			//string id_name_tmp;
			//std::map<const std::string, std::string>::iterator it_tmp;
			//if (int_userDefinedSymbolWidth == 1) {
			//	id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
			//	it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
			//	int_userDefinedSymbolWidth = convert_to_int(it_tmp->second);
			//}
			//if (int_userDefinedSymbolWidth == 2) {
			//	id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
			//	it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
			//	int_userDefinedSymbolWidth = convert_to_int(it_tmp->second);
			//}
			//if (int_userDefinedSymbolWidth == 3) {
			//	id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
			//	it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
			//	int_userDefinedSymbolWidth = convert_to_int(it_tmp->second);
			//}
			//_nx_dpv->soll_dpv_map.find(id_name)->second = convert_to_string(int_userDefinedSymbolWidth);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("get - Drafting_userDefSymWidth=%d \n", int_userDefinedSymbolWidth);
			ist_id_value.assign(convert_to_string(int_userDefinedSymbolWidth));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_userDefinedSymbolWidth = convert_to_int(soll_id_value);
				if (int_userDefinedSymbolWidth == 1) {
					userDefinedSymbolWidth = NXOpen::Annotations::LineWidthNormal;
					//id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
					//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					//userDefinedSymbolWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
				}
				else if (int_userDefinedSymbolWidth == 2) {
					userDefinedSymbolWidth = NXOpen::Annotations::LineWidthThick;
					//id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
					//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					//userDefinedSymbolWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
				}
				else if (int_userDefinedSymbolWidth == 3) {
					userDefinedSymbolWidth = NXOpen::Annotations::LineWidthThin;
					//id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
					//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					//userDefinedSymbolWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
				}
				else if (int_userDefinedSymbolWidth == 6) {
					userDefinedSymbolWidth = NXOpen::Annotations::LineWidthOne;
				}
				else if (int_userDefinedSymbolWidth == 7) {
					userDefinedSymbolWidth = NXOpen::Annotations::LineWidthTwo;
				}
				else if (int_userDefinedSymbolWidth == 8) {
					userDefinedSymbolWidth = NXOpen::Annotations::LineWidthThree;
				}
				else if (int_userDefinedSymbolWidth == 9) {
					userDefinedSymbolWidth = NXOpen::Annotations::LineWidthFour;
				}
				else if (int_userDefinedSymbolWidth == 10) {
					userDefinedSymbolWidth = NXOpen::Annotations::LineWidthFive;
				}
				else if (int_userDefinedSymbolWidth == 11) {
					userDefinedSymbolWidth = NXOpen::Annotations::LineWidthSix;
				}
				else if (int_userDefinedSymbolWidth == 12) {
					userDefinedSymbolWidth = NXOpen::Annotations::LineWidthSeven;
				}
				else if (int_userDefinedSymbolWidth == 13) {
					userDefinedSymbolWidth = NXOpen::Annotations::LineWidthEight;
				}
				else if (int_userDefinedSymbolWidth == 14) {
					userDefinedSymbolWidth = NXOpen::Annotations::LineWidthNine;
				}
				_preferencesBuilder->AnnotationStyle()->SymbolStyle()->SetUserDefinedSymbolWidth(userDefinedSymbolWidth);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- STOPP - %s --- \n", routineName.c_str());
}

/*
File - Preferences - Drafting - Drawing Format - Sheet - Name and Number -> Repair these preferences.
*/
void repair_DraftingStandard_DrawingFormat_Sheet_NameAndNumber_prefs(NXOpen::Drafting::PreferencesBuilder *_preferencesBuilder, en_nx_dpv* _nx_dpv, Session * _theSession, Part* _workPart) {
	routineName.assign("repair_DraftingStandard_DrawingFormat_Sheet_NameAndNumber_prefs");
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- START - %s --- \n", routineName.c_str());
	
	//This option specifies the initial sheet number used for automatic sheet numbering for a drawing.
	id_name.assign("Drafting_InitialSheetNumber");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXString initalSheetNumber;
			initalSheetNumber = _preferencesBuilder->DrawingFormatsheet()->InitialSheetNumber();
			ist_id_value.assign(initalSheetNumber.GetLocaleText());
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				initalSheetNumber = (NXString)soll_id_value.c_str();
				_preferencesBuilder->DrawingFormatsheet()->SetInitialSheetNumber(initalSheetNumber);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the initial secondary number used for automatic sheet numbering for a drawing.
	id_name.assign("Drafting_InitialSecondaryNumber");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXString initalSecondarySheetNumber;
			initalSecondarySheetNumber = _preferencesBuilder->DrawingFormatsheet()->InitialSecondarySheetNumber();
			ist_id_value.assign(initalSecondarySheetNumber.GetLocaleText());
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				initalSecondarySheetNumber = (NXString)soll_id_value.c_str();
				_preferencesBuilder->DrawingFormatsheet()->SetInitialSecondarySheetNumber(initalSecondarySheetNumber);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies an optional delimiter used to separate the primary and secondary sheet number.
	id_name.assign("Drafting_SecondarySheetNumberDelimiter");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXString secondaryNumberDelimeter;
			secondaryNumberDelimeter = _preferencesBuilder->DrawingFormatsheet()->SecondaryNumberDelimiter();
			ist_id_value.assign(secondaryNumberDelimeter.GetLocaleText());
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				secondaryNumberDelimeter = (NXString)soll_id_value.c_str();
				_preferencesBuilder->DrawingFormatsheet()->SetSecondaryNumberDelimiter(secondaryNumberDelimeter);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- STOPP - %s --- \n", routineName.c_str());
}

/*
File - Preferences - Drafting - Drawing Format - Sheet - Size and Scale -> Repair these preferences.
*/
void repair_DraftingStandard_DrawingFormat_Sheet_SizeAndScale_prefs(NXOpen::Drafting::PreferencesBuilder *_preferencesBuilder, en_nx_dpv* _nx_dpv, Session * _theSession, Part* _workPart) {
	routineName.assign("repair_DraftingStandard_DrawingFormat_Sheet_SizeAndScale_prefs");
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- START - %s --- \n", routineName.c_str());
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- STOPP - %s --- \n", routineName.c_str());
}

/*
File - Preferences - Drafting - Drawing Format - Border and Zones - Border Display -> Repair these preferences.
*/
void repair_DraftingStandard_DrawingFormat_BordersAndZones_BorderDisplay_prefs(NXOpen::Drafting::PreferencesBuilder *_preferencesBuilder, en_nx_dpv* _nx_dpv, Session * _theSession, Part* _workPart) {
	routineName.assign("repair_DraftingStandard_DrawingFormat_BordersAndZones_BorderDisplay_prefs");
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- START - %s --- \n", routineName.c_str());
	
	//This option specifies the method to use for the border display.
	id_name.assign("Drafting_ZoneMethod");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::Method method;
			method = _preferencesBuilder->BorderAndZoneStyle()->SheetBorderSettingsStyle()->Method();
			int int_method;
			int_method = (int)method;
			ist_id_value.assign(convert_to_string(int_method));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_method = convert_to_int(soll_id_value);
				method = (NXOpen::Drawings::Method)int_method;
				_preferencesBuilder->BorderAndZoneStyle()->SheetBorderSettingsStyle()->SetMethod(method);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not borders will be created.
	id_name.assign("Drafting_borderDisplayCreateBorders");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			bool createBorders;
			createBorders = _preferencesBuilder->BorderAndZoneStyle()->SheetBorderSettingsStyle()->CreateBorders();
			ist_id_value.assign(convert_to_string(createBorders));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				createBorders = convert_to_bool(soll_id_value);
				_preferencesBuilder->BorderAndZoneStyle()->SheetBorderSettingsStyle()->SetCreateBorders(createBorders);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the distance between inner border line and outer border line.
	if (_nx_dpv->usedUnitValue.compare("1") == 0) {
		id_name.assign("Drafting_borderDisplayWidth_MU");
	}
	else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
		id_name.assign("Drafting_borderDisplayWidth_EU");
	}
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double borderLineWidth;
			borderLineWidth = _preferencesBuilder->BorderAndZoneStyle()->SheetBorderSettingsStyle()->BorderLineWidth();
			ist_id_value.assign(convert_to_string(borderLineWidth));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				borderLineWidth = convert_to_double(soll_id_value);
				_preferencesBuilder->BorderAndZoneStyle()->SheetBorderSettingsStyle()->SetBorderLineWidth(borderLineWidth);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the color of the inner border line.
	id_name.assign("Drafting_borderDisplayInnerLineColor");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::NXColor *lineColor;
			lineColor = _preferencesBuilder->BorderAndZoneStyle()->SheetBorderSettingsStyle()->InnerLineCFW()->LineColor();
			int lineColorIndex;
			lineColorIndex = lineColor->Handle();
			ist_id_value.assign(convert_to_string(lineColorIndex));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				lineColorIndex = convert_to_int(soll_id_value);
				NXOpen::NXColor *lineColor;
				lineColor = _workPart->Colors()->Find(lineColorIndex);
				_preferencesBuilder->BorderAndZoneStyle()->SheetBorderSettingsStyle()->InnerLineCFW()->SetLineColor(lineColor);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the line font for the inner border line.
	id_name.assign("Drafting_borderDisplayInnerLineFont");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::LineFontBuilder::LineFontType borderDisplayInnerLineFont;
			borderDisplayInnerLineFont = _preferencesBuilder->BorderAndZoneStyle()->SheetBorderSettingsStyle()->InnerLineCFW()->LineFont()->LineFont();
			int int_borderDisplayInnerLineFont;
			if (borderDisplayInnerLineFont == NXOpen::LineFontBuilder::LineFontTypeNoChange) {
				int_borderDisplayInnerLineFont = -2;
			}
			else if (borderDisplayInnerLineFont == NXOpen::LineFontBuilder::LineFontTypeOriginal) {
				int_borderDisplayInnerLineFont = 0;
			}
			else if (borderDisplayInnerLineFont == NXOpen::LineFontBuilder::LineFontTypeInvisible) {
				int_borderDisplayInnerLineFont = -1;
			}
			else if (borderDisplayInnerLineFont == NXOpen::LineFontBuilder::LineFontTypeSolid) {
				int_borderDisplayInnerLineFont = 1;
			}
			else if (borderDisplayInnerLineFont == NXOpen::LineFontBuilder::LineFontTypeDashed) {
				int_borderDisplayInnerLineFont = 2;
			}
			else if (borderDisplayInnerLineFont == NXOpen::LineFontBuilder::LineFontTypePhantom) {
				int_borderDisplayInnerLineFont = 3;
			}
			else if (borderDisplayInnerLineFont == NXOpen::LineFontBuilder::LineFontTypeCenterline) {
				int_borderDisplayInnerLineFont = 4;
			}
			else if (borderDisplayInnerLineFont == NXOpen::LineFontBuilder::LineFontTypeDotted) {
				int_borderDisplayInnerLineFont = 5;
			}
			else if (borderDisplayInnerLineFont == NXOpen::LineFontBuilder::LineFontTypeLongDashed) {
				int_borderDisplayInnerLineFont = 6;
			}
			else if (borderDisplayInnerLineFont == NXOpen::LineFontBuilder::LineFontTypeDottedDashed) {
				int_borderDisplayInnerLineFont = 7;
			}
			ist_id_value.assign(convert_to_string(int_borderDisplayInnerLineFont));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_borderDisplayInnerLineFont = convert_to_int(soll_id_value);
				if (int_borderDisplayInnerLineFont == -2) {
					borderDisplayInnerLineFont = NXOpen::LineFontBuilder::LineFontTypeNoChange;
				}
				else if (int_borderDisplayInnerLineFont == 0) {
					borderDisplayInnerLineFont = NXOpen::LineFontBuilder::LineFontTypeOriginal;
				}
				else if (int_borderDisplayInnerLineFont == -1) {
					borderDisplayInnerLineFont = NXOpen::LineFontBuilder::LineFontTypeInvisible;
				}
				else if (int_borderDisplayInnerLineFont == 1) {
					borderDisplayInnerLineFont = NXOpen::LineFontBuilder::LineFontTypeSolid;
				}
				else if (int_borderDisplayInnerLineFont == 2) {
					borderDisplayInnerLineFont = NXOpen::LineFontBuilder::LineFontTypeDashed;
				}
				else if (int_borderDisplayInnerLineFont == 3) {
					borderDisplayInnerLineFont = NXOpen::LineFontBuilder::LineFontTypePhantom;
				}
				else if (int_borderDisplayInnerLineFont == 4) {
					borderDisplayInnerLineFont = NXOpen::LineFontBuilder::LineFontTypeCenterline;
				}
				else if (int_borderDisplayInnerLineFont == 5) {
					borderDisplayInnerLineFont = NXOpen::LineFontBuilder::LineFontTypeDotted;
				}
				else if (int_borderDisplayInnerLineFont == 6) {
					borderDisplayInnerLineFont = NXOpen::LineFontBuilder::LineFontTypeLongDashed;
				}
				else if (int_borderDisplayInnerLineFont == 7) {
					borderDisplayInnerLineFont = NXOpen::LineFontBuilder::LineFontTypeDottedDashed;
				}
				_preferencesBuilder->BorderAndZoneStyle()->SheetBorderSettingsStyle()->InnerLineCFW()->LineFont()->SetLineFont(borderDisplayInnerLineFont);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the line width for the inner border line.
	id_name.assign("Drafting_borderDisplayInnerLineWidth");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::DisplayableObject::ObjectWidth borderDisplayInnerLineWidth;
			borderDisplayInnerLineWidth = _preferencesBuilder->BorderAndZoneStyle()->SheetBorderSettingsStyle()->InnerLineCFW()->LineWidth();
			int int_borderDisplayInnerLineWidth;
			if (borderDisplayInnerLineWidth == NXOpen::DisplayableObject::ObjectWidthNormal) {
				int_borderDisplayInnerLineWidth = 0;
			}
			else if (borderDisplayInnerLineWidth == NXOpen::DisplayableObject::ObjectWidthThick) {
				int_borderDisplayInnerLineWidth = 1;
			}
			else if (borderDisplayInnerLineWidth == NXOpen::DisplayableObject::ObjectWidthThin) {
				int_borderDisplayInnerLineWidth = 2;
			}
			else if (borderDisplayInnerLineWidth == NXOpen::DisplayableObject::ObjectWidthOne) {
				int_borderDisplayInnerLineWidth = 5;
			}
			else if (borderDisplayInnerLineWidth == NXOpen::DisplayableObject::ObjectWidthTwo) {
				int_borderDisplayInnerLineWidth = 6;
			}
			else if (borderDisplayInnerLineWidth == NXOpen::DisplayableObject::ObjectWidthThree) {
				int_borderDisplayInnerLineWidth = 7;
			}
			else if (borderDisplayInnerLineWidth == NXOpen::DisplayableObject::ObjectWidthFour) {
				int_borderDisplayInnerLineWidth = 8;
			}
			else if (borderDisplayInnerLineWidth == NXOpen::DisplayableObject::ObjectWidthFive) {
				int_borderDisplayInnerLineWidth = 9;
			}
			else if (borderDisplayInnerLineWidth == NXOpen::DisplayableObject::ObjectWidthSix) {
				int_borderDisplayInnerLineWidth = 10;
			}
			else if (borderDisplayInnerLineWidth == NXOpen::DisplayableObject::ObjectWidthSeven) {
				int_borderDisplayInnerLineWidth = 11;
			}
			else if (borderDisplayInnerLineWidth == NXOpen::DisplayableObject::ObjectWidthEight) {
				int_borderDisplayInnerLineWidth = 12;
			}
			else if (borderDisplayInnerLineWidth == NXOpen::DisplayableObject::ObjectWidthNine) {
				int_borderDisplayInnerLineWidth = 13;
			}
			string id_name_tmp;
			std::map<const std::string, std::string>::iterator it_tmp;
			if (int_borderDisplayInnerLineWidth == 0) {
				id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
				it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				int_borderDisplayInnerLineWidth = convert_to_int(it_tmp->second);
			}
			if (int_borderDisplayInnerLineWidth == 1) {
				id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
				it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				int_borderDisplayInnerLineWidth = convert_to_int(it_tmp->second);
			}
			if (int_borderDisplayInnerLineWidth == 2) {
				id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
				it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				int_borderDisplayInnerLineWidth = convert_to_int(it_tmp->second);
			}
			//_nx_dpv->soll_dpv_map.find(id_name)->second = convert_to_string(int_borderDisplayInnerLineWidth);
			ist_id_value.assign(convert_to_string(int_borderDisplayInnerLineWidth));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_borderDisplayInnerLineWidth = convert_to_int(soll_id_value);
				if (int_borderDisplayInnerLineWidth == 0) {
					//borderDisplayInnerLineWidth = NXOpen::DisplayableObject::ObjectWidthNormal;
					id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
					it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					borderDisplayInnerLineWidth = (NXOpen::DisplayableObject::ObjectWidth) convert_to_int(it_tmp->second);
				}
				else if (int_borderDisplayInnerLineWidth == 1) {
					//borderDisplayInnerLineWidth = NXOpen::DisplayableObject::ObjectWidthThick;
					id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
					it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					borderDisplayInnerLineWidth = (NXOpen::DisplayableObject::ObjectWidth) convert_to_int(it_tmp->second);
				}
				else if (int_borderDisplayInnerLineWidth == 2) {
					//borderDisplayInnerLineWidth = NXOpen::DisplayableObject::ObjectWidthThin;
					id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
					it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					borderDisplayInnerLineWidth = (NXOpen::DisplayableObject::ObjectWidth) convert_to_int(it_tmp->second);
				}
				else if (int_borderDisplayInnerLineWidth == 5) {
					borderDisplayInnerLineWidth = NXOpen::DisplayableObject::ObjectWidthOne;
				}
				else if (int_borderDisplayInnerLineWidth == 6) {
					borderDisplayInnerLineWidth = NXOpen::DisplayableObject::ObjectWidthTwo;
				}
				else if (int_borderDisplayInnerLineWidth == 7) {
					borderDisplayInnerLineWidth = NXOpen::DisplayableObject::ObjectWidthThree;
				}
				else if (int_borderDisplayInnerLineWidth == 8) {
					borderDisplayInnerLineWidth = NXOpen::DisplayableObject::ObjectWidthFour;
				}
				else if (int_borderDisplayInnerLineWidth == 9) {
					borderDisplayInnerLineWidth = NXOpen::DisplayableObject::ObjectWidthFive;
				}
				else if (int_borderDisplayInnerLineWidth == 10) {
					borderDisplayInnerLineWidth = NXOpen::DisplayableObject::ObjectWidthSix;
				}
				else if (int_borderDisplayInnerLineWidth == 11) {
					borderDisplayInnerLineWidth = NXOpen::DisplayableObject::ObjectWidthSeven;
				}
				else if (int_borderDisplayInnerLineWidth == 12) {
					borderDisplayInnerLineWidth = NXOpen::DisplayableObject::ObjectWidthEight;
				}
				else if (int_borderDisplayInnerLineWidth == 13) {
					borderDisplayInnerLineWidth = NXOpen::DisplayableObject::ObjectWidthNine;
				}
				_preferencesBuilder->BorderAndZoneStyle()->SheetBorderSettingsStyle()->InnerLineCFW()->SetLineWidth(borderDisplayInnerLineWidth);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the color of the outer border line.
	id_name.assign("Drafting_borderDisplayOuterLineColor");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::NXColor *lineColor;
			lineColor = _preferencesBuilder->BorderAndZoneStyle()->SheetBorderSettingsStyle()->OuterLineCFW()->LineColor();
			int lineColorIndex;
			lineColorIndex = lineColor->Handle();
			ist_id_value.assign(convert_to_string(lineColorIndex));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				lineColorIndex = convert_to_int(soll_id_value);
				lineColor = _workPart->Colors()->Find(lineColorIndex);
				_preferencesBuilder->BorderAndZoneStyle()->SheetBorderSettingsStyle()->OuterLineCFW()->SetLineColor(lineColor);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the line font for the outer border line.
	id_name.assign("Drafting_borderDisplayOuterLineFont");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::LineFontBuilder::LineFontType borderDisplayOuterLineFont;
			borderDisplayOuterLineFont = _preferencesBuilder->BorderAndZoneStyle()->SheetBorderSettingsStyle()->OuterLineCFW()->LineFont()->LineFont();
			int int_borderDisplayOuterLineFont;
			if (borderDisplayOuterLineFont == NXOpen::LineFontBuilder::LineFontTypeNoChange) {
				int_borderDisplayOuterLineFont = -2;
			}
			else if (borderDisplayOuterLineFont == NXOpen::LineFontBuilder::LineFontTypeOriginal) {
				int_borderDisplayOuterLineFont = 0;
			}
			else if (borderDisplayOuterLineFont == NXOpen::LineFontBuilder::LineFontTypeInvisible) {
				int_borderDisplayOuterLineFont = -1;
			}
			else if (borderDisplayOuterLineFont == NXOpen::LineFontBuilder::LineFontTypeSolid) {
				int_borderDisplayOuterLineFont = 1;
			}
			else if (borderDisplayOuterLineFont == NXOpen::LineFontBuilder::LineFontTypeDashed) {
				int_borderDisplayOuterLineFont = 2;
			}
			else if (borderDisplayOuterLineFont == NXOpen::LineFontBuilder::LineFontTypePhantom) {
				int_borderDisplayOuterLineFont = 3;
			}
			else if (borderDisplayOuterLineFont == NXOpen::LineFontBuilder::LineFontTypeCenterline) {
				int_borderDisplayOuterLineFont = 4;
			}
			else if (borderDisplayOuterLineFont == NXOpen::LineFontBuilder::LineFontTypeDotted) {
				int_borderDisplayOuterLineFont = 5;
			}
			else if (borderDisplayOuterLineFont == NXOpen::LineFontBuilder::LineFontTypeLongDashed) {
				int_borderDisplayOuterLineFont = 6;
			}
			else if (borderDisplayOuterLineFont == NXOpen::LineFontBuilder::LineFontTypeDottedDashed) {
				int_borderDisplayOuterLineFont = 7;
			}
			ist_id_value.assign(convert_to_string(int_borderDisplayOuterLineFont));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_borderDisplayOuterLineFont = convert_to_int(soll_id_value);
				if (int_borderDisplayOuterLineFont == -2) {
					borderDisplayOuterLineFont = NXOpen::LineFontBuilder::LineFontTypeNoChange;
				}
				else if (int_borderDisplayOuterLineFont == 0) {
					borderDisplayOuterLineFont = NXOpen::LineFontBuilder::LineFontTypeOriginal;
				}
				else if (int_borderDisplayOuterLineFont == -1) {
					borderDisplayOuterLineFont = NXOpen::LineFontBuilder::LineFontTypeInvisible;
				}
				else if (int_borderDisplayOuterLineFont == 1) {
					borderDisplayOuterLineFont = NXOpen::LineFontBuilder::LineFontTypeSolid;
				}
				else if (int_borderDisplayOuterLineFont == 2) {
					borderDisplayOuterLineFont = NXOpen::LineFontBuilder::LineFontTypeDashed;
				}
				else if (int_borderDisplayOuterLineFont == 3) {
					borderDisplayOuterLineFont = NXOpen::LineFontBuilder::LineFontTypePhantom;
				}
				else if (int_borderDisplayOuterLineFont == 4) {
					borderDisplayOuterLineFont = NXOpen::LineFontBuilder::LineFontTypeCenterline;
				}
				else if (int_borderDisplayOuterLineFont == 5) {
					borderDisplayOuterLineFont = NXOpen::LineFontBuilder::LineFontTypeDotted;
				}
				else if (int_borderDisplayOuterLineFont == 6) {
					borderDisplayOuterLineFont = NXOpen::LineFontBuilder::LineFontTypeLongDashed;
				}
				else if (int_borderDisplayOuterLineFont == 7) {
					borderDisplayOuterLineFont = NXOpen::LineFontBuilder::LineFontTypeDottedDashed;
				}
				_preferencesBuilder->BorderAndZoneStyle()->SheetBorderSettingsStyle()->OuterLineCFW()->LineFont()->SetLineFont(borderDisplayOuterLineFont);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the line width for the outer border line.
	id_name.assign("Drafting_borderDisplayOuterLineWidth");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::DisplayableObject::ObjectWidth borderDisplayOuterLineWidth;
			borderDisplayOuterLineWidth = _preferencesBuilder->BorderAndZoneStyle()->SheetBorderSettingsStyle()->OuterLineCFW()->LineWidth();
			int int_borderDisplayOuterLineWidth;
			if (borderDisplayOuterLineWidth == NXOpen::DisplayableObject::ObjectWidthNormal) {
				int_borderDisplayOuterLineWidth = 0;
			}
			else if (borderDisplayOuterLineWidth == NXOpen::DisplayableObject::ObjectWidthThick) {
				int_borderDisplayOuterLineWidth = 1;
			}
			else if (borderDisplayOuterLineWidth == NXOpen::DisplayableObject::ObjectWidthThin) {
				int_borderDisplayOuterLineWidth = 2;
			}
			else if (borderDisplayOuterLineWidth == NXOpen::DisplayableObject::ObjectWidthOne) {
				int_borderDisplayOuterLineWidth = 5;
			}
			else if (borderDisplayOuterLineWidth == NXOpen::DisplayableObject::ObjectWidthTwo) {
				int_borderDisplayOuterLineWidth = 6;
			}
			else if (borderDisplayOuterLineWidth == NXOpen::DisplayableObject::ObjectWidthThree) {
				int_borderDisplayOuterLineWidth = 7;
			}
			else if (borderDisplayOuterLineWidth == NXOpen::DisplayableObject::ObjectWidthFour) {
				int_borderDisplayOuterLineWidth = 8;
			}
			else if (borderDisplayOuterLineWidth == NXOpen::DisplayableObject::ObjectWidthFive) {
				int_borderDisplayOuterLineWidth = 9;
			}
			else if (borderDisplayOuterLineWidth == NXOpen::DisplayableObject::ObjectWidthSix) {
				int_borderDisplayOuterLineWidth = 10;
			}
			else if (borderDisplayOuterLineWidth == NXOpen::DisplayableObject::ObjectWidthSeven) {
				int_borderDisplayOuterLineWidth = 11;
			}
			else if (borderDisplayOuterLineWidth == NXOpen::DisplayableObject::ObjectWidthEight) {
				int_borderDisplayOuterLineWidth = 12;
			}
			else if (borderDisplayOuterLineWidth == NXOpen::DisplayableObject::ObjectWidthNine) {
				int_borderDisplayOuterLineWidth = 13;
			}
			string id_name_tmp;
			std::map<const std::string, std::string>::iterator it_tmp;
			if (int_borderDisplayOuterLineWidth == 0) {
				id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
				it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				int_borderDisplayOuterLineWidth = convert_to_int(it_tmp->second);
			}
			if (int_borderDisplayOuterLineWidth == 1) {
				id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
				it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				int_borderDisplayOuterLineWidth = convert_to_int(it_tmp->second);
			}
			if (int_borderDisplayOuterLineWidth == 2) {
				id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
				it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				int_borderDisplayOuterLineWidth = convert_to_int(it_tmp->second);
			}
			//_nx_dpv->soll_dpv_map.find(id_name)->second = convert_to_string(int_borderDisplayOuterLineWidth);
			ist_id_value.assign(convert_to_string(int_borderDisplayOuterLineWidth));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_borderDisplayOuterLineWidth = convert_to_int(soll_id_value);
				if (int_borderDisplayOuterLineWidth == 0) {
					//borderDisplayOuterLineWidth = NXOpen::DisplayableObject::ObjectWidthNormal;
					id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
					it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					borderDisplayOuterLineWidth = (NXOpen::DisplayableObject::ObjectWidth) convert_to_int(it_tmp->second);
				}
				else if (int_borderDisplayOuterLineWidth == 1) {
					//borderDisplayOuterLineWidth = NXOpen::DisplayableObject::ObjectWidthThick;
					id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
					it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					borderDisplayOuterLineWidth = (NXOpen::DisplayableObject::ObjectWidth) convert_to_int(it_tmp->second);
				}
				else if (int_borderDisplayOuterLineWidth == 2) {
					//borderDisplayOuterLineWidth = NXOpen::DisplayableObject::ObjectWidthThin;
					id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
					it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					borderDisplayOuterLineWidth = (NXOpen::DisplayableObject::ObjectWidth) convert_to_int(it_tmp->second);
				}
				else if (int_borderDisplayOuterLineWidth == 5) {
					borderDisplayOuterLineWidth = NXOpen::DisplayableObject::ObjectWidthOne;
				}
				else if (int_borderDisplayOuterLineWidth == 6) {
					borderDisplayOuterLineWidth = NXOpen::DisplayableObject::ObjectWidthTwo;
				}
				else if (int_borderDisplayOuterLineWidth == 7) {
					borderDisplayOuterLineWidth = NXOpen::DisplayableObject::ObjectWidthThree;
				}
				else if (int_borderDisplayOuterLineWidth == 8) {
					borderDisplayOuterLineWidth = NXOpen::DisplayableObject::ObjectWidthFour;
				}
				else if (int_borderDisplayOuterLineWidth == 9) {
					borderDisplayOuterLineWidth = NXOpen::DisplayableObject::ObjectWidthFive;
				}
				else if (int_borderDisplayOuterLineWidth == 10) {
					borderDisplayOuterLineWidth = NXOpen::DisplayableObject::ObjectWidthSix;
				}
				else if (int_borderDisplayOuterLineWidth == 11) {
					borderDisplayOuterLineWidth = NXOpen::DisplayableObject::ObjectWidthSeven;
				}
				else if (int_borderDisplayOuterLineWidth == 12) {
					borderDisplayOuterLineWidth = NXOpen::DisplayableObject::ObjectWidthEight;
				}
				else if (int_borderDisplayOuterLineWidth == 13) {
					borderDisplayOuterLineWidth = NXOpen::DisplayableObject::ObjectWidthNine;
				}
				_preferencesBuilder->BorderAndZoneStyle()->SheetBorderSettingsStyle()->OuterLineCFW()->SetLineWidth(borderDisplayOuterLineWidth);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not to display the sheet size in the last zone.
	id_name.assign("Drafting_borderDisplaySheetSizeInBorder");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			bool displaySheetSizeInBorder;
			displaySheetSizeInBorder = _preferencesBuilder->BorderAndZoneStyle()->SheetBorderSettingsStyle()->DisplaySheetSizeInBorder();
			ist_id_value.assign(convert_to_string(displaySheetSizeInBorder));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				displaySheetSizeInBorder = convert_to_bool(soll_id_value);
				_preferencesBuilder->BorderAndZoneStyle()->SheetBorderSettingsStyle()->SetDisplaySheetSizeInBorder(displaySheetSizeInBorder);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the horizontal position of centering marks.
	id_name.assign("Drafting_boderDisplayCenteringMarksHorizontal");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::HorizontalCenteringMarkType centeringMarksHorizontal;
			centeringMarksHorizontal = _preferencesBuilder->BorderAndZoneStyle()->SheetBorderSettingsStyle()->CenteringMarksHorizontal();
			int int_centeringMarksHorizontal;
			int_centeringMarksHorizontal = (int)centeringMarksHorizontal;
			ist_id_value.assign(convert_to_string(int_centeringMarksHorizontal));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_centeringMarksHorizontal = convert_to_int(soll_id_value);
				centeringMarksHorizontal = (NXOpen::Drawings::HorizontalCenteringMarkType)int_centeringMarksHorizontal;
				_preferencesBuilder->BorderAndZoneStyle()->SheetBorderSettingsStyle()->SetCenteringMarksHorizontal(centeringMarksHorizontal);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the vertical position of centering marks.
	id_name.assign("Drafting_boderDisplayCenteringMarksVertical");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::VerticalCenteringMarkType centeringMarksVertical;
			centeringMarksVertical = _preferencesBuilder->BorderAndZoneStyle()->SheetBorderSettingsStyle()->CenteringMarksVertical();
			int int_centeringMarksVertical;
			int_centeringMarksVertical = (int)centeringMarksVertical;
			ist_id_value.assign(convert_to_string(int_centeringMarksVertical));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_centeringMarksVertical = convert_to_int(soll_id_value);
				NXOpen::Drawings::VerticalCenteringMarkType centeringMarksVertical;
				centeringMarksVertical = (NXOpen::Drawings::VerticalCenteringMarkType)int_centeringMarksVertical;
				_preferencesBuilder->BorderAndZoneStyle()->SheetBorderSettingsStyle()->SetCenteringMarksVertical(centeringMarksVertical);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the centering mark length.
	if (_nx_dpv->usedUnitValue.compare("1") == 0) {
		id_name.assign("Drafting_borderDisplayCenteringMarkLength_MU");
	}
	else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
		id_name.assign("Drafting_borderDisplayCenteringMarkLength_EU");
	}
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double centeringMarkLength;
			centeringMarkLength = _preferencesBuilder->BorderAndZoneStyle()->SheetBorderSettingsStyle()->CenteringMarkLength();
			ist_id_value.assign(convert_to_string(centeringMarkLength));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				centeringMarkLength = convert_to_double(soll_id_value);
				_preferencesBuilder->BorderAndZoneStyle()->SheetBorderSettingsStyle()->SetCenteringMarkLength(centeringMarkLength);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the centering mark length.
	if (_nx_dpv->usedUnitValue.compare("1") == 0) {
		id_name.assign("Drafting_borderDisplayExtension_MU");
	}
	else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
		id_name.assign("Drafting_borderDisplayExtension_EU");
	}
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double centeringMarksExtension;
			centeringMarksExtension = _preferencesBuilder->BorderAndZoneStyle()->SheetBorderSettingsStyle()->CenteringMarksExtension();
			ist_id_value.assign(convert_to_string(centeringMarksExtension));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				centeringMarksExtension = convert_to_double(soll_id_value);
				_preferencesBuilder->BorderAndZoneStyle()->SheetBorderSettingsStyle()->SetCenteringMarksExtension(centeringMarksExtension);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the color of the centering mark.
	id_name.assign("Drafting_borderDisplayCenteringMarkColor");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::NXColor *lineColor;
			lineColor = _preferencesBuilder->BorderAndZoneStyle()->SheetBorderSettingsStyle()->CenteringMarksColorWidth()->LineColor();
			int lineColorIndex;
			lineColorIndex = lineColor->Handle();
			ist_id_value.assign(convert_to_string(lineColorIndex));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				lineColorIndex = convert_to_int(soll_id_value);
				lineColor = _workPart->Colors()->Find(lineColorIndex);
				_preferencesBuilder->BorderAndZoneStyle()->SheetBorderSettingsStyle()->CenteringMarksColorWidth()->SetLineColor(lineColor);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the line width for the centering mark.
	id_name.assign("Drafting_borderDisplayCenteringMarkWidth");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::DisplayableObject::ObjectWidth borderDisplayCenteringMarkWidth;
			borderDisplayCenteringMarkWidth = _preferencesBuilder->BorderAndZoneStyle()->SheetBorderSettingsStyle()->CenteringMarksColorWidth()->LineWidth();
			int int_borderDisplayCenteringMarkWidth;
			if (borderDisplayCenteringMarkWidth == NXOpen::DisplayableObject::ObjectWidthNormal) {
				int_borderDisplayCenteringMarkWidth = 0;
			}
			else if (borderDisplayCenteringMarkWidth == NXOpen::DisplayableObject::ObjectWidthThick) {
				int_borderDisplayCenteringMarkWidth = 1;
			}
			else if (borderDisplayCenteringMarkWidth == NXOpen::DisplayableObject::ObjectWidthThin) {
				int_borderDisplayCenteringMarkWidth = 2;
			}
			else if (borderDisplayCenteringMarkWidth == NXOpen::DisplayableObject::ObjectWidthOne) {
				int_borderDisplayCenteringMarkWidth = 5;
			}
			else if (borderDisplayCenteringMarkWidth == NXOpen::DisplayableObject::ObjectWidthTwo) {
				int_borderDisplayCenteringMarkWidth = 6;
			}
			else if (borderDisplayCenteringMarkWidth == NXOpen::DisplayableObject::ObjectWidthThree) {
				int_borderDisplayCenteringMarkWidth = 7;
			}
			else if (borderDisplayCenteringMarkWidth == NXOpen::DisplayableObject::ObjectWidthFour) {
				int_borderDisplayCenteringMarkWidth = 8;
			}
			else if (borderDisplayCenteringMarkWidth == NXOpen::DisplayableObject::ObjectWidthFive) {
				int_borderDisplayCenteringMarkWidth = 9;
			}
			else if (borderDisplayCenteringMarkWidth == NXOpen::DisplayableObject::ObjectWidthSix) {
				int_borderDisplayCenteringMarkWidth = 10;
			}
			else if (borderDisplayCenteringMarkWidth == NXOpen::DisplayableObject::ObjectWidthSeven) {
				int_borderDisplayCenteringMarkWidth = 11;
			}
			else if (borderDisplayCenteringMarkWidth == NXOpen::DisplayableObject::ObjectWidthEight) {
				int_borderDisplayCenteringMarkWidth = 12;
			}
			else if (borderDisplayCenteringMarkWidth == NXOpen::DisplayableObject::ObjectWidthNine) {
				int_borderDisplayCenteringMarkWidth = 13;
			}
			string id_name_tmp;
			std::map<const std::string, std::string>::iterator it_tmp;
			if (int_borderDisplayCenteringMarkWidth == 0) {
				id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
				it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				int_borderDisplayCenteringMarkWidth = convert_to_int(it_tmp->second);
			}
			if (int_borderDisplayCenteringMarkWidth == 1) {
				id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
				it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				int_borderDisplayCenteringMarkWidth = convert_to_int(it_tmp->second);
			}
			if (int_borderDisplayCenteringMarkWidth == 2) {
				id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
				it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				int_borderDisplayCenteringMarkWidth = convert_to_int(it_tmp->second);
			}
			//_nx_dpv->soll_dpv_map.find(id_name)->second = convert_to_string(int_borderDisplayCenteringMarkWidth);
			ist_id_value.assign(convert_to_string(int_borderDisplayCenteringMarkWidth));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_borderDisplayCenteringMarkWidth = convert_to_int(soll_id_value);
				if (int_borderDisplayCenteringMarkWidth == 0) {
					//borderDisplayCenteringMarkWidth = NXOpen::DisplayableObject::ObjectWidthNormal;
					id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
					it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					borderDisplayCenteringMarkWidth = (NXOpen::DisplayableObject::ObjectWidth) convert_to_int(it_tmp->second);
				}
				else if (int_borderDisplayCenteringMarkWidth == 1) {
					//borderDisplayCenteringMarkWidth = NXOpen::DisplayableObject::ObjectWidthThick;
					id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
					it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					borderDisplayCenteringMarkWidth = (NXOpen::DisplayableObject::ObjectWidth) convert_to_int(it_tmp->second);
				}
				else if (int_borderDisplayCenteringMarkWidth == 2) {
					//borderDisplayCenteringMarkWidth = NXOpen::DisplayableObject::ObjectWidthThin;
					id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
					it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					borderDisplayCenteringMarkWidth = (NXOpen::DisplayableObject::ObjectWidth) convert_to_int(it_tmp->second);
				}
				else if (int_borderDisplayCenteringMarkWidth == 5) {
					borderDisplayCenteringMarkWidth = NXOpen::DisplayableObject::ObjectWidthOne;
				}
				else if (int_borderDisplayCenteringMarkWidth == 6) {
					borderDisplayCenteringMarkWidth = NXOpen::DisplayableObject::ObjectWidthTwo;
				}
				else if (int_borderDisplayCenteringMarkWidth == 7) {
					borderDisplayCenteringMarkWidth = NXOpen::DisplayableObject::ObjectWidthThree;
				}
				else if (int_borderDisplayCenteringMarkWidth == 8) {
					borderDisplayCenteringMarkWidth = NXOpen::DisplayableObject::ObjectWidthFour;
				}
				else if (int_borderDisplayCenteringMarkWidth == 9) {
					borderDisplayCenteringMarkWidth = NXOpen::DisplayableObject::ObjectWidthFive;
				}
				else if (int_borderDisplayCenteringMarkWidth == 10) {
					borderDisplayCenteringMarkWidth = NXOpen::DisplayableObject::ObjectWidthSix;
				}
				else if (int_borderDisplayCenteringMarkWidth == 11) {
					borderDisplayCenteringMarkWidth = NXOpen::DisplayableObject::ObjectWidthSeven;
				}
				else if (int_borderDisplayCenteringMarkWidth == 12) {
					borderDisplayCenteringMarkWidth = NXOpen::DisplayableObject::ObjectWidthEight;
				}
				else if (int_borderDisplayCenteringMarkWidth == 13) {
					borderDisplayCenteringMarkWidth = NXOpen::DisplayableObject::ObjectWidthNine;
				}
				_preferencesBuilder->BorderAndZoneStyle()->SheetBorderSettingsStyle()->CenteringMarksColorWidth()->SetLineWidth(borderDisplayCenteringMarkWidth);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the arrow style.
	id_name.assign("Drafting_boderDisplayArrowStyle");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::ArrowStyleType arrowStyle;
			arrowStyle = _preferencesBuilder->BorderAndZoneStyle()->SheetBorderSettingsStyle()->ArrowStyle();
			int int_arrowStyle;
			int_arrowStyle = (int)arrowStyle;
			ist_id_value.assign(convert_to_string(int_arrowStyle));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_arrowStyle = convert_to_int(soll_id_value);
				arrowStyle = (NXOpen::Drawings::ArrowStyleType)int_arrowStyle;
				_preferencesBuilder->BorderAndZoneStyle()->SheetBorderSettingsStyle()->SetArrowStyle(arrowStyle);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the arrow length.
	if (_nx_dpv->usedUnitValue.compare("1") == 0) {
		id_name.assign("Drafting_borderDisplayArrowLength_MU");
	}
	else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
		id_name.assign("Drafting_borderDisplayArrowLength_EU");
	}
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double arrowLength;
			arrowLength = _preferencesBuilder->BorderAndZoneStyle()->SheetBorderSettingsStyle()->ArrowLength();
			ist_id_value.assign(convert_to_string(arrowLength));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				arrowLength = convert_to_double(soll_id_value);
				_preferencesBuilder->BorderAndZoneStyle()->SheetBorderSettingsStyle()->SetArrowLength(arrowLength);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the arrow angle.
	id_name.assign("Drafting_borderDisplayArrowAngle");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double arrowAngle;
			arrowAngle = _preferencesBuilder->BorderAndZoneStyle()->SheetBorderSettingsStyle()->ArrowAngle();
			ist_id_value.assign(convert_to_string(arrowAngle));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				arrowAngle = convert_to_double(soll_id_value);
				_preferencesBuilder->BorderAndZoneStyle()->SheetBorderSettingsStyle()->SetArrowAngle(arrowAngle);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the arrow tail length.
	if (_nx_dpv->usedUnitValue.compare("1") == 0) {
		id_name.assign("Drafting_borderDisplayArrowTailLength_MU");
	}
	else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
		id_name.assign("Drafting_borderDisplayArrowTailLength_EU");
	}
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;_preferencesBuilder->Commit();
			double arrowHeadTail;
			arrowHeadTail = _preferencesBuilder->BorderAndZoneStyle()->SheetBorderSettingsStyle()->ArrowHeadTail();
			ist_id_value.assign(convert_to_string(arrowHeadTail));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				arrowHeadTail = convert_to_double(soll_id_value);
				_preferencesBuilder->BorderAndZoneStyle()->SheetBorderSettingsStyle()->SetArrowHeadTail(arrowHeadTail);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the arrow direction.
	id_name.assign("Drafting_boderDisplayArrowDirection");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::ArrowDirectionType arrowDirection;
			arrowDirection = _preferencesBuilder->BorderAndZoneStyle()->SheetBorderSettingsStyle()->ArrowDirection();
			int int_arrowDirection;
			int_arrowDirection = (int)arrowDirection;
			ist_id_value.assign(convert_to_string(int_arrowDirection));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_arrowDirection = convert_to_int(soll_id_value);
				arrowDirection = (NXOpen::Drawings::ArrowDirectionType)int_arrowDirection;
				_preferencesBuilder->BorderAndZoneStyle()->SheetBorderSettingsStyle()->SetArrowDirection(arrowDirection);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not borders will be created.
	id_name.assign("Drafting_borderDisplayCreateTrimmingMarks");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			bool createTrimmingMarks;
			createTrimmingMarks = _preferencesBuilder->BorderAndZoneStyle()->SheetBorderSettingsStyle()->CreateTrimmingMarks();
			ist_id_value.assign(convert_to_string(createTrimmingMarks));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				createTrimmingMarks = convert_to_bool(soll_id_value);
				_preferencesBuilder->BorderAndZoneStyle()->SheetBorderSettingsStyle()->SetCreateTrimmingMarks(createTrimmingMarks);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the trimming mark style.
	id_name.assign("Drafting_boderDisplayTrimmingMarksStyle");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::TrimmingMarkStyleType trimmingMarkStyle;
			trimmingMarkStyle = _preferencesBuilder->BorderAndZoneStyle()->SheetBorderSettingsStyle()->TrimmingMarkStyle();
			int int_trimmingMarkStyle;
			int_trimmingMarkStyle = (int)trimmingMarkStyle;
			ist_id_value.assign(convert_to_string(int_trimmingMarkStyle));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_trimmingMarkStyle = convert_to_int(soll_id_value);
				trimmingMarkStyle = (NXOpen::Drawings::TrimmingMarkStyleType)int_trimmingMarkStyle;
				_preferencesBuilder->BorderAndZoneStyle()->SheetBorderSettingsStyle()->SetTrimmingMarkStyle(trimmingMarkStyle);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the length of the trimming marks.
	if (_nx_dpv->usedUnitValue.compare("1") == 0) {
		id_name.assign("Drafting_borderDisplayTrimmingMarksLength_MU");
	}
	else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
		id_name.assign("Drafting_borderDisplayTrimmingMarksLength_EU");
	}
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double trimmingMarkLength;
			trimmingMarkLength = _preferencesBuilder->BorderAndZoneStyle()->SheetBorderSettingsStyle()->TrimmingMarkLength();
			ist_id_value.assign(convert_to_string(trimmingMarkLength));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				trimmingMarkLength = convert_to_double(soll_id_value);
				_preferencesBuilder->BorderAndZoneStyle()->SheetBorderSettingsStyle()->SetTrimmingMarkLength(trimmingMarkLength);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the width of the trimming marks.
	if (_nx_dpv->usedUnitValue.compare("1") == 0) {
		id_name.assign("Drafting_borderDisplayTrimmingMarksWidth_MU");
	}
	else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
		id_name.assign("Drafting_borderDisplayTrimmingMarksWidth_EU");
	}
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double trimmingMarkWidth;
			trimmingMarkWidth = _preferencesBuilder->BorderAndZoneStyle()->SheetBorderSettingsStyle()->TrimmingMarkWidth();
			ist_id_value.assign(convert_to_string(trimmingMarkWidth));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				trimmingMarkWidth = convert_to_double(soll_id_value);
				_preferencesBuilder->BorderAndZoneStyle()->SheetBorderSettingsStyle()->SetTrimmingMarkWidth(trimmingMarkWidth);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the color of the trimming marks.
	id_name.assign("Drafting_borderDisplayTrimmingMarksColor");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::NXColor *trimmingMarkColor;
			trimmingMarkColor = _preferencesBuilder->BorderAndZoneStyle()->SheetBorderSettingsStyle()->TrimmingMarkColor();
			int trimmingMarkColorIndex;
			trimmingMarkColorIndex = trimmingMarkColor->Handle();
			ist_id_value.assign(convert_to_string(trimmingMarkColorIndex));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				trimmingMarkColorIndex = convert_to_int(soll_id_value);
				trimmingMarkColor = _workPart->Colors()->Find(trimmingMarkColorIndex);
				_preferencesBuilder->BorderAndZoneStyle()->SheetBorderSettingsStyle()->SetTrimmingMarkColor(trimmingMarkColor);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- STOPP - %s --- \n", routineName.c_str());
}

/*
File - Preferences - Drafting - Drawing Format - Border and Zones - Border Margins -> Repair these preferences.
*/
void repair_DraftingStandard_DrawingFormat_BordersAndZones_BorderMargins_prefs(NXOpen::Drafting::PreferencesBuilder *_preferencesBuilder, en_nx_dpv* _nx_dpv, Session * _theSession, Part* _workPart) {
	routineName.assign("repair_DraftingStandard_DrawingFormat_BordersAndZones_BorderMargins_prefs");
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- START - %s --- \n", routineName.c_str());
	
	//This option specifies the top margin.
	if (_nx_dpv->usedUnitValue.compare("1") == 0) {
		id_name.assign("Drafting_sheetZoneTopMargin_MU");
	}
	else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
		id_name.assign("Drafting_sheetZoneTopMargin_EU");
	}
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double topMargin;
			topMargin = _preferencesBuilder->BorderAndZoneStyle()->SheetMarginSettingsStyle()->TopTrimmedMargin();
			ist_id_value.assign(convert_to_string(topMargin));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				topMargin = convert_to_double(soll_id_value);
				_preferencesBuilder->BorderAndZoneStyle()->SheetMarginSettingsStyle()->SetTopTrimmedMargin(topMargin);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the bottom margin.
	if (_nx_dpv->usedUnitValue.compare("1") == 0) {
		id_name.assign("Drafting_sheetZoneBottomMargin_MU");
	}
	else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
		id_name.assign("Drafting_sheetZoneBottomMargin_EU");
	}
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double bottomTrimmedMargin;
			bottomTrimmedMargin = _preferencesBuilder->BorderAndZoneStyle()->SheetMarginSettingsStyle()->BottomTrimmedMargin();
			ist_id_value.assign(convert_to_string(bottomTrimmedMargin));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				bottomTrimmedMargin = convert_to_double(soll_id_value);
				_preferencesBuilder->BorderAndZoneStyle()->SheetMarginSettingsStyle()->SetBottomTrimmedMargin(bottomTrimmedMargin);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the left margin.
	if (_nx_dpv->usedUnitValue.compare("1") == 0) {
		id_name.assign("Drafting_sheetZoneLeftMargin_MU");
	}
	else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
		id_name.assign("Drafting_sheetZoneLeftMargin_EU");
	}
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double leftTrimmedMargin;
			leftTrimmedMargin = _preferencesBuilder->BorderAndZoneStyle()->SheetMarginSettingsStyle()->LeftTrimmedMargin();
			ist_id_value.assign(convert_to_string(leftTrimmedMargin));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				leftTrimmedMargin = convert_to_double(soll_id_value);
				_preferencesBuilder->BorderAndZoneStyle()->SheetMarginSettingsStyle()->SetLeftTrimmedMargin(leftTrimmedMargin);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the right margin.
	if (_nx_dpv->usedUnitValue.compare("1") == 0) {
		id_name.assign("Drafting_sheetZoneRightMargin_MU");
	}
	else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
		id_name.assign("Drafting_sheetZoneRightMargin_EU");
	}
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double rightTrimmedMargin;
			rightTrimmedMargin = _preferencesBuilder->BorderAndZoneStyle()->SheetMarginSettingsStyle()->RightTrimmedMargin();
			ist_id_value.assign(convert_to_string(rightTrimmedMargin));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				rightTrimmedMargin = convert_to_double(soll_id_value);
				_preferencesBuilder->BorderAndZoneStyle()->SheetMarginSettingsStyle()->SetRightTrimmedMargin(rightTrimmedMargin);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the color of the margin line.
	id_name.assign("Drafting_borderMarginsColor");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::NXColor *lineColor;
			lineColor = _preferencesBuilder->BorderAndZoneStyle()->SheetMarginSettingsStyle()->MarginLineColorFontWidth()->LineColor();
			int lineColorIndex;
			lineColorIndex = lineColor->Handle();
			ist_id_value.assign(convert_to_string(lineColorIndex));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				lineColorIndex = convert_to_int(soll_id_value);
				lineColor = _workPart->Colors()->Find(lineColorIndex);
				_preferencesBuilder->BorderAndZoneStyle()->SheetMarginSettingsStyle()->MarginLineColorFontWidth()->SetLineColor(lineColor);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the line font for the margin line.
	id_name.assign("Drafting_borderMarginsFont");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::LineFontBuilder::LineFontType borderMarginsFont;
			borderMarginsFont = _preferencesBuilder->BorderAndZoneStyle()->SheetMarginSettingsStyle()->MarginLineColorFontWidth()->LineFont()->LineFont();
			int int_borderMarginsFont;
			if (borderMarginsFont == NXOpen::LineFontBuilder::LineFontTypeNoChange) {
				int_borderMarginsFont = -2;
			}
			else if (borderMarginsFont == NXOpen::LineFontBuilder::LineFontTypeOriginal) {
				int_borderMarginsFont = 0;
			}
			else if (borderMarginsFont == NXOpen::LineFontBuilder::LineFontTypeInvisible) {
				int_borderMarginsFont = -1;
			}
			else if (borderMarginsFont == NXOpen::LineFontBuilder::LineFontTypeSolid) {
				int_borderMarginsFont = 1;
			}
			else if (borderMarginsFont == NXOpen::LineFontBuilder::LineFontTypeDashed) {
				int_borderMarginsFont = 2;
			}
			else if (borderMarginsFont == NXOpen::LineFontBuilder::LineFontTypePhantom) {
				int_borderMarginsFont = 3;
			}
			else if (borderMarginsFont == NXOpen::LineFontBuilder::LineFontTypeCenterline) {
				int_borderMarginsFont = 4;
			}
			else if (borderMarginsFont == NXOpen::LineFontBuilder::LineFontTypeDotted) {
				int_borderMarginsFont = 5;
			}
			else if (borderMarginsFont == NXOpen::LineFontBuilder::LineFontTypeLongDashed) {
				int_borderMarginsFont = 6;
			}
			else if (borderMarginsFont == NXOpen::LineFontBuilder::LineFontTypeDottedDashed) {
				int_borderMarginsFont = 7;
			}
			ist_id_value.assign(convert_to_string(int_borderMarginsFont));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_borderMarginsFont = convert_to_int(soll_id_value);
				if (int_borderMarginsFont == -2) {
					borderMarginsFont = NXOpen::LineFontBuilder::LineFontTypeNoChange;
				}
				else if (int_borderMarginsFont == 0) {
					borderMarginsFont = NXOpen::LineFontBuilder::LineFontTypeOriginal;
				}
				else if (int_borderMarginsFont == -1) {
					borderMarginsFont = NXOpen::LineFontBuilder::LineFontTypeInvisible;
				}
				else if (int_borderMarginsFont == 1) {
					borderMarginsFont = NXOpen::LineFontBuilder::LineFontTypeSolid;
				}
				else if (int_borderMarginsFont == 2) {
					borderMarginsFont = NXOpen::LineFontBuilder::LineFontTypeDashed;
				}
				else if (int_borderMarginsFont == 3) {
					borderMarginsFont = NXOpen::LineFontBuilder::LineFontTypePhantom;
				}
				else if (int_borderMarginsFont == 4) {
					borderMarginsFont = NXOpen::LineFontBuilder::LineFontTypeCenterline;
				}
				else if (int_borderMarginsFont == 5) {
					borderMarginsFont = NXOpen::LineFontBuilder::LineFontTypeDotted;
				}
				else if (int_borderMarginsFont == 6) {
					borderMarginsFont = NXOpen::LineFontBuilder::LineFontTypeLongDashed;
				}
				else if (int_borderMarginsFont == 7) {
					borderMarginsFont = NXOpen::LineFontBuilder::LineFontTypeDottedDashed;
				}
				_preferencesBuilder->BorderAndZoneStyle()->SheetMarginSettingsStyle()->MarginLineColorFontWidth()->LineFont()->SetLineFont(borderMarginsFont);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the width for the margin line.
	id_name.assign("Drafting_borderMarginsWidth");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::DisplayableObject::ObjectWidth borderMarginsWidth;
			borderMarginsWidth = _preferencesBuilder->BorderAndZoneStyle()->SheetMarginSettingsStyle()->MarginLineColorFontWidth()->LineWidth();
			int int_borderMarginsWidth;
			if (borderMarginsWidth == NXOpen::DisplayableObject::ObjectWidthNormal) {
				int_borderMarginsWidth = 0;
			}
			else if (borderMarginsWidth == NXOpen::DisplayableObject::ObjectWidthThick) {
				int_borderMarginsWidth = 1;
			}
			else if (borderMarginsWidth == NXOpen::DisplayableObject::ObjectWidthThin) {
				int_borderMarginsWidth = 2;
			}
			else if (borderMarginsWidth == NXOpen::DisplayableObject::ObjectWidthOne) {
				int_borderMarginsWidth = 5;
			}
			else if (borderMarginsWidth == NXOpen::DisplayableObject::ObjectWidthTwo) {
				int_borderMarginsWidth = 6;
			}
			else if (borderMarginsWidth == NXOpen::DisplayableObject::ObjectWidthThree) {
				int_borderMarginsWidth = 7;
			}
			else if (borderMarginsWidth == NXOpen::DisplayableObject::ObjectWidthFour) {
				int_borderMarginsWidth = 8;
			}
			else if (borderMarginsWidth == NXOpen::DisplayableObject::ObjectWidthFive) {
				int_borderMarginsWidth = 9;
			}
			else if (borderMarginsWidth == NXOpen::DisplayableObject::ObjectWidthSix) {
				int_borderMarginsWidth = 10;
			}
			else if (borderMarginsWidth == NXOpen::DisplayableObject::ObjectWidthSeven) {
				int_borderMarginsWidth = 11;
			}
			else if (borderMarginsWidth == NXOpen::DisplayableObject::ObjectWidthEight) {
				int_borderMarginsWidth = 12;
			}
			else if (borderMarginsWidth == NXOpen::DisplayableObject::ObjectWidthNine) {
				int_borderMarginsWidth = 13;
			}
			string id_name_tmp;
			std::map<const std::string, std::string>::iterator it_tmp;
			if (int_borderMarginsWidth == 0) {
				id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
				it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				int_borderMarginsWidth = convert_to_int(it_tmp->second);
			}
			if (int_borderMarginsWidth == 1) {
				id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
				it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				int_borderMarginsWidth = convert_to_int(it_tmp->second);
			}
			if (int_borderMarginsWidth == 2) {
				id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
				it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				int_borderMarginsWidth = convert_to_int(it_tmp->second);
			}
			//_nx_dpv->soll_dpv_map.find(id_name)->second = convert_to_string(int_borderMarginsWidth);
			ist_id_value.assign(convert_to_string(int_borderMarginsWidth));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_borderMarginsWidth = convert_to_int(soll_id_value);
				if (int_borderMarginsWidth == 0) {
					//borderMarginsWidth = NXOpen::DisplayableObject::ObjectWidthNormal;
					id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
					it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					borderMarginsWidth = (NXOpen::DisplayableObject::ObjectWidth) convert_to_int(it_tmp->second);
				}
				else if (int_borderMarginsWidth == 1) {
					//borderMarginsWidth = NXOpen::DisplayableObject::ObjectWidthThick;
					id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
					it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					borderMarginsWidth = (NXOpen::DisplayableObject::ObjectWidth) convert_to_int(it_tmp->second);
				}
				else if (int_borderMarginsWidth == 2) {
					//borderMarginsWidth = NXOpen::DisplayableObject::ObjectWidthThin;
					id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
					it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					borderMarginsWidth = (NXOpen::DisplayableObject::ObjectWidth) convert_to_int(it_tmp->second);
				}
				else if (int_borderMarginsWidth == 5) {
					borderMarginsWidth = NXOpen::DisplayableObject::ObjectWidthOne;
				}
				else if (int_borderMarginsWidth == 6) {
					borderMarginsWidth = NXOpen::DisplayableObject::ObjectWidthTwo;
				}
				else if (int_borderMarginsWidth == 7) {
					borderMarginsWidth = NXOpen::DisplayableObject::ObjectWidthThree;
				}
				else if (int_borderMarginsWidth == 8) {
					borderMarginsWidth = NXOpen::DisplayableObject::ObjectWidthFour;
				}
				else if (int_borderMarginsWidth == 9) {
					borderMarginsWidth = NXOpen::DisplayableObject::ObjectWidthFive;
				}
				else if (int_borderMarginsWidth == 10) {
					borderMarginsWidth = NXOpen::DisplayableObject::ObjectWidthSix;
				}
				else if (int_borderMarginsWidth == 11) {
					borderMarginsWidth = NXOpen::DisplayableObject::ObjectWidthSeven;
				}
				else if (int_borderMarginsWidth == 12) {
					borderMarginsWidth = NXOpen::DisplayableObject::ObjectWidthEight;
				}
				else if (int_borderMarginsWidth == 13) {
					borderMarginsWidth = NXOpen::DisplayableObject::ObjectWidthNine;
				}
				_preferencesBuilder->BorderAndZoneStyle()->SheetMarginSettingsStyle()->MarginLineColorFontWidth()->SetLineWidth(borderMarginsWidth);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines wether or not the boundary within the untrimmed margins should display.
	id_name.assign("Drafting_borderMarginCreateUntrimmedMargins");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			bool createUntrimmedMargins;
			createUntrimmedMargins = _preferencesBuilder->BorderAndZoneStyle()->SheetMarginSettingsStyle()->CreateUntrimmedMargins();
			ist_id_value.assign(convert_to_string(createUntrimmedMargins));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				createUntrimmedMargins = convert_to_bool(soll_id_value);
				_preferencesBuilder->BorderAndZoneStyle()->SheetMarginSettingsStyle()->SetCreateUntrimmedMargins(createUntrimmedMargins);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the top untrimmed margin.
	if (_nx_dpv->usedUnitValue.compare("1") == 0) {
		id_name.assign("Drafting_borderMarginsTopUntrimmed_MU");
	}
	else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
		id_name.assign("Drafting_borderMarginsTopUntrimmed_EU");
	}
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double topUntrimmedMargin;
			topUntrimmedMargin = _preferencesBuilder->BorderAndZoneStyle()->SheetMarginSettingsStyle()->TopUntrimmedMargin();
			ist_id_value.assign(convert_to_string(topUntrimmedMargin));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				topUntrimmedMargin = convert_to_double(soll_id_value);
				_preferencesBuilder->BorderAndZoneStyle()->SheetMarginSettingsStyle()->SetTopUntrimmedMargin(topUntrimmedMargin);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the bottom untrimmed margin.
	if (_nx_dpv->usedUnitValue.compare("1") == 0) {
		id_name.assign("Drafting_borderMarginsBottomUntrimmed_MU");
	}
	else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
		id_name.assign("Drafting_borderMarginsBottomUntrimmed_EU");
	}
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double bottomUntrimmedMargin;
			bottomUntrimmedMargin = _preferencesBuilder->BorderAndZoneStyle()->SheetMarginSettingsStyle()->BottomUntrimmedMargin();
			ist_id_value.assign(convert_to_string(bottomUntrimmedMargin));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				bottomUntrimmedMargin = convert_to_double(soll_id_value);
				_preferencesBuilder->BorderAndZoneStyle()->SheetMarginSettingsStyle()->SetBottomUntrimmedMargin(bottomUntrimmedMargin);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the left untrimmed margin.
	if (_nx_dpv->usedUnitValue.compare("1") == 0) {
		id_name.assign("Drafting_borderMarginsLeftUntrimmed_MU");
	}
	else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
		id_name.assign("Drafting_borderMarginsLeftUntrimmed_EU");
	}
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double leftUntrimmedMargin;
			leftUntrimmedMargin = _preferencesBuilder->BorderAndZoneStyle()->SheetMarginSettingsStyle()->LeftUntrimmedMargin();
			ist_id_value.assign(convert_to_string(leftUntrimmedMargin));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				leftUntrimmedMargin = convert_to_double(soll_id_value);
				_preferencesBuilder->BorderAndZoneStyle()->SheetMarginSettingsStyle()->SetLeftUntrimmedMargin(leftUntrimmedMargin);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the right untrimmed margin.
	if (_nx_dpv->usedUnitValue.compare("1") == 0) {
		id_name.assign("Drafting_borderMarginsRightUntrimmed_MU");
	}
	else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
		id_name.assign("Drafting_borderMarginsRightUntrimmed_EU");
	}
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double rightUntrimmedMargin;
			rightUntrimmedMargin = _preferencesBuilder->BorderAndZoneStyle()->SheetMarginSettingsStyle()->RightUntrimmedMargin();
			ist_id_value.assign(convert_to_string(rightUntrimmedMargin));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				rightUntrimmedMargin = convert_to_double(soll_id_value);
				_preferencesBuilder->BorderAndZoneStyle()->SheetMarginSettingsStyle()->SetRightUntrimmedMargin(rightUntrimmedMargin);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- STOPP - %s --- \n", routineName.c_str());
}

/*
File - Preferences - Drafting - Drawing Format - Border and Zones - Zones -> Repair these preferences.
*/
void repair_DraftingStandard_DrawingFormat_BordersAndZones_Zones_prefs(NXOpen::Drafting::PreferencesBuilder *_preferencesBuilder, en_nx_dpv* _nx_dpv, Session * _theSession, Part* _workPart) {
	routineName.assign("repair_DraftingStandard_DrawingFormat_BordersAndZones_Zones_prefs");
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- START - %s --- \n", routineName.c_str());
	
	//This option determines whether or not zones will be created.
	id_name.assign("Drafting_zonesCreateZones");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			bool createZones;
			createZones = _preferencesBuilder->BorderAndZoneStyle()->SheetZoneSettingsStyle()->CreateZones();
			ist_id_value.assign(convert_to_string(createZones));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				createZones = convert_to_bool(soll_id_value);
				_preferencesBuilder->BorderAndZoneStyle()->SheetZoneSettingsStyle()->SetCreateZones(createZones);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the horizontal zone size.
	if (_nx_dpv->usedUnitValue.compare("1") == 0) {
		id_name.assign("Drafting_sheetZoneHorizontalSize_MU");
	}
	else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
		id_name.assign("Drafting_sheetZoneHorizontalSize_EU");
	}
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double horizontalSize;
			horizontalSize = _preferencesBuilder->BorderAndZoneStyle()->SheetZoneSettingsStyle()->HorizontalSize();
			ist_id_value.assign(convert_to_string(horizontalSize));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				horizontalSize = convert_to_double(soll_id_value);
				_preferencesBuilder->BorderAndZoneStyle()->SheetZoneSettingsStyle()->SetHorizontalSize(horizontalSize);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the vertical zone size.
	if (_nx_dpv->usedUnitValue.compare("1") == 0) {
		id_name.assign("Drafting_sheetZoneVerticalSize_MU");
	}
	else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
		id_name.assign("Drafting_sheetZoneVerticalSize_EU");
	}
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double verticalSize;
			verticalSize = _preferencesBuilder->BorderAndZoneStyle()->SheetZoneSettingsStyle()->VerticalSize();
			ist_id_value.assign(convert_to_string(verticalSize));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				verticalSize = convert_to_double(soll_id_value);
				_preferencesBuilder->BorderAndZoneStyle()->SheetZoneSettingsStyle()->SetVerticalSize(verticalSize);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the zone origin.
	id_name.assign("Drafting_ZoneOriginMethod");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::ZoneOrigin origin;
			origin = _preferencesBuilder->BorderAndZoneStyle()->SheetZoneSettingsStyle()->Origin();
			int int_origin;
			int_origin = (int)origin;
			ist_id_value.assign(convert_to_string(int_origin));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_origin = convert_to_int(soll_id_value);
				origin = (NXOpen::Drawings::ZoneOrigin)int_origin;
				_preferencesBuilder->BorderAndZoneStyle()->SheetZoneSettingsStyle()->SetOrigin(origin);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the corner zone modification.
	id_name.assign("Drafting_zonesCornerZoneModification");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double cornerZoneModification;
			cornerZoneModification = _preferencesBuilder->BorderAndZoneStyle()->SheetZoneSettingsStyle()->CornerZoneModification();
			ist_id_value.assign(convert_to_string(cornerZoneModification));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				cornerZoneModification = convert_to_double(soll_id_value);
				_preferencesBuilder->BorderAndZoneStyle()->SheetZoneSettingsStyle()->SetCornerZoneModification(cornerZoneModification);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not zones will be continued.
	id_name.assign("Drafting_zonesContinueZoneIndexingAcrossSheets");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			bool continueZoneIndexingAcrossSheets;
			continueZoneIndexingAcrossSheets = _preferencesBuilder->BorderAndZoneStyle()->SheetZoneSettingsStyle()->ContinueZoneIndexingAcrossSheets();
			ist_id_value.assign(convert_to_string(continueZoneIndexingAcrossSheets));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				continueZoneIndexingAcrossSheets = convert_to_bool(soll_id_value);
				_preferencesBuilder->BorderAndZoneStyle()->SheetZoneSettingsStyle()->SetContinueZoneIndexingAcrossSheets(continueZoneIndexingAcrossSheets);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not zones markings will be created.
	id_name.assign("Drafting_zonesCreateZoneMarkings");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			bool createZoneMarkings;
			createZoneMarkings = _preferencesBuilder->BorderAndZoneStyle()->SheetZoneSettingsStyle()->CreateZoneMarkings();
			ist_id_value.assign(convert_to_string(createZoneMarkings));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				createZoneMarkings = convert_to_bool(soll_id_value);
				_preferencesBuilder->BorderAndZoneStyle()->SheetZoneSettingsStyle()->SetCreateZoneMarkings(createZoneMarkings);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the zone marking height.
	if (_nx_dpv->usedUnitValue.compare("1") == 0) {
		id_name.assign("Drafting_zonesMarkingHeight_MU");
	}
	else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
		id_name.assign("Drafting_zonesMarkingHeight_EU");
	}
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double markingHeight;
			markingHeight = _preferencesBuilder->BorderAndZoneStyle()->SheetZoneSettingsStyle()->MarkingHeight();
			ist_id_value.assign(convert_to_string(markingHeight));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				markingHeight = convert_to_double(soll_id_value);
				_preferencesBuilder->BorderAndZoneStyle()->SheetZoneSettingsStyle()->SetMarkingHeight(markingHeight);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the color of the zone marking.
	id_name.assign("Drafting_zoneMarkingColor");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::NXColor *lineColor;
			lineColor = _preferencesBuilder->BorderAndZoneStyle()->SheetZoneSettingsStyle()->MarkingLineColorWidth()->LineColor();
			int lineColorIndex;
			lineColorIndex = lineColor->Handle();
			ist_id_value.assign(convert_to_string(lineColorIndex));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				lineColorIndex = convert_to_int(soll_id_value);
				lineColor = _workPart->Colors()->Find(lineColorIndex);
				_preferencesBuilder->BorderAndZoneStyle()->SheetZoneSettingsStyle()->MarkingLineColorWidth()->SetLineColor(lineColor);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the line width for the zone marking.
	id_name.assign("Drafting_zoneMarkingWidth");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::DisplayableObject::ObjectWidth zoneMarkingWidth;
			zoneMarkingWidth = _preferencesBuilder->BorderAndZoneStyle()->SheetZoneSettingsStyle()->MarkingLineColorWidth()->LineWidth();
			int int_zoneMarkingWidth;
			if (zoneMarkingWidth == NXOpen::DisplayableObject::ObjectWidthNormal) {
				int_zoneMarkingWidth = 0;
			}
			else if (zoneMarkingWidth == NXOpen::DisplayableObject::ObjectWidthThick) {
				int_zoneMarkingWidth = 1;
			}
			else if (zoneMarkingWidth == NXOpen::DisplayableObject::ObjectWidthThin) {
				int_zoneMarkingWidth = 2;
			}
			else if (zoneMarkingWidth == NXOpen::DisplayableObject::ObjectWidthOne) {
				int_zoneMarkingWidth = 5;
			}
			else if (zoneMarkingWidth == NXOpen::DisplayableObject::ObjectWidthTwo) {
				int_zoneMarkingWidth = 6;
			}
			else if (zoneMarkingWidth == NXOpen::DisplayableObject::ObjectWidthThree) {
				int_zoneMarkingWidth = 7;
			}
			else if (zoneMarkingWidth == NXOpen::DisplayableObject::ObjectWidthFour) {
				int_zoneMarkingWidth = 8;
			}
			else if (zoneMarkingWidth == NXOpen::DisplayableObject::ObjectWidthFive) {
				int_zoneMarkingWidth = 9;
			}
			else if (zoneMarkingWidth == NXOpen::DisplayableObject::ObjectWidthSix) {
				int_zoneMarkingWidth = 10;
			}
			else if (zoneMarkingWidth == NXOpen::DisplayableObject::ObjectWidthSeven) {
				int_zoneMarkingWidth = 11;
			}
			else if (zoneMarkingWidth == NXOpen::DisplayableObject::ObjectWidthEight) {
				int_zoneMarkingWidth = 12;
			}
			else if (zoneMarkingWidth == NXOpen::DisplayableObject::ObjectWidthNine) {
				int_zoneMarkingWidth = 13;
			}
			string id_name_tmp;
			std::map<const std::string, std::string>::iterator it_tmp;
			if (int_zoneMarkingWidth == 0) {
				id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
				it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				int_zoneMarkingWidth = convert_to_int(it_tmp->second);
			}
			if (int_zoneMarkingWidth == 1) {
				id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
				it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				int_zoneMarkingWidth = convert_to_int(it_tmp->second);
			}
			if (int_zoneMarkingWidth == 2) {
				id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
				it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				int_zoneMarkingWidth = convert_to_int(it_tmp->second);
			}
			//_nx_dpv->soll_dpv_map.find(id_name)->second = convert_to_string(int_zoneMarkingWidth);
			ist_id_value.assign(convert_to_string(int_zoneMarkingWidth));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_zoneMarkingWidth = convert_to_int(soll_id_value);
				if (int_zoneMarkingWidth == 0) {
					//zoneMarkingWidth = NXOpen::DisplayableObject::ObjectWidthNormal;
					id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
					it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					zoneMarkingWidth = (NXOpen::DisplayableObject::ObjectWidth) convert_to_int(it_tmp->second);
				}
				else if (int_zoneMarkingWidth == 1) {
					//zoneMarkingWidth = NXOpen::DisplayableObject::ObjectWidthThick;
					id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
					it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					zoneMarkingWidth = (NXOpen::DisplayableObject::ObjectWidth) convert_to_int(it_tmp->second);
				}
				else if (int_zoneMarkingWidth == 2) {
					//zoneMarkingWidth = NXOpen::DisplayableObject::ObjectWidthThin;
					id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
					it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					zoneMarkingWidth = (NXOpen::DisplayableObject::ObjectWidth) convert_to_int(it_tmp->second);
				}
				else if (int_zoneMarkingWidth == 5) {
					zoneMarkingWidth = NXOpen::DisplayableObject::ObjectWidthOne;
				}
				else if (int_zoneMarkingWidth == 6) {
					zoneMarkingWidth = NXOpen::DisplayableObject::ObjectWidthTwo;
				}
				else if (int_zoneMarkingWidth == 7) {
					zoneMarkingWidth = NXOpen::DisplayableObject::ObjectWidthThree;
				}
				else if (int_zoneMarkingWidth == 8) {
					zoneMarkingWidth = NXOpen::DisplayableObject::ObjectWidthFour;
				}
				else if (int_zoneMarkingWidth == 9) {
					zoneMarkingWidth = NXOpen::DisplayableObject::ObjectWidthFive;
				}
				else if (int_zoneMarkingWidth == 10) {
					zoneMarkingWidth = NXOpen::DisplayableObject::ObjectWidthSix;
				}
				else if (int_zoneMarkingWidth == 11) {
					zoneMarkingWidth = NXOpen::DisplayableObject::ObjectWidthSeven;
				}
				else if (int_zoneMarkingWidth == 12) {
					zoneMarkingWidth = NXOpen::DisplayableObject::ObjectWidthEight;
				}
				else if (int_zoneMarkingWidth == 13) {
					zoneMarkingWidth = NXOpen::DisplayableObject::ObjectWidthNine;
				}
				_preferencesBuilder->BorderAndZoneStyle()->SheetZoneSettingsStyle()->MarkingLineColorWidth()->SetLineWidth(zoneMarkingWidth);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not zones labels should be created.
	id_name.assign("Drafting_zonesCreateZoneLabels");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			bool createZoneLabels;
			createZoneLabels = _preferencesBuilder->BorderAndZoneStyle()->SheetZoneSettingsStyle()->CreateZoneLabels();
			ist_id_value.assign(convert_to_string(createZoneLabels));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				createZoneLabels = convert_to_bool(soll_id_value);
				_preferencesBuilder->BorderAndZoneStyle()->SheetZoneSettingsStyle()->SetCreateZoneLabels(createZoneLabels);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the zone label height.
	if (_nx_dpv->usedUnitValue.compare("1") == 0) {
		id_name.assign("Drafting_zonesLabelHeight_MU");
	}
	else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
		id_name.assign("Drafting_zonesLabelHeight_EU");
	}
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double labelHeight;
			labelHeight = _preferencesBuilder->BorderAndZoneStyle()->SheetZoneSettingsStyle()->LabelHeight();
			ist_id_value.assign(convert_to_string(labelHeight));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				labelHeight = convert_to_double(soll_id_value);
				_preferencesBuilder->BorderAndZoneStyle()->SheetZoneSettingsStyle()->SetLabelHeight(labelHeight);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the color of the zone labels.
	id_name.assign("Drafting_zonesLabelColor");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			int labelColorIndex;
			labelColorIndex = _preferencesBuilder->BorderAndZoneStyle()->SheetZoneSettingsStyle()->LabelColor();
			ist_id_value.assign(convert_to_string(labelColorIndex));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				labelColorIndex = convert_to_int(soll_id_value);
				_preferencesBuilder->BorderAndZoneStyle()->SheetZoneSettingsStyle()->SetLabelColor(labelColorIndex);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the character font for the zone label. Any font present in the directory
	//pointed to by the UGII_CHARACTER_FONT_DIR environment variable can be specified here.
	id_name.assign("Drafting_zonesLabelFont");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			int int_labelFont;
			int_labelFont = _preferencesBuilder->BorderAndZoneStyle()->SheetZoneSettingsStyle()->LabelFont();
			NXOpen::NXString labelFont;
			labelFont = _workPart->Fonts()->GetFontName(int_labelFont);
			ist_id_value.assign(labelFont.GetLocaleText());
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				NXString labelFontName;
				labelFontName = (NXString)soll_id_value;
				int_labelFont = _workPart->Fonts()->AddFont(labelFontName);
				_preferencesBuilder->BorderAndZoneStyle()->SheetZoneSettingsStyle()->SetLabelFont(int_labelFont);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the line width for the zone label font.
	id_name.assign("Drafting_zonesLabelWidth");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			int labelWidth;
			labelWidth = _preferencesBuilder->BorderAndZoneStyle()->SheetZoneSettingsStyle()->LabelWidth();
			ist_id_value.assign(convert_to_string(labelWidth));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				labelWidth = convert_to_int(soll_id_value);
				_preferencesBuilder->BorderAndZoneStyle()->SheetZoneSettingsStyle()->SetLabelWidth(labelWidth);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option holds the characters which are to be skipped.
	id_name.assign("Drafting_zonesLabelsToSkip");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::NXString labelsToSkip;
			labelsToSkip = _preferencesBuilder->BorderAndZoneStyle()->SheetZoneSettingsStyle()->LabelsToSkip();
			ist_id_value.assign(labelsToSkip.GetLocaleText());
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				_preferencesBuilder->BorderAndZoneStyle()->SheetZoneSettingsStyle()->SetLabelsToSkip(soll_id_value.c_str());
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- STOPP - %s --- \n", routineName.c_str());
}

/*
File - Preferences - Drafting - Drawing Format - Template -> Repair these preferences.
*/
void repair_DraftingStandard_DrawingFormat_Template_prefs(NXOpen::Drafting::PreferencesBuilder *_preferencesBuilder, en_nx_dpv* _nx_dpv, Session * _theSession, Part* _workPart) {
	routineName.assign("repair_DraftingStandard_DrawingFormat_Template_prefs");
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- START - %s --- \n", routineName.c_str());
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- STOPP - %s --- \n", routineName.c_str());
}

/*
File - Preferences - Drafting - Drawing Format - Title Block -> Repair these preferences.
*/
void repair_DraftingStandard_DrawingFormat_TitleBlock_prefs(NXOpen::Drafting::PreferencesBuilder *_preferencesBuilder, en_nx_dpv* _nx_dpv, Session * _theSession, Part* _workPart) {
	routineName.assign("repair_DraftingStandard_DrawingFormat_TitleBlock_prefs");
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- START - %s --- \n", routineName.c_str());
	
	//This option specifies how the title block aligns relative to the cursor during placement.
	id_name.assign("Drafting_TitleBlockAlignPosition");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::DrawingFormatTitleBuilder::TitleBlockPositionType titleBlockAlignmentPosition;
			titleBlockAlignmentPosition = _preferencesBuilder->DrawingFormatTitle()->TitleBlockAlignmentPosition();
			int int_titleBlockAlignmentPosition;
			if (titleBlockAlignmentPosition == NXOpen::Annotations::DrawingFormatTitleBuilder::TitleBlockPositionTypeTopLeft) {
				int_titleBlockAlignmentPosition = 1;
			}
			else if(titleBlockAlignmentPosition == NXOpen::Annotations::DrawingFormatTitleBuilder::TitleBlockPositionTypeTopRight) {
				int_titleBlockAlignmentPosition = 2;
			}
			else if (titleBlockAlignmentPosition == NXOpen::Annotations::DrawingFormatTitleBuilder::TitleBlockPositionTypeBottomLeft) {
				int_titleBlockAlignmentPosition = 3;
			}
			else if (titleBlockAlignmentPosition == NXOpen::Annotations::DrawingFormatTitleBuilder::TitleBlockPositionTypeBottomRight) {
				int_titleBlockAlignmentPosition = 4;
			}
			else {
				int_titleBlockAlignmentPosition = -999;
			}
			ist_id_value.assign(convert_to_string(int_titleBlockAlignmentPosition));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_titleBlockAlignmentPosition = convert_to_int(soll_id_value);
				if (int_titleBlockAlignmentPosition == 1) {
					titleBlockAlignmentPosition = NXOpen::Annotations::DrawingFormatTitleBuilder::TitleBlockPositionTypeTopLeft;
				}
				else if (int_titleBlockAlignmentPosition == 2) {
					titleBlockAlignmentPosition = NXOpen::Annotations::DrawingFormatTitleBuilder::TitleBlockPositionTypeTopRight;
				}
				else if (int_titleBlockAlignmentPosition == 3) {
					titleBlockAlignmentPosition = NXOpen::Annotations::DrawingFormatTitleBuilder::TitleBlockPositionTypeBottomLeft;
				}
				else if (int_titleBlockAlignmentPosition == 4) {
					titleBlockAlignmentPosition = NXOpen::Annotations::DrawingFormatTitleBuilder::TitleBlockPositionTypeBottomRight;
				}
				if (int_titleBlockAlignmentPosition != -999) {
					_preferencesBuilder->DrawingFormatTitle()->SetTitleBlockAlignmentPosition(titleBlockAlignmentPosition);
				}
				_preferencesBuilder->DrawingFormatTitle()->SetTitleBlockAlignmentPosition(titleBlockAlignmentPosition);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not the title block updates automatically 
	//whenever a change occurs to a referenced object in the model.
	id_name.assign("Drafting_TitleBlockAutoUpdate");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			bool automatic;
			automatic = _preferencesBuilder->DrawingFormatTitle()->Automatic();
			ist_id_value.assign(convert_to_string(automatic));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				automatic = convert_to_bool(soll_id_value);
				_preferencesBuilder->DrawingFormatTitle()->SetAutomatic(automatic);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- STOPP - %s --- \n", routineName.c_str());
}

/*
File - Preferences - Drafting - View - Workflow -> Repair these preferences.
*/
void repair_DraftingStandard_View_Workflow_prefs(NXOpen::Drafting::PreferencesBuilder *_preferencesBuilder, en_nx_dpv* _nx_dpv, Session * _theSession, Part* _workPart) {
	routineName.assign("repair_DraftingStandard_View_Workflow_prefs");
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- START - %s --- \n", routineName.c_str());

	//This option determines whether or not the updating of drawing views during system initiated drawing updates should be suppressed.
	id_name.assign("Drafting_delayViewUpdate");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			bool isDelayViewUpdateOn;
			isDelayViewUpdateOn = _workPart->Preferences()->Drafting()->DelayViewUpdate();
			int int_isDelayViewUpdateOn;
			int_isDelayViewUpdateOn = (int)isDelayViewUpdateOn;
			ist_id_value.assign(convert_to_string(int_isDelayViewUpdateOn));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_isDelayViewUpdateOn = convert_to_int(soll_id_value);
				isDelayViewUpdateOn = false;
				if (int_isDelayViewUpdateOn == 1) {
					isDelayViewUpdateOn = true;
				}
				_workPart->Preferences()->Drafting()->SetDelayViewUpdate(isDelayViewUpdateOn);
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not newly created views should update immediately even when view update is delayed.
	id_name.assign("Drafting_delayUpdateOnCreate");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			bool isDelayUpdateOnCreationOn;
			isDelayUpdateOnCreationOn = _workPart->Preferences()->Drafting()->DelayUpdateOnCreation();
			int int_isDelayUpdateOnCreationOn;
			int_isDelayUpdateOnCreationOn = (int)isDelayUpdateOnCreationOn;
			ist_id_value.assign(convert_to_string(int_isDelayUpdateOnCreationOn));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_isDelayUpdateOnCreationOn = convert_to_int(soll_id_value);
				isDelayUpdateOnCreationOn = false;
				if (int_isDelayUpdateOnCreationOn == 1) {
					isDelayUpdateOnCreationOn = true;
				}
				_workPart->Preferences()->Drafting()->SetDelayViewUpdate(isDelayUpdateOnCreationOn);
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not view borders will be displayed on the drawing.
	id_name.assign("Drafting_borderDisplay");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			bool displayBorders;
			displayBorders = _preferencesBuilder->ViewWorkflow()->DisplayBorders();
			int int_displayBorders;
			int_displayBorders = (int)displayBorders;
			ist_id_value.assign(convert_to_string(int_displayBorders));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_displayBorders = convert_to_int(soll_id_value);
				displayBorders = false;
				if (int_displayBorders == 1) {
					displayBorders = true;
				}
				_preferencesBuilder->ViewWorkflow()->SetDisplayBorders(displayBorders);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the color of drawing view borders.
	id_name.assign("Drafting_borderColor");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::NXColor *borderColor;
			borderColor = _preferencesBuilder->ViewWorkflow()->BorderColor();
			int borderColorIndex;
			borderColorIndex = borderColor->Handle();
			ist_id_value.assign(convert_to_string(borderColorIndex));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				borderColorIndex = convert_to_int(soll_id_value);
				borderColor = _workPart->Colors()->Find(borderColorIndex);
				_preferencesBuilder->ViewWorkflow()->SetBorderColor(borderColor);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}
	
	//This option specifies the color of the active view's border.
	id_name.assign("Drafting_activeViewColor");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::NXColor *activeSkecthviewColor;
			activeSkecthviewColor = _preferencesBuilder->ViewWorkflow()->ActiveSketchViewColor();
			int activeSkecthviewColorIndex;
			activeSkecthviewColorIndex = activeSkecthviewColor->Handle();
			ist_id_value.assign(convert_to_string(activeSkecthviewColorIndex));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				activeSkecthviewColorIndex = convert_to_int(soll_id_value);
				activeSkecthviewColor = _workPart->Colors()->Find(activeSkecthviewColorIndex);
				_preferencesBuilder->ViewWorkflow()->SetActiveSketchViewColor(activeSkecthviewColor);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the style of the preview when adding a view to the drawing.
	id_name.assign("Drafting_previewStyle");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::ViewWorkflowBuilder::Style previewStyle;
			previewStyle = _preferencesBuilder->ViewWorkflow()->PreviewStyle();
			int int_previewStyle;
			if (previewStyle == NXOpen::Drawings::ViewWorkflowBuilder::StyleBorder) {
				int_previewStyle = 0;
			}
			else if (previewStyle == NXOpen::Drawings::ViewWorkflowBuilder::StyleWireframe) {
					int_previewStyle = 1;
			}
			else if (previewStyle == NXOpen::Drawings::ViewWorkflowBuilder::StyleHiddenWireframe) {
				int_previewStyle = 2;
			}
			else if (previewStyle == NXOpen::Drawings::ViewWorkflowBuilder::StyleShaded) {
				int_previewStyle = 3;
			}
			else {
				int_previewStyle = -999;
			}
			ist_id_value.assign(convert_to_string(int_previewStyle));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_previewStyle = convert_to_int(soll_id_value);
				if (int_previewStyle == 0) {
					previewStyle = NXOpen::Drawings::ViewWorkflowBuilder::StyleBorder;
				}
				else if (int_previewStyle == 1) {
					previewStyle = NXOpen::Drawings::ViewWorkflowBuilder::StyleWireframe;
				}
				else if (int_previewStyle == 2) {
					previewStyle = NXOpen::Drawings::ViewWorkflowBuilder::StyleHiddenWireframe;
				}
				else if (int_previewStyle == 3) {
					previewStyle = NXOpen::Drawings::ViewWorkflowBuilder::StyleShaded;
				}
				if (int_previewStyle != -999) {
					_preferencesBuilder->ViewWorkflow()->SetPreviewStyle(previewStyle);
				}
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	/*
	//unbekannt
	id_name.assign("");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			bool versonObjects;
			versonObjects = _workPart->Preferences()->Drafting()->VersionObjects();
			int int_versonObjects;
			int_versonObjects = (int)versonObjects;
			ist_id_value.assign(convert_to_string(int_versonObjects));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			if (it != _nx_dpv->soll_dpv_map.end()) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
				soll_id_value.assign(it->second);
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
				if (ist_id_value.compare(soll_id_value) != 0) {
					//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
					int_versonObjects = convert_to_int(soll_id_value);
					versonObjects = (bool)int_versonObjects;
					_workPart->Preferences()->Drafting()->SetVersionObjects(versonObjects);
					nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
				}
			}
			else {
				nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	*/

	//This option determines whether or not XC/YC coordinates should display in on-screen dialogs when placing a view on a drawing.
	id_name.assign("Drafting_cursorTracking");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			bool cursorTracking;
			cursorTracking = _preferencesBuilder->ViewWorkflow()->CursorTracking();
			int int_cursorTracking;
			int_cursorTracking = (int)cursorTracking;
			ist_id_value.assign(convert_to_string(int_cursorTracking));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_cursorTracking = convert_to_int(soll_id_value);
				cursorTracking = false;
				if (int_cursorTracking == 1) {
					cursorTracking = true;
				}
				_preferencesBuilder->ViewWorkflow()->SetCursorTracking(cursorTracking);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not an associative alignment should be created between a 
	//projected view and its parent view, or between views created by the Standard Views command 
	//or the View Creation Wizard, so that when the views are moved they maintain their alignment.
	id_name.assign("Drafting_associativeAlignment");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			bool associativeAlignment;
			associativeAlignment = _preferencesBuilder->ViewWorkflow()->AssociativeAlignment();
			int int_associativeAlignment;
			int_associativeAlignment = (int)associativeAlignment;
			ist_id_value.assign(convert_to_string(int_associativeAlignment));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_associativeAlignment = convert_to_int(soll_id_value);
				associativeAlignment = false;
				if (int_associativeAlignment == 1) {
					associativeAlignment = true;
				}
				_preferencesBuilder->ViewWorkflow()->SetAssociativeAlignment(associativeAlignment);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the objects in an extracted edge view that are available for selection. 
	//The option Display and Emphasize allows faces and bodies in an extracted edge view to be shaded and selected.
	id_name.assign("Drafting_extractedEdgeFaceDisplay");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::ViewWorkflowBuilder::Display faceDisplay;
			faceDisplay = _preferencesBuilder->ViewWorkflow()->FaceDisplay();
			int int_faceDisplay;
			if (faceDisplay == NXOpen::Drawings::ViewWorkflowBuilder::DisplayDisplayandEmphasize) {
				int_faceDisplay = 0;
			}
			else if (faceDisplay == NXOpen::Drawings::ViewWorkflowBuilder::DisplayCurvesOnly) {
				int_faceDisplay = 1;
			}
			else {
				int_faceDisplay = -999;
			}
			ist_id_value.assign(convert_to_string(int_faceDisplay));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_faceDisplay = convert_to_int(soll_id_value);
				if (int_faceDisplay == 0) {
					faceDisplay = NXOpen::Drawings::ViewWorkflowBuilder::DisplayDisplayandEmphasize;
				}
				else if (int_faceDisplay == 1) {
					faceDisplay = NXOpen::Drawings::ViewWorkflowBuilder::DisplayCurvesOnly;
				}
				if (int_faceDisplay != -999) {
					_preferencesBuilder->ViewWorkflow()->SetFaceDisplay(faceDisplay);
				}
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines how splines projected as arcs should be used when specifying drafting dimensions and centerlines.
	//Always: Always infer splines projected as arcs to behave as arcs when used in drafting commands.
	//Never for Automatic : Do not infer splines projected as arcs in automatic commands such as automatic centerline creation 
	//in view creation or automatic dimension creation in ordinate dimensions.
	//Never : Never infer splines projected as arcs to behave as arcs when used in drafting commands.
	id_name.assign("Drafting_SelectGeometryProjectedAsArcs");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::ViewWorkflowBuilder::Splarcs selectGeometryProjectedAsArcs;
			selectGeometryProjectedAsArcs = _preferencesBuilder->ViewWorkflow()->SelectGeometryProjectedAsArcs();
			int int_selectGeometryProjectedAsArcs;
			int_selectGeometryProjectedAsArcs = (int)selectGeometryProjectedAsArcs;
			ist_id_value.assign(convert_to_string(int_selectGeometryProjectedAsArcs));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_selectGeometryProjectedAsArcs = convert_to_int(soll_id_value);
				selectGeometryProjectedAsArcs = (NXOpen::Drawings::ViewWorkflowBuilder::Splarcs)int_selectGeometryProjectedAsArcs;
				_preferencesBuilder->ViewWorkflow()->SetSelectGeometryProjectedAsArcs(selectGeometryProjectedAsArcs);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the actions when missing, incomplete, or invalid lightweight bodies are found during view create or update.
	//Omit Bodies from View : Updates the view by omitting bodies that do not have smart lightweight data.
	//Stop Update and Provide Notification : Stops the view update and provides a notification.
	//Stop Update : Stops the view update without providing a notification.
	//Generate Lightweight Data : Updates the view by generating the lightweight data for bodies that do not have smart lightweight data.
	//For more information, see NX Help.
	id_name.assign("Drafting_updateViewWithoutLwData");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::ViewWorkflowBuilder::HandlingBodiesType handlingBodiesTypes;
			handlingBodiesTypes = _preferencesBuilder->ViewWorkflow()->HandlingBodiesTypes();
			int int_handlingBodiesTypes;
			int_handlingBodiesTypes = (int)handlingBodiesTypes;
			ist_id_value.assign(convert_to_string(int_handlingBodiesTypes));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_handlingBodiesTypes = convert_to_int(soll_id_value);
				handlingBodiesTypes = (NXOpen::Drawings::ViewWorkflowBuilder::HandlingBodiesType)int_handlingBodiesTypes;
				_preferencesBuilder->ViewWorkflow()->SetHandlingBodiesTypes(handlingBodiesTypes);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not components should be loaded as needed for accurate dimensioning in smart lightweight views.
	id_name.assign("Drafting_loadComponentsOnDemand");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			bool loadComponentsOnDemand;
			loadComponentsOnDemand = _preferencesBuilder->ViewWorkflow()->LoadComponentsOnDemand();
			ist_id_value.assign(convert_to_string(loadComponentsOnDemand));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
				soll_id_value.assign(it->second);
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
				if (ist_id_value.compare(soll_id_value) != 0) {
					//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
					loadComponentsOnDemand = convert_to_bool(soll_id_value);
					_preferencesBuilder->ViewWorkflow()->SetLoadComponentsOnDemand(loadComponentsOnDemand);
					_preferencesBuilder->Commit();
					nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
				}
			
			
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not components should be loaded as needed for selection in lightweight views for accurate dimensioning.
	id_name.assign("Drafting_loadComponentOnSelection");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			bool onViewSelection;
			onViewSelection = _preferencesBuilder->ViewWorkflow()->OnViewSelection();
			ist_id_value.assign(convert_to_string(onViewSelection));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				onViewSelection = convert_to_bool(soll_id_value);
				_preferencesBuilder->ViewWorkflow()->SetOnViewSelection(onViewSelection);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not components should be loaded as needed to update lightweight views.
	id_name.assign("Drafting_loadComponentOnUpdate");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			bool onLegacyViewUpdate;
			onLegacyViewUpdate = _preferencesBuilder->ViewWorkflow()->OnLegacyViewUpdate();
			ist_id_value.assign(convert_to_string(onLegacyViewUpdate));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				onLegacyViewUpdate = convert_to_bool(soll_id_value);
				_preferencesBuilder->ViewWorkflow()->SetOnLegacyViewUpdate(onLegacyViewUpdate);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not the translucency settings for faces will be honored when displaying a drawing sheet.
	id_name.assign("Drafting_shadingTranslucency");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			bool useTranslucency;
			useTranslucency = _preferencesBuilder->ViewWorkflow()->UseTranslucency();
			int int_useTranslucency;
			int_useTranslucency = (int)useTranslucency;
			ist_id_value.assign(convert_to_string(int_useTranslucency));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_useTranslucency = convert_to_int(soll_id_value);
				useTranslucency = false;
				if (int_useTranslucency == 1) {
					useTranslucency = true;
				}
				_preferencesBuilder->ViewWorkflow()->SetUseTranslucency(useTranslucency);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not line antialiasing will be performed when displaying a drawing sheet.
	id_name.assign("Drafting_shadingLineAntialiasing");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			bool useLineAntialiasing;
			useLineAntialiasing = _preferencesBuilder->ViewWorkflow()->UseLineAntialiasing();
			int int_useLineAntialiasing;
			int_useLineAntialiasing = (int)useLineAntialiasing;
			ist_id_value.assign(convert_to_string(int_useLineAntialiasing));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_useLineAntialiasing = convert_to_int(soll_id_value);
				useLineAntialiasing = false;
				if (int_useLineAntialiasing == 1) {
					useLineAntialiasing = true;
				}
				_preferencesBuilder->ViewWorkflow()->SetUseLineAntialiasing(useLineAntialiasing);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not facet edges will be shown on shaded faces when displaying a drawing sheet.
	id_name.assign("Drafting_shadingShowFacetEdges");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			bool showFacetEdges;
			showFacetEdges = _preferencesBuilder->ViewWorkflow()->ShowFacetEdges();
			int int_showFacetEdges;
			int_showFacetEdges = (int)showFacetEdges;
			ist_id_value.assign(convert_to_string(int_showFacetEdges));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_showFacetEdges = convert_to_int(soll_id_value);
				showFacetEdges = false;
				if (int_showFacetEdges == 1) {
					showFacetEdges = true;
				}
				_preferencesBuilder->ViewWorkflow()->SetShowFacetEdges(showFacetEdges);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option establishes the minimum number of components (loaded or unloaded) a part may have to be 
	//considered a large assembly. When the number of components exceeds this number, the View Creation 
	//Wizard provides an extra step to optimize part settings for large assemblies. A value of zero will 
	//force the system to always use the optimized part settings for large assemblies.
	id_name.assign("Drafting_MaxComponentsForLargeAssembly");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			int largeAssemblyStepThreshold;
			largeAssemblyStepThreshold = _preferencesBuilder->ViewWorkflow()->LargeAssemblyStepThreshold();
			ist_id_value.assign(convert_to_string(largeAssemblyStepThreshold));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				largeAssemblyStepThreshold = convert_to_int(soll_id_value);
				_preferencesBuilder->ViewWorkflow()->SetLargeAssemblyStepThreshold(largeAssemblyStepThreshold);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- STOPP - %s --- \n", routineName.c_str());
}

/*
File - Preferences - Drafting - View - Common - Configuration -> Repair these preferences.
*/
void repair_DraftingStandard_View_Common_Configuration_prefs(NXOpen::Drafting::PreferencesBuilder *_preferencesBuilder, en_nx_dpv* _nx_dpv, Session * _theSession, Part* _workPart) {
	routineName.assign("repair_DraftingStandard_View_Common_Configuration_prefs");
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- START - %s --- \n", routineName.c_str());

	//This option determines whether or not an Exact (Pre-NX 8.5) view can be created.
	id_name.assign("Drafting_representation");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Preferences::GeneralViewRepresentationOption viewRepresentation;
			viewRepresentation = _preferencesBuilder->ViewStyle()->ViewStyleGeneral()->ViewRepresentation();
			int int_viewRepresentation;
			int_viewRepresentation = (int)viewRepresentation;
			ist_id_value.assign(convert_to_string(int_viewRepresentation));
			soll_id_value.assign(convert_to_string(int_viewRepresentation));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			//soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_viewRepresentation = convert_to_int(soll_id_value);
				viewRepresentation = (NXOpen::Preferences::GeneralViewRepresentationOption)int_viewRepresentation;
				_preferencesBuilder->ViewStyle()->ViewStyleGeneral()->SetViewRepresentation(viewRepresentation);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines the quality to be applied to lightweight drawing views when created. 
	//This option only applies to smart lightweight views.
	id_name.assign("Drafting_viewQuality");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Preferences::GeneralViewQualityOption viewQualityOption;
			viewQualityOption = _preferencesBuilder->ViewStyle()->ViewStyleGeneral()->ViewQuality();
			int int_viewQualityOption;
			int_viewQualityOption = (int)viewQualityOption;
			ist_id_value.assign(convert_to_string(int_viewQualityOption));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_viewQualityOption = convert_to_int(soll_id_value);
				viewQualityOption = (NXOpen::Preferences::GeneralViewQualityOption)int_viewQualityOption;
				_preferencesBuilder->ViewStyle()->ViewStyleGeneral()->SetViewQuality(viewQualityOption);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not a 3D representation of the model's visible 
	//edges should be displayed instead of the model directly. This representation consists 
	//of a set of extracted edges which may be associative or non-associative.
	id_name.assign("Drafting_extractedEdges");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			
			string drf_repres;
			drf_repres.assign("Drafting_representation");
			std::map<const std::string, std::string>::iterator it_drf_repres;
			it_drf_repres = _nx_dpv->soll_dpv_map.find(drf_repres);
			int int_drf_repres;
			int_drf_repres = convert_to_int(it_drf_repres->second.c_str());

			NXOpen::Preferences::GeneralExtractedEdgesOption extractedEdgesOption;
			extractedEdgesOption = _preferencesBuilder->ViewStyle()->ViewStyleGeneral()->ExtractedEdges();
			int int_extractedEdgesOption;
			if (extractedEdgesOption == NXOpen::Preferences::GeneralExtractedEdgesOptionNone) {
				int_extractedEdgesOption = 0;
			}
			else if (extractedEdgesOption == NXOpen::Preferences::GeneralExtractedEdgesOptionAssociative) {
				int_extractedEdgesOption = 1;
			}
			else if (extractedEdgesOption == NXOpen::Preferences::GeneralExtractedEdgesOptionNonAssociative) {
				int_extractedEdgesOption = 2;
			}
			else {
				int_extractedEdgesOption = -999;
			}
			if (int_drf_repres != 3) {
				int_extractedEdgesOption = convert_to_int(it->second);
			}
			ist_id_value.assign(convert_to_string(int_extractedEdgesOption));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//extractedEdgesOption = NXOpen::Preferences::GeneralExtractedEdgesOptionNone;
				int_extractedEdgesOption = convert_to_int(soll_id_value.c_str());
				if (int_extractedEdgesOption == 0) {
					extractedEdgesOption = NXOpen::Preferences::GeneralExtractedEdgesOptionNone;
				}
				else if (int_extractedEdgesOption == 1) {
					extractedEdgesOption = NXOpen::Preferences::GeneralExtractedEdgesOptionAssociative;
				}
				else if (int_extractedEdgesOption == 2) {
					extractedEdgesOption = NXOpen::Preferences::GeneralExtractedEdgesOptionNonAssociative;
				}
				_preferencesBuilder->ViewStyle()->ViewStyleGeneral()->SetExtractedEdges(extractedEdgesOption);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the chord height tolerance value for silhouette and hidden edges in exact views.
	//A smaller value gives a more accurate representation, but it will take longer to update the view. 
	//This option only applies to exact views.
	id_name.assign("Drafting_renderTolerance");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double toleranceValue;
			toleranceValue = _preferencesBuilder->ViewStyle()->ViewStyleGeneral()->ToleranceValue();
			ist_id_value.assign(convert_to_string(toleranceValue));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				toleranceValue = convert_to_double(soll_id_value);
				_preferencesBuilder->ViewStyle()->ViewStyleGeneral()->SetToleranceValue(toleranceValue);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies whether wireframe objects in member views will inherit their color from the body or the face.
	id_name.assign("Drafting_wireframeColorSource");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Preferences::GeneralWireframeColorSourceOption wireframeColorSourceOption;
			wireframeColorSourceOption = _preferencesBuilder->ViewStyle()->ViewStyleGeneral()->WireframeColorSource();
			int int_wireframeColorSourceOption;
			int_wireframeColorSourceOption = (int)wireframeColorSourceOption;
			ist_id_value.assign(convert_to_string(int_wireframeColorSourceOption));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_wireframeColorSourceOption = convert_to_int(soll_id_value);
				wireframeColorSourceOption = (NXOpen::Preferences::GeneralWireframeColorSourceOption)int_wireframeColorSourceOption;
				_preferencesBuilder->ViewStyle()->ViewStyleGeneral()->SetWireframeColorSource(wireframeColorSourceOption);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- STOPP - %s --- \n", routineName.c_str());
}

/*
File - Preferences - Drafting - View - Common - General -> Repair these preferences.
*/
void repair_DraftingStandard_View_Common_General_prefs(NXOpen::Drafting::PreferencesBuilder *_preferencesBuilder, en_nx_dpv* _nx_dpv, Session * _theSession, Part* _workPart) {
	routineName.assign("repair_DraftingStandard_View_Common_General_prefs");
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- START - %s --- \n", routineName.c_str());

	//This option determines whether or not silhouette lines should be drawn.
	id_name.assign("Drafting_sil");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			bool silhouettesToggle;
			silhouettesToggle = _preferencesBuilder->ViewStyle()->ViewStyleGeneral()->Silhouettes();
			int int_silhouettesToggle;
			int_silhouettesToggle = (int)silhouettesToggle;
			ist_id_value.assign(convert_to_string(int_silhouettesToggle));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_silhouettesToggle = convert_to_int(soll_id_value);
				silhouettesToggle = false;
				if (int_silhouettesToggle == 1) {
					silhouettesToggle = true;
				}
				_preferencesBuilder->ViewStyle()->ViewStyleGeneral()->SetSilhouettes(silhouettesToggle);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not UV grid curves should be drawn.
	id_name.assign("Drafting_uvhatch");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			bool uVGridToggle;
			uVGridToggle = _preferencesBuilder->ViewStyle()->ViewStyleGeneral()->UVGrid();
			int int_uVGridToggle;
			int_uVGridToggle = (int)uVGridToggle;
			ist_id_value.assign(convert_to_string(int_uVGridToggle));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_uVGridToggle = convert_to_int(soll_id_value);
				uVGridToggle = false;
				if (int_uVGridToggle == 1) {
					uVGridToggle = true;
				}
				_preferencesBuilder->ViewStyle()->ViewStyleGeneral()->SetUVGrid(uVGridToggle);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not linear, cylindrical, and bolt circle centerlines 
	//(with a circular instance set) should be automatically created when adding views where 
	//the hole or pin axis is perpendicular or parallel to the plane of the drawing view.
	id_name.assign("Drafting_centerlineAutoCreate");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			bool centerlinesToggle;
			centerlinesToggle = _preferencesBuilder->ViewStyle()->ViewStyleGeneral()->Centerlines();
			int int_centerlinesToggle;
			int_centerlinesToggle = (int)centerlinesToggle;
			ist_id_value.assign(convert_to_string(int_centerlinesToggle));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_centerlinesToggle = convert_to_int(soll_id_value);
				centerlinesToggle = false;
				if (int_centerlinesToggle == 1) {
					centerlinesToggle = true;
				}
				_preferencesBuilder->ViewStyle()->ViewStyleGeneral()->SetCenterlines(centerlinesToggle);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not an anchor point will be automatically created during view creation.
	id_name.assign("Drafting_autoAnchor");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			bool automaticAnchorPointToggle;
			automaticAnchorPointToggle = _preferencesBuilder->ViewStyle()->ViewStyleGeneral()->AutomaticAnchorPoint();
			int int_automaticAnchorPointToggle;
			int_automaticAnchorPointToggle = (int)automaticAnchorPointToggle;
			ist_id_value.assign(convert_to_string(int_automaticAnchorPointToggle));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_automaticAnchorPointToggle = convert_to_int(soll_id_value);
				automaticAnchorPointToggle = false;
				if (int_automaticAnchorPointToggle == 1) {
					automaticAnchorPointToggle = true;
				}
				_preferencesBuilder->ViewStyle()->ViewStyleGeneral()->SetAutomaticAnchorPoint(automaticAnchorPointToggle);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not drawing views should be  
	//updated automatically after a change to the model is made.
	id_name.assign("Drafting_autoUpdate");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			bool automaticUpdateToggle;
			automaticUpdateToggle = _preferencesBuilder->ViewStyle()->ViewStyleGeneral()->AutomaticUpdate();
			int int_automaticUpdateToggle;
			int_automaticUpdateToggle = (int)automaticUpdateToggle;
			ist_id_value.assign(convert_to_string(int_automaticUpdateToggle));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_automaticUpdateToggle = convert_to_int(soll_id_value);
				automaticUpdateToggle = false;
				if (int_automaticUpdateToggle == 1) {
					automaticUpdateToggle = true;
				}
				_preferencesBuilder->ViewStyle()->ViewStyleGeneral()->SetAutomaticUpdate(automaticUpdateToggle);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not a view's out-of-date status will include its boundary.
	id_name.assign("Drafting_checkBoundaryStatus");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			bool boundaryStatusToggle;
			boundaryStatusToggle = _preferencesBuilder->ViewStyle()->ViewStyleGeneral()->BoundaryStatus();
			int int_boundaryStatusToggle;
			int_boundaryStatusToggle = (int)boundaryStatusToggle;
			ist_id_value.assign(convert_to_string(int_boundaryStatusToggle));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_boundaryStatusToggle = convert_to_int(soll_id_value);
				boundaryStatusToggle = false;
				if (int_boundaryStatusToggle == 1) {
					boundaryStatusToggle = true;
				}
				_preferencesBuilder->ViewStyle()->ViewStyleGeneral()->SetBoundaryStatus(boundaryStatusToggle);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- STOPP - %s --- \n", routineName.c_str());
}

/*
File - Preferences - Drafting - View - Common - Angle -> Repair these preferences.
*/
void repair_DraftingStandard_View_Common_Angle_prefs(NXOpen::Drafting::PreferencesBuilder *_preferencesBuilder, en_nx_dpv* _nx_dpv, Session * _theSession, Part* _workPart) {
	routineName.assign("repair_DraftingStandard_View_Common_Angle_prefs");
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- START - %s --- \n", routineName.c_str());
	
	//This option specifies the view angle format.
	id_name.assign("Drafting_viewAngleFormat");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Preferences::AngleFormat angleFormat;
			angleFormat = _preferencesBuilder->ViewStyle()->ViewStyleGeneral()->AngleFormat();
			int int_angleFormat;
			int_angleFormat = (int)angleFormat;
			ist_id_value.assign(convert_to_string(int_angleFormat));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_angleFormat = convert_to_int(soll_id_value);
				angleFormat = (NXOpen::Preferences::AngleFormat)int_angleFormat;
				_preferencesBuilder->ViewStyle()->ViewStyleGeneral()->SetAngleFormat(angleFormat);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the number of decimal places for the view angle.
	if (_nx_dpv->usedUnitValue.compare("1") == 0) {
		id_name.assign("Drafting_viewAngleDecimalPlaces_MU");
	}
	else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
		id_name.assign("Drafting_viewAngleDecimalPlaces_EU");
	}
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			int anglePrecision;
			anglePrecision = _preferencesBuilder->ViewStyle()->ViewStyleGeneral()->AnglePrecision();
			ist_id_value.assign(convert_to_string(anglePrecision));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				anglePrecision = convert_to_int(soll_id_value);
				_preferencesBuilder->ViewStyle()->ViewStyleGeneral()->SetAnglePrecision(anglePrecision);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the decimal point character for the view angle.
	if (_nx_dpv->usedUnitValue.compare("1") == 0) {
		id_name.assign("Drafting_viewAngleDecimalPoint_MU");
	}
	else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
		id_name.assign("Drafting_viewAngleDecimalPoint_EU");
	}
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Preferences::DecimalPointCharacter decimalPointCharacter;
			decimalPointCharacter = _preferencesBuilder->ViewStyle()->ViewStyleGeneral()->AngleDecimalPointCharacter();
			int int_decimalPointCharacter;
			int_decimalPointCharacter = (int)decimalPointCharacter;
			ist_id_value.assign(convert_to_string(int_decimalPointCharacter));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_decimalPointCharacter = convert_to_int(soll_id_value);
				decimalPointCharacter = (NXOpen::Preferences::DecimalPointCharacter)int_decimalPointCharacter;
				_preferencesBuilder->ViewStyle()->ViewStyleGeneral()->SetAngleDecimalPointCharacter(decimalPointCharacter);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not leading zeros will be displayed for the view angle.
	if (_nx_dpv->usedUnitValue.compare("1") == 0) {
		id_name.assign("Drafting_viewAngleLeadingZeros_MU");
	}
	else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
		id_name.assign("Drafting_viewAngleLeadingZeros_EU");
	}
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			bool showLeadingZeros;
			showLeadingZeros = _preferencesBuilder->ViewStyle()->ViewStyleGeneral()->AngleShowLeadingZeros();
			int int_showLeadingZeros;
			int_showLeadingZeros = (int)showLeadingZeros;
			ist_id_value.assign(convert_to_string(int_showLeadingZeros));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_showLeadingZeros = convert_to_int(soll_id_value);
				showLeadingZeros = false;
				if (int_showLeadingZeros == 1) {
					showLeadingZeros = true;
				}
				_preferencesBuilder->ViewStyle()->ViewStyleGeneral()->SetAngleShowLeadingZeros(showLeadingZeros);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not trailing zeros will be displayed for the view angle.
	if (_nx_dpv->usedUnitValue.compare("1") == 0) {
		id_name.assign("Drafting_viewAngleTrailingZeros_MU");
	}
	else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
		id_name.assign("Drafting_viewAngleTrailingZeros_EU");
	}
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			bool showTrailingZeros;
			showTrailingZeros = _preferencesBuilder->ViewStyle()->ViewStyleGeneral()->AngleShowTrailingZeros();
			int int_showTrailingZeros;
			int_showTrailingZeros = (int)showTrailingZeros;
			ist_id_value.assign(convert_to_string(int_showTrailingZeros));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_showTrailingZeros = convert_to_int(soll_id_value);
				showTrailingZeros = false;
				if (int_showTrailingZeros == 1) {
					showTrailingZeros = true;
				}
				_preferencesBuilder->ViewStyle()->ViewStyleGeneral()->SetAngleShowTrailingZeros(showTrailingZeros);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- STOPP - %s --- \n", routineName.c_str());
}

/*
File - Preferences - Drafting - View - Common - Visible Lines -> Repair these preferences.
*/
void repair_DraftingStandard_View_Common_VisibleLines_prefs(NXOpen::Drafting::PreferencesBuilder *_preferencesBuilder, en_nx_dpv* _nx_dpv, Session * _theSession, Part* _workPart) {
	routineName.assign("repair_DraftingStandard_View_Common_VisibleLines_prefs");
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- START - %s --- \n", routineName.c_str());

	//This option specifies the color of visible edges.
	id_name.assign("Drafting_visColor");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::NXColor *visibleColor;
			visibleColor = _preferencesBuilder->ViewStyle()->ViewStyleVisibleLines()->VisibleColor();
			int visibleColorIndex;
			visibleColorIndex = visibleColor->Handle();
			ist_id_value.assign(convert_to_string(visibleColorIndex));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				visibleColorIndex = convert_to_int(soll_id_value);
				visibleColor = _workPart->Colors()->Find(visibleColorIndex);
				_preferencesBuilder->ViewStyle()->ViewStyleVisibleLines()->SetVisibleColor(visibleColor);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}
	
	//This option specifies the line font for visible edges. The option Original means that 
	//the line font is inherited from the line font of the model.
	id_name.assign("Drafting_visFont");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Preferences::Font visFont;
			visFont = _preferencesBuilder->ViewStyle()->ViewStyleVisibleLines()->VisibleFont();
			int int_visFont;
			if (visFont == NXOpen::Preferences::FontInvisible) {
				int_visFont = 0;
			}
			else if (visFont == NXOpen::Preferences::FontSolid) {
				int_visFont = 1;
			}
			else if (visFont == NXOpen::Preferences::FontDashed) {
				int_visFont = 2;
			}
			else if (visFont == NXOpen::Preferences::FontPhantom) {
				int_visFont = 3;
			}
			else if (visFont == NXOpen::Preferences::FontCenterline) {
				int_visFont = 4;
			}
			else if (visFont == NXOpen::Preferences::FontDotted) {
				int_visFont = 5;
			}
			else if (visFont == NXOpen::Preferences::FontLongDashed) {
				int_visFont = 6;
			}
			else if (visFont == NXOpen::Preferences::FontDottedDashed) {
				int_visFont = 7;
			}
			else if (visFont == NXOpen::Preferences::FontOriginal) {
				int_visFont = 8;
			}
			ist_id_value.assign(convert_to_string(int_visFont));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_visFont = convert_to_int(soll_id_value);
				if (int_visFont == 0) {
					visFont = NXOpen::Preferences::FontInvisible;
				}
				else if (int_visFont == 1) {
					visFont = NXOpen::Preferences::FontSolid;
				}
				else if (int_visFont == 2) {
					visFont = NXOpen::Preferences::FontDashed;
				}
				else if (int_visFont == 3) {
					visFont = NXOpen::Preferences::FontPhantom;
				}
				else if (int_visFont == 4) {
					visFont = NXOpen::Preferences::FontCenterline;
				}
				else if (int_visFont == 5) {
					visFont = NXOpen::Preferences::FontDotted;
				}
				else if (int_visFont == 6) {
					visFont = NXOpen::Preferences::FontLongDashed;
				}
				else if (int_visFont == 7) {
					visFont = NXOpen::Preferences::FontDottedDashed;
				}
				else if (int_visFont == 8) {
					visFont = NXOpen::Preferences::FontOriginal;
				}
				_preferencesBuilder->ViewStyle()->ViewStyleVisibleLines()->SetVisibleFont(visFont);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the line width for visible edges. 
	//The option Original means that the line width is inherited from the line width of the model.
	id_name.assign("Drafting_visWidth");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Preferences::Width visWidth;
			visWidth = _preferencesBuilder->ViewStyle()->ViewStyleVisibleLines()->VisibleWidth();
			int int_visWidth;
			if (visWidth == NXOpen::Preferences::WidthOriginal) {
				int_visWidth = 0;
			}
			else if (visWidth == NXOpen::Preferences::WidthThin) {
				int_visWidth = 1;
			}
			else if (visWidth == NXOpen::Preferences::WidthNormal) {
				int_visWidth = 2;
			}
			else if (visWidth == NXOpen::Preferences::WidthThick) {
				int_visWidth = 3;
			}
			else if (visWidth == NXOpen::Preferences::WidthOne) {
				int_visWidth = 5;
			}
			else if (visWidth == NXOpen::Preferences::WidthTwo) {
				int_visWidth = 6;
			}
			else if (visWidth == NXOpen::Preferences::WidthThree) {
				int_visWidth = 7;
			}
			else if (visWidth == NXOpen::Preferences::WidthFour) {
				int_visWidth = 8;
			}
			else if (visWidth == NXOpen::Preferences::WidthFive) {
				int_visWidth = 9;
			}
			else if (visWidth == NXOpen::Preferences::WidthSix) {
				int_visWidth = 10;
			}
			else if (visWidth == NXOpen::Preferences::WidthSeven) {
				int_visWidth = 11;
			}
			else if (visWidth == NXOpen::Preferences::WidthEight) {
				int_visWidth = 12;
			}
			else if (visWidth == NXOpen::Preferences::WidthNine) {
				int_visWidth = 13;
			}
			string id_name_tmp;
			std::map<const std::string, std::string>::iterator it_tmp;
			if (int_visWidth == 1) {
				id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
				it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				int_visWidth = convert_to_int(it_tmp->second);
			}
			if (int_visWidth == 2) {
				id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
				it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				int_visWidth = convert_to_int(it_tmp->second);
			}
			if (int_visWidth == 3) {
				id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
				it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				int_visWidth = convert_to_int(it_tmp->second);
			}
			ist_id_value.assign(convert_to_string(int_visWidth));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_visWidth = convert_to_int(soll_id_value);
				if (int_visWidth == 0) {
					visWidth = NXOpen::Preferences::WidthOriginal;
				}
				else if (int_visWidth == 1) {
					//visWidth = NXOpen::Preferences::WidthThin;
					id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
					it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					visWidth = (NXOpen::Preferences::Width) convert_to_int(it_tmp->second);
				}
				else if (int_visWidth == 2) {
					//visWidth = NXOpen::Preferences::WidthNormal;
					id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
					it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					visWidth = (NXOpen::Preferences::Width) convert_to_int(it_tmp->second);
				}
				else if (int_visWidth == 3) {
					//visWidth = NXOpen::Preferences::WidthThick;
					id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
					it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					visWidth = (NXOpen::Preferences::Width) convert_to_int(it_tmp->second);
				}
				else if (int_visWidth == 5) {
					visWidth = NXOpen::Preferences::WidthOne;
				}
				else if (int_visWidth == 6) {
					visWidth = NXOpen::Preferences::WidthTwo;
				}
				else if (int_visWidth == 7) {
					visWidth = NXOpen::Preferences::WidthThree;
				}
				else if (int_visWidth == 8) {
					visWidth = NXOpen::Preferences::WidthFour;
				}
				else if (int_visWidth == 9) {
					visWidth = NXOpen::Preferences::WidthFive;
				}
				else if (int_visWidth == 10) {
					visWidth = NXOpen::Preferences::WidthSix;
				}
				else if (int_visWidth == 11) {
					visWidth = NXOpen::Preferences::WidthSeven;
				}
				else if (int_visWidth == 12) {
					visWidth = NXOpen::Preferences::WidthEight;
				}
				else if (int_visWidth == 13) {
					visWidth = NXOpen::Preferences::WidthNine;
				}
				_preferencesBuilder->ViewStyle()->ViewStyleVisibleLines()->SetVisibleWidth(visWidth);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- STOPP - %s --- \n", routineName.c_str());
}

/*
File - Preferences - Drafting - View - Common - Hidden Lines -> Repair these preferences.
*/
void repair_DraftingStandard_View_Common_HiddenLines_prefs(NXOpen::Drafting::PreferencesBuilder *_preferencesBuilder, en_nx_dpv* _nx_dpv, Session * _theSession, Part* _workPart) {
	routineName.assign("repair_DraftingStandard_View_Common_HiddenLines_prefs");
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- START - %s --- \n", routineName.c_str());

	//This option determines whether or not hidden edges in a view should be processed.
	id_name.assign("Drafting_hlr");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			bool hiddenLineToggle;
			hiddenLineToggle = _preferencesBuilder->ViewStyle()->ViewStyleHiddenLines()->HiddenLine();
			int int_hiddenLineToggle;
			int_hiddenLineToggle = (int)hiddenLineToggle;
			ist_id_value.assign(convert_to_string(int_hiddenLineToggle));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_hiddenLineToggle = convert_to_int(soll_id_value);
				hiddenLineToggle = false;
				if (int_hiddenLineToggle == 1) {
					hiddenLineToggle = true;
				}
				_preferencesBuilder->ViewStyle()->ViewStyleHiddenLines()->SetHiddenLine(hiddenLineToggle);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the color of hidden edges.
	id_name.assign("Drafting_hlColor");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::NXColor *Color;
			Color = _preferencesBuilder->ViewStyle()->ViewStyleHiddenLines()->Color();
			int ColorIndex;
			ColorIndex = Color->Handle();
			ist_id_value.assign(convert_to_string(ColorIndex));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				ColorIndex = convert_to_int(soll_id_value);
				Color = _workPart->Colors()->Find(ColorIndex);
				_preferencesBuilder->ViewStyle()->ViewStyleHiddenLines()->SetColor(Color);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the line font for hidden edges.
	id_name.assign("Drafting_hlFont");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Preferences::Font hlFont;
			hlFont = _preferencesBuilder->ViewStyle()->ViewStyleHiddenLines()->Font();
			int int_hlFont;
			if (hlFont == NXOpen::Preferences::FontInvisible) {
				int_hlFont = 0;
			}
			else if (hlFont == NXOpen::Preferences::FontSolid) {
				int_hlFont = 1;
			}
			else if (hlFont == NXOpen::Preferences::FontDashed) {
				int_hlFont = 2;
			}
			else if (hlFont == NXOpen::Preferences::FontPhantom) {
				int_hlFont = 3;
			}
			else if (hlFont == NXOpen::Preferences::FontCenterline) {
				int_hlFont = 4;
			}
			else if (hlFont == NXOpen::Preferences::FontDotted) {
				int_hlFont = 5;
			}
			else if (hlFont == NXOpen::Preferences::FontLongDashed) {
				int_hlFont = 6;
			}
			else if (hlFont == NXOpen::Preferences::FontDottedDashed) {
				int_hlFont = 7;
			}
			else if (hlFont == NXOpen::Preferences::FontOriginal) {
				int_hlFont = 8;
			}
			ist_id_value.assign(convert_to_string(int_hlFont));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_hlFont = convert_to_int(soll_id_value);
				if (int_hlFont == 0) {
					hlFont = NXOpen::Preferences::FontInvisible;
				}
				else if (int_hlFont == 1) {
					hlFont = NXOpen::Preferences::FontSolid;
				}
				else if (int_hlFont == 2) {
					hlFont = NXOpen::Preferences::FontDashed;
				}
				else if (int_hlFont == 3) {
					hlFont = NXOpen::Preferences::FontPhantom;
				}
				else if (int_hlFont == 4) {
					hlFont = NXOpen::Preferences::FontCenterline;
				}
				else if (int_hlFont == 5) {
					hlFont = NXOpen::Preferences::FontDotted;
				}
				else if (int_hlFont == 6) {
					hlFont = NXOpen::Preferences::FontLongDashed;
				}
				else if (int_hlFont == 7) {
					hlFont = NXOpen::Preferences::FontDottedDashed;
				}
				else if (int_hlFont == 8) {
					hlFont = NXOpen::Preferences::FontOriginal;
				}
				_preferencesBuilder->ViewStyle()->ViewStyleHiddenLines()->SetFont(hlFont);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the line width for hidden edges. 
	//The option Original means that the line width is inherited from the line width of the model.
	id_name.assign("Drafting_hlWidth");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Preferences::Width hlWidth;
			hlWidth = _preferencesBuilder->ViewStyle()->ViewStyleHiddenLines()->Width();
			int int_hlWidth;
			if (hlWidth == NXOpen::Preferences::WidthOriginal) {
				int_hlWidth = -1;
			}
			else if (hlWidth == NXOpen::Preferences::WidthThin) {
				int_hlWidth = 1;
			}
			else if (hlWidth == NXOpen::Preferences::WidthNormal) {
				int_hlWidth = 2;
			}
			else if (hlWidth == NXOpen::Preferences::WidthThick) {
				int_hlWidth = 3;
			}
			else if (hlWidth == NXOpen::Preferences::WidthOne) {
				int_hlWidth = 5;
			}
			else if (hlWidth == NXOpen::Preferences::WidthTwo) {
				int_hlWidth = 6;
			}
			else if (hlWidth == NXOpen::Preferences::WidthThree) {
				int_hlWidth = 7;
			}
			else if (hlWidth == NXOpen::Preferences::WidthFour) {
				int_hlWidth = 8;
			}
			else if (hlWidth == NXOpen::Preferences::WidthFive) {
				int_hlWidth = 9;
			}
			else if (hlWidth == NXOpen::Preferences::WidthSix) {
				int_hlWidth = 10;
			}
			else if (hlWidth == NXOpen::Preferences::WidthSeven) {
				int_hlWidth = 11;
			}
			else if (hlWidth == NXOpen::Preferences::WidthEight) {
				int_hlWidth = 12;
			}
			else if (hlWidth == NXOpen::Preferences::WidthNine) {
				int_hlWidth = 13;
			}
			//string id_name_tmp;
			//std::map<const std::string, std::string>::iterator it_tmp;
			//if (int_hlWidth == 1) {
			//	id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
			//	it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
			//	int_hlWidth = convert_to_int(it_tmp->second);
			//}
			//if (int_hlWidth == 2) {
			//	id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
			//	it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
			//	int_hlWidth = convert_to_int(it_tmp->second);
			//}
			//if (int_hlWidth == 3) {
			//	id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
			//	it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
			//	int_hlWidth = convert_to_int(it_tmp->second);
			//}
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - int_hlWidth = \"%d\" \n", routineName.c_str(), int_hlWidth);
			//_nx_dpv->soll_dpv_map.find(id_name)->second = convert_to_string(int_hlWidth);
			ist_id_value.assign(convert_to_string(int_hlWidth));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_hlWidth = convert_to_int(soll_id_value);
				if (int_hlWidth == -1) {
					hlWidth = NXOpen::Preferences::WidthOriginal;
				}
				else if (int_hlWidth == 1) {
					hlWidth = NXOpen::Preferences::WidthThin;
					//id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
					//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					//hlWidth = (NXOpen::Preferences::Width) convert_to_int(it_tmp->second);
				}
				else if (int_hlWidth == 2) {
					hlWidth = NXOpen::Preferences::WidthNormal;
					//id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
					//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					//hlWidth = (NXOpen::Preferences::Width) convert_to_int(it_tmp->second);
				}
				else if (int_hlWidth == 3) {
					hlWidth = NXOpen::Preferences::WidthThick;
					//id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
					//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					//hlWidth = (NXOpen::Preferences::Width) convert_to_int(it_tmp->second);
				}
				else if (int_hlWidth == 5) {
					hlWidth = NXOpen::Preferences::WidthOne;
				}
				else if (int_hlWidth == 6) {
					hlWidth = NXOpen::Preferences::WidthTwo;
				}
				else if (int_hlWidth == 7) {
					hlWidth = NXOpen::Preferences::WidthThree;
				}
				else if (int_hlWidth == 8) {
					hlWidth = NXOpen::Preferences::WidthFour;
				}
				else if (int_hlWidth == 9) {
					hlWidth = NXOpen::Preferences::WidthFive;
				}
				else if (int_hlWidth == 10) {
					hlWidth = NXOpen::Preferences::WidthSix;
				}
				else if (int_hlWidth == 11) {
					hlWidth = NXOpen::Preferences::WidthSeven;
				}
				else if (int_hlWidth == 12) {
					hlWidth = NXOpen::Preferences::WidthEight;
				}
				else if (int_hlWidth == 13) {
					hlWidth = NXOpen::Preferences::WidthNine;
				}
				_preferencesBuilder->ViewStyle()->ViewStyleHiddenLines()->SetWidth(hlWidth);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not edges that are hidden by other overlapping edges are to be drawn.
	id_name.assign("Drafting_ehe");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			bool edgesHiddenByEdgesToggle;
			edgesHiddenByEdgesToggle = _preferencesBuilder->ViewStyle()->ViewStyleHiddenLines()->EdgesHiddenByEdges();
			int int_edgesHiddenByEdgesToggle;
			int_edgesHiddenByEdgesToggle = (int)edgesHiddenByEdgesToggle;
			ist_id_value.assign(convert_to_string(int_edgesHiddenByEdgesToggle));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_edgesHiddenByEdgesToggle = convert_to_int(soll_id_value);
				edgesHiddenByEdgesToggle = false;
				if (int_edgesHiddenByEdgesToggle == 1) {
					edgesHiddenByEdgesToggle = true;
				}
				_preferencesBuilder->ViewStyle()->ViewStyleHiddenLines()->SetEdgesHiddenByEdges(edgesHiddenByEdgesToggle);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not only hidden edges that are being referenced by 
	//annotations are rendered with the chosen color, font, and width. When this check box 
	//is turned on, all other hidden edges will not be shown.
	id_name.assign("Drafting_referencedEdgesOnly");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			bool reference_EdgesOnlyToggle;
			reference_EdgesOnlyToggle = _preferencesBuilder->ViewStyle()->ViewStyleHiddenLines()->ReferenceEdgesOnly();
			int int_reference_EdgesOnlyToggle;
			int_reference_EdgesOnlyToggle = (int)reference_EdgesOnlyToggle;
			ist_id_value.assign(convert_to_string(int_reference_EdgesOnlyToggle));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_reference_EdgesOnlyToggle = convert_to_int(soll_id_value);
				reference_EdgesOnlyToggle = false;
				if (int_reference_EdgesOnlyToggle == 1) {
					reference_EdgesOnlyToggle = true;
				}
				_preferencesBuilder->ViewStyle()->ViewStyleHiddenLines()->SetReferenceEdgesOnly(reference_EdgesOnlyToggle);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not hidden edges should be rendered with the chosen color, font, 
	//and width for all hidden edges within and between all solids.
	id_name.assign("Drafting_selfHiddenEdges");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			bool selfHiddenToggle;
			selfHiddenToggle = _preferencesBuilder->ViewStyle()->ViewStyleHiddenLines()->SelfHidden();
			int int_selfHiddenToggle;
			int_selfHiddenToggle = (int)selfHiddenToggle;
			ist_id_value.assign(convert_to_string(int_selfHiddenToggle));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_selfHiddenToggle = convert_to_int(soll_id_value);
				selfHiddenToggle = false;
				if (int_selfHiddenToggle == 1) {
					selfHiddenToggle = true;
				}
				_preferencesBuilder->ViewStyle()->ViewStyleHiddenLines()->SetSelfHidden(selfHiddenToggle);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not model curves will be rendered during hidden line processing.
	id_name.assign("Drafting_includeModelCurvesAndPoints");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Preferences::IncludeModelCurvesOption includeModelCurvesPointsOptionData;
			includeModelCurvesPointsOptionData = _preferencesBuilder->ViewStyle()->ViewStyleHiddenLines()->IncludeModelCurvesOption();
			int int_includeModelCurvesPointsOptionData;
			int_includeModelCurvesPointsOptionData = (int)includeModelCurvesPointsOptionData;
			ist_id_value.assign(convert_to_string(int_includeModelCurvesPointsOptionData));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_includeModelCurvesPointsOptionData = convert_to_int(soll_id_value);
				includeModelCurvesPointsOptionData = (NXOpen::Preferences::IncludeModelCurvesOption)int_includeModelCurvesPointsOptionData;
				_preferencesBuilder->ViewStyle()->ViewStyleHiddenLines()->SetIncludeModelCurvesOption(includeModelCurvesPointsOptionData);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not hidden edges in a view with interfering solids will be rendered as hidden lines.
	id_name.assign("Drafting_processInterferingSolids");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Preferences::HiddenLineInterferingSolidsOption interferingSolidsOption;
			interferingSolidsOption = _preferencesBuilder->ViewStyle()->ViewStyleHiddenLines()->InterferingSolids();
			bool bool_interferingSolidsOption;
			if (interferingSolidsOption == NXOpen::Preferences::HiddenLineInterferingSolidsOptionNone) {
				bool_interferingSolidsOption = false;
			}
			else {
				bool_interferingSolidsOption = true;
			}
			ist_id_value.assign(convert_to_string(bool_interferingSolidsOption));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				bool_interferingSolidsOption = convert_to_bool(soll_id_value);
				if (bool_interferingSolidsOption == true) {
					interferingSolidsOption = NXOpen::Preferences::HiddenLineInterferingSolidsOptionYes;
				}
				else {
					interferingSolidsOption = NXOpen::Preferences::HiddenLineInterferingSolidsOptionNone;
				}
				_preferencesBuilder->ViewStyle()->ViewStyleHiddenLines()->SetInterferingSolids(interferingSolidsOption);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not hidden edges in a view with interfering solids 
	//will be displayed when they are rendered as hidden lines.
	id_name.assign("Drafting_displayInterferenceCurvesSolids");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Preferences::HiddenLineInterferingSolidsOption interferingSolidsOption;
			interferingSolidsOption = _preferencesBuilder->ViewStyle()->ViewStyleHiddenLines()->InterferingSolids();
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("Drafting_displayInterferenceCurvesSolids - interferingSolidsOption = %d \n", (int)interferingSolidsOption);
			bool bool_interferingSolidsOption;
			if (interferingSolidsOption == NXOpen::Preferences::HiddenLineInterferingSolidsOptionNone) {
				bool_interferingSolidsOption = false;
			}
			else if (interferingSolidsOption == NXOpen::Preferences::HiddenLineInterferingSolidsOptionInterferenceCurves) {
				bool_interferingSolidsOption = true;
			}
			else {
				bool_interferingSolidsOption = false;
			}
			ist_id_value.assign(convert_to_string(bool_interferingSolidsOption));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				bool_interferingSolidsOption = convert_to_bool(soll_id_value);
				if (bool_interferingSolidsOption == true) {
					interferingSolidsOption = NXOpen::Preferences::HiddenLineInterferingSolidsOptionInterferenceCurves;
				}
				else {
					interferingSolidsOption = NXOpen::Preferences::HiddenLineInterferingSolidsOptionNone;
				}
				_preferencesBuilder->ViewStyle()->ViewStyleHiddenLines()->SetInterferingSolids(interferingSolidsOption);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies how small features should be rendered. A small feature is a set of connected faces 
	//which are smaller than a specified size tolerance expressed as a percentage of the model.
	id_name.assign("Drafting_simplifySmallFeatures");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Preferences::HiddenLineSmallFeatureOption smallFeatureOption;
			smallFeatureOption = _preferencesBuilder->ViewStyle()->ViewStyleHiddenLines()->SmallFeature();
			int int_smallFeatureOption;
			int_smallFeatureOption = (int)smallFeatureOption;
			ist_id_value.assign(convert_to_string(int_smallFeatureOption));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_smallFeatureOption = convert_to_int(soll_id_value);
				smallFeatureOption = (NXOpen::Preferences::HiddenLineSmallFeatureOption)int_smallFeatureOption;
				_preferencesBuilder->ViewStyle()->ViewStyleHiddenLines()->SetSmallFeature(smallFeatureOption);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the small feature size tolerance.
	id_name.assign("Drafting_smallFeatureTolerancePercent");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double smallFeaturesTolerance;
			smallFeaturesTolerance = _preferencesBuilder->ViewStyle()->ViewStyleHiddenLines()->SmallFeaturesTolerance();
			ist_id_value.assign(convert_to_string(smallFeaturesTolerance));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				smallFeaturesTolerance = convert_to_double(soll_id_value);
				_preferencesBuilder->ViewStyle()->ViewStyleHiddenLines()->SetSmallFeaturesTolerance(smallFeaturesTolerance);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- STOPP - %s --- \n", routineName.c_str());
}

/*
File - Preferences - Drafting - View - Common - Virtual Intersections -> Repair these preferences.
*/
void repair_DraftingStandard_View_Common_VirtualIntersections_prefs(NXOpen::Drafting::PreferencesBuilder *_preferencesBuilder, en_nx_dpv* _nx_dpv, Session * _theSession, Part* _workPart) {
	routineName.assign("repair_DraftingStandard_View_Common_VirtualIntersections_prefs");
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- START - %s --- \n", routineName.c_str());

	//This option determines whether or not virtual intersection lines should be displayed. Virtual intersection lines are lines 
	id_name.assign("Drafting_isect");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			bool virtualIntersectionsToggle;
			virtualIntersectionsToggle = _preferencesBuilder->ViewStyle()->ViewStyleVirtualIntersections()->VirtualIntersections();
			int int_virtualIntersectionsToggle;
			int_virtualIntersectionsToggle = (int)virtualIntersectionsToggle;
			ist_id_value.assign(convert_to_string(int_virtualIntersectionsToggle));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_virtualIntersectionsToggle = convert_to_int(soll_id_value);
				virtualIntersectionsToggle = false;
				if (int_virtualIntersectionsToggle == 1) {
					virtualIntersectionsToggle = true;
				}
				_preferencesBuilder->ViewStyle()->ViewStyleVirtualIntersections()->SetVirtualIntersections(virtualIntersectionsToggle);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the color of virtual intersection lines.
	id_name.assign("Drafting_isectColor");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::NXColor *color;
			color = _preferencesBuilder->ViewStyle()->ViewStyleVirtualIntersections()->Color();
			int colorIndex;
			colorIndex = color->Handle();
			ist_id_value.assign(convert_to_string(colorIndex));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				colorIndex = convert_to_int(soll_id_value);
				color = _workPart->Colors()->Find(colorIndex);
				_preferencesBuilder->ViewStyle()->ViewStyleVirtualIntersections()->SetColor(color);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the line font for virtual intersection lines. 
	//The option Original means that the line font is inherited from the line font of the model.
	id_name.assign("Drafting_isectFont");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Preferences::Font isectFont;
			isectFont = _preferencesBuilder->ViewStyle()->ViewStyleVirtualIntersections()->Font();
			int int_isectFont;
			if (isectFont == NXOpen::Preferences::FontInvisible) {
				int_isectFont = 0;
			}
			else if (isectFont == NXOpen::Preferences::FontSolid) {
				int_isectFont = 1;
			}
			else if (isectFont == NXOpen::Preferences::FontDashed) {
				int_isectFont = 2;
			}
			else if (isectFont == NXOpen::Preferences::FontPhantom) {
				int_isectFont = 3;
			}
			else if (isectFont == NXOpen::Preferences::FontCenterline) {
				int_isectFont = 4;
			}
			else if (isectFont == NXOpen::Preferences::FontDotted) {
				int_isectFont = 5;
			}
			else if (isectFont == NXOpen::Preferences::FontLongDashed) {
				int_isectFont = 6;
			}
			else if (isectFont == NXOpen::Preferences::FontDottedDashed) {
				int_isectFont = 7;
			}
			else if (isectFont == NXOpen::Preferences::FontOriginal) {
				int_isectFont = 8;
			}
			ist_id_value.assign(convert_to_string(int_isectFont));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_isectFont = convert_to_int(soll_id_value);
				if (int_isectFont == 0) {
					isectFont = NXOpen::Preferences::FontInvisible;
				}
				else if (int_isectFont == 1) {
					isectFont = NXOpen::Preferences::FontSolid;
				}
				else if (int_isectFont == 2) {
					isectFont = NXOpen::Preferences::FontDashed;
				}
				else if (int_isectFont == 3) {
					isectFont = NXOpen::Preferences::FontPhantom;
				}
				else if (int_isectFont == 4) {
					isectFont = NXOpen::Preferences::FontCenterline;
				}
				else if (int_isectFont == 5) {
					isectFont = NXOpen::Preferences::FontDotted;
				}
				else if (int_isectFont == 6) {
					isectFont = NXOpen::Preferences::FontLongDashed;
				}
				else if (int_isectFont == 7) {
					isectFont = NXOpen::Preferences::FontDottedDashed;
				}
				else if (int_isectFont == 8) {
					isectFont = NXOpen::Preferences::FontOriginal;
				}
				_preferencesBuilder->ViewStyle()->ViewStyleVirtualIntersections()->SetFont(isectFont);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the line width for virtual intersection lines. 
	//The option Original means that the line width is inherited from the line width of the model.
	id_name.assign("Drafting_isectWidth");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Preferences::Width isectWidth;
			isectWidth = _preferencesBuilder->ViewStyle()->ViewStyleVirtualIntersections()->Width();
			int int_isectWidth;
			if (isectWidth == NXOpen::Preferences::WidthOriginal) {
				int_isectWidth = 0;
			}
			else if (isectWidth == NXOpen::Preferences::WidthThin) {
				int_isectWidth = 1;
			}
			else if (isectWidth == NXOpen::Preferences::WidthNormal) {
				int_isectWidth = 2;
			}
			else if (isectWidth == NXOpen::Preferences::WidthThick) {
				int_isectWidth = 3;
			}
			else if (isectWidth == NXOpen::Preferences::WidthOne) {
				int_isectWidth = 5;
			}
			else if (isectWidth == NXOpen::Preferences::WidthTwo) {
				int_isectWidth = 6;
			}
			else if (isectWidth == NXOpen::Preferences::WidthThree) {
				int_isectWidth = 7;
			}
			else if (isectWidth == NXOpen::Preferences::WidthFour) {
				int_isectWidth = 8;
			}
			else if (isectWidth == NXOpen::Preferences::WidthFive) {
				int_isectWidth = 9;
			}
			else if (isectWidth == NXOpen::Preferences::WidthSix) {
				int_isectWidth = 10;
			}
			else if (isectWidth == NXOpen::Preferences::WidthSeven) {
				int_isectWidth = 11;
			}
			else if (isectWidth == NXOpen::Preferences::WidthEight) {
				int_isectWidth = 12;
			}
			else if (isectWidth == NXOpen::Preferences::WidthNine) {
				int_isectWidth = 13;
			}
			string id_name_tmp;
			std::map<const std::string, std::string>::iterator it_tmp;
			if (int_isectWidth == 1) {
				id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
				it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				int_isectWidth = convert_to_int(it_tmp->second);
			}
			if (int_isectWidth == 2) {
				id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
				it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				int_isectWidth = convert_to_int(it_tmp->second);
			}
			if (int_isectWidth == 3) {
				id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
				it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				int_isectWidth = convert_to_int(it_tmp->second);
			}
			//_nx_dpv->soll_dpv_map.find(id_name)->second = convert_to_string(int_isectWidth);
			ist_id_value.assign(convert_to_string(int_isectWidth));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_isectWidth = convert_to_int(soll_id_value);
				if (int_isectWidth == 0) {
					isectWidth = NXOpen::Preferences::WidthOriginal;
				}
				else if (int_isectWidth == 1) {
					//isectWidth = NXOpen::Preferences::WidthThin;
					id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
					it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					isectWidth = (NXOpen::Preferences::Width) convert_to_int(it_tmp->second);
				}
				else if (int_isectWidth == 2) {
					//isectWidth = NXOpen::Preferences::WidthNormal;
					id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
					it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					isectWidth = (NXOpen::Preferences::Width) convert_to_int(it_tmp->second);
				}
				else if (int_isectWidth == 3) {
					//isectWidth = NXOpen::Preferences::WidthThick;
					id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
					it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					isectWidth = (NXOpen::Preferences::Width) convert_to_int(it_tmp->second);
				}
				else if (int_isectWidth == 5) {
					isectWidth = NXOpen::Preferences::WidthOne;
				}
				else if (int_isectWidth == 6) {
					isectWidth = NXOpen::Preferences::WidthTwo;
				}
				else if (int_isectWidth == 7) {
					isectWidth = NXOpen::Preferences::WidthThree;
				}
				else if (int_isectWidth == 8) {
					isectWidth = NXOpen::Preferences::WidthFour;
				}
				else if (int_isectWidth == 9) {
					isectWidth = NXOpen::Preferences::WidthFive;
				}
				else if (int_isectWidth == 10) {
					isectWidth = NXOpen::Preferences::WidthSix;
				}
				else if (int_isectWidth == 11) {
					isectWidth = NXOpen::Preferences::WidthSeven;
				}
				else if (int_isectWidth == 12) {
					isectWidth = NXOpen::Preferences::WidthEight;
				}
				else if (int_isectWidth == 13) {
					isectWidth = NXOpen::Preferences::WidthNine;
				}
				_preferencesBuilder->ViewStyle()->ViewStyleVirtualIntersections()->SetWidth(isectWidth);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not adjacent blends appear in the view.
	id_name.assign("Drafting_adjacentBlends");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			bool ajacentBlendsToggle;
			ajacentBlendsToggle = _preferencesBuilder->ViewStyle()->ViewStyleVirtualIntersections()->AdjacentBlends();
			int int_ajacentBlendsToggle;
			int_ajacentBlendsToggle = (int)ajacentBlendsToggle;
			ist_id_value.assign(convert_to_string(int_ajacentBlendsToggle));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_ajacentBlendsToggle = convert_to_int(soll_id_value);
				ajacentBlendsToggle = false;
				if (int_ajacentBlendsToggle == 1) {
					ajacentBlendsToggle = true;
				}
				_preferencesBuilder->ViewStyle()->ViewStyleVirtualIntersections()->SetAdjacentBlends(ajacentBlendsToggle);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not the ends of virtual intersection lines should be displayed.
	id_name.assign("Drafting_isectGapping");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			bool endGapsToggle;
			endGapsToggle = _preferencesBuilder->ViewStyle()->ViewStyleVirtualIntersections()->EndGaps();
			int int_endGapsToggle;
			int_endGapsToggle = (int)endGapsToggle;
			ist_id_value.assign(convert_to_string(int_endGapsToggle));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_endGapsToggle = convert_to_int(soll_id_value);
				endGapsToggle = false;
				if (int_endGapsToggle == 1) {
					endGapsToggle = true;
				}
				_preferencesBuilder->ViewStyle()->ViewStyleVirtualIntersections()->SetEndGaps(endGapsToggle);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the end gap length.
	if (_nx_dpv->usedUnitValue.compare("1") == 0) {
		id_name.assign("Drafting_isectGapSize_MU");
	}
	else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
		id_name.assign("Drafting_isectGapSize_EU");
	}
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double endGapsData;
			endGapsData = _preferencesBuilder->ViewStyle()->ViewStyleVirtualIntersections()->EndGapsDistance();
			endGapsData = _preferencesBuilder->ViewStyle()->ViewStyleVirtualIntersections()->EndGapsDistance();
			ist_id_value.assign(convert_to_string(endGapsData));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				endGapsData = convert_to_double(soll_id_value);
				_preferencesBuilder->ViewStyle()->ViewStyleVirtualIntersections()->SetEndGapsDistance(endGapsData);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- STOPP - %s --- \n", routineName.c_str());
}

/*
File - Preferences - Drafting - View - Common - Tracelines -> Repair these preferences.
*/
void repair_DraftingStandard_View_Common_Tracelines_prefs(NXOpen::Drafting::PreferencesBuilder *_preferencesBuilder, en_nx_dpv* _nx_dpv, Session * _theSession, Part* _workPart) {
	routineName.assign("repair_DraftingStandard_View_Common_Tracelines_prefs");
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- START - %s --- \n", routineName.c_str());

	//This option specifies the color of visible tracelines.
	id_name.assign("Drafting_traceLineVisibleColor");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::NXColor *visibleColors;
			visibleColors = _preferencesBuilder->ViewStyle()->ViewStyleTraceLines()->VisibleColor();
			int visibleColorsIndex;
			visibleColorsIndex = visibleColors->Handle();
			ist_id_value.assign(convert_to_string(visibleColorsIndex));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				visibleColorsIndex = convert_to_int(soll_id_value);
				visibleColors = _workPart->Colors()->Find(visibleColorsIndex);
				_preferencesBuilder->ViewStyle()->ViewStyleTraceLines()->SetVisibleColor(visibleColors);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the line font for visible tracelines. 
	//The option Original means that the line font is inherited from the line font of the model.
	id_name.assign("Drafting_traceLineVisibleFont");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Preferences::Font visiblefont;
			visiblefont = _preferencesBuilder->ViewStyle()->ViewStyleTraceLines()->VisibleFont();
			int int_visiblefont;
			if (visiblefont == NXOpen::Preferences::FontInvisible) {
				int_visiblefont = 0;
			}
			else if (visiblefont == NXOpen::Preferences::FontSolid) {
				int_visiblefont = 1;
			}
			else if (visiblefont == NXOpen::Preferences::FontDashed) {
				int_visiblefont = 2;
			}
			else if (visiblefont == NXOpen::Preferences::FontPhantom) {
				int_visiblefont = 3;
			}
			else if (visiblefont == NXOpen::Preferences::FontCenterline) {
				int_visiblefont = 4;
			}
			else if (visiblefont == NXOpen::Preferences::FontDotted) {
				int_visiblefont = 5;
			}
			else if (visiblefont == NXOpen::Preferences::FontLongDashed) {
				int_visiblefont = 6;
			}
			else if (visiblefont == NXOpen::Preferences::FontDottedDashed) {
				int_visiblefont = 7;
			}
			else if (visiblefont == NXOpen::Preferences::FontOriginal) {
				int_visiblefont = 8;
			}
			ist_id_value.assign(convert_to_string(int_visiblefont));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_visiblefont = convert_to_int(soll_id_value);
				if (int_visiblefont == 0) {
					visiblefont = NXOpen::Preferences::FontInvisible;
				}
				else if (int_visiblefont == 1) {
					visiblefont = NXOpen::Preferences::FontSolid;
				}
				else if (int_visiblefont == 2) {
					visiblefont = NXOpen::Preferences::FontDashed;
				}
				else if (int_visiblefont == 3) {
					visiblefont = NXOpen::Preferences::FontPhantom;
				}
				else if (int_visiblefont == 4) {
					visiblefont = NXOpen::Preferences::FontCenterline;
				}
				else if (int_visiblefont == 5) {
					visiblefont = NXOpen::Preferences::FontDotted;
				}
				else if (int_visiblefont == 6) {
					visiblefont = NXOpen::Preferences::FontLongDashed;
				}
				else if (int_visiblefont == 7) {
					visiblefont = NXOpen::Preferences::FontDottedDashed;
				}
				else if (int_visiblefont == 8) {
					visiblefont = NXOpen::Preferences::FontOriginal;
				}
				_preferencesBuilder->ViewStyle()->ViewStyleTraceLines()->SetVisibleFont(visiblefont);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the line font for visible tracelines. 
	//The option Original means that the line font is inherited from the line font of the model.
	id_name.assign("Drafting_traceLineVisibleWidth");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Preferences::Width visibleWidth;
			visibleWidth = _preferencesBuilder->ViewStyle()->ViewStyleTraceLines()->VisibleWidth();
			int int_visibleWidth;
			if (visibleWidth == NXOpen::Preferences::WidthOriginal) {
				int_visibleWidth = 0;
			}
			else if (visibleWidth == NXOpen::Preferences::WidthThin) {
				int_visibleWidth = 1;
			}
			else if (visibleWidth == NXOpen::Preferences::WidthNormal) {
				int_visibleWidth = 2;
			}
			else if (visibleWidth == NXOpen::Preferences::WidthThick) {
				int_visibleWidth = 3;
			}
			else if (visibleWidth == NXOpen::Preferences::WidthOne) {
				int_visibleWidth = 5;
			}
			else if (visibleWidth == NXOpen::Preferences::WidthTwo) {
				int_visibleWidth = 6;
			}
			else if (visibleWidth == NXOpen::Preferences::WidthThree) {
				int_visibleWidth = 7;
			}
			else if (visibleWidth == NXOpen::Preferences::WidthFour) {
				int_visibleWidth = 8;
			}
			else if (visibleWidth == NXOpen::Preferences::WidthFive) {
				int_visibleWidth = 9;
			}
			else if (visibleWidth == NXOpen::Preferences::WidthSix) {
				int_visibleWidth = 10;
			}
			else if (visibleWidth == NXOpen::Preferences::WidthSeven) {
				int_visibleWidth = 11;
			}
			else if (visibleWidth == NXOpen::Preferences::WidthEight) {
				int_visibleWidth = 12;
			}
			else if (visibleWidth == NXOpen::Preferences::WidthNine) {
				int_visibleWidth = 13;
			}
			//string id_name_tmp;
			//std::map<const std::string, std::string>::iterator it_tmp;
			//if (int_visibleWidth == 1) {
			//	id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
			//	it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
			//	int_visibleWidth = convert_to_int(it_tmp->second);
			//}
			//if (int_visibleWidth == 2) {
			//	id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
			//	it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
			//	int_visibleWidth = convert_to_int(it_tmp->second);
			//}
			//if (int_visibleWidth == 3) {
			//	id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
			//	it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
			//	int_visibleWidth = convert_to_int(it_tmp->second);
			//}
			//_nx_dpv->soll_dpv_map.find(id_name)->second = convert_to_string(int_visibleWidth);
			ist_id_value.assign(convert_to_string(int_visibleWidth));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_visibleWidth = convert_to_int(soll_id_value);
				if (int_visibleWidth == 0) {
					visibleWidth = NXOpen::Preferences::WidthOriginal;
				}
				else if (int_visibleWidth == 1) {
					visibleWidth = NXOpen::Preferences::WidthThin;
					//id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
					//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					//visibleWidth = (NXOpen::Preferences::Width) convert_to_int(it_tmp->second);
				}
				else if (int_visibleWidth == 2) {
					visibleWidth = NXOpen::Preferences::WidthNormal;
					//id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
					//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					//visibleWidth = (NXOpen::Preferences::Width) convert_to_int(it_tmp->second);
				}
				else if (int_visibleWidth == 3) {
					visibleWidth = NXOpen::Preferences::WidthThick;
					//id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
					//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					//visibleWidth = (NXOpen::Preferences::Width) convert_to_int(it_tmp->second);
				}
				else if (int_visibleWidth == 5) {
					visibleWidth = NXOpen::Preferences::WidthOne;
				}
				else if (int_visibleWidth == 6) {
					visibleWidth = NXOpen::Preferences::WidthTwo;
				}
				else if (int_visibleWidth == 7) {
					visibleWidth = NXOpen::Preferences::WidthThree;
				}
				else if (int_visibleWidth == 8) {
					visibleWidth = NXOpen::Preferences::WidthFour;
				}
				else if (int_visibleWidth == 9) {
					visibleWidth = NXOpen::Preferences::WidthFive;
				}
				else if (int_visibleWidth == 10) {
					visibleWidth = NXOpen::Preferences::WidthSix;
				}
				else if (int_visibleWidth == 11) {
					visibleWidth = NXOpen::Preferences::WidthSeven;
				}
				else if (int_visibleWidth == 12) {
					visibleWidth = NXOpen::Preferences::WidthEight;
				}
				else if (int_visibleWidth == 13) {
					visibleWidth = NXOpen::Preferences::WidthNine;
				}
				_preferencesBuilder->ViewStyle()->ViewStyleTraceLines()->SetVisibleWidth(visibleWidth);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the color of hidden tracelines.
	id_name.assign("Drafting_traceLineHiddenColor");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::NXColor *hiddenColor;
			hiddenColor = _preferencesBuilder->ViewStyle()->ViewStyleTraceLines()->HiddenColor();
			int hiddenColorIndex;
			hiddenColorIndex = hiddenColor->Handle();
			ist_id_value.assign(convert_to_string(hiddenColorIndex));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				hiddenColorIndex = convert_to_int(soll_id_value);
				hiddenColor = _workPart->Colors()->Find(hiddenColorIndex);
				_preferencesBuilder->ViewStyle()->ViewStyleTraceLines()->SetHiddenColor(hiddenColor);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the line font for hidden tracelines.
	id_name.assign("Drafting_traceLineHiddenFont");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Preferences::Font hiddenfont;
			hiddenfont = _preferencesBuilder->ViewStyle()->ViewStyleTraceLines()->HiddenFont();
			int int_hiddenfont;
			if (hiddenfont == NXOpen::Preferences::FontInvisible) {
				int_hiddenfont = 0;
			}
			else if (hiddenfont == NXOpen::Preferences::FontSolid) {
				int_hiddenfont = 1;
			}
			else if (hiddenfont == NXOpen::Preferences::FontDashed) {
				int_hiddenfont = 2;
			}
			else if (hiddenfont == NXOpen::Preferences::FontPhantom) {
				int_hiddenfont = 3;
			}
			else if (hiddenfont == NXOpen::Preferences::FontCenterline) {
				int_hiddenfont = 4;
			}
			else if (hiddenfont == NXOpen::Preferences::FontDotted) {
				int_hiddenfont = 5;
			}
			else if (hiddenfont == NXOpen::Preferences::FontLongDashed) {
				int_hiddenfont = 6;
			}
			else if (hiddenfont == NXOpen::Preferences::FontDottedDashed) {
				int_hiddenfont = 7;
			}
			else if (hiddenfont == NXOpen::Preferences::FontOriginal) {
				int_hiddenfont = 8;
			}
			ist_id_value.assign(convert_to_string(int_hiddenfont));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_hiddenfont = convert_to_int(soll_id_value);
				if (int_hiddenfont == 0) {
					hiddenfont = NXOpen::Preferences::FontInvisible;
				}
				else if (int_hiddenfont == 1) {
					hiddenfont = NXOpen::Preferences::FontSolid;
				}
				else if (int_hiddenfont == 2) {
					hiddenfont = NXOpen::Preferences::FontDashed;
				}
				else if (int_hiddenfont == 3) {
					hiddenfont = NXOpen::Preferences::FontPhantom;
				}
				else if (int_hiddenfont == 4) {
					hiddenfont = NXOpen::Preferences::FontCenterline;
				}
				else if (int_hiddenfont == 5) {
					hiddenfont = NXOpen::Preferences::FontDotted;
				}
				else if (int_hiddenfont == 6) {
					hiddenfont = NXOpen::Preferences::FontLongDashed;
				}
				else if (int_hiddenfont == 7) {
					hiddenfont = NXOpen::Preferences::FontDottedDashed;
				}
				else if (int_hiddenfont == 8) {
					hiddenfont = NXOpen::Preferences::FontOriginal;
				}
				_preferencesBuilder->ViewStyle()->ViewStyleTraceLines()->SetHiddenFont(hiddenfont);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the line width for hidden tracelines. 
	//The option Original means that the line width is inherited from the line width of the model.
	id_name.assign("Drafting_traceLineHiddenWidth");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Preferences::Width hiddenWidth;
			hiddenWidth = _preferencesBuilder->ViewStyle()->ViewStyleTraceLines()->HiddenWidth();
			int int_hiddenWidth;
			if (hiddenWidth == NXOpen::Preferences::WidthOriginal) {
				int_hiddenWidth = 0;
			}
			else if (hiddenWidth == NXOpen::Preferences::WidthThin) {
				int_hiddenWidth = 1;
			}
			else if (hiddenWidth == NXOpen::Preferences::WidthNormal) {
				int_hiddenWidth = 2;
			}
			else if (hiddenWidth == NXOpen::Preferences::WidthThick) {
				int_hiddenWidth = 3;
			}
			else if (hiddenWidth == NXOpen::Preferences::WidthOne) {
				int_hiddenWidth = 5;
			}
			else if (hiddenWidth == NXOpen::Preferences::WidthTwo) {
				int_hiddenWidth = 6;
			}
			else if (hiddenWidth == NXOpen::Preferences::WidthThree) {
				int_hiddenWidth = 7;
			}
			else if (hiddenWidth == NXOpen::Preferences::WidthFour) {
				int_hiddenWidth = 8;
			}
			else if (hiddenWidth == NXOpen::Preferences::WidthFive) {
				int_hiddenWidth = 9;
			}
			else if (hiddenWidth == NXOpen::Preferences::WidthSix) {
				int_hiddenWidth = 10;
			}
			else if (hiddenWidth == NXOpen::Preferences::WidthSeven) {
				int_hiddenWidth = 11;
			}
			else if (hiddenWidth == NXOpen::Preferences::WidthEight) {
				int_hiddenWidth = 12;
			}
			else if (hiddenWidth == NXOpen::Preferences::WidthNine) {
				int_hiddenWidth = 13;
			}
			//string id_name_tmp;
			//std::map<const std::string, std::string>::iterator it_tmp;
			//if (int_hiddenWidth == 1) {
			//	id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
			//	it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
			//	int_hiddenWidth = convert_to_int(it_tmp->second);
			//}
			//if (int_hiddenWidth == 2) {
			//	id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
			//	it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
			//	int_hiddenWidth = convert_to_int(it_tmp->second);
			//}
			//if (int_hiddenWidth == 3) {
			//	id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
			//	it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
			//	int_hiddenWidth = convert_to_int(it_tmp->second);
			//}
			//_nx_dpv->soll_dpv_map.find(id_name)->second = convert_to_string(int_hiddenWidth);
			ist_id_value.assign(convert_to_string(int_hiddenWidth));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_hiddenWidth = convert_to_int(soll_id_value);
				if (int_hiddenWidth == 0) {
					hiddenWidth = NXOpen::Preferences::WidthOriginal;
				}
				else if (int_hiddenWidth == 1) {
					hiddenWidth = NXOpen::Preferences::WidthThin;
					//id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
					//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					//hiddenWidth = (NXOpen::Preferences::Width) convert_to_int(it_tmp->second);
				}
				else if (int_hiddenWidth == 2) {
					hiddenWidth = NXOpen::Preferences::WidthNormal;
					//id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
					//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					//hiddenWidth = (NXOpen::Preferences::Width) convert_to_int(it_tmp->second);
				}
				else if (int_hiddenWidth == 3) {
					hiddenWidth = NXOpen::Preferences::WidthThick;
					//id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
					//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					//hiddenWidth = (NXOpen::Preferences::Width) convert_to_int(it_tmp->second);
				}
				else if (int_hiddenWidth == 5) {
					hiddenWidth = NXOpen::Preferences::WidthOne;
				}
				else if (int_hiddenWidth == 6) {
					hiddenWidth = NXOpen::Preferences::WidthTwo;
				}
				else if (int_hiddenWidth == 7) {
					hiddenWidth = NXOpen::Preferences::WidthThree;
				}
				else if (int_hiddenWidth == 8) {
					hiddenWidth = NXOpen::Preferences::WidthFour;
				}
				else if (int_hiddenWidth == 9) {
					hiddenWidth = NXOpen::Preferences::WidthFive;
				}
				else if (int_hiddenWidth == 10) {
					hiddenWidth = NXOpen::Preferences::WidthSix;
				}
				else if (int_hiddenWidth == 11) {
					hiddenWidth = NXOpen::Preferences::WidthSeven;
				}
				else if (int_hiddenWidth == 12) {
					hiddenWidth = NXOpen::Preferences::WidthEight;
				}
				else if (int_hiddenWidth == 13) {
					hiddenWidth = NXOpen::Preferences::WidthNine;
				}
				_preferencesBuilder->ViewStyle()->ViewStyleTraceLines()->SetHiddenWidth(hiddenWidth);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not gaps in the tracelines should be added.
	id_name.assign("Drafting_traceLineGapping");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			bool createGapsToggle;
			createGapsToggle = _preferencesBuilder->ViewStyle()->ViewStyleTraceLines()->CreateGaps();
			int int_createGapsToggle;
			int_createGapsToggle = (int)createGapsToggle;
			ist_id_value.assign(convert_to_string(int_createGapsToggle));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_createGapsToggle = convert_to_int(soll_id_value);
				createGapsToggle = false;
				if (int_createGapsToggle == 1) {
					createGapsToggle = true;
				}
				_preferencesBuilder->ViewStyle()->ViewStyleTraceLines()->SetCreateGaps(createGapsToggle);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the traceline gap length.
	if (_nx_dpv->usedUnitValue.compare("1") == 0) {
		id_name.assign("Drafting_traceLineGapSize_MU");
	}
	else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
		id_name.assign("Drafting_traceLineGapSize_EU");
	}
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double gapSize;
			gapSize = _preferencesBuilder->ViewStyle()->ViewStyleTraceLines()->GapSize();
			ist_id_value.assign(convert_to_string(gapSize));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				gapSize = convert_to_double(soll_id_value);
				_preferencesBuilder->ViewStyle()->ViewStyleTraceLines()->SetGapSize(gapSize);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- STOPP - %s --- \n", routineName.c_str());
}

/*
File - Preferences - Drafting - View - Common - Secondary Geometry -> Repair these preferences.
*/
void repair_DraftingStandard_View_Common_SecondaryGeometry_prefs(NXOpen::Drafting::PreferencesBuilder *_preferencesBuilder, en_nx_dpv* _nx_dpv, Session * _theSession, Part* _workPart) {
	routineName.assign("repair_DraftingStandard_View_Common_SecondaryGeometry_prefs");
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- START - %s --- \n", routineName.c_str());

	//This option determines whether or not display properties for secondary geometry should be processed separately from primary geometry.
	id_name.assign("Drafting_ProcessSecondaryComponents");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			bool processSecondaryComponents;
			processSecondaryComponents = _preferencesBuilder->ViewStyle()->SecondaryComponents()->ProcessSecondaryComponents();
			ist_id_value.assign(convert_to_string(processSecondaryComponents));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				processSecondaryComponents = convert_to_bool(soll_id_value);
				_preferencesBuilder->ViewStyle()->SecondaryComponents()->SetProcessSecondaryComponents(processSecondaryComponents);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not display properties for secondary geometry hidden by primary geometry should be processed separately.
	id_name.assign("Drafting_ProcessSecondaryHiddenByPrimary");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			bool processSecondaryHiddenByPrimary;
			processSecondaryHiddenByPrimary = _preferencesBuilder->ViewStyle()->SecondaryComponents()->ProcessSecondaryHiddenByPrimary();
			ist_id_value.assign(convert_to_string(processSecondaryHiddenByPrimary));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				processSecondaryHiddenByPrimary = convert_to_bool(soll_id_value);
				_preferencesBuilder->ViewStyle()->SecondaryComponents()->SetProcessSecondaryHiddenByPrimary(processSecondaryHiddenByPrimary);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not display properties for primary geometry hidden by secondary geometry should be processed separately.
	id_name.assign("Drafting_ProcessPrimaryHiddenBySecondary");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			bool processPrimaryHiddenBySecondary;
			processPrimaryHiddenBySecondary = _preferencesBuilder->ViewStyle()->SecondaryComponents()->ProcessPrimaryHiddenBySecondary();
			ist_id_value.assign(convert_to_string(processPrimaryHiddenBySecondary));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				processPrimaryHiddenBySecondary = convert_to_bool(soll_id_value);
				_preferencesBuilder->ViewStyle()->SecondaryComponents()->SetProcessPrimaryHiddenBySecondary(processPrimaryHiddenBySecondary);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the color of visible secondary geometry.
	id_name.assign("Drafting_SecondaryComponentsVisibleLineColor");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::NXColor *lineColor;
			lineColor = _preferencesBuilder->ViewStyle()->SecondaryComponents()->SecondaryComponentsCFW()->HiddenCFW()->LineColor();
			int lineColorIndex;
			lineColorIndex = lineColor->Handle();
			ist_id_value.assign(convert_to_string(lineColorIndex));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				lineColorIndex = convert_to_int(soll_id_value);
				lineColor = _workPart->Colors()->Find(lineColorIndex);
				_preferencesBuilder->ViewStyle()->SecondaryComponents()->SecondaryComponentsCFW()->HiddenCFW()->SetLineColor(lineColor);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}
	//This option specifies the line font for visible secondary geometry.
	id_name.assign("Drafting_SecondaryComponentsVisibleLineFont");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::LineFontBuilder::LineFontType secondaryComponentsVisibleLineFont;
			secondaryComponentsVisibleLineFont = _preferencesBuilder->ViewStyle()->SecondaryComponents()->SecondaryComponentsCFW()->VisibleCFW()->LineFont()->LineFont();
			int int_secondaryComponentsVisibleLineFont;
			if (secondaryComponentsVisibleLineFont == NXOpen::LineFontBuilder::LineFontTypeNoChange) {
				int_secondaryComponentsVisibleLineFont = -2;
			}
			else if (secondaryComponentsVisibleLineFont == NXOpen::LineFontBuilder::LineFontTypeOriginal) {
				int_secondaryComponentsVisibleLineFont = 0;
			}
			else if (secondaryComponentsVisibleLineFont == NXOpen::LineFontBuilder::LineFontTypeInvisible) {
				int_secondaryComponentsVisibleLineFont = -1;
			}
			else if (secondaryComponentsVisibleLineFont == NXOpen::LineFontBuilder::LineFontTypeSolid) {
				int_secondaryComponentsVisibleLineFont = 1;
			}
			else if (secondaryComponentsVisibleLineFont == NXOpen::LineFontBuilder::LineFontTypeDashed) {
				int_secondaryComponentsVisibleLineFont = 2;
			}
			else if (secondaryComponentsVisibleLineFont == NXOpen::LineFontBuilder::LineFontTypePhantom) {
				int_secondaryComponentsVisibleLineFont = 3;
			}
			else if (secondaryComponentsVisibleLineFont == NXOpen::LineFontBuilder::LineFontTypeCenterline) {
				int_secondaryComponentsVisibleLineFont = 4;
			}
			else if (secondaryComponentsVisibleLineFont == NXOpen::LineFontBuilder::LineFontTypeDotted) {
				int_secondaryComponentsVisibleLineFont = 5;
			}
			else if (secondaryComponentsVisibleLineFont == NXOpen::LineFontBuilder::LineFontTypeLongDashed) {
				int_secondaryComponentsVisibleLineFont = 6;
			}
			else if (secondaryComponentsVisibleLineFont == NXOpen::LineFontBuilder::LineFontTypeDottedDashed) {
				int_secondaryComponentsVisibleLineFont = 7;
			}
			ist_id_value.assign(convert_to_string(int_secondaryComponentsVisibleLineFont));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_secondaryComponentsVisibleLineFont = convert_to_int(soll_id_value);
				if (int_secondaryComponentsVisibleLineFont == -2) {
					secondaryComponentsVisibleLineFont = NXOpen::LineFontBuilder::LineFontTypeNoChange;
				}
				else if (int_secondaryComponentsVisibleLineFont == 0) {
					secondaryComponentsVisibleLineFont = NXOpen::LineFontBuilder::LineFontTypeOriginal;
				}
				else if (int_secondaryComponentsVisibleLineFont == -1) {
					secondaryComponentsVisibleLineFont = NXOpen::LineFontBuilder::LineFontTypeInvisible;
				}
				else if (int_secondaryComponentsVisibleLineFont == 1) {
					secondaryComponentsVisibleLineFont = NXOpen::LineFontBuilder::LineFontTypeSolid;
				}
				else if (int_secondaryComponentsVisibleLineFont == 2) {
					secondaryComponentsVisibleLineFont = NXOpen::LineFontBuilder::LineFontTypeDashed;
				}
				else if (int_secondaryComponentsVisibleLineFont == 3) {
					secondaryComponentsVisibleLineFont = NXOpen::LineFontBuilder::LineFontTypePhantom;
				}
				else if (int_secondaryComponentsVisibleLineFont == 4) {
					secondaryComponentsVisibleLineFont = NXOpen::LineFontBuilder::LineFontTypeCenterline;
				}
				else if (int_secondaryComponentsVisibleLineFont == 5) {
					secondaryComponentsVisibleLineFont = NXOpen::LineFontBuilder::LineFontTypeDotted;
				}
				else if (int_secondaryComponentsVisibleLineFont == 6) {
					secondaryComponentsVisibleLineFont = NXOpen::LineFontBuilder::LineFontTypeLongDashed;
				}
				else if (int_secondaryComponentsVisibleLineFont == 7) {
					secondaryComponentsVisibleLineFont = NXOpen::LineFontBuilder::LineFontTypeDottedDashed;
				}
				_preferencesBuilder->ViewStyle()->SecondaryComponents()->SecondaryComponentsCFW()->VisibleCFW()->LineFont()->SetLineFont(secondaryComponentsVisibleLineFont);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the line width for visible secondary geometry.
	id_name.assign("Drafting_SecondaryComponentsVisibleLineWidth");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::DisplayableObject::ObjectWidth secondaryComponentsVisibleLineWidth;
			secondaryComponentsVisibleLineWidth = _preferencesBuilder->ViewStyle()->SecondaryComponents()->SecondaryComponentsCFW()->VisibleCFW()->LineWidth();
			int int_secondaryComponentsVisibleLineWidth;
			if (secondaryComponentsVisibleLineWidth == NXOpen::DisplayableObject::ObjectWidthNormal) {
				int_secondaryComponentsVisibleLineWidth = 0;
			}
			else if (secondaryComponentsVisibleLineWidth == NXOpen::DisplayableObject::ObjectWidthThick) {
				int_secondaryComponentsVisibleLineWidth = 1;
			}
			else if (secondaryComponentsVisibleLineWidth == NXOpen::DisplayableObject::ObjectWidthThin) {
				int_secondaryComponentsVisibleLineWidth = 2;
			}
			else if (secondaryComponentsVisibleLineWidth == NXOpen::DisplayableObject::ObjectWidthOne) {
				int_secondaryComponentsVisibleLineWidth = 5;
			}
			else if (secondaryComponentsVisibleLineWidth == NXOpen::DisplayableObject::ObjectWidthTwo) {
				int_secondaryComponentsVisibleLineWidth = 6;
			}
			else if (secondaryComponentsVisibleLineWidth == NXOpen::DisplayableObject::ObjectWidthThree) {
				int_secondaryComponentsVisibleLineWidth = 7;
			}
			else if (secondaryComponentsVisibleLineWidth == NXOpen::DisplayableObject::ObjectWidthFour) {
				int_secondaryComponentsVisibleLineWidth = 8;
			}
			else if (secondaryComponentsVisibleLineWidth == NXOpen::DisplayableObject::ObjectWidthFive) {
				int_secondaryComponentsVisibleLineWidth = 9;
			}
			else if (secondaryComponentsVisibleLineWidth == NXOpen::DisplayableObject::ObjectWidthSix) {
				int_secondaryComponentsVisibleLineWidth = 10;
			}
			else if (secondaryComponentsVisibleLineWidth == NXOpen::DisplayableObject::ObjectWidthSeven) {
				int_secondaryComponentsVisibleLineWidth = 11;
			}
			else if (secondaryComponentsVisibleLineWidth == NXOpen::DisplayableObject::ObjectWidthEight) {
				int_secondaryComponentsVisibleLineWidth = 12;
			}
			else if (secondaryComponentsVisibleLineWidth == NXOpen::DisplayableObject::ObjectWidthNine) {
				int_secondaryComponentsVisibleLineWidth = 13;
			}
			string id_name_tmp;
			std::map<const std::string, std::string>::iterator it_tmp;
			if (int_secondaryComponentsVisibleLineWidth == 0) {
				id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
				it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				int_secondaryComponentsVisibleLineWidth = convert_to_int(it_tmp->second);
			}
			if (int_secondaryComponentsVisibleLineWidth == 1) {
				id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
				it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				int_secondaryComponentsVisibleLineWidth = convert_to_int(it_tmp->second);
			}
			if (int_secondaryComponentsVisibleLineWidth == 2) {
				id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
				it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				int_secondaryComponentsVisibleLineWidth = convert_to_int(it_tmp->second);
			}
			//_nx_dpv->soll_dpv_map.find(id_name)->second = convert_to_string(int_secondaryComponentsVisibleLineWidth);
			ist_id_value.assign(convert_to_string(int_secondaryComponentsVisibleLineWidth));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_secondaryComponentsVisibleLineWidth = convert_to_int(soll_id_value);
				if (int_secondaryComponentsVisibleLineWidth == 0) {
					//secondaryComponentsVisibleLineWidth = NXOpen::DisplayableObject::ObjectWidthNormal;
					id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
					it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					secondaryComponentsVisibleLineWidth = (NXOpen::DisplayableObject::ObjectWidth) convert_to_int(it_tmp->second);
				}
				else if (int_secondaryComponentsVisibleLineWidth == 1) {
					//secondaryComponentsVisibleLineWidth = NXOpen::DisplayableObject::ObjectWidthThick;
					id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
					it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					secondaryComponentsVisibleLineWidth = (NXOpen::DisplayableObject::ObjectWidth) convert_to_int(it_tmp->second);
				}
				else if (int_secondaryComponentsVisibleLineWidth == 2) {
					//secondaryComponentsVisibleLineWidth = NXOpen::DisplayableObject::ObjectWidthThin;
					id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
					it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					secondaryComponentsVisibleLineWidth = (NXOpen::DisplayableObject::ObjectWidth) convert_to_int(it_tmp->second);
				}
				else if (int_secondaryComponentsVisibleLineWidth == 5) {
					secondaryComponentsVisibleLineWidth = NXOpen::DisplayableObject::ObjectWidthOne;
				}
				else if (int_secondaryComponentsVisibleLineWidth == 6) {
					secondaryComponentsVisibleLineWidth = NXOpen::DisplayableObject::ObjectWidthTwo;
				}
				else if (int_secondaryComponentsVisibleLineWidth == 7) {
					secondaryComponentsVisibleLineWidth = NXOpen::DisplayableObject::ObjectWidthThree;
				}
				else if (int_secondaryComponentsVisibleLineWidth == 8) {
					secondaryComponentsVisibleLineWidth = NXOpen::DisplayableObject::ObjectWidthFour;
				}
				else if (int_secondaryComponentsVisibleLineWidth == 9) {
					secondaryComponentsVisibleLineWidth = NXOpen::DisplayableObject::ObjectWidthFive;
				}
				else if (int_secondaryComponentsVisibleLineWidth == 10) {
					secondaryComponentsVisibleLineWidth = NXOpen::DisplayableObject::ObjectWidthSix;
				}
				else if (int_secondaryComponentsVisibleLineWidth == 11) {
					secondaryComponentsVisibleLineWidth = NXOpen::DisplayableObject::ObjectWidthSeven;
				}
				else if (int_secondaryComponentsVisibleLineWidth == 12) {
					secondaryComponentsVisibleLineWidth = NXOpen::DisplayableObject::ObjectWidthEight;
				}
				else if (int_secondaryComponentsVisibleLineWidth == 13) {
					secondaryComponentsVisibleLineWidth = NXOpen::DisplayableObject::ObjectWidthNine;
				}
				_preferencesBuilder->ViewStyle()->SecondaryComponents()->SecondaryComponentsCFW()->VisibleCFW()->SetLineWidth(secondaryComponentsVisibleLineWidth);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the color of secondary geometry that is hidden by its own component geometry.
	id_name.assign("Drafting_SecondaryComponentsHiddenLineColor");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::NXColor *secondaryComponentsHiddenLineColor;
			secondaryComponentsHiddenLineColor = _preferencesBuilder->ViewStyle()->SecondaryComponents()->SecondaryComponentsCFW()->HiddenCFW()->LineColor();
			int secondaryComponentsHiddenLineColorIndex;
			secondaryComponentsHiddenLineColorIndex = secondaryComponentsHiddenLineColor->Handle();
			ist_id_value.assign(convert_to_string(secondaryComponentsHiddenLineColorIndex));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				secondaryComponentsHiddenLineColorIndex = convert_to_int(soll_id_value);
				secondaryComponentsHiddenLineColor = _workPart->Colors()->Find(secondaryComponentsHiddenLineColorIndex);
				_preferencesBuilder->ViewStyle()->SecondaryComponents()->SecondaryComponentsCFW()->HiddenCFW()->SetLineColor(secondaryComponentsHiddenLineColor);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the line font for secondary geometry that is hidden by its own component geometry.
	id_name.assign("Drafting_SecondaryComponentsHiddenLineFont");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::LineFontBuilder::LineFontType secondaryComponentsHiddenLineFont;
			secondaryComponentsHiddenLineFont = _preferencesBuilder->ViewStyle()->SecondaryComponents()->SecondaryComponentsCFW()->HiddenCFW()->LineFont()->LineFont();
			int int_secondaryComponentsHiddenLineFont;
			if (secondaryComponentsHiddenLineFont == NXOpen::LineFontBuilder::LineFontTypeNoChange) {
				int_secondaryComponentsHiddenLineFont = -2;
			}
			else if (secondaryComponentsHiddenLineFont == NXOpen::LineFontBuilder::LineFontTypeOriginal) {
				int_secondaryComponentsHiddenLineFont = -1;
			}
			else if (secondaryComponentsHiddenLineFont == NXOpen::LineFontBuilder::LineFontTypeInvisible) {
				int_secondaryComponentsHiddenLineFont = 0;
			}
			else if (secondaryComponentsHiddenLineFont == NXOpen::LineFontBuilder::LineFontTypeSolid) {
				int_secondaryComponentsHiddenLineFont = 1;
			}
			else if (secondaryComponentsHiddenLineFont == NXOpen::LineFontBuilder::LineFontTypeDashed) {
				int_secondaryComponentsHiddenLineFont = 2;
			}
			else if (secondaryComponentsHiddenLineFont == NXOpen::LineFontBuilder::LineFontTypePhantom) {
				int_secondaryComponentsHiddenLineFont = 3;
			}
			else if (secondaryComponentsHiddenLineFont == NXOpen::LineFontBuilder::LineFontTypeCenterline) {
				int_secondaryComponentsHiddenLineFont = 4;
			}
			else if (secondaryComponentsHiddenLineFont == NXOpen::LineFontBuilder::LineFontTypeDotted) {
				int_secondaryComponentsHiddenLineFont = 5;
			}
			else if (secondaryComponentsHiddenLineFont == NXOpen::LineFontBuilder::LineFontTypeLongDashed) {
				int_secondaryComponentsHiddenLineFont = 6;
			}
			else if (secondaryComponentsHiddenLineFont == NXOpen::LineFontBuilder::LineFontTypeDottedDashed) {
				int_secondaryComponentsHiddenLineFont = 7;
			}
			ist_id_value.assign(convert_to_string(int_secondaryComponentsHiddenLineFont));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_secondaryComponentsHiddenLineFont = convert_to_int(soll_id_value);
				if (int_secondaryComponentsHiddenLineFont == -2) {
					secondaryComponentsHiddenLineFont = NXOpen::LineFontBuilder::LineFontTypeNoChange;
				}
				else if (int_secondaryComponentsHiddenLineFont == -1) {
					secondaryComponentsHiddenLineFont = NXOpen::LineFontBuilder::LineFontTypeOriginal;
				}
				else if (int_secondaryComponentsHiddenLineFont == 0) {
					secondaryComponentsHiddenLineFont = NXOpen::LineFontBuilder::LineFontTypeInvisible;
				}
				else if (int_secondaryComponentsHiddenLineFont == 1) {
					secondaryComponentsHiddenLineFont = NXOpen::LineFontBuilder::LineFontTypeSolid;
				}
				else if (int_secondaryComponentsHiddenLineFont == 2) {
					secondaryComponentsHiddenLineFont = NXOpen::LineFontBuilder::LineFontTypeDashed;
				}
				else if (int_secondaryComponentsHiddenLineFont == 3) {
					secondaryComponentsHiddenLineFont = NXOpen::LineFontBuilder::LineFontTypePhantom;
				}
				else if (int_secondaryComponentsHiddenLineFont == 4) {
					secondaryComponentsHiddenLineFont = NXOpen::LineFontBuilder::LineFontTypeCenterline;
				}
				else if (int_secondaryComponentsHiddenLineFont == 5) {
					secondaryComponentsHiddenLineFont = NXOpen::LineFontBuilder::LineFontTypeDotted;
				}
				else if (int_secondaryComponentsHiddenLineFont == 6) {
					secondaryComponentsHiddenLineFont = NXOpen::LineFontBuilder::LineFontTypeLongDashed;
				}
				else if (int_secondaryComponentsHiddenLineFont == 7) {
					secondaryComponentsHiddenLineFont = NXOpen::LineFontBuilder::LineFontTypeDottedDashed;
				}
				_preferencesBuilder->ViewStyle()->SecondaryComponents()->SecondaryComponentsCFW()->HiddenCFW()->LineFont()->SetLineFont(secondaryComponentsHiddenLineFont);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the line width for secondary geometry that is hidden by its own component geometry.
	id_name.assign("Drafting_SecondaryComponentsHiddenLineWidth");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::DisplayableObject::ObjectWidth secondaryComponentsHiddenLineWidth;
			secondaryComponentsHiddenLineWidth = _preferencesBuilder->ViewStyle()->SecondaryComponents()->SecondaryComponentsCFW()->HiddenCFW()->LineWidth();
			int int_secondaryComponentsHiddenLineWidth;
			if (secondaryComponentsHiddenLineWidth == NXOpen::DisplayableObject::ObjectWidthNormal) {
				int_secondaryComponentsHiddenLineWidth = 0;
			}
			else if (secondaryComponentsHiddenLineWidth == NXOpen::DisplayableObject::ObjectWidthThick) {
				int_secondaryComponentsHiddenLineWidth = 1;
			}
			else if (secondaryComponentsHiddenLineWidth == NXOpen::DisplayableObject::ObjectWidthThin) {
				int_secondaryComponentsHiddenLineWidth = 2;
			}
			else if (secondaryComponentsHiddenLineWidth == NXOpen::DisplayableObject::ObjectWidthOne) {
				int_secondaryComponentsHiddenLineWidth = 5;
			}
			else if (secondaryComponentsHiddenLineWidth == NXOpen::DisplayableObject::ObjectWidthTwo) {
				int_secondaryComponentsHiddenLineWidth = 6;
			}
			else if (secondaryComponentsHiddenLineWidth == NXOpen::DisplayableObject::ObjectWidthThree) {
				int_secondaryComponentsHiddenLineWidth = 7;
			}
			else if (secondaryComponentsHiddenLineWidth == NXOpen::DisplayableObject::ObjectWidthFour) {
				int_secondaryComponentsHiddenLineWidth = 8;
			}
			else if (secondaryComponentsHiddenLineWidth == NXOpen::DisplayableObject::ObjectWidthFive) {
				int_secondaryComponentsHiddenLineWidth = 9;
			}
			else if (secondaryComponentsHiddenLineWidth == NXOpen::DisplayableObject::ObjectWidthSix) {
				int_secondaryComponentsHiddenLineWidth = 10;
			}
			else if (secondaryComponentsHiddenLineWidth == NXOpen::DisplayableObject::ObjectWidthSeven) {
				int_secondaryComponentsHiddenLineWidth = 11;
			}
			else if (secondaryComponentsHiddenLineWidth == NXOpen::DisplayableObject::ObjectWidthEight) {
				int_secondaryComponentsHiddenLineWidth = 12;
			}
			else if (secondaryComponentsHiddenLineWidth == NXOpen::DisplayableObject::ObjectWidthNine) {
				int_secondaryComponentsHiddenLineWidth = 13;
			}
			string id_name_tmp;
			std::map<const std::string, std::string>::iterator it_tmp;
			if (int_secondaryComponentsHiddenLineWidth == 0) {
				id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
				it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				int_secondaryComponentsHiddenLineWidth = convert_to_int(it_tmp->second);
			}
			if (int_secondaryComponentsHiddenLineWidth == 1) {
				id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
				it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				int_secondaryComponentsHiddenLineWidth = convert_to_int(it_tmp->second);
			}
			if (int_secondaryComponentsHiddenLineWidth == 2) {
				id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
				it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				int_secondaryComponentsHiddenLineWidth = convert_to_int(it_tmp->second);
			}
			//_nx_dpv->soll_dpv_map.find(id_name)->second = convert_to_string(int_secondaryComponentsHiddenLineWidth);
			ist_id_value.assign(convert_to_string(int_secondaryComponentsHiddenLineWidth));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_secondaryComponentsHiddenLineWidth = convert_to_int(soll_id_value);
				if (int_secondaryComponentsHiddenLineWidth == 0) {
					//secondaryComponentsHiddenLineWidth = NXOpen::DisplayableObject::ObjectWidthNormal;
					id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
					it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					secondaryComponentsHiddenLineWidth = (NXOpen::DisplayableObject::ObjectWidth) convert_to_int(it_tmp->second);
				}
				else if (int_secondaryComponentsHiddenLineWidth == 1) {
					//secondaryComponentsHiddenLineWidth = NXOpen::DisplayableObject::ObjectWidthThick;
					id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
					it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					secondaryComponentsHiddenLineWidth = (NXOpen::DisplayableObject::ObjectWidth) convert_to_int(it_tmp->second);
				}
				else if (int_secondaryComponentsHiddenLineWidth == 2) {
					//secondaryComponentsHiddenLineWidth = NXOpen::DisplayableObject::ObjectWidthThin;
					id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
					it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					secondaryComponentsHiddenLineWidth = (NXOpen::DisplayableObject::ObjectWidth) convert_to_int(it_tmp->second);
				}
				else if (int_secondaryComponentsHiddenLineWidth == 5) {
					secondaryComponentsHiddenLineWidth = NXOpen::DisplayableObject::ObjectWidthOne;
				}
				else if (int_secondaryComponentsHiddenLineWidth == 6) {
					secondaryComponentsHiddenLineWidth = NXOpen::DisplayableObject::ObjectWidthTwo;
				}
				else if (int_secondaryComponentsHiddenLineWidth == 7) {
					secondaryComponentsHiddenLineWidth = NXOpen::DisplayableObject::ObjectWidthThree;
				}
				else if (int_secondaryComponentsHiddenLineWidth == 8) {
					secondaryComponentsHiddenLineWidth = NXOpen::DisplayableObject::ObjectWidthFour;
				}
				else if (int_secondaryComponentsHiddenLineWidth == 9) {
					secondaryComponentsHiddenLineWidth = NXOpen::DisplayableObject::ObjectWidthFive;
				}
				else if (int_secondaryComponentsHiddenLineWidth == 10) {
					secondaryComponentsHiddenLineWidth = NXOpen::DisplayableObject::ObjectWidthSix;
				}
				else if (int_secondaryComponentsHiddenLineWidth == 11) {
					secondaryComponentsHiddenLineWidth = NXOpen::DisplayableObject::ObjectWidthSeven;
				}
				else if (int_secondaryComponentsHiddenLineWidth == 12) {
					secondaryComponentsHiddenLineWidth = NXOpen::DisplayableObject::ObjectWidthEight;
				}
				else if (int_secondaryComponentsHiddenLineWidth == 13) {
					secondaryComponentsHiddenLineWidth = NXOpen::DisplayableObject::ObjectWidthNine;
				}
				_preferencesBuilder->ViewStyle()->SecondaryComponents()->SecondaryComponentsCFW()->HiddenCFW()->SetLineWidth(secondaryComponentsHiddenLineWidth);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not smooth edges should be displayed for secondary geometry. 
	//Smooth edges are those whose adjacent faces have the same surface tangent at the edge where they meet. 
	//Smooth edges will be displayed with the same color, font, and width as secondary geometry visible and hidden lines.
	id_name.assign("Drafting_ShowSmoothEdges");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			bool showSmoothEdges;
			showSmoothEdges = _preferencesBuilder->ViewStyle()->SecondaryComponents()->ShowSmoothEdges();
			ist_id_value.assign(convert_to_string(showSmoothEdges));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				showSmoothEdges = convert_to_bool(soll_id_value);
				_preferencesBuilder->ViewStyle()->SecondaryComponents()->SetShowSmoothEdges(showSmoothEdges);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not virtual intersection lines should be displayed for secondary geometry. 
	//Virtual intersection lines are lines that show where blended faces theoretically intersect. 
	//Virtual intersections will be displayed with the same color, font, and width as secondary geometry visible and hidden lines.
	id_name.assign("Drafting_ShowVirtualIntersections");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			bool showVirtualIntersection;
			showVirtualIntersection = _preferencesBuilder->ViewStyle()->SecondaryComponents()->ShowVirtualIntersections();
			ist_id_value.assign(convert_to_string(showVirtualIntersection));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				showVirtualIntersection = convert_to_bool(soll_id_value);
				_preferencesBuilder->ViewStyle()->SecondaryComponents()->SetShowVirtualIntersections(showVirtualIntersection);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the color of secondary geometry that is hidden by primary geometry.
	id_name.assign("Drafting_SecondaryHiddenByPrimaryVisibleLineColor");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::NXColor *lineColor;
			lineColor = _preferencesBuilder->ViewStyle()->SecondaryComponents()->SecondaryHiddenByPrimaryCFW()->VisibleCFW()->LineColor();
			int lineColorIndex;
			lineColorIndex = lineColor->Handle();
			ist_id_value.assign(convert_to_string(lineColorIndex));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				lineColorIndex = convert_to_int(soll_id_value);
				lineColor = _workPart->Colors()->Find(lineColorIndex);
				_preferencesBuilder->ViewStyle()->SecondaryComponents()->SecondaryHiddenByPrimaryCFW()->VisibleCFW()->SetLineColor(lineColor);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the line font for secondary geometry that is hidden by primary geometry.
	id_name.assign("Drafting_SecondaryHiddenByPrimaryVisibleLineFont");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::LineFontBuilder::LineFontType secondaryHiddenByPrimaryVisibleLineFont;
			secondaryHiddenByPrimaryVisibleLineFont = _preferencesBuilder->ViewStyle()->SecondaryComponents()->SecondaryHiddenByPrimaryCFW()->VisibleCFW()->LineFont()->LineFont();
			int int_secondaryHiddenByPrimaryVisibleLineFont;
			if (secondaryHiddenByPrimaryVisibleLineFont == NXOpen::LineFontBuilder::LineFontTypeNoChange) {
				int_secondaryHiddenByPrimaryVisibleLineFont = -2;
			}
			else if (secondaryHiddenByPrimaryVisibleLineFont == NXOpen::LineFontBuilder::LineFontTypeOriginal) {
				int_secondaryHiddenByPrimaryVisibleLineFont = 0;
			}
			else if (secondaryHiddenByPrimaryVisibleLineFont == NXOpen::LineFontBuilder::LineFontTypeInvisible) {
				int_secondaryHiddenByPrimaryVisibleLineFont = -1;
			}
			else if (secondaryHiddenByPrimaryVisibleLineFont == NXOpen::LineFontBuilder::LineFontTypeSolid) {
				int_secondaryHiddenByPrimaryVisibleLineFont = 1;
			}
			else if (secondaryHiddenByPrimaryVisibleLineFont == NXOpen::LineFontBuilder::LineFontTypeDashed) {
				int_secondaryHiddenByPrimaryVisibleLineFont = 2;
			}
			else if (secondaryHiddenByPrimaryVisibleLineFont == NXOpen::LineFontBuilder::LineFontTypePhantom) {
				int_secondaryHiddenByPrimaryVisibleLineFont = 3;
			}
			else if (secondaryHiddenByPrimaryVisibleLineFont == NXOpen::LineFontBuilder::LineFontTypeCenterline) {
				int_secondaryHiddenByPrimaryVisibleLineFont = 4;
			}
			else if (secondaryHiddenByPrimaryVisibleLineFont == NXOpen::LineFontBuilder::LineFontTypeDotted) {
				int_secondaryHiddenByPrimaryVisibleLineFont = 5;
			}
			else if (secondaryHiddenByPrimaryVisibleLineFont == NXOpen::LineFontBuilder::LineFontTypeLongDashed) {
				int_secondaryHiddenByPrimaryVisibleLineFont = 6;
			}
			else if (secondaryHiddenByPrimaryVisibleLineFont == NXOpen::LineFontBuilder::LineFontTypeDottedDashed) {
				int_secondaryHiddenByPrimaryVisibleLineFont = 7;
			}
			ist_id_value.assign(convert_to_string(int_secondaryHiddenByPrimaryVisibleLineFont));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_secondaryHiddenByPrimaryVisibleLineFont = convert_to_int(soll_id_value);
				if (int_secondaryHiddenByPrimaryVisibleLineFont == -2) {
					secondaryHiddenByPrimaryVisibleLineFont = NXOpen::LineFontBuilder::LineFontTypeNoChange;
				}
				else if (int_secondaryHiddenByPrimaryVisibleLineFont == 0) {
					secondaryHiddenByPrimaryVisibleLineFont = NXOpen::LineFontBuilder::LineFontTypeOriginal;
				}
				else if (int_secondaryHiddenByPrimaryVisibleLineFont == -1) {
					secondaryHiddenByPrimaryVisibleLineFont = NXOpen::LineFontBuilder::LineFontTypeInvisible;
				}
				else if (int_secondaryHiddenByPrimaryVisibleLineFont == 1) {
					secondaryHiddenByPrimaryVisibleLineFont = NXOpen::LineFontBuilder::LineFontTypeSolid;
				}
				else if (int_secondaryHiddenByPrimaryVisibleLineFont == 2) {
					secondaryHiddenByPrimaryVisibleLineFont = NXOpen::LineFontBuilder::LineFontTypeDashed;
				}
				else if (int_secondaryHiddenByPrimaryVisibleLineFont == 3) {
					secondaryHiddenByPrimaryVisibleLineFont = NXOpen::LineFontBuilder::LineFontTypePhantom;
				}
				else if (int_secondaryHiddenByPrimaryVisibleLineFont == 4) {
					secondaryHiddenByPrimaryVisibleLineFont = NXOpen::LineFontBuilder::LineFontTypeCenterline;
				}
				else if (int_secondaryHiddenByPrimaryVisibleLineFont == 5) {
					secondaryHiddenByPrimaryVisibleLineFont = NXOpen::LineFontBuilder::LineFontTypeDotted;
				}
				else if (int_secondaryHiddenByPrimaryVisibleLineFont == 6) {
					secondaryHiddenByPrimaryVisibleLineFont = NXOpen::LineFontBuilder::LineFontTypeLongDashed;
				}
				else if (int_secondaryHiddenByPrimaryVisibleLineFont == 7) {
					secondaryHiddenByPrimaryVisibleLineFont = NXOpen::LineFontBuilder::LineFontTypeDottedDashed;
				}
				_preferencesBuilder->ViewStyle()->SecondaryComponents()->SecondaryHiddenByPrimaryCFW()->VisibleCFW()->LineFont()->SetLineFont(secondaryHiddenByPrimaryVisibleLineFont);
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the line width for secondary geometry that is hidden by primary geometry.
	id_name.assign("Drafting_SecondaryHiddenByPrimaryVisibleLineWidth");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::DisplayableObject::ObjectWidth secondaryHiddenByPrimaryVisibleLineWidth;
			secondaryHiddenByPrimaryVisibleLineWidth = _preferencesBuilder->ViewStyle()->SecondaryComponents()->SecondaryHiddenByPrimaryCFW()->VisibleCFW()->LineWidth();
			int int_secondaryHiddenByPrimaryVisibleLineWidth;
			if (secondaryHiddenByPrimaryVisibleLineWidth == NXOpen::DisplayableObject::ObjectWidthNormal) {
				int_secondaryHiddenByPrimaryVisibleLineWidth = 0;
			}
			else if (secondaryHiddenByPrimaryVisibleLineWidth == NXOpen::DisplayableObject::ObjectWidthThick) {
				int_secondaryHiddenByPrimaryVisibleLineWidth = 1;
			}
			else if (secondaryHiddenByPrimaryVisibleLineWidth == NXOpen::DisplayableObject::ObjectWidthThin) {
				int_secondaryHiddenByPrimaryVisibleLineWidth = 2;
			}
			else if (secondaryHiddenByPrimaryVisibleLineWidth == NXOpen::DisplayableObject::ObjectWidthOne) {
				int_secondaryHiddenByPrimaryVisibleLineWidth = 5;
			}
			else if (secondaryHiddenByPrimaryVisibleLineWidth == NXOpen::DisplayableObject::ObjectWidthTwo) {
				int_secondaryHiddenByPrimaryVisibleLineWidth = 6;
			}
			else if (secondaryHiddenByPrimaryVisibleLineWidth == NXOpen::DisplayableObject::ObjectWidthThree) {
				int_secondaryHiddenByPrimaryVisibleLineWidth = 7;
			}
			else if (secondaryHiddenByPrimaryVisibleLineWidth == NXOpen::DisplayableObject::ObjectWidthFour) {
				int_secondaryHiddenByPrimaryVisibleLineWidth = 8;
			}
			else if (secondaryHiddenByPrimaryVisibleLineWidth == NXOpen::DisplayableObject::ObjectWidthFive) {
				int_secondaryHiddenByPrimaryVisibleLineWidth = 9;
			}
			else if (secondaryHiddenByPrimaryVisibleLineWidth == NXOpen::DisplayableObject::ObjectWidthSix) {
				int_secondaryHiddenByPrimaryVisibleLineWidth = 10;
			}
			else if (secondaryHiddenByPrimaryVisibleLineWidth == NXOpen::DisplayableObject::ObjectWidthSeven) {
				int_secondaryHiddenByPrimaryVisibleLineWidth = 11;
			}
			else if (secondaryHiddenByPrimaryVisibleLineWidth == NXOpen::DisplayableObject::ObjectWidthEight) {
				int_secondaryHiddenByPrimaryVisibleLineWidth = 12;
			}
			else if (secondaryHiddenByPrimaryVisibleLineWidth == NXOpen::DisplayableObject::ObjectWidthNine) {
				int_secondaryHiddenByPrimaryVisibleLineWidth = 13;
			}
			string id_name_tmp;
			std::map<const std::string, std::string>::iterator it_tmp;
			if (int_secondaryHiddenByPrimaryVisibleLineWidth == 0) {
				id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
				it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				int_secondaryHiddenByPrimaryVisibleLineWidth = convert_to_int(it_tmp->second);
			}
			if (int_secondaryHiddenByPrimaryVisibleLineWidth == 1) {
				id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
				it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				int_secondaryHiddenByPrimaryVisibleLineWidth = convert_to_int(it_tmp->second);
			}
			if (int_secondaryHiddenByPrimaryVisibleLineWidth == 2) {
				id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
				it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				int_secondaryHiddenByPrimaryVisibleLineWidth = convert_to_int(it_tmp->second);
			}
			//_nx_dpv->soll_dpv_map.find(id_name)->second = convert_to_string(int_secondaryHiddenByPrimaryVisibleLineWidth);
			ist_id_value.assign(convert_to_string(int_secondaryHiddenByPrimaryVisibleLineWidth));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_secondaryHiddenByPrimaryVisibleLineWidth = convert_to_int(soll_id_value);
				if (int_secondaryHiddenByPrimaryVisibleLineWidth == 0) {
					//secondaryHiddenByPrimaryVisibleLineWidth = NXOpen::DisplayableObject::ObjectWidthNormal;
					id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
					it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					secondaryHiddenByPrimaryVisibleLineWidth = (NXOpen::DisplayableObject::ObjectWidth) convert_to_int(it_tmp->second);
				}
				else if (int_secondaryHiddenByPrimaryVisibleLineWidth == 1) {
					//secondaryHiddenByPrimaryVisibleLineWidth = NXOpen::DisplayableObject::ObjectWidthThick;
					id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
					it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					secondaryHiddenByPrimaryVisibleLineWidth = (NXOpen::DisplayableObject::ObjectWidth) convert_to_int(it_tmp->second);
				}
				else if (int_secondaryHiddenByPrimaryVisibleLineWidth == 2) {
					//secondaryHiddenByPrimaryVisibleLineWidth = NXOpen::DisplayableObject::ObjectWidthThin;
					id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
					it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					secondaryHiddenByPrimaryVisibleLineWidth = (NXOpen::DisplayableObject::ObjectWidth) convert_to_int(it_tmp->second);
				}
				else if (int_secondaryHiddenByPrimaryVisibleLineWidth == 5) {
					secondaryHiddenByPrimaryVisibleLineWidth = NXOpen::DisplayableObject::ObjectWidthOne;
				}
				else if (int_secondaryHiddenByPrimaryVisibleLineWidth == 6) {
					secondaryHiddenByPrimaryVisibleLineWidth = NXOpen::DisplayableObject::ObjectWidthTwo;
				}
				else if (int_secondaryHiddenByPrimaryVisibleLineWidth == 7) {
					secondaryHiddenByPrimaryVisibleLineWidth = NXOpen::DisplayableObject::ObjectWidthThree;
				}
				else if (int_secondaryHiddenByPrimaryVisibleLineWidth == 8) {
					secondaryHiddenByPrimaryVisibleLineWidth = NXOpen::DisplayableObject::ObjectWidthFour;
				}
				else if (int_secondaryHiddenByPrimaryVisibleLineWidth == 9) {
					secondaryHiddenByPrimaryVisibleLineWidth = NXOpen::DisplayableObject::ObjectWidthFive;
				}
				else if (int_secondaryHiddenByPrimaryVisibleLineWidth == 10) {
					secondaryHiddenByPrimaryVisibleLineWidth = NXOpen::DisplayableObject::ObjectWidthSix;
				}
				else if (int_secondaryHiddenByPrimaryVisibleLineWidth == 11) {
					secondaryHiddenByPrimaryVisibleLineWidth = NXOpen::DisplayableObject::ObjectWidthSeven;
				}
				else if (int_secondaryHiddenByPrimaryVisibleLineWidth == 12) {
					secondaryHiddenByPrimaryVisibleLineWidth = NXOpen::DisplayableObject::ObjectWidthEight;
				}
				else if (int_secondaryHiddenByPrimaryVisibleLineWidth == 13) {
					secondaryHiddenByPrimaryVisibleLineWidth = NXOpen::DisplayableObject::ObjectWidthNine;
				}
				_preferencesBuilder->ViewStyle()->SecondaryComponents()->SecondaryHiddenByPrimaryCFW()->VisibleCFW()->SetLineWidth(secondaryHiddenByPrimaryVisibleLineWidth);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the color of hidden secondary geometry that is hidden by primary geometry.
	id_name.assign("Drafting_SecondaryHiddenByPrimaryHiddenLineColor");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::NXColor *lineColor;
			lineColor = _preferencesBuilder->ViewStyle()->SecondaryComponents()->SecondaryHiddenByPrimaryCFW()->HiddenCFW()->LineColor();
			int lineColorIndex;
			lineColorIndex = lineColor->Handle();
			ist_id_value.assign(convert_to_string(lineColorIndex));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				lineColorIndex = convert_to_int(soll_id_value);
				lineColor = _workPart->Colors()->Find(lineColorIndex);
				_preferencesBuilder->ViewStyle()->SecondaryComponents()->SecondaryHiddenByPrimaryCFW()->HiddenCFW()->SetLineColor(lineColor);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the line font for hidden secondary geometry that is hidden by primary geometry.
	id_name.assign("Drafting_SecondaryHiddenByPrimaryHiddenLineFont");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::LineFontBuilder::LineFontType secondaryHiddenByPrimaryHiddenLineFont;
			secondaryHiddenByPrimaryHiddenLineFont = _preferencesBuilder->ViewStyle()->SecondaryComponents()->SecondaryHiddenByPrimaryCFW()->HiddenCFW()->LineFont()->LineFont();
			int int_secondaryHiddenByPrimaryHiddenLineFont;
			if (secondaryHiddenByPrimaryHiddenLineFont == NXOpen::LineFontBuilder::LineFontTypeNoChange) {
				int_secondaryHiddenByPrimaryHiddenLineFont = -2;
			}
			else if (secondaryHiddenByPrimaryHiddenLineFont == NXOpen::LineFontBuilder::LineFontTypeOriginal) {
				int_secondaryHiddenByPrimaryHiddenLineFont = -1;
			}
			else if (secondaryHiddenByPrimaryHiddenLineFont == NXOpen::LineFontBuilder::LineFontTypeInvisible) {
				int_secondaryHiddenByPrimaryHiddenLineFont = 0;
			}
			else if (secondaryHiddenByPrimaryHiddenLineFont == NXOpen::LineFontBuilder::LineFontTypeSolid) {
				int_secondaryHiddenByPrimaryHiddenLineFont = 1;
			}
			else if (secondaryHiddenByPrimaryHiddenLineFont == NXOpen::LineFontBuilder::LineFontTypeDashed) {
				int_secondaryHiddenByPrimaryHiddenLineFont = 2;
			}
			else if (secondaryHiddenByPrimaryHiddenLineFont == NXOpen::LineFontBuilder::LineFontTypePhantom) {
				int_secondaryHiddenByPrimaryHiddenLineFont = 3;
			}
			else if (secondaryHiddenByPrimaryHiddenLineFont == NXOpen::LineFontBuilder::LineFontTypeCenterline) {
				int_secondaryHiddenByPrimaryHiddenLineFont = 4;
			}
			else if (secondaryHiddenByPrimaryHiddenLineFont == NXOpen::LineFontBuilder::LineFontTypeDotted) {
				int_secondaryHiddenByPrimaryHiddenLineFont = 5;
			}
			else if (secondaryHiddenByPrimaryHiddenLineFont == NXOpen::LineFontBuilder::LineFontTypeLongDashed) {
				int_secondaryHiddenByPrimaryHiddenLineFont = 6;
			}
			else if (secondaryHiddenByPrimaryHiddenLineFont == NXOpen::LineFontBuilder::LineFontTypeDottedDashed) {
				int_secondaryHiddenByPrimaryHiddenLineFont = 7;
			}
			ist_id_value.assign(convert_to_string(int_secondaryHiddenByPrimaryHiddenLineFont));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_secondaryHiddenByPrimaryHiddenLineFont = convert_to_int(soll_id_value);
				if (int_secondaryHiddenByPrimaryHiddenLineFont == -2) {
					secondaryHiddenByPrimaryHiddenLineFont = NXOpen::LineFontBuilder::LineFontTypeNoChange;
				}
				else if (int_secondaryHiddenByPrimaryHiddenLineFont == -1) {
					secondaryHiddenByPrimaryHiddenLineFont = NXOpen::LineFontBuilder::LineFontTypeOriginal;
				}
				else if (int_secondaryHiddenByPrimaryHiddenLineFont == 0) {
					secondaryHiddenByPrimaryHiddenLineFont = NXOpen::LineFontBuilder::LineFontTypeInvisible;
				}
				else if (int_secondaryHiddenByPrimaryHiddenLineFont == 1) {
					secondaryHiddenByPrimaryHiddenLineFont = NXOpen::LineFontBuilder::LineFontTypeSolid;
				}
				else if (int_secondaryHiddenByPrimaryHiddenLineFont == 2) {
					secondaryHiddenByPrimaryHiddenLineFont = NXOpen::LineFontBuilder::LineFontTypeDashed;
				}
				else if (int_secondaryHiddenByPrimaryHiddenLineFont == 3) {
					secondaryHiddenByPrimaryHiddenLineFont = NXOpen::LineFontBuilder::LineFontTypePhantom;
				}
				else if (int_secondaryHiddenByPrimaryHiddenLineFont == 4) {
					secondaryHiddenByPrimaryHiddenLineFont = NXOpen::LineFontBuilder::LineFontTypeCenterline;
				}
				else if (int_secondaryHiddenByPrimaryHiddenLineFont == 5) {
					secondaryHiddenByPrimaryHiddenLineFont = NXOpen::LineFontBuilder::LineFontTypeDotted;
				}
				else if (int_secondaryHiddenByPrimaryHiddenLineFont == 6) {
					secondaryHiddenByPrimaryHiddenLineFont = NXOpen::LineFontBuilder::LineFontTypeLongDashed;
				}
				else if (int_secondaryHiddenByPrimaryHiddenLineFont == 7) {
					secondaryHiddenByPrimaryHiddenLineFont = NXOpen::LineFontBuilder::LineFontTypeDottedDashed;
				}
				_preferencesBuilder->ViewStyle()->SecondaryComponents()->SecondaryHiddenByPrimaryCFW()->HiddenCFW()->LineFont()->SetLineFont(secondaryHiddenByPrimaryHiddenLineFont);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the line width for hidden secondary geometry that is hidden by primary geometry.
	id_name.assign("Drafting_SecondaryHiddenByPrimaryHiddenLineWidth");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::DisplayableObject::ObjectWidth secondaryHiddenByPrimaryHiddenLineWidth;
			secondaryHiddenByPrimaryHiddenLineWidth = _preferencesBuilder->ViewStyle()->SecondaryComponents()->SecondaryHiddenByPrimaryCFW()->HiddenCFW()->LineWidth();
			int int_secondaryHiddenByPrimaryHiddenLineWidth;
			if (secondaryHiddenByPrimaryHiddenLineWidth == NXOpen::DisplayableObject::ObjectWidthNormal) {
				int_secondaryHiddenByPrimaryHiddenLineWidth = 0;
			}
			else if (secondaryHiddenByPrimaryHiddenLineWidth == NXOpen::DisplayableObject::ObjectWidthThick) {
				int_secondaryHiddenByPrimaryHiddenLineWidth = 1;
			}
			else if (secondaryHiddenByPrimaryHiddenLineWidth == NXOpen::DisplayableObject::ObjectWidthThin) {
				int_secondaryHiddenByPrimaryHiddenLineWidth = 2;
			}
			else if (secondaryHiddenByPrimaryHiddenLineWidth == NXOpen::DisplayableObject::ObjectWidthOne) {
				int_secondaryHiddenByPrimaryHiddenLineWidth = 5;
			}
			else if (secondaryHiddenByPrimaryHiddenLineWidth == NXOpen::DisplayableObject::ObjectWidthTwo) {
				int_secondaryHiddenByPrimaryHiddenLineWidth = 6;
			}
			else if (secondaryHiddenByPrimaryHiddenLineWidth == NXOpen::DisplayableObject::ObjectWidthThree) {
				int_secondaryHiddenByPrimaryHiddenLineWidth = 7;
			}
			else if (secondaryHiddenByPrimaryHiddenLineWidth == NXOpen::DisplayableObject::ObjectWidthFour) {
				int_secondaryHiddenByPrimaryHiddenLineWidth = 8;
			}
			else if (secondaryHiddenByPrimaryHiddenLineWidth == NXOpen::DisplayableObject::ObjectWidthFive) {
				int_secondaryHiddenByPrimaryHiddenLineWidth = 9;
			}
			else if (secondaryHiddenByPrimaryHiddenLineWidth == NXOpen::DisplayableObject::ObjectWidthSix) {
				int_secondaryHiddenByPrimaryHiddenLineWidth = 10;
			}
			else if (secondaryHiddenByPrimaryHiddenLineWidth == NXOpen::DisplayableObject::ObjectWidthSeven) {
				int_secondaryHiddenByPrimaryHiddenLineWidth = 11;
			}
			else if (secondaryHiddenByPrimaryHiddenLineWidth == NXOpen::DisplayableObject::ObjectWidthEight) {
				int_secondaryHiddenByPrimaryHiddenLineWidth = 12;
			}
			else if (secondaryHiddenByPrimaryHiddenLineWidth == NXOpen::DisplayableObject::ObjectWidthNine) {
				int_secondaryHiddenByPrimaryHiddenLineWidth = 13;
			}
			string id_name_tmp;
			std::map<const std::string, std::string>::iterator it_tmp;
			if (int_secondaryHiddenByPrimaryHiddenLineWidth == 0) {
				id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
				it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				int_secondaryHiddenByPrimaryHiddenLineWidth = convert_to_int(it_tmp->second);
			}
			if (int_secondaryHiddenByPrimaryHiddenLineWidth == 1) {
				id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
				it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				int_secondaryHiddenByPrimaryHiddenLineWidth = convert_to_int(it_tmp->second);
			}
			if (int_secondaryHiddenByPrimaryHiddenLineWidth == 2) {
				id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
				it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				int_secondaryHiddenByPrimaryHiddenLineWidth = convert_to_int(it_tmp->second);
			}
			//_nx_dpv->soll_dpv_map.find(id_name)->second = convert_to_string(int_secondaryHiddenByPrimaryHiddenLineWidth);
			ist_id_value.assign(convert_to_string(int_secondaryHiddenByPrimaryHiddenLineWidth));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_secondaryHiddenByPrimaryHiddenLineWidth = convert_to_int(soll_id_value);
				if (int_secondaryHiddenByPrimaryHiddenLineWidth == 0) {
					//secondaryHiddenByPrimaryHiddenLineWidth = NXOpen::DisplayableObject::ObjectWidthNormal;
					id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
					it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					secondaryHiddenByPrimaryHiddenLineWidth = (NXOpen::DisplayableObject::ObjectWidth) convert_to_int(it_tmp->second);
				}
				else if (int_secondaryHiddenByPrimaryHiddenLineWidth == 1) {
					//secondaryHiddenByPrimaryHiddenLineWidth = NXOpen::DisplayableObject::ObjectWidthThick;
					id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
					it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					secondaryHiddenByPrimaryHiddenLineWidth = (NXOpen::DisplayableObject::ObjectWidth) convert_to_int(it_tmp->second);
				}
				else if (int_secondaryHiddenByPrimaryHiddenLineWidth == 2) {
					//secondaryHiddenByPrimaryHiddenLineWidth = NXOpen::DisplayableObject::ObjectWidthThin;
					id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
					it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					secondaryHiddenByPrimaryHiddenLineWidth = (NXOpen::DisplayableObject::ObjectWidth) convert_to_int(it_tmp->second);
				}
				else if (int_secondaryHiddenByPrimaryHiddenLineWidth == 5) {
					secondaryHiddenByPrimaryHiddenLineWidth = NXOpen::DisplayableObject::ObjectWidthOne;
				}
				else if (int_secondaryHiddenByPrimaryHiddenLineWidth == 6) {
					secondaryHiddenByPrimaryHiddenLineWidth = NXOpen::DisplayableObject::ObjectWidthTwo;
				}
				else if (int_secondaryHiddenByPrimaryHiddenLineWidth == 7) {
					secondaryHiddenByPrimaryHiddenLineWidth = NXOpen::DisplayableObject::ObjectWidthThree;
				}
				else if (int_secondaryHiddenByPrimaryHiddenLineWidth == 8) {
					secondaryHiddenByPrimaryHiddenLineWidth = NXOpen::DisplayableObject::ObjectWidthFour;
				}
				else if (int_secondaryHiddenByPrimaryHiddenLineWidth == 9) {
					secondaryHiddenByPrimaryHiddenLineWidth = NXOpen::DisplayableObject::ObjectWidthFive;
				}
				else if (int_secondaryHiddenByPrimaryHiddenLineWidth == 10) {
					secondaryHiddenByPrimaryHiddenLineWidth = NXOpen::DisplayableObject::ObjectWidthSix;
				}
				else if (int_secondaryHiddenByPrimaryHiddenLineWidth == 11) {
					secondaryHiddenByPrimaryHiddenLineWidth = NXOpen::DisplayableObject::ObjectWidthSeven;
				}
				else if (int_secondaryHiddenByPrimaryHiddenLineWidth == 12) {
					secondaryHiddenByPrimaryHiddenLineWidth = NXOpen::DisplayableObject::ObjectWidthEight;
				}
				else if (int_secondaryHiddenByPrimaryHiddenLineWidth == 13) {
					secondaryHiddenByPrimaryHiddenLineWidth = NXOpen::DisplayableObject::ObjectWidthNine;
				}
				_preferencesBuilder->ViewStyle()->SecondaryComponents()->SecondaryHiddenByPrimaryCFW()->HiddenCFW()->SetLineWidth(secondaryHiddenByPrimaryHiddenLineWidth);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the color of primary geometry that is hidden by secondary geometry.
	id_name.assign("Drafting_PrimaryHiddenBySecondaryVisibleLineColor");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::NXColor *lineColor;
			lineColor = _preferencesBuilder->ViewStyle()->SecondaryComponents()->PrimaryHiddenBySecondaryCFW()->VisibleCFW()->LineColor();
			int lineColorIndex;
			lineColorIndex = lineColor->Handle();
			ist_id_value.assign(convert_to_string(lineColorIndex));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				lineColorIndex = convert_to_int(soll_id_value);
				lineColor = _workPart->Colors()->Find(lineColorIndex);
				_preferencesBuilder->ViewStyle()->SecondaryComponents()->PrimaryHiddenBySecondaryCFW()->VisibleCFW()->SetLineColor(lineColor);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the line font for primary geometry that is hidden by secondary geometry.
	id_name.assign("Drafting_PrimaryHiddenBySecondaryVisibleLineFont");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::LineFontBuilder::LineFontType primaryHiddenBySecondaryVisibleLineFont;
			primaryHiddenBySecondaryVisibleLineFont = _preferencesBuilder->ViewStyle()->SecondaryComponents()->PrimaryHiddenBySecondaryCFW()->VisibleCFW()->LineFont()->LineFont();
			int int_primaryHiddenBySecondaryVisibleLineFont;
			if (primaryHiddenBySecondaryVisibleLineFont == NXOpen::LineFontBuilder::LineFontTypeNoChange) {
				int_primaryHiddenBySecondaryVisibleLineFont = -2;
			}
			else if (primaryHiddenBySecondaryVisibleLineFont == NXOpen::LineFontBuilder::LineFontTypeInvisible) {
				int_primaryHiddenBySecondaryVisibleLineFont = 0;
			}
			else if (primaryHiddenBySecondaryVisibleLineFont == NXOpen::LineFontBuilder::LineFontTypeSolid) {
				int_primaryHiddenBySecondaryVisibleLineFont = 1;
			}
			else if (primaryHiddenBySecondaryVisibleLineFont == NXOpen::LineFontBuilder::LineFontTypeDashed) {
				int_primaryHiddenBySecondaryVisibleLineFont = 2;
			}
			else if (primaryHiddenBySecondaryVisibleLineFont == NXOpen::LineFontBuilder::LineFontTypePhantom) {
				int_primaryHiddenBySecondaryVisibleLineFont = 3;
			}
			else if (primaryHiddenBySecondaryVisibleLineFont == NXOpen::LineFontBuilder::LineFontTypeCenterline) {
				int_primaryHiddenBySecondaryVisibleLineFont = 4;
			}
			else if (primaryHiddenBySecondaryVisibleLineFont == NXOpen::LineFontBuilder::LineFontTypeDotted) {
				int_primaryHiddenBySecondaryVisibleLineFont = 5;
			}
			else if (primaryHiddenBySecondaryVisibleLineFont == NXOpen::LineFontBuilder::LineFontTypeLongDashed) {
				int_primaryHiddenBySecondaryVisibleLineFont = 6;
			}
			else if (primaryHiddenBySecondaryVisibleLineFont == NXOpen::LineFontBuilder::LineFontTypeDottedDashed) {
				int_primaryHiddenBySecondaryVisibleLineFont = 7;
			}
			else if (primaryHiddenBySecondaryVisibleLineFont == NXOpen::LineFontBuilder::LineFontTypeOriginal) {
				int_primaryHiddenBySecondaryVisibleLineFont = 8;
			}
			ist_id_value.assign(convert_to_string(int_primaryHiddenBySecondaryVisibleLineFont));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_primaryHiddenBySecondaryVisibleLineFont = convert_to_int(soll_id_value);
				if (int_primaryHiddenBySecondaryVisibleLineFont == -2) {
					primaryHiddenBySecondaryVisibleLineFont = NXOpen::LineFontBuilder::LineFontTypeNoChange;
				}
				else if (int_primaryHiddenBySecondaryVisibleLineFont == 0) {
					primaryHiddenBySecondaryVisibleLineFont = NXOpen::LineFontBuilder::LineFontTypeInvisible;
				}
				else if (int_primaryHiddenBySecondaryVisibleLineFont == 1) {
					primaryHiddenBySecondaryVisibleLineFont = NXOpen::LineFontBuilder::LineFontTypeSolid;
				}
				else if (int_primaryHiddenBySecondaryVisibleLineFont == 2) {
					primaryHiddenBySecondaryVisibleLineFont = NXOpen::LineFontBuilder::LineFontTypeDashed;
				}
				else if (int_primaryHiddenBySecondaryVisibleLineFont == 3) {
					primaryHiddenBySecondaryVisibleLineFont = NXOpen::LineFontBuilder::LineFontTypePhantom;
				}
				else if (int_primaryHiddenBySecondaryVisibleLineFont == 4) {
					primaryHiddenBySecondaryVisibleLineFont = NXOpen::LineFontBuilder::LineFontTypeCenterline;
				}
				else if (int_primaryHiddenBySecondaryVisibleLineFont == 5) {
					primaryHiddenBySecondaryVisibleLineFont = NXOpen::LineFontBuilder::LineFontTypeDotted;
				}
				else if (int_primaryHiddenBySecondaryVisibleLineFont == 6) {
					primaryHiddenBySecondaryVisibleLineFont = NXOpen::LineFontBuilder::LineFontTypeLongDashed;
				}
				else if (int_primaryHiddenBySecondaryVisibleLineFont == 7) {
					primaryHiddenBySecondaryVisibleLineFont = NXOpen::LineFontBuilder::LineFontTypeDottedDashed;
				}
				else if (int_primaryHiddenBySecondaryVisibleLineFont == 8) {
					primaryHiddenBySecondaryVisibleLineFont = NXOpen::LineFontBuilder::LineFontTypeOriginal;
				}
				_preferencesBuilder->ViewStyle()->SecondaryComponents()->PrimaryHiddenBySecondaryCFW()->VisibleCFW()->LineFont()->SetLineFont(primaryHiddenBySecondaryVisibleLineFont);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the line width for primary geometry that is hidden by secondary geometry.
	id_name.assign("Drafting_PrimaryHiddenBySecondaryVisibleLineWidth");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::DisplayableObject::ObjectWidth primaryHiddenBySecondaryVisibleLineWidth;
			primaryHiddenBySecondaryVisibleLineWidth = _preferencesBuilder->ViewStyle()->SecondaryComponents()->PrimaryHiddenBySecondaryCFW()->VisibleCFW()->LineWidth();
			int int_primaryHiddenBySecondaryVisibleLineWidth;
			if (primaryHiddenBySecondaryVisibleLineWidth == NXOpen::DisplayableObject::ObjectWidthNormal) {
				int_primaryHiddenBySecondaryVisibleLineWidth = 0;
			}
			else if (primaryHiddenBySecondaryVisibleLineWidth == NXOpen::DisplayableObject::ObjectWidthThick) {
				int_primaryHiddenBySecondaryVisibleLineWidth = 1;
			}
			else if (primaryHiddenBySecondaryVisibleLineWidth == NXOpen::DisplayableObject::ObjectWidthThin) {
				int_primaryHiddenBySecondaryVisibleLineWidth = 2;
			}
			else if (primaryHiddenBySecondaryVisibleLineWidth == NXOpen::DisplayableObject::ObjectWidthOne) {
				int_primaryHiddenBySecondaryVisibleLineWidth = 5;
			}
			else if (primaryHiddenBySecondaryVisibleLineWidth == NXOpen::DisplayableObject::ObjectWidthTwo) {
				int_primaryHiddenBySecondaryVisibleLineWidth = 6;
			}
			else if (primaryHiddenBySecondaryVisibleLineWidth == NXOpen::DisplayableObject::ObjectWidthThree) {
				int_primaryHiddenBySecondaryVisibleLineWidth = 7;
			}
			else if (primaryHiddenBySecondaryVisibleLineWidth == NXOpen::DisplayableObject::ObjectWidthFour) {
				int_primaryHiddenBySecondaryVisibleLineWidth = 8;
			}
			else if (primaryHiddenBySecondaryVisibleLineWidth == NXOpen::DisplayableObject::ObjectWidthFive) {
				int_primaryHiddenBySecondaryVisibleLineWidth = 9;
			}
			else if (primaryHiddenBySecondaryVisibleLineWidth == NXOpen::DisplayableObject::ObjectWidthSix) {
				int_primaryHiddenBySecondaryVisibleLineWidth = 10;
			}
			else if (primaryHiddenBySecondaryVisibleLineWidth == NXOpen::DisplayableObject::ObjectWidthSeven) {
				int_primaryHiddenBySecondaryVisibleLineWidth = 11;
			}
			else if (primaryHiddenBySecondaryVisibleLineWidth == NXOpen::DisplayableObject::ObjectWidthEight) {
				int_primaryHiddenBySecondaryVisibleLineWidth = 12;
			}
			else if (primaryHiddenBySecondaryVisibleLineWidth == NXOpen::DisplayableObject::ObjectWidthNine) {
				int_primaryHiddenBySecondaryVisibleLineWidth = 13;
			}
			string id_name_tmp;
			std::map<const std::string, std::string>::iterator it_tmp;
			if (int_primaryHiddenBySecondaryVisibleLineWidth == 0) {
				id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
				it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				int_primaryHiddenBySecondaryVisibleLineWidth = convert_to_int(it_tmp->second);
			}
			if (int_primaryHiddenBySecondaryVisibleLineWidth == 1) {
				id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
				it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				int_primaryHiddenBySecondaryVisibleLineWidth = convert_to_int(it_tmp->second);
			}
			if (int_primaryHiddenBySecondaryVisibleLineWidth == 2) {
				id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
				it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				int_primaryHiddenBySecondaryVisibleLineWidth = convert_to_int(it_tmp->second);
			}
			//_nx_dpv->soll_dpv_map.find(id_name)->second = convert_to_string(int_primaryHiddenBySecondaryVisibleLineWidth);
			ist_id_value.assign(convert_to_string(int_primaryHiddenBySecondaryVisibleLineWidth));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_primaryHiddenBySecondaryVisibleLineWidth = convert_to_int(soll_id_value);
				if (int_primaryHiddenBySecondaryVisibleLineWidth == 0) {
					//primaryHiddenBySecondaryVisibleLineWidth = NXOpen::DisplayableObject::ObjectWidthNormal;
					id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
					it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					primaryHiddenBySecondaryVisibleLineWidth = (NXOpen::DisplayableObject::ObjectWidth) convert_to_int(it_tmp->second);
				}
				else if (int_primaryHiddenBySecondaryVisibleLineWidth == 1) {
					//primaryHiddenBySecondaryVisibleLineWidth = NXOpen::DisplayableObject::ObjectWidthThick;
					id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
					it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					primaryHiddenBySecondaryVisibleLineWidth = (NXOpen::DisplayableObject::ObjectWidth) convert_to_int(it_tmp->second);
				}
				else if (int_primaryHiddenBySecondaryVisibleLineWidth == 2) {
					//primaryHiddenBySecondaryVisibleLineWidth = NXOpen::DisplayableObject::ObjectWidthThin;
					id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
					it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					primaryHiddenBySecondaryVisibleLineWidth = (NXOpen::DisplayableObject::ObjectWidth) convert_to_int(it_tmp->second);
				}
				else if (int_primaryHiddenBySecondaryVisibleLineWidth == 5) {
					primaryHiddenBySecondaryVisibleLineWidth = NXOpen::DisplayableObject::ObjectWidthOne;
				}
				else if (int_primaryHiddenBySecondaryVisibleLineWidth == 6) {
					primaryHiddenBySecondaryVisibleLineWidth = NXOpen::DisplayableObject::ObjectWidthTwo;
				}
				else if (int_primaryHiddenBySecondaryVisibleLineWidth == 7) {
					primaryHiddenBySecondaryVisibleLineWidth = NXOpen::DisplayableObject::ObjectWidthThree;
				}
				else if (int_primaryHiddenBySecondaryVisibleLineWidth == 8) {
					primaryHiddenBySecondaryVisibleLineWidth = NXOpen::DisplayableObject::ObjectWidthFour;
				}
				else if (int_primaryHiddenBySecondaryVisibleLineWidth == 9) {
					primaryHiddenBySecondaryVisibleLineWidth = NXOpen::DisplayableObject::ObjectWidthFive;
				}
				else if (int_primaryHiddenBySecondaryVisibleLineWidth == 10) {
					primaryHiddenBySecondaryVisibleLineWidth = NXOpen::DisplayableObject::ObjectWidthSix;
				}
				else if (int_primaryHiddenBySecondaryVisibleLineWidth == 11) {
					primaryHiddenBySecondaryVisibleLineWidth = NXOpen::DisplayableObject::ObjectWidthSeven;
				}
				else if (int_primaryHiddenBySecondaryVisibleLineWidth == 12) {
					primaryHiddenBySecondaryVisibleLineWidth = NXOpen::DisplayableObject::ObjectWidthEight;
				}
				else if (int_primaryHiddenBySecondaryVisibleLineWidth == 13) {
					primaryHiddenBySecondaryVisibleLineWidth = NXOpen::DisplayableObject::ObjectWidthNine;
				}
				_preferencesBuilder->ViewStyle()->SecondaryComponents()->PrimaryHiddenBySecondaryCFW()->VisibleCFW()->SetLineWidth(primaryHiddenBySecondaryVisibleLineWidth);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the color of hidden primary geometry that is hidden by secondary geometry.
	id_name.assign("Drafting_PrimaryHiddenBySecondaryHiddenLineColor");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::NXColor *lineColor;
			lineColor = _preferencesBuilder->ViewStyle()->SecondaryComponents()->PrimaryHiddenBySecondaryCFW()->HiddenCFW()->LineColor();
			int lineColorIndex;
			lineColorIndex = lineColor->Handle();
			ist_id_value.assign(convert_to_string(lineColorIndex));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				lineColorIndex = convert_to_int(soll_id_value);
				lineColor = _workPart->Colors()->Find(lineColorIndex);
				_preferencesBuilder->ViewStyle()->SecondaryComponents()->PrimaryHiddenBySecondaryCFW()->HiddenCFW()->SetLineColor(lineColor);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the line font for hidden primary geometry that is hidden by secondary geometry.
	id_name.assign("Drafting_PrimaryHiddenBySecondaryHiddenLineFont");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::LineFontBuilder::LineFontType primaryHiddenBySecondaryHiddenLineFont;
			primaryHiddenBySecondaryHiddenLineFont = _preferencesBuilder->ViewStyle()->SecondaryComponents()->PrimaryHiddenBySecondaryCFW()->HiddenCFW()->LineFont()->LineFont();
			int int_primaryHiddenBySecondaryHiddenLineFont;
			if (primaryHiddenBySecondaryHiddenLineFont == NXOpen::LineFontBuilder::LineFontTypeNoChange) {
				int_primaryHiddenBySecondaryHiddenLineFont = -2;
			}
			else if (primaryHiddenBySecondaryHiddenLineFont == NXOpen::LineFontBuilder::LineFontTypeOriginal) {
				int_primaryHiddenBySecondaryHiddenLineFont = -1;
			}
			else if (primaryHiddenBySecondaryHiddenLineFont == NXOpen::LineFontBuilder::LineFontTypeInvisible) {
				int_primaryHiddenBySecondaryHiddenLineFont = 0;
			}
			else if (primaryHiddenBySecondaryHiddenLineFont == NXOpen::LineFontBuilder::LineFontTypeSolid) {
				int_primaryHiddenBySecondaryHiddenLineFont = 1;
			}
			else if (primaryHiddenBySecondaryHiddenLineFont == NXOpen::LineFontBuilder::LineFontTypeDashed) {
				int_primaryHiddenBySecondaryHiddenLineFont = 2;
			}
			else if (primaryHiddenBySecondaryHiddenLineFont == NXOpen::LineFontBuilder::LineFontTypePhantom) {
				int_primaryHiddenBySecondaryHiddenLineFont = 3;
			}
			else if (primaryHiddenBySecondaryHiddenLineFont == NXOpen::LineFontBuilder::LineFontTypeCenterline) {
				int_primaryHiddenBySecondaryHiddenLineFont = 4;
			}
			else if (primaryHiddenBySecondaryHiddenLineFont == NXOpen::LineFontBuilder::LineFontTypeDotted) {
				int_primaryHiddenBySecondaryHiddenLineFont = 5;
			}
			else if (primaryHiddenBySecondaryHiddenLineFont == NXOpen::LineFontBuilder::LineFontTypeLongDashed) {
				int_primaryHiddenBySecondaryHiddenLineFont = 6;
			}
			else if (primaryHiddenBySecondaryHiddenLineFont == NXOpen::LineFontBuilder::LineFontTypeDottedDashed) {
				int_primaryHiddenBySecondaryHiddenLineFont = 7;
			}
			ist_id_value.assign(convert_to_string(int_primaryHiddenBySecondaryHiddenLineFont));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_primaryHiddenBySecondaryHiddenLineFont = convert_to_int(soll_id_value);
				if (int_primaryHiddenBySecondaryHiddenLineFont == -2) {
					primaryHiddenBySecondaryHiddenLineFont = NXOpen::LineFontBuilder::LineFontTypeNoChange;
				}
				else if (int_primaryHiddenBySecondaryHiddenLineFont == -1) {
					primaryHiddenBySecondaryHiddenLineFont = NXOpen::LineFontBuilder::LineFontTypeOriginal;
				}
				else if (int_primaryHiddenBySecondaryHiddenLineFont == 0) {
					primaryHiddenBySecondaryHiddenLineFont = NXOpen::LineFontBuilder::LineFontTypeInvisible;
				}
				else if (int_primaryHiddenBySecondaryHiddenLineFont == 1) {
					primaryHiddenBySecondaryHiddenLineFont = NXOpen::LineFontBuilder::LineFontTypeSolid;
				}
				else if (int_primaryHiddenBySecondaryHiddenLineFont == 2) {
					primaryHiddenBySecondaryHiddenLineFont = NXOpen::LineFontBuilder::LineFontTypeDashed;
				}
				else if (int_primaryHiddenBySecondaryHiddenLineFont == 3) {
					primaryHiddenBySecondaryHiddenLineFont = NXOpen::LineFontBuilder::LineFontTypePhantom;
				}
				else if (int_primaryHiddenBySecondaryHiddenLineFont == 4) {
					primaryHiddenBySecondaryHiddenLineFont = NXOpen::LineFontBuilder::LineFontTypeCenterline;
				}
				else if (int_primaryHiddenBySecondaryHiddenLineFont == 5) {
					primaryHiddenBySecondaryHiddenLineFont = NXOpen::LineFontBuilder::LineFontTypeDotted;
				}
				else if (int_primaryHiddenBySecondaryHiddenLineFont == 6) {
					primaryHiddenBySecondaryHiddenLineFont = NXOpen::LineFontBuilder::LineFontTypeLongDashed;
				}
				else if (int_primaryHiddenBySecondaryHiddenLineFont == 7) {
					primaryHiddenBySecondaryHiddenLineFont = NXOpen::LineFontBuilder::LineFontTypeDottedDashed;
				}
				_preferencesBuilder->ViewStyle()->SecondaryComponents()->PrimaryHiddenBySecondaryCFW()->HiddenCFW()->LineFont()->SetLineFont(primaryHiddenBySecondaryHiddenLineFont);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the line width for hidden primary geometry that is hidden by secondary geometry.
	id_name.assign("Drafting_PrimaryHiddenBySecondaryHiddenLineWidth");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::DisplayableObject::ObjectWidth primaryHiddenBySecondaryHiddenLineWidth;
			primaryHiddenBySecondaryHiddenLineWidth = _preferencesBuilder->ViewStyle()->SecondaryComponents()->PrimaryHiddenBySecondaryCFW()->HiddenCFW()->LineWidth();
			int int_primaryHiddenBySecondaryHiddenLineWidth;
			if (primaryHiddenBySecondaryHiddenLineWidth == NXOpen::DisplayableObject::ObjectWidthNormal) {
				int_primaryHiddenBySecondaryHiddenLineWidth = 0;
			}
			else if (primaryHiddenBySecondaryHiddenLineWidth == NXOpen::DisplayableObject::ObjectWidthThick) {
				int_primaryHiddenBySecondaryHiddenLineWidth = 1;
			}
			else if (primaryHiddenBySecondaryHiddenLineWidth == NXOpen::DisplayableObject::ObjectWidthThin) {
				int_primaryHiddenBySecondaryHiddenLineWidth = 2;
			}
			else if (primaryHiddenBySecondaryHiddenLineWidth == NXOpen::DisplayableObject::ObjectWidthOne) {
				int_primaryHiddenBySecondaryHiddenLineWidth = 5;
			}
			else if (primaryHiddenBySecondaryHiddenLineWidth == NXOpen::DisplayableObject::ObjectWidthTwo) {
				int_primaryHiddenBySecondaryHiddenLineWidth = 6;
			}
			else if (primaryHiddenBySecondaryHiddenLineWidth == NXOpen::DisplayableObject::ObjectWidthThree) {
				int_primaryHiddenBySecondaryHiddenLineWidth = 7;
			}
			else if (primaryHiddenBySecondaryHiddenLineWidth == NXOpen::DisplayableObject::ObjectWidthFour) {
				int_primaryHiddenBySecondaryHiddenLineWidth = 8;
			}
			else if (primaryHiddenBySecondaryHiddenLineWidth == NXOpen::DisplayableObject::ObjectWidthFive) {
				int_primaryHiddenBySecondaryHiddenLineWidth = 9;
			}
			else if (primaryHiddenBySecondaryHiddenLineWidth == NXOpen::DisplayableObject::ObjectWidthSix) {
				int_primaryHiddenBySecondaryHiddenLineWidth = 10;
			}
			else if (primaryHiddenBySecondaryHiddenLineWidth == NXOpen::DisplayableObject::ObjectWidthSeven) {
				int_primaryHiddenBySecondaryHiddenLineWidth = 11;
			}
			else if (primaryHiddenBySecondaryHiddenLineWidth == NXOpen::DisplayableObject::ObjectWidthEight) {
				int_primaryHiddenBySecondaryHiddenLineWidth = 12;
			}
			else if (primaryHiddenBySecondaryHiddenLineWidth == NXOpen::DisplayableObject::ObjectWidthNine) {
				int_primaryHiddenBySecondaryHiddenLineWidth = 13;
			}
			string id_name_tmp;
			std::map<const std::string, std::string>::iterator it_tmp;
			if (int_primaryHiddenBySecondaryHiddenLineWidth == 0) {
				id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
				it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				int_primaryHiddenBySecondaryHiddenLineWidth = convert_to_int(it_tmp->second);
			}
			if (int_primaryHiddenBySecondaryHiddenLineWidth == 1) {
				id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
				it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				int_primaryHiddenBySecondaryHiddenLineWidth = convert_to_int(it_tmp->second);
			}
			if (int_primaryHiddenBySecondaryHiddenLineWidth == 2) {
				id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
				it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				int_primaryHiddenBySecondaryHiddenLineWidth = convert_to_int(it_tmp->second);
			}
			//_nx_dpv->soll_dpv_map.find(id_name)->second = convert_to_string(int_primaryHiddenBySecondaryHiddenLineWidth);
			ist_id_value.assign(convert_to_string(int_primaryHiddenBySecondaryHiddenLineWidth));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_primaryHiddenBySecondaryHiddenLineWidth = convert_to_int(soll_id_value);
				if (int_primaryHiddenBySecondaryHiddenLineWidth == 0) {
					//primaryHiddenBySecondaryHiddenLineWidth = NXOpen::DisplayableObject::ObjectWidthNormal;
					id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
					it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					primaryHiddenBySecondaryHiddenLineWidth = (NXOpen::DisplayableObject::ObjectWidth) convert_to_int(it_tmp->second);
				}
				else if (int_primaryHiddenBySecondaryHiddenLineWidth == 1) {
					//primaryHiddenBySecondaryHiddenLineWidth = NXOpen::DisplayableObject::ObjectWidthThick;
					id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
					it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					primaryHiddenBySecondaryHiddenLineWidth = (NXOpen::DisplayableObject::ObjectWidth) convert_to_int(it_tmp->second);
				}
				else if (int_primaryHiddenBySecondaryHiddenLineWidth == 2) {
					//primaryHiddenBySecondaryHiddenLineWidth = NXOpen::DisplayableObject::ObjectWidthThin;
					id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
					it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					primaryHiddenBySecondaryHiddenLineWidth = (NXOpen::DisplayableObject::ObjectWidth) convert_to_int(it_tmp->second);
				}
				else if (int_primaryHiddenBySecondaryHiddenLineWidth == 5) {
					primaryHiddenBySecondaryHiddenLineWidth = NXOpen::DisplayableObject::ObjectWidthOne;
				}
				else if (int_primaryHiddenBySecondaryHiddenLineWidth == 6) {
					primaryHiddenBySecondaryHiddenLineWidth = NXOpen::DisplayableObject::ObjectWidthTwo;
				}
				else if (int_primaryHiddenBySecondaryHiddenLineWidth == 7) {
					primaryHiddenBySecondaryHiddenLineWidth = NXOpen::DisplayableObject::ObjectWidthThree;
				}
				else if (int_primaryHiddenBySecondaryHiddenLineWidth == 8) {
					primaryHiddenBySecondaryHiddenLineWidth = NXOpen::DisplayableObject::ObjectWidthFour;
				}
				else if (int_primaryHiddenBySecondaryHiddenLineWidth == 9) {
					primaryHiddenBySecondaryHiddenLineWidth = NXOpen::DisplayableObject::ObjectWidthFive;
				}
				else if (int_primaryHiddenBySecondaryHiddenLineWidth == 10) {
					primaryHiddenBySecondaryHiddenLineWidth = NXOpen::DisplayableObject::ObjectWidthSix;
				}
				else if (int_primaryHiddenBySecondaryHiddenLineWidth == 11) {
					primaryHiddenBySecondaryHiddenLineWidth = NXOpen::DisplayableObject::ObjectWidthSeven;
				}
				else if (int_primaryHiddenBySecondaryHiddenLineWidth == 12) {
					primaryHiddenBySecondaryHiddenLineWidth = NXOpen::DisplayableObject::ObjectWidthEight;
				}
				else if (int_primaryHiddenBySecondaryHiddenLineWidth == 13) {
					primaryHiddenBySecondaryHiddenLineWidth = NXOpen::DisplayableObject::ObjectWidthNine;
				}
				_preferencesBuilder->ViewStyle()->SecondaryComponents()->PrimaryHiddenBySecondaryCFW()->HiddenCFW()->SetLineWidth(primaryHiddenBySecondaryHiddenLineWidth);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- STOPP - %s --- \n", routineName.c_str());
}

/*
File - Preferences - Drafting - View - Common - Threads -> Repair these preferences.
*/
void repair_DraftingStandard_View_Common_Threads_prefs(NXOpen::Drafting::PreferencesBuilder *_preferencesBuilder, en_nx_dpv* _nx_dpv, Session * _theSession, Part* _workPart) {
	routineName.assign("repair_DraftingStandard_View_Common_Threads_prefs");
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- START - %s --- \n", routineName.c_str());
	
	//This option specifies the standard for thread representations.
	if (_nx_dpv->usedUnitValue.compare("1") == 0) {
		id_name.assign("Drafting_threadMethod_MU");
	}
	else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
		id_name.assign("Drafting_threadMethod_EU");
	}
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			int standardOptionData;
			standardOptionData = _preferencesBuilder->ViewStyle()->ViewStyleThreads()->StandardData();
			ist_id_value.assign(convert_to_string(standardOptionData));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				standardOptionData = convert_to_int(soll_id_value);
				_preferencesBuilder->ViewStyle()->ViewStyleThreads()->SetStandardData(standardOptionData);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the minimum distance (in drawing coordinates) to which two points 
	//which represent crests of a thread are drawn. It is also used to control the minimum distance 
	//between a thread and it's defining geometry such as edges, silhouettes, or section edges of 
	//the cylindrical face or chamfered face.
	id_name.assign("Drafting_threadMinAppPitch");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double minimumPitchFieldData;
			minimumPitchFieldData = _preferencesBuilder->ViewStyle()->ViewStyleThreads()->MinimumPitchFieldData();
			ist_id_value.assign(convert_to_string(minimumPitchFieldData));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				minimumPitchFieldData = convert_to_double(soll_id_value);
				_preferencesBuilder->ViewStyle()->ViewStyleThreads()->SetMinimumPitchFieldData(minimumPitchFieldData);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the color of visible thread curves.
	id_name.assign("Drafting_overrideVisibleThreadColor");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::NXColor *overrideVisibleThreadColor;
			overrideVisibleThreadColor = _preferencesBuilder->ViewStyle()->ViewStyleThreads()->OverrideVisibleThreadColor();
			int overrideVisibleThreadColorIndex;
			overrideVisibleThreadColorIndex = overrideVisibleThreadColor->Handle();
			ist_id_value.assign(convert_to_string(overrideVisibleThreadColorIndex));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				overrideVisibleThreadColorIndex = convert_to_int(soll_id_value);
				overrideVisibleThreadColor = _workPart->Colors()->Find(overrideVisibleThreadColorIndex);
				_preferencesBuilder->ViewStyle()->ViewStyleThreads()->SetOverrideVisibleThreadColor(overrideVisibleThreadColor);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not true hidden line rendering will be performed on symbolic threads.
	id_name.assign("Drafting_threadTrueHiddenLine");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			bool trueHiddenLineToggle;
			trueHiddenLineToggle = _preferencesBuilder->ViewStyle()->ViewStyleThreads()->TrueHiddenLine();
			int int_trueHiddenLineToggle;
			int_trueHiddenLineToggle = (int)trueHiddenLineToggle;
			ist_id_value.assign(convert_to_string(int_trueHiddenLineToggle));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_trueHiddenLineToggle = convert_to_int(soll_id_value);
				trueHiddenLineToggle = false;
				if (int_trueHiddenLineToggle == 1) {
					trueHiddenLineToggle = true;
				}
				_preferencesBuilder->ViewStyle()->ViewStyleThreads()->SetTrueHiddenLine(trueHiddenLineToggle);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- STOPP - %s --- \n", routineName.c_str());
}

/*
File - Preferences - Drafting - View - Common - PMI -> Repair these preferences.
*/
void repair_DraftingStandard_View_Common_PMI_prefs(NXOpen::Drafting::PreferencesBuilder *_preferencesBuilder, en_nx_dpv* _nx_dpv, Session * _theSession, Part* _workPart) {
	routineName.assign("repair_DraftingStandard_View_Common_PMI_prefs");
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- START - %s --- \n", routineName.c_str());

	//When inheriting PMI onto a drawing, this option determines which PMI objects are inherited based 
	//on whether or not the objects they reference are included in the active reference set.
	id_name.assign("Drafting_inheritPmiReferenceSetBehavior");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Preferences::ReferenceSetBehavior pmiOption;
			pmiOption = _preferencesBuilder->ViewStyle()->ViewStyleInheritPmi()->ReferenceSetBehavior();
			int int_pmiOption;
			int_pmiOption = (int)pmiOption;
			ist_id_value.assign(convert_to_string(int_pmiOption));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_pmiOption = convert_to_int(soll_id_value);
				pmiOption = (NXOpen::Preferences::ReferenceSetBehavior)int_pmiOption;
				_preferencesBuilder->ViewStyle()->ViewStyleInheritPmi()->SetReferenceSetBehavior(pmiOption);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether any PMI are inherited from the model view, and if so, 
	//if all PMI from the model view should be inherited, or only those whose planes are parallel 
	//to the drawing sheet should get inherited.
	id_name.assign("Drafting_inheritPmi");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Preferences::PmiOption pmiOption;
			pmiOption = _preferencesBuilder->ViewStyle()->ViewStyleInheritPmi()->Pmi();
			int int_pmiOption;
			int_pmiOption = (int)pmiOption;
			ist_id_value.assign(convert_to_string(int_pmiOption));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_pmiOption = convert_to_int(soll_id_value);
				pmiOption = (NXOpen::Preferences::PmiOption)int_pmiOption;
				_preferencesBuilder->ViewStyle()->ViewStyleInheritPmi()->SetPmi(pmiOption);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option controls whether PMI are inherited within a view or onto the drawing sheet.
	id_name.assign("Drafting_inheritPmiOntoDrawing");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			bool pmiToDrawingToggle;
			pmiToDrawingToggle = _preferencesBuilder->ViewStyle()->ViewStyleInheritPmi()->PmiToDrawing();
			ist_id_value.assign(convert_to_string(pmiToDrawingToggle));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				pmiToDrawingToggle = convert_to_bool(soll_id_value);
				_preferencesBuilder->ViewStyle()->ViewStyleInheritPmi()->SetPmiToDrawing(pmiToDrawingToggle);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//When a sketch has been used to create a Revolve feature, this option determines whether or not 
	//PMI dimensions from the sketch should be inherited to a view that is parallel to the axis of 
	//the Revolve feature (but not necessarily parallel to the sketch plane).
	id_name.assign("Drafting_pmiDimensionFromRevolved");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			bool pmiFromRevolvedToggle;
			pmiFromRevolvedToggle = _preferencesBuilder->ViewStyle()->ViewStyleInheritPmi()->PmiFromRevolved();
			ist_id_value.assign(convert_to_string(pmiFromRevolvedToggle));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				pmiFromRevolvedToggle = convert_to_bool(soll_id_value);
				_preferencesBuilder->ViewStyle()->ViewStyleInheritPmi()->SetPmiFromRevolved(pmiFromRevolvedToggle);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option controls whether crosshatch from PMI Section View should be inherited to drawing.
	id_name.assign("Drafting_crosshatchInheritedPMILightweightSectionView");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			bool crosshatch;
			crosshatch = _preferencesBuilder->ViewStyle()->ViewStyleInheritPmi()->CrosshatchPmiLwsv();
			ist_id_value.assign(convert_to_string(crosshatch));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				crosshatch = convert_to_bool(soll_id_value);
				_preferencesBuilder->ViewStyle()->ViewStyleInheritPmi()->SetCrosshatchPmiLwsv(crosshatch);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}
	
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- STOPP - %s --- \n", routineName.c_str());
}

/*
File - Preferences - Drafting - View - Common - Shading -> Repair these preferences.
*/
void  repair_DraftingStandard_View_Common_Shading_prefs(NXOpen::Drafting::PreferencesBuilder *_preferencesBuilder, en_nx_dpv* _nx_dpv, Session * _theSession, Part* _workPart) {
	routineName.assign("repair_DraftingStandard_View_Common_Shading_prefs");
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- START - %s --- \n", routineName.c_str());

	//This option specifies the general display style preference for new member views.
	id_name.assign("Drafting_viewRenderingStyle");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Preferences::ShadingRenderingStyleOption renderingStyleOption;
			renderingStyleOption = _preferencesBuilder->ViewStyle()->ViewStyleShading()->RenderingStyle();
			int int_renderingStyleOption;
			//int_renderingStyleOption = (int)renderingStyleOption;
			if (renderingStyleOption == NXOpen::Preferences::ShadingRenderingStyleOptionFullyShaded) {
				int_renderingStyleOption = 2;
			} else if (renderingStyleOption == NXOpen::Preferences::ShadingRenderingStyleOptionPartiallyShaded) {
				int_renderingStyleOption = 1;
			} else if (renderingStyleOption == NXOpen::Preferences::ShadingRenderingStyleOptionWireframe) {
				int_renderingStyleOption = 0;
			}
			ist_id_value.assign(convert_to_string(int_renderingStyleOption));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_renderingStyleOption = convert_to_int(soll_id_value);
				//renderingStyleOption = (NXOpen::Preferences::ShadingRenderingStyleOption) int_renderingStyleOption;
				if (int_renderingStyleOption == 2) {
					renderingStyleOption = NXOpen::Preferences::ShadingRenderingStyleOptionFullyShaded;
				}
				else if (int_renderingStyleOption == 1) {
					renderingStyleOption = NXOpen::Preferences::ShadingRenderingStyleOptionPartiallyShaded;
				}
				else if (int_renderingStyleOption == 0) {
					renderingStyleOption = NXOpen::Preferences::ShadingRenderingStyleOptionWireframe;
				}
				_preferencesBuilder->ViewStyle()->ViewStyleShading()->SetRenderingStyle(renderingStyleOption);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the color of visible wireframe objects in shaded member views.
	id_name.assign("Drafting_overrideVisibleWireframeColor");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::NXColor *visibleWireframeColor;
			visibleWireframeColor = _preferencesBuilder->ViewStyle()->ViewStyleShading()->VisibleWireframeColor();
			int visibleWireframeColorIndex;
			visibleWireframeColorIndex = visibleWireframeColor->Handle();
			ist_id_value.assign(convert_to_string(visibleWireframeColorIndex));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				visibleWireframeColorIndex = convert_to_int(soll_id_value);
				visibleWireframeColor = _workPart->Colors()->Find(visibleWireframeColorIndex);
				_preferencesBuilder->ViewStyle()->ViewStyleShading()->SetVisibleWireframeColor(visibleWireframeColor);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the color of hidden wireframe objects in shaded member views.
	id_name.assign("Drafting_overrideHiddenWireframeColor");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::NXColor *hiddenWireframeColor;
			hiddenWireframeColor = _preferencesBuilder->ViewStyle()->ViewStyleShading()->HiddenWireframeColor();
			int hiddenWireframeColorIndex;
			hiddenWireframeColorIndex = hiddenWireframeColor->Handle();
			ist_id_value.assign(convert_to_string(hiddenWireframeColorIndex));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				hiddenWireframeColorIndex = convert_to_int(soll_id_value);
				hiddenWireframeColor = _workPart->Colors()->Find(hiddenWireframeColorIndex);
				_preferencesBuilder->ViewStyle()->ViewStyleShading()->SetHiddenWireframeColor(hiddenWireframeColor);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the color of shaded cut faces.
	id_name.assign("Drafting_shadedCutFaceColor");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::NXColor *cutFaceColor;
			cutFaceColor = _preferencesBuilder->ViewStyle()->ViewStyleShading()->CutFaceColor();
			int cutFaceColorIndex;
			cutFaceColorIndex = cutFaceColor->Handle();
			ist_id_value.assign(convert_to_string(cutFaceColorIndex));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				cutFaceColorIndex = convert_to_int(soll_id_value);
				cutFaceColor = _workPart->Colors()->Find(cutFaceColorIndex);
				_preferencesBuilder->ViewStyle()->ViewStyleShading()->SetCutFaceColor(cutFaceColor);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not lighting should be applied to both the front 
	//and backsides of faces. Two-sided light is useful for objects such as sheet bodies, 
	//which without this feature could generate an invalid display.
	id_name.assign("Drafting_viewShadedTwoSidedLight");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			bool twoSidedLightToggle;
			twoSidedLightToggle = _preferencesBuilder->ViewStyle()->ViewStyleShading()->TwoSidedLight();
			int int_twoSidedLightToggle;
			int_twoSidedLightToggle = (int)twoSidedLightToggle;
			ist_id_value.assign(convert_to_string(int_twoSidedLightToggle));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_twoSidedLightToggle = convert_to_int(soll_id_value);
				twoSidedLightToggle = false;
				if (int_twoSidedLightToggle == 1) {
					twoSidedLightToggle = true;
				}
				_preferencesBuilder->ViewStyle()->ViewStyleShading()->SetTwoSidedLight(twoSidedLightToggle);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the intensity of highlights added to shaded surfaces, making them appear shiny.
	id_name.assign("Drafting_viewShadedShininess");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double shininessScaleData;
			shininessScaleData = _preferencesBuilder->ViewStyle()->ViewStyleShading()->ShininessScale();
			ist_id_value.assign(convert_to_string(shininessScaleData));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				shininessScaleData = convert_to_double(soll_id_value);
				_preferencesBuilder->ViewStyle()->ViewStyleShading()->SetShininessScale(shininessScaleData);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the shading tolerance preference for new member views.
	id_name.assign("Drafting_viewShadedTolerance");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Preferences::ShadingToleranceOption shadeToleranceOption;
			shadeToleranceOption = _preferencesBuilder->ViewStyle()->ViewStyleShading()->ShadeTolerance();
			int int_shadeToleranceOption;
			int_shadeToleranceOption = (int)shadeToleranceOption;
			ist_id_value.assign(convert_to_string(int_shadeToleranceOption));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_shadeToleranceOption = convert_to_int(soll_id_value);
				shadeToleranceOption = (NXOpen::Preferences::ShadingToleranceOption)int_shadeToleranceOption;
				_preferencesBuilder->ViewStyle()->ViewStyleShading()->SetShadeTolerance(shadeToleranceOption);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option controls the faceted representation by considering the curved edge approximation 
	//of the object. This option has been found to be very useful at sealing the gaps between faces. 
	//The recommended value is 0.005. A smaller tolerance value results in a finer display, but also 
	//causes slower performance. The value is interpreted to be in the units of the part. The default 
	//value is specified in inches.
	id_name.assign("Drafting_viewShadedEdgeTolerance");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double edgeToleranceData;
			edgeToleranceData = _preferencesBuilder->ViewStyle()->ViewStyleShading()->EdgeTolerance();
			ist_id_value.assign(convert_to_string(edgeToleranceData));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				edgeToleranceData = convert_to_double(soll_id_value);
				_preferencesBuilder->ViewStyle()->ViewStyleShading()->SetEdgeTolerance(edgeToleranceData);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option controls the faceted representation of the object by considering the surface approximation. 
	//The recommended value is 0.005. A smaller tolerance value results in a finer display, but also causes 
	//slower performance. The value is interpreted to be in the units of the part. The default value is specified in inches.
	id_name.assign("Drafting_viewShadedFaceTolerance");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double faceToleranceData;
			faceToleranceData = _preferencesBuilder->ViewStyle()->ViewStyleShading()->FaceTolerance();
			ist_id_value.assign(convert_to_string(faceToleranceData));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				faceToleranceData = convert_to_double(soll_id_value);
				_preferencesBuilder->ViewStyle()->ViewStyleShading()->SetFaceTolerance(faceToleranceData);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option is beneficial for faces with high curvature (sharp corners). Recommended setting is 3-15 degrees.
	id_name.assign("Drafting_viewShadedAngleTolerance");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double angleToleranceData;
			angleToleranceData = _preferencesBuilder->ViewStyle()->ViewStyleShading()->AngleTolerance();
			ist_id_value.assign(convert_to_string(angleToleranceData));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				angleToleranceData = convert_to_double(soll_id_value);
				_preferencesBuilder->ViewStyle()->ViewStyleShading()->SetAngleTolerance(angleToleranceData);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- STOPP - %s --- \n", routineName.c_str());
}

/*
File - Preferences - Drafting - View - Common - Smooth Edges -> Repair these preferences.
*/
void repair_DraftingStandard_View_Common_SmoothEdges_prefs(NXOpen::Drafting::PreferencesBuilder *_preferencesBuilder, en_nx_dpv* _nx_dpv, Session * _theSession, Part* _workPart) {
	routineName.assign("repair_DraftingStandard_View_Common_SmoothEdges_prefs");
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- START - %s --- \n", routineName.c_str());

	//This option determines whether or not smooth edges should be displayed. Smooth edges are those whose 
	//adjacent faces have the same surface tangent at the edge where they meet.
	id_name.assign("Drafting_smoothEdge");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			bool smoothEdgesToggle;
			smoothEdgesToggle = _preferencesBuilder->ViewStyle()->ViewStyleSmoothEdges()->SmoothEdge();
			int int_smoothEdgesToggle;
			int_smoothEdgesToggle = (int)smoothEdgesToggle;
			ist_id_value.assign(convert_to_string(int_smoothEdgesToggle));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_smoothEdgesToggle = convert_to_int(soll_id_value);
				smoothEdgesToggle = false;
				if (int_smoothEdgesToggle == 1) {
					smoothEdgesToggle = true;
				}
				_preferencesBuilder->ViewStyle()->ViewStyleSmoothEdges()->SetSmoothEdge(smoothEdgesToggle);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the color of smooth edges.
	id_name.assign("Drafting_smoothEdgeColor");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::NXColor *color;
			color = _preferencesBuilder->ViewStyle()->ViewStyleSmoothEdges()->Color();
			int colorIndex;
			colorIndex = color->Handle();
			ist_id_value.assign(convert_to_string(colorIndex));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				colorIndex = convert_to_int(soll_id_value);
				color = _workPart->Colors()->Find(colorIndex);
				_preferencesBuilder->ViewStyle()->ViewStyleSmoothEdges()->SetColor(color);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the line font for smooth edges. 
	//The option Original means that the line font is inherited from the line font of the model.
	id_name.assign("Drafting_smoothEdgeFont");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Preferences::Font smoothEdgeFont;
			smoothEdgeFont = _preferencesBuilder->ViewStyle()->ViewStyleSmoothEdges()->Font();
			int int_smoothEdgeFont;
			if (smoothEdgeFont == NXOpen::Preferences::FontInvisible) {
				int_smoothEdgeFont = 0;
			}
			else if (smoothEdgeFont == NXOpen::Preferences::FontSolid) {
				int_smoothEdgeFont = 1;
			}
			else if (smoothEdgeFont == NXOpen::Preferences::FontDashed) {
				int_smoothEdgeFont = 2;
			}
			else if (smoothEdgeFont == NXOpen::Preferences::FontPhantom) {
				int_smoothEdgeFont = 3;
			}
			else if (smoothEdgeFont == NXOpen::Preferences::FontCenterline) {
				int_smoothEdgeFont = 4;
			}
			else if (smoothEdgeFont == NXOpen::Preferences::FontDotted) {
				int_smoothEdgeFont = 5;
			}
			else if (smoothEdgeFont == NXOpen::Preferences::FontLongDashed) {
				int_smoothEdgeFont = 6;
			}
			else if (smoothEdgeFont == NXOpen::Preferences::FontDottedDashed) {
				int_smoothEdgeFont = 7;
			}
			else if (smoothEdgeFont == NXOpen::Preferences::FontOriginal) {
				int_smoothEdgeFont = 8;
			}
			ist_id_value.assign(convert_to_string(int_smoothEdgeFont));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_smoothEdgeFont = convert_to_int(soll_id_value);
				if (int_smoothEdgeFont == 0) {
					smoothEdgeFont = NXOpen::Preferences::FontInvisible;
				}
				else if (int_smoothEdgeFont == 1) {
					smoothEdgeFont = NXOpen::Preferences::FontSolid;
				}
				else if (int_smoothEdgeFont == 2) {
					smoothEdgeFont = NXOpen::Preferences::FontDashed;
				}
				else if (int_smoothEdgeFont == 3) {
					smoothEdgeFont = NXOpen::Preferences::FontPhantom;
				}
				else if (int_smoothEdgeFont == 4) {
					smoothEdgeFont = NXOpen::Preferences::FontCenterline;
				}
				else if (int_smoothEdgeFont == 5) {
					smoothEdgeFont = NXOpen::Preferences::FontDotted;
				}
				else if (int_smoothEdgeFont == 6) {
					smoothEdgeFont = NXOpen::Preferences::FontLongDashed;
				}
				else if (int_smoothEdgeFont == 7) {
					smoothEdgeFont = NXOpen::Preferences::FontDottedDashed;
				}
				else if (int_smoothEdgeFont == 8) {
					smoothEdgeFont = NXOpen::Preferences::FontOriginal;
				}
				_preferencesBuilder->ViewStyle()->ViewStyleSmoothEdges()->SetFont(smoothEdgeFont);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the line width for smooth edges. The option Original means that 
	//the line width is inherited from the line width of the model.
	id_name.assign("Drafting_smoothEdgeWidth");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Preferences::Width smoothEdgeWidth;
			smoothEdgeWidth = _preferencesBuilder->ViewStyle()->ViewStyleSmoothEdges()->Width();
			int int_smoothEdgeWidth;
			if (smoothEdgeWidth == NXOpen::Preferences::WidthOriginal) {
				int_smoothEdgeWidth = 0;
			}
			else if (smoothEdgeWidth == NXOpen::Preferences::WidthThin) {
				int_smoothEdgeWidth = 1;
			}
			else if (smoothEdgeWidth == NXOpen::Preferences::WidthNormal) {
				int_smoothEdgeWidth = 2;
			}
			else if (smoothEdgeWidth == NXOpen::Preferences::WidthThick) {
				int_smoothEdgeWidth = 3;
			}
			else if (smoothEdgeWidth == NXOpen::Preferences::WidthOne) {
				int_smoothEdgeWidth = 5;
			}
			else if (smoothEdgeWidth == NXOpen::Preferences::WidthTwo) {
				int_smoothEdgeWidth = 6;
			}
			else if (smoothEdgeWidth == NXOpen::Preferences::WidthThree) {
				int_smoothEdgeWidth = 7;
			}
			else if (smoothEdgeWidth == NXOpen::Preferences::WidthFour) {
				int_smoothEdgeWidth = 8;
			}
			else if (smoothEdgeWidth == NXOpen::Preferences::WidthFive) {
				int_smoothEdgeWidth = 9;
			}
			else if (smoothEdgeWidth == NXOpen::Preferences::WidthSix) {
				int_smoothEdgeWidth = 10;
			}
			else if (smoothEdgeWidth == NXOpen::Preferences::WidthSeven) {
				int_smoothEdgeWidth = 11;
			}
			else if (smoothEdgeWidth == NXOpen::Preferences::WidthEight) {
				int_smoothEdgeWidth = 12;
			}
			else if (smoothEdgeWidth == NXOpen::Preferences::WidthNine) {
				int_smoothEdgeWidth = 13;
			}
			//string id_name_tmp;
			//std::map<const std::string, std::string>::iterator it_tmp;
			//if (int_smoothEdgeWidth == 1) {
			//	id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
			//	it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
			//	int_smoothEdgeWidth = convert_to_int(it_tmp->second);
			//}
			//if (int_smoothEdgeWidth == 2) {
			//	id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
			//	it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
			//	int_smoothEdgeWidth = convert_to_int(it_tmp->second);
			//}
			//if (int_smoothEdgeWidth == 3) {
			//	id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
			//	it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
			//	int_smoothEdgeWidth = convert_to_int(it_tmp->second);
			//}
			//_nx_dpv->soll_dpv_map.find(id_name)->second = convert_to_string(int_smoothEdgeWidth);
			ist_id_value.assign(convert_to_string(int_smoothEdgeWidth));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_smoothEdgeWidth = convert_to_int(soll_id_value);
				if (int_smoothEdgeWidth == 0) {
					smoothEdgeWidth = NXOpen::Preferences::WidthOriginal;
				}
				else if (int_smoothEdgeWidth == 1) {
					smoothEdgeWidth = NXOpen::Preferences::WidthThin;
					//id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
					//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					//smoothEdgeWidth = (NXOpen::Preferences::Width) convert_to_int(it_tmp->second);
				}
				else if (int_smoothEdgeWidth == 2) {
					smoothEdgeWidth = NXOpen::Preferences::WidthNormal;
					//id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
					//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					//smoothEdgeWidth = (NXOpen::Preferences::Width) convert_to_int(it_tmp->second);
				}
				else if (int_smoothEdgeWidth == 3) {
					smoothEdgeWidth = NXOpen::Preferences::WidthThick;
					//id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
					//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					//smoothEdgeWidth = (NXOpen::Preferences::Width) convert_to_int(it_tmp->second);
				}
				else if (int_smoothEdgeWidth == 5) {
					smoothEdgeWidth = NXOpen::Preferences::WidthOne;
				}
				else if (int_smoothEdgeWidth == 6) {
					smoothEdgeWidth = NXOpen::Preferences::WidthTwo;
				}
				else if (int_smoothEdgeWidth == 7) {
					smoothEdgeWidth = NXOpen::Preferences::WidthThree;
				}
				else if (int_smoothEdgeWidth == 8) {
					smoothEdgeWidth = NXOpen::Preferences::WidthFour;
				}
				else if (int_smoothEdgeWidth == 9) {
					smoothEdgeWidth = NXOpen::Preferences::WidthFive;
				}
				else if (int_smoothEdgeWidth == 10) {
					smoothEdgeWidth = NXOpen::Preferences::WidthSix;
				}
				else if (int_smoothEdgeWidth == 11) {
					smoothEdgeWidth = NXOpen::Preferences::WidthSeven;
				}
				else if (int_smoothEdgeWidth == 12) {
					smoothEdgeWidth = NXOpen::Preferences::WidthEight;
				}
				else if (int_smoothEdgeWidth == 13) {
					smoothEdgeWidth = NXOpen::Preferences::WidthNine;
				}
				_preferencesBuilder->ViewStyle()->ViewStyleSmoothEdges()->SetWidth(smoothEdgeWidth);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not the ends of smooth edges should be displayed.
	id_name.assign("Drafting_smoothEdgeGapping");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			bool endGapsToggle;
			endGapsToggle = _preferencesBuilder->ViewStyle()->ViewStyleSmoothEdges()->EndGaps();
			int int_endGapsToggle;
			int_endGapsToggle = (int)endGapsToggle;
			ist_id_value.assign(convert_to_string(int_endGapsToggle));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_endGapsToggle = convert_to_int(soll_id_value);
				endGapsToggle = false;
				if (int_endGapsToggle == 1) {
					endGapsToggle = true;
				}
				_preferencesBuilder->ViewStyle()->ViewStyleSmoothEdges()->SetEndGaps(endGapsToggle);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the end gap length.
	if (_nx_dpv->usedUnitValue.compare("1") == 0) {
		id_name.assign("Drafting_smoothEdgeGapSize_MU");
	}
	else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
		id_name.assign("Drafting_smoothEdgeGapSize_EU");
	}
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double endGapsData;
			endGapsData = _preferencesBuilder->ViewStyle()->ViewStyleSmoothEdges()->EndGapsDistance();
			ist_id_value.assign(convert_to_string(endGapsData));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				endGapsData = convert_to_double(soll_id_value);
				_preferencesBuilder->ViewStyle()->ViewStyleSmoothEdges()->SetEndGapsDistance(endGapsData);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//An edge is determined to be smooth if the adjacent faces are tangent within an angle tolerance. 
	//This option determines whether or not the system default angle tolerance for smooth edges 
	//should be overridden by the below specified Angle Tolerance.
	id_name.assign("Drafting_smoothEdgeTolerance");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			bool toleranceToggle;
			toleranceToggle = _preferencesBuilder->ViewStyle()->ViewStyleSmoothEdges()->Tolerance();
			int int_toleranceToggle;
			int_toleranceToggle = (int)toleranceToggle;
			ist_id_value.assign(convert_to_string(int_toleranceToggle));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_toleranceToggle = convert_to_int(soll_id_value);
				toleranceToggle = false;
				if (int_toleranceToggle == 1) {
					toleranceToggle = true;
				}
				_preferencesBuilder->ViewStyle()->ViewStyleSmoothEdges()->SetTolerance(toleranceToggle);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the angle tolerance to be used to identify smooth edges.
	id_name.assign("Drafting_smoothEdgeToleranceValue");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double toleranceData;
			toleranceData = _preferencesBuilder->ViewStyle()->ViewStyleSmoothEdges()->ToleranceValue();
			ist_id_value.assign(convert_to_string(toleranceData));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				toleranceData = convert_to_double(soll_id_value);
				_preferencesBuilder->ViewStyle()->ViewStyleSmoothEdges()->SetToleranceValue(toleranceData);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- STOPP - %s --- \n", routineName.c_str());
}

/*
File - Preferences - Drafting - View - Common - View Label -> Repair these preferences.
*/
void repair_DraftingStandard_View_Common_ViewLabel_prefs(NXOpen::Drafting::PreferencesBuilder *_preferencesBuilder, en_nx_dpv* _nx_dpv, Session * _theSession, Part* _workPart) {
	routineName.assign("repair_DraftingStandard_View_Common_ViewLabel_prefs");
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- START - %s --- \n", routineName.c_str());

	//This option specifies how view letters will be generated once all the available letters are used. The Alphabetic option will 
	//begin again at the beginning of the available letters. The numeric option will begin at 1.
	id_name.assign("Drafting_vwLabelSecondaryIndexingMode");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::ViewCommonViewLabelBuilder::SecondaryIndexingType secondaryIndexing;
			NXOpen::Drawings::ViewStyleBuilder *viewStyleBuilder;
			viewStyleBuilder = _preferencesBuilder->ViewStyle();
			secondaryIndexing = viewStyleBuilder->ViewCommonViewLabel()->SecondaryIndexing();
			int int_secondaryIndexing;
			//int_secondaryIndexing = (int)secondaryIndexing;
			if (secondaryIndexing == NXOpen::Drawings::ViewCommonViewLabelBuilder::SecondaryIndexingTypeAlphabetic) {
				int_secondaryIndexing = 0;
			} 
			else if (secondaryIndexing == NXOpen::Drawings::ViewCommonViewLabelBuilder::SecondaryIndexingTypeNumeric) {
				int_secondaryIndexing = 1;
			}
			ist_id_value.assign(convert_to_string(int_secondaryIndexing));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_secondaryIndexing = convert_to_int(soll_id_value);
				//secondaryIndexing = (NXOpen::Drawings::ViewCommonViewLabelBuilder::SecondaryIndexingType)int_secondaryIndexing;
				if (int_secondaryIndexing == 0) {
					secondaryIndexing = NXOpen::Drawings::ViewCommonViewLabelBuilder::SecondaryIndexingTypeAlphabetic;
				}
				else if (int_secondaryIndexing == 1) {
					secondaryIndexing = NXOpen::Drawings::ViewCommonViewLabelBuilder::SecondaryIndexingTypeNumeric;
				}
				viewStyleBuilder->ViewCommonViewLabel()->SetSecondaryIndexing(secondaryIndexing);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies where the secondary index for a view letter is located in relation to the primary letter.
	id_name.assign("Drafting_vwLabelSecondaryIndexingAlignment");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::ViewCommonViewLabelBuilder::SecondaryAlignmentType secondaryAlignment;
			NXOpen::Drawings::ViewStyleBuilder *viewStyleBuilder;
			viewStyleBuilder = _preferencesBuilder->ViewStyle();
			secondaryAlignment = viewStyleBuilder->ViewCommonViewLabel()->SecondaryAlignment();
			int int_secondaryAlignment;
			int_secondaryAlignment = (int)secondaryAlignment;
			ist_id_value.assign(convert_to_string(int_secondaryAlignment));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_secondaryAlignment = convert_to_int(soll_id_value);
				secondaryAlignment = (NXOpen::Drawings::ViewCommonViewLabelBuilder::SecondaryAlignmentType) int_secondaryAlignment;
				viewStyleBuilder->ViewCommonViewLabel()->SetSecondaryAlignment(secondaryAlignment);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the character size of the secondary index subscript letter relative to
	//the character size of the current font.
	id_name.assign("Drafting_vwLabelSecondaryIndexingSubscrpiptSizeFactor");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double subscriptSizeFactor;
			NXOpen::Drawings::ViewStyleBuilder *viewStyleBuilder;
			viewStyleBuilder = _preferencesBuilder->ViewStyle();
			subscriptSizeFactor = viewStyleBuilder->ViewCommonViewLabel()->SubscriptSizeFactor();
			ist_id_value.assign(convert_to_string(subscriptSizeFactor));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				subscriptSizeFactor = convert_to_double(soll_id_value);
				viewStyleBuilder->ViewCommonViewLabel()->SetSubscriptSizeFactor(subscriptSizeFactor);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- STOPP - %s --- \n", routineName.c_str());
}

/*
File - Preferences - Drafting - View - Base/Drawing - Settings -> Repair these preferences.
*/
void repair_DraftingStandard_View_BaseDrawing_Settings_prefs(NXOpen::Drafting::PreferencesBuilder *_preferencesBuilder, en_nx_dpv* _nx_dpv, Session * _theSession, Part* _workPart) {
	routineName.assign("repair_DraftingStandard_View_BaseDrawing_Settings_prefs");
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- START - %s --- \n", routineName.c_str());
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- STOPP - %s --- \n", routineName.c_str());
}

/*
File - Preferences - Drafting - View - Base/Drawing - Label -> Repair these preferences.
*/
void repair_DraftingStandard_View_BaseDrawing_Label_prefs(NXOpen::Drafting::PreferencesBuilder *_preferencesBuilder, en_nx_dpv* _nx_dpv, Session * _theSession, Part* _workPart) {
	routineName.assign("repair_DraftingStandard_View_BaseDrawing_Label_prefs");
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- START - %s --- \n", routineName.c_str());

	//This option specifies the position of the view label and view scale relative to the view.
	id_name.assign("Drafting_otherVwLabelPosition");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::LabelPositionTypes labelPosition;
			labelPosition = _preferencesBuilder->ViewLabel()->LabelPosition();
			int int_labelPosition;
			if (labelPosition == NXOpen::Drawings::LabelPositionTypesAbove) {
				int_labelPosition = 1;
			}
			else if (labelPosition == NXOpen::Drawings::LabelPositionTypesBelow) {
				int_labelPosition = 2;
			}
			ist_id_value.assign(convert_to_string(int_labelPosition));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_labelPosition = convert_to_int(soll_id_value);
				if (int_labelPosition == 1) {
					labelPosition = NXOpen::Drawings::LabelPositionTypesAbove;
				}
				else if (int_labelPosition == 2) {
					labelPosition = NXOpen::Drawings::LabelPositionTypesBelow;
				}
				_preferencesBuilder->ViewLabel()->SetLabelPosition(labelPosition);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not the view text portion of a view label should be included.
	id_name.assign("Drafting_otherVwLabelIncludeTextLabel");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			bool showViewLabel;
			showViewLabel = _preferencesBuilder->ViewLabel()->ShowViewLabel();
			int int_showViewLabel;
			int_showViewLabel = (int)showViewLabel;
			ist_id_value.assign(convert_to_string(int_showViewLabel));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_showViewLabel = convert_to_int(soll_id_value);
				showViewLabel = false;
				if (int_showViewLabel == 1) {
					showViewLabel = true;
				}
				_preferencesBuilder->ViewLabel()->SetShowViewLabel(showViewLabel);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies what type of view label should be used. 
	//The View Name option means that the system generated view name will be used 
	//as the view label. The View Letter option means that the specified view letter 
	//parameters will be used as the view label.
	id_name.assign("Drafting_otherVwLabelTextLabelType");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::ViewLabelTypes viewLabelOption;
			viewLabelOption = _preferencesBuilder->ViewLabel()->ViewLabelOption();
			int int_viewLabelOption;
			if (viewLabelOption==NXOpen::Drawings::ViewLabelTypesName){
				int_viewLabelOption = 1;
			}
			else if (viewLabelOption == NXOpen::Drawings::ViewLabelTypesLetter) {
				int_viewLabelOption = 2;
			}
			ist_id_value.assign(convert_to_string(int_viewLabelOption));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_viewLabelOption = convert_to_int(soll_id_value);
				if (int_viewLabelOption == 1) {
					viewLabelOption = NXOpen::Drawings::ViewLabelTypesName;
				}
				else if (int_viewLabelOption == 2) {
					viewLabelOption = NXOpen::Drawings::ViewLabelTypesLetter;
				}
				_preferencesBuilder->ViewLabel()->SetViewLabelOption(viewLabelOption);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the view label prefix.
	id_name.assign("Drafting_otherVwLabelViewLabelPrefix");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXString labelPrefix;
			labelPrefix = _preferencesBuilder->ViewLabel()->LabelPrefix();
			ist_id_value.assign(labelPrefix.GetLocaleText());
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				labelPrefix = (NXString)soll_id_value.c_str();
				_preferencesBuilder->ViewLabel()->SetLabelPrefix(labelPrefix);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the letter format of the view label; single letter 
	//or two letters separated by a dash or sheet zone reference.
	id_name.assign("Drafting_otherVwLabelLetterFormat");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::LetterFormatTypes letterFormat;
			letterFormat = _preferencesBuilder->ViewLabel()->LetterFormat();
			int int_letterFormat;
			if (letterFormat == NXOpen::Drawings::LetterFormatTypesA) {
				int_letterFormat = 1;
			}
			else if (letterFormat == NXOpen::Drawings::LetterFormatTypesAA) {
				int_letterFormat = 2;
			}
			else if (letterFormat == NXOpen::Drawings::LetterFormatTypesAA1) {
				int_letterFormat = 3;
			}
			else {
				int_letterFormat = -999;
			}
			ist_id_value.assign(convert_to_string(int_letterFormat));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_letterFormat = convert_to_int(soll_id_value);
				if (int_letterFormat == 1) {
					letterFormat = NXOpen::Drawings::LetterFormatTypesA;
				}
				else if (int_letterFormat == 2) {
					letterFormat = NXOpen::Drawings::LetterFormatTypesAA;
				}
				else if (int_letterFormat == 3) {
					letterFormat = NXOpen::Drawings::LetterFormatTypesAA1;
				}
				if (int_letterFormat != -999) {
					_preferencesBuilder->ViewLabel()->SetLetterFormat(letterFormat);
				}
				_preferencesBuilder->ViewLabel()->SetLetterFormat(letterFormat);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the reference to show in the view label: sheet and zone, sheet only, or zone only.
	id_name.assign("Drafting_otherVwLabelShowReference");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::ReferenceShowTypes referenceToShow;
			referenceToShow = _preferencesBuilder->ViewLabel()->ReferenceToShow();
			int int_referenceToShow;
			if (referenceToShow == NXOpen::Drawings::ReferenceShowTypesSheetandZone) {
				int_referenceToShow = 0;
			}
			else if (referenceToShow == NXOpen::Drawings::ReferenceShowTypesSheet) {
				int_referenceToShow = 1;
			}
			else if (referenceToShow == NXOpen::Drawings::ReferenceShowTypesZone) {
				int_referenceToShow = 2;
			}
			ist_id_value.assign(convert_to_string(int_referenceToShow));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_referenceToShow = convert_to_int(soll_id_value);
				if (int_referenceToShow == 0) {
					referenceToShow = NXOpen::Drawings::ReferenceShowTypesSheetandZone;
				}
				else if (int_referenceToShow == 1) {
					referenceToShow = NXOpen::Drawings::ReferenceShowTypesSheet;
				}
				else if (int_referenceToShow == 2) {
					referenceToShow = NXOpen::Drawings::ReferenceShowTypesZone;
				}
				_preferencesBuilder->ViewLabel()->SetReferenceToShow(referenceToShow);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the view name letter size relative to the character size of the current font.
	id_name.assign("Drafting_otherVwLabelLetterSizeFactor");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double labelCharacterHeightFactor;
			labelCharacterHeightFactor = _preferencesBuilder->ViewLabel()->LabelCharacterHeightFactor();
			ist_id_value.assign(convert_to_string(labelCharacterHeightFactor));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				labelCharacterHeightFactor = convert_to_double(soll_id_value);
				_preferencesBuilder->ViewLabel()->SetLabelCharacterHeightFactor(labelCharacterHeightFactor);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not the scale label portion of a view label should be included.
	id_name.assign("Drafting_otherVwLabelIncludeScaleLabel");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			bool showViewScale;
			showViewScale = _preferencesBuilder->ViewLabel()->ShowViewScale();
			int int_showViewScale;
			int_showViewScale = showViewScale ? 1 : 0;
			ist_id_value.assign(convert_to_string(int_showViewScale));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_showViewScale = convert_to_int(soll_id_value);
				showViewScale = false;
				if (int_showViewScale == 1) {
					showViewScale = true;
				}
				_preferencesBuilder->ViewLabel()->SetShowViewScale(showViewScale);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the position of the scale label relative to the view label.
	id_name.assign("Drafting_otherVwLabelViewScalePosition");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::ScalePositionTypes scalePosition;
			scalePosition = _preferencesBuilder->ViewLabel()->ScalePosition();
			int int_scalePosition;
			if (scalePosition == NXOpen::Drawings::ScalePositionTypesAbove) {
				int_scalePosition = 1;
			}
			else if (scalePosition == NXOpen::Drawings::ScalePositionTypesBelow) {
				int_scalePosition = 2;
			}
			else if (scalePosition == NXOpen::Drawings::ScalePositionTypesBefore) {
				int_scalePosition = 3;
			}
			else if (scalePosition == NXOpen::Drawings::ScalePositionTypesAfter) {
				int_scalePosition = 4;
			}
			else {
				int_scalePosition = -999;
			}
			ist_id_value.assign(convert_to_string(int_scalePosition));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_scalePosition = convert_to_int(soll_id_value);
				if (int_scalePosition == 1) {
					scalePosition = NXOpen::Drawings::ScalePositionTypesAbove;
				}
				else if (int_scalePosition == 2) {
					scalePosition = NXOpen::Drawings::ScalePositionTypesBelow;
				}
				else if (int_scalePosition == 3) {
					scalePosition = NXOpen::Drawings::ScalePositionTypesBefore;
				}
				else if (int_scalePosition == 4) {
					scalePosition = NXOpen::Drawings::ScalePositionTypesAfter;
				}
				if (int_scalePosition != -999) {
					_preferencesBuilder->ViewLabel()->SetScalePosition(scalePosition);
				}
				_preferencesBuilder->ViewLabel()->SetScalePosition(scalePosition);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the scale label prefix.
	id_name.assign("Drafting_otherVwLabelScaleLabelPrefix");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXString scalePrefix;
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - %s = %s \n", routineName.c_str(), id_name.c_str(), _preferencesBuilder->ViewLabel()->ScalePrefix().GetLocaleText());
			scalePrefix = _preferencesBuilder->ViewLabel()->ScalePrefix();
			ist_id_value.assign(scalePrefix.GetLocaleText());
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				scalePrefix = (NXString)soll_id_value.c_str();
				_preferencesBuilder->ViewLabel()->SetScalePrefix(scalePrefix);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the character size of the scale label prefix 
	//relative to the character size of the current font.
	id_name.assign("Drafting_otherVwLabelScalePrefixFactor");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double prefixCharacterHeightFactor;
			prefixCharacterHeightFactor = _preferencesBuilder->ViewLabel()->PrefixCharacterHeightFactor();
			ist_id_value.assign(convert_to_string(prefixCharacterHeightFactor));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				prefixCharacterHeightFactor = convert_to_double(soll_id_value);
				_preferencesBuilder->ViewLabel()->SetPrefixCharacterHeightFactor(prefixCharacterHeightFactor);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the format for the scale value.
	id_name.assign("Drafting_otherVwLabelScaleValueFormat");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::ScaleValueFormatTypes valueFormat;
			valueFormat = _preferencesBuilder->ViewLabel()->ValueFormat();
			int int_valueFormat;
			if (valueFormat == NXOpen::Drawings::ScaleValueFormatTypesRatio) {
				int_valueFormat = 1;
			}
			else if (valueFormat == NXOpen::Drawings::ScaleValueFormatTypesCommonFraction) {
				int_valueFormat = 2;
			}
			else if (valueFormat == NXOpen::Drawings::ScaleValueFormatTypesSingleLineFraction) {
				int_valueFormat = 3;
			}
			else if (valueFormat == NXOpen::Drawings::ScaleValueFormatTypesNx) {
				int_valueFormat = 4;
			}
			else{
				int_valueFormat = -999;
			}
			ist_id_value.assign(convert_to_string(int_valueFormat));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_valueFormat = convert_to_int(soll_id_value);
				if (int_valueFormat == 1) {
					valueFormat = NXOpen::Drawings::ScaleValueFormatTypesRatio;
				}
				else if (int_valueFormat == 2) {
					valueFormat = NXOpen::Drawings::ScaleValueFormatTypesCommonFraction;
				}
				else if (int_valueFormat == 3) {
					valueFormat = NXOpen::Drawings::ScaleValueFormatTypesSingleLineFraction;
				}
				else if (int_valueFormat == 4) {
					valueFormat = NXOpen::Drawings::ScaleValueFormatTypesNx;
				}
				if (int_valueFormat != -999) {
					_preferencesBuilder->ViewLabel()->SetValueFormat(valueFormat);
				}
				_preferencesBuilder->ViewLabel()->SetValueFormat(valueFormat);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the character size of the scale value relative to the 
	//character size of the current font.
	id_name.assign("Drafting_otherVwLabelScaleTextFactor");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double scaleCharacterHeightFactor;
			scaleCharacterHeightFactor = _preferencesBuilder->ViewLabel()->ScaleCharacterHeightFactor();
			ist_id_value.assign(convert_to_string(scaleCharacterHeightFactor));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				scaleCharacterHeightFactor = convert_to_double(soll_id_value);
				_preferencesBuilder->ViewLabel()->SetScaleCharacterHeightFactor(scaleCharacterHeightFactor);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not the scale label is enclosed in parentheses.
	id_name.assign("Drafting_otherVwLabelIncludeParentheses");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			bool includeParentheses;
			includeParentheses = _preferencesBuilder->ViewLabel()->IncludeParentheses();
			int int_includeParentheses;
			int_includeParentheses = (int)includeParentheses;
			ist_id_value.assign(convert_to_string(int_includeParentheses));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_includeParentheses = convert_to_int(soll_id_value);
				includeParentheses = false;
				if (int_includeParentheses == 1) {
					includeParentheses = true;
				}
				_preferencesBuilder->ViewLabel()->SetIncludeParentheses(includeParentheses);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- STOPP - %s --- \n", routineName.c_str());
}

/*
File - Preferences - Drafting - View - Projected - Settings -> Repair these preferences.
*/
void repair_DraftingStandard_View_Projected_Settings_prefs(NXOpen::Drafting::PreferencesBuilder *_preferencesBuilder, en_nx_dpv* _nx_dpv, Session * _theSession, Part* _workPart) {
	routineName.assign("repair_DraftingStandard_View_Projected_Settings_prefs");
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- START - %s --- \n", routineName.c_str());

	//This option determines whether viewing direction reference arrows will be displayed with parent views of projected views. 
	//The options are to not display the reference arrows, to display them only for non-orthographic projections, or to display 
	//them for all projections.
	id_name.assign("PV_ViewingDirectionReferenceArrowOption");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::ViewProjectedViewSettingsBuilder::DisplayArrowOnParentViewType displayArrowOnParentView;
			displayArrowOnParentView = _preferencesBuilder->ViewStyle()->ViewProjectedViewSettings()->DisplayArrowOnParentView();
			int int_displayArrowOnParentView;
			int_displayArrowOnParentView = (int)displayArrowOnParentView;
			ist_id_value.assign(convert_to_string(int_displayArrowOnParentView));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_displayArrowOnParentView = convert_to_int(soll_id_value);
				displayArrowOnParentView = (NXOpen::Drawings::ViewProjectedViewSettingsBuilder::DisplayArrowOnParentViewType)int_displayArrowOnParentView;
				_preferencesBuilder->ViewStyle()->ViewProjectedViewSettings()->SetDisplayArrowOnParentView(displayArrowOnParentView);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- STOPP - %s --- \n", routineName.c_str());
}

/*
File - Preferences - Drafting - View - Projected - Label -> Repair these preferences.
*/
void repair_DraftingStandard_View_Projected_Label_prefs(NXOpen::Drafting::PreferencesBuilder *_preferencesBuilder, en_nx_dpv* _nx_dpv, Session * _theSession, Part* _workPart) {
	routineName.assign("repair_DraftingStandard_View_Projected_Label_prefs");
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- START - %s --- \n", routineName.c_str());
	
	//This option specifies the position of the view label and view scale relative to the view.
	id_name.assign("Drafting_projectedVwLabelPosition");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::LabelPositionTypes labelPosition;
			labelPosition = _preferencesBuilder->ViewProjectedLabel()->LabelPosition();
			int int_labelPosition;
			if (labelPosition == NXOpen::Drawings::LabelPositionTypesAbove) {
				int_labelPosition = 1;
			}
			else if (labelPosition == NXOpen::Drawings::LabelPositionTypesBelow) {
				int_labelPosition = 2;
			}
			//Achtung: Rückgabewert falsch
			int_labelPosition = int_labelPosition + 1;
			ist_id_value.assign(convert_to_string(int_labelPosition));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_labelPosition = convert_to_int(soll_id_value);
				//Achtung: Rückgabewert falsch
				int_labelPosition = int_labelPosition - 1;
				if (int_labelPosition == 1) {
					labelPosition = NXOpen::Drawings::LabelPositionTypesAbove;
				}
				else if (int_labelPosition == 2) {
					labelPosition = NXOpen::Drawings::LabelPositionTypesBelow;
				}
				_preferencesBuilder->ViewProjectedLabel()->SetLabelPosition(labelPosition);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not the view text portion of a view label should be included.
	id_name.assign("Drafting_projectedVwLabelIncludeTextLabel");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			bool showViewLabel;
			showViewLabel = _preferencesBuilder->ViewProjectedLabel()->ShowViewLabel();
			int int_showViewLabel;
			int_showViewLabel = (int)showViewLabel;
			ist_id_value.assign(convert_to_string(int_showViewLabel));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_showViewLabel = convert_to_int(soll_id_value);
				showViewLabel = false;
				if (int_showViewLabel == 1) {
					showViewLabel = true;
				}
				_preferencesBuilder->ViewProjectedLabel()->SetShowViewLabel(showViewLabel);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies what type of view label should be used. The View Name option 
	//means that the system generated view name will be used as the view label. The View 
	//Letter option means that the specified view letter parameters will be used as the view label.
	id_name.assign("Drafting_projectedVwLabelTextLabelType");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::ViewLabelTypes viewLabelOption;
			viewLabelOption = _preferencesBuilder->ViewProjectedLabel()->ViewLabelOption();
			int int_viewLabelOption;
			if (viewLabelOption == NXOpen::Drawings::ViewLabelTypesName) {
				int_viewLabelOption = 1;
			}
			else if (viewLabelOption == NXOpen::Drawings::ViewLabelTypesLetter) {
				int_viewLabelOption = 2;
			}
			ist_id_value.assign(convert_to_string(int_viewLabelOption));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_viewLabelOption = convert_to_int(soll_id_value);
				if (int_viewLabelOption == 1) {
					viewLabelOption = NXOpen::Drawings::ViewLabelTypesName;
				}
				else if (int_viewLabelOption == 2) {
					viewLabelOption = NXOpen::Drawings::ViewLabelTypesLetter;
				}
				_preferencesBuilder->ViewProjectedLabel()->SetViewLabelOption(viewLabelOption);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the view label prefix.
	id_name.assign("Drafting_projectedVwLabelViewLabelPrefix");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXString labelPrefix;
			labelPrefix = _preferencesBuilder->ViewLabel()->LabelPrefix();
			ist_id_value.assign(labelPrefix.GetLocaleText());
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				labelPrefix = (NXString)soll_id_value.c_str();
				_preferencesBuilder->ViewLabel()->SetLabelPrefix(labelPrefix);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}
	
	//This option determines the type of rotation symbol that will appear in projected view labels 
	//if the view angle is other than zero.
	id_name.assign("Drafting_projectedVwLabelIncludeRotationSymbol");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::RotationSymbolTypes rotationSymbolType;
			rotationSymbolType = _preferencesBuilder->ViewProjectedLabel()->RotationSymbolType();
			int int_rotationSymbolType;
			int_rotationSymbolType = (int)rotationSymbolType;
			ist_id_value.assign(convert_to_string(int_rotationSymbolType));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_rotationSymbolType = convert_to_int(soll_id_value);
				rotationSymbolType = (NXOpen::Drawings::RotationSymbolTypes)int_rotationSymbolType;
				_preferencesBuilder->ViewProjectedLabel()->SetRotationSymbolType(rotationSymbolType);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not to display the rotation angle if a rotation symbol is displayed.
	id_name.assign("Drafting_projectedVwLabelIncludeRotationAngle");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			bool includeRotationAngle;
			includeRotationAngle = _preferencesBuilder->ViewProjectedLabel()->IncludeRotationAngle();
			int int_includeRotationAngle;
			int_includeRotationAngle = (int)includeRotationAngle;
			ist_id_value.assign(convert_to_string(int_includeRotationAngle));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_includeRotationAngle = convert_to_int(soll_id_value);
				includeRotationAngle = false;
				if (int_includeRotationAngle == 1) {
					includeRotationAngle = true;
				}
				_preferencesBuilder->ViewProjectedLabel()->SetIncludeRotationAngle(includeRotationAngle);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the letter format of the view label; single letter or two 
	//letters separated by a dash or sheet zone reference.
	id_name.assign("Drafting_projectedVwLabelLetterFormat");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::LetterFormatTypes letterFormat;
			letterFormat = _preferencesBuilder->ViewProjectedLabel()->LetterFormat();
			int int_letterFormat;
			if (letterFormat == NXOpen::Drawings::LetterFormatTypesA) {
				int_letterFormat = 1;
			}
			else if (letterFormat == NXOpen::Drawings::LetterFormatTypesAA) {
				int_letterFormat = 2;
			}
			else if (letterFormat == NXOpen::Drawings::LetterFormatTypesAA1) {
				int_letterFormat = 3;
			}
			else {
				int_letterFormat = -999;
			}
			ist_id_value.assign(convert_to_string(int_letterFormat));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_letterFormat = convert_to_int(soll_id_value);
				if (int_letterFormat == 1) {
					letterFormat = NXOpen::Drawings::LetterFormatTypesA;
				}
				else if (int_letterFormat == 2) {
					letterFormat = NXOpen::Drawings::LetterFormatTypesAA;
				}
				else if (int_letterFormat == 3) {
					letterFormat = NXOpen::Drawings::LetterFormatTypesAA1;
				}
				if (int_letterFormat != -999) {
					_preferencesBuilder->ViewProjectedLabel()->SetLetterFormat(letterFormat);
				}
				_preferencesBuilder->ViewProjectedLabel()->SetLetterFormat(letterFormat);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the view name letter size relative to the character size of the current font.
	id_name.assign("Drafting_projectedVwLabelLetterSizeFactor");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double labelCharacterHeightFactor;
			labelCharacterHeightFactor = _preferencesBuilder->ViewLabel()->LabelCharacterHeightFactor();
			ist_id_value.assign(convert_to_string(labelCharacterHeightFactor));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				labelCharacterHeightFactor = convert_to_double(soll_id_value);
				_preferencesBuilder->ViewLabel()->SetLabelCharacterHeightFactor(labelCharacterHeightFactor);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the reference to show in the view label: sheet and zone, sheet only, or zone only.
	id_name.assign("Drafting_projectedVwLabelShowReference");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::ReferenceShowTypes referenceToShow;
			referenceToShow = _preferencesBuilder->ViewProjectedLabel()->ReferenceToShow();
			int int_referenceToShow;
			if (referenceToShow == NXOpen::Drawings::ReferenceShowTypesSheetandZone) {
				int_referenceToShow = 0;
			}
			else if (referenceToShow == NXOpen::Drawings::ReferenceShowTypesSheet) {
				int_referenceToShow = 1;
			}
			else if (referenceToShow == NXOpen::Drawings::ReferenceShowTypesZone) {
				int_referenceToShow = 2;
			}
			else {
				int_referenceToShow = -999;
			}
			ist_id_value.assign(convert_to_string(int_referenceToShow));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_referenceToShow = convert_to_int(soll_id_value);
				if (int_referenceToShow == 0) {
					referenceToShow = NXOpen::Drawings::ReferenceShowTypesSheetandZone;
				}
				else if (int_referenceToShow == 1) {
					referenceToShow = NXOpen::Drawings::ReferenceShowTypesSheet;
				}
				else if (int_referenceToShow == 2) {
					referenceToShow = NXOpen::Drawings::ReferenceShowTypesZone;
				}
				if (int_referenceToShow != -999) {
					_preferencesBuilder->ViewProjectedLabel()->SetReferenceToShow(referenceToShow);
				}
				_preferencesBuilder->ViewProjectedLabel()->SetReferenceToShow(referenceToShow);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not the scale label portion of a view label should be included.
	id_name.assign("Drafting_projectedVwLabelIncludeScaleLabel");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			bool showViewScale;
			showViewScale = _preferencesBuilder->ViewProjectedLabel()->ShowViewScale();
			int int_showViewScale;
			int_showViewScale = showViewScale ? 1 : 0;
			ist_id_value.assign(convert_to_string(int_showViewScale));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_showViewScale = convert_to_int(soll_id_value);
				showViewScale = false;
				if (int_showViewScale == 1) {
					showViewScale = true;
				}
				_preferencesBuilder->ViewProjectedLabel()->SetShowViewScale(showViewScale);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the position of the scale label relative to the view label.
	id_name.assign("Drafting_projectedVwLabelViewScalePosition");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::ScalePositionTypes scalePosition;
			scalePosition = _preferencesBuilder->ViewProjectedLabel()->ScalePosition();
			int int_scalePosition;
			if (scalePosition == NXOpen::Drawings::ScalePositionTypesAbove) {
				int_scalePosition = 1;
			}
			else if (scalePosition == NXOpen::Drawings::ScalePositionTypesBelow) {
				int_scalePosition = 2;
			}
			else if (scalePosition == NXOpen::Drawings::ScalePositionTypesBefore) {
				int_scalePosition = 3;
			}
			else if (scalePosition == NXOpen::Drawings::ScalePositionTypesAfter) {
				int_scalePosition = 4;
			}
			else {
				int_scalePosition = -999;
			}
			ist_id_value.assign(convert_to_string(int_scalePosition));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_scalePosition = convert_to_int(soll_id_value);
				if (int_scalePosition == 1) {
					scalePosition = NXOpen::Drawings::ScalePositionTypesAbove;
				}
				else if (int_scalePosition == 2) {
					scalePosition = NXOpen::Drawings::ScalePositionTypesBelow;
				}
				else if (int_scalePosition == 3) {
					scalePosition = NXOpen::Drawings::ScalePositionTypesBefore;
				}
				else if (int_scalePosition == 4) {
					scalePosition = NXOpen::Drawings::ScalePositionTypesAfter;
				}
				if (int_scalePosition != -999) {
					_preferencesBuilder->ViewProjectedLabel()->SetScalePosition(scalePosition);
				}
				_preferencesBuilder->ViewProjectedLabel()->SetScalePosition(scalePosition);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the character size of the scale label prefix relative to the character size of the current font.
	id_name.assign("Drafting_projectedVwLabelScalePrefixFactor");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double prefixCharacterHeightFactor;
			prefixCharacterHeightFactor = _preferencesBuilder->ViewProjectedLabel()->PrefixCharacterHeightFactor();
			ist_id_value.assign(convert_to_string(prefixCharacterHeightFactor));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				prefixCharacterHeightFactor = convert_to_double(soll_id_value);
				_preferencesBuilder->ViewProjectedLabel()->SetPrefixCharacterHeightFactor(prefixCharacterHeightFactor);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the scale label prefix.
	id_name.assign("Drafting_projectedVwLabelScaleLabelPrefix");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXString scalePrefix;
			scalePrefix = _preferencesBuilder->ViewProjectedLabel()->ScalePrefix();
			ist_id_value.assign(scalePrefix.GetLocaleText());
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				scalePrefix = (NXString)soll_id_value.c_str();
				_preferencesBuilder->ViewProjectedLabel()->SetScalePrefix(scalePrefix);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the format for the scale value.
	id_name.assign("Drafting_projectedVwLabelScaleValueFormat");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::ScaleValueFormatTypes valueFormat;
			valueFormat = _preferencesBuilder->ViewProjectedLabel()->ValueFormat();
			int int_valueFormat;
			if (valueFormat == NXOpen::Drawings::ScaleValueFormatTypesRatio) {
				int_valueFormat = 1;
			}
			else if (valueFormat == NXOpen::Drawings::ScaleValueFormatTypesCommonFraction) {
				int_valueFormat = 2;
			}
			else if (valueFormat == NXOpen::Drawings::ScaleValueFormatTypesSingleLineFraction) {
				int_valueFormat = 3;
			}
			else if (valueFormat == NXOpen::Drawings::ScaleValueFormatTypesNx) {
				int_valueFormat = 4;
			}
			else {
				int_valueFormat = -999;
			}
			ist_id_value.assign(convert_to_string(int_valueFormat));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_valueFormat = convert_to_int(soll_id_value);
				if (int_valueFormat == 1) {
					valueFormat = NXOpen::Drawings::ScaleValueFormatTypesRatio;
				}
				else if (int_valueFormat == 2) {
					valueFormat = NXOpen::Drawings::ScaleValueFormatTypesCommonFraction;
				}
				else if (int_valueFormat == 3) {
					valueFormat = NXOpen::Drawings::ScaleValueFormatTypesSingleLineFraction;
				}
				else if (int_valueFormat == 4) {
					valueFormat = NXOpen::Drawings::ScaleValueFormatTypesNx;
				}
				if (int_valueFormat != -999) {
					_preferencesBuilder->ViewProjectedLabel()->SetValueFormat(valueFormat);
				}
				_preferencesBuilder->ViewProjectedLabel()->SetValueFormat(valueFormat);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}
	
	//This option specifies the character size of the scale value relative to the character size of the current font.
	id_name.assign("Drafting_projectedVwLabelScaleTextFactor");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double scaleCharacterHeightFactor;
			scaleCharacterHeightFactor = _preferencesBuilder->ViewProjectedLabel()->ScaleCharacterHeightFactor();
			ist_id_value.assign(convert_to_string(scaleCharacterHeightFactor));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				scaleCharacterHeightFactor = convert_to_double(soll_id_value);
				_preferencesBuilder->ViewProjectedLabel()->SetScaleCharacterHeightFactor(scaleCharacterHeightFactor);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not the scale label is enclosed in parentheses.
	id_name.assign("Drafting_projectedVwLabelIncludeParentheses");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			bool includeParentheses;
			includeParentheses = _preferencesBuilder->ViewProjectedLabel()->IncludeParentheses();
			int int_includeParentheses;
			int_includeParentheses = (int)includeParentheses;
			ist_id_value.assign(convert_to_string(int_includeParentheses));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_includeParentheses = convert_to_int(soll_id_value);
				includeParentheses = false;
				if (int_includeParentheses == 1) {
					includeParentheses = true;
				}
				_preferencesBuilder->ViewProjectedLabel()->SetIncludeParentheses(includeParentheses);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- STOPP - %s --- \n", routineName.c_str());
}

/*
File - Preferences - Drafting - View - Projected - Arrow -> Repair these preferences.
*/
void repair_DraftingStandard_View_Projected_Arrow_prefs(NXOpen::Drafting::PreferencesBuilder *_preferencesBuilder, en_nx_dpv* _nx_dpv, Session * _theSession, Part* _workPart) {
	routineName.assign("repair_DraftingStandard_View_Projected_Arrow_prefs");
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- START - %s --- \n", routineName.c_str());

	//This option determines whether or not a label will be displayed on the viewing direction reference arrow that corresponds to 
	//the projected view label. It may override the projected view label option.
	id_name.assign("PV_DisplayLabelonReferenceArrow");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::ViewProjectedArrowSettingsBuilder::DispalyLabelType displayLabel;
			displayLabel = _preferencesBuilder->ViewStyle()->ViewProjectedArrowSettings()->DisplayLabel();
			int int_displayLabel;
			int_displayLabel = (int)displayLabel;
			ist_id_value.assign(convert_to_string(int_displayLabel));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_displayLabel = convert_to_int(soll_id_value);
				displayLabel = (NXOpen::Drawings::ViewProjectedArrowSettingsBuilder::DispalyLabelType)int_displayLabel;
				_preferencesBuilder->ViewStyle()->ViewProjectedArrowSettings()->SetDisplayLabel(displayLabel);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the text size factor for the viewing direction reference arrow label.
	id_name.assign("PV_ViewingDirectionReferenceArrowLabelSizeFactor");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double sizeFactor;
			sizeFactor = _preferencesBuilder->ViewStyle()->ViewProjectedArrowSettings()->SizeFactor();
			ist_id_value.assign(convert_to_string(sizeFactor));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				sizeFactor = convert_to_double(soll_id_value);
				_preferencesBuilder->ViewStyle()->ViewProjectedArrowSettings()->SetSizeFactor(sizeFactor);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines the arrowhead display for viewing direction reference arrows.
	id_name.assign("PV_ViewingDirectionReferenceArrowheadStyle");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::ViewProjectedArrowSettingsBuilder::DimensionsStyleType arrowHeadStyle;
			arrowHeadStyle = _preferencesBuilder->ViewStyle()->ViewProjectedArrowSettings()->ArrowHeadStyle();
			int int_arrowHeadStyle;
			int_arrowHeadStyle = (int)arrowHeadStyle;
			ist_id_value.assign(convert_to_string(int_arrowHeadStyle));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_arrowHeadStyle = convert_to_int(soll_id_value);
				arrowHeadStyle = (NXOpen::Drawings::ViewProjectedArrowSettingsBuilder::DimensionsStyleType)int_arrowHeadStyle;
				_preferencesBuilder->ViewStyle()->ViewProjectedArrowSettings()->SetArrowHeadStyle(arrowHeadStyle);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the reference arrowhead length.
	if (_nx_dpv->usedUnitValue.compare("1") == 0) {
		id_name.assign("PV_ViewingDirectionReferenceArrowheadLength_MU");
	}
	else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
		id_name.assign("PV_ViewingDirectionReferenceArrowheadLength_EU");
	}
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double arrowHeadLength;
			arrowHeadLength = _preferencesBuilder->ViewStyle()->ViewProjectedArrowSettings()->ArrowHeadLength();
			ist_id_value.assign(convert_to_string(arrowHeadLength));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				arrowHeadLength = convert_to_double(soll_id_value);
				_preferencesBuilder->ViewStyle()->ViewProjectedArrowSettings()->SetArrowHeadLength(arrowHeadLength);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the included angle for the reference arrowhead.
	id_name.assign("PV_ViewingDirectionReferenceArrowheadAngle");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double arrowHeadAngle;
			arrowHeadAngle = _preferencesBuilder->ViewStyle()->ViewProjectedArrowSettings()->ArrowHeadAngle();
			ist_id_value.assign(convert_to_string(arrowHeadAngle));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				arrowHeadAngle = convert_to_double(soll_id_value);
				_preferencesBuilder->ViewStyle()->ViewProjectedArrowSettings()->SetArrowHeadAngle(arrowHeadAngle);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the reference arrow length.
	if (_nx_dpv->usedUnitValue.compare("1") == 0) {
		id_name.assign("PV_ViewingDirectionReferenceArrowLength_MU");
	}
	else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
		id_name.assign("PV_ViewingDirectionReferenceArrowLength_EU");
	}
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double arrowLineLength;
			arrowLineLength = _preferencesBuilder->ViewStyle()->ViewProjectedArrowSettings()->ArrowLineLength();
			ist_id_value.assign(convert_to_string(arrowLineLength));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				arrowLineLength = convert_to_double(soll_id_value);
				_preferencesBuilder->ViewStyle()->ViewProjectedArrowSettings()->SetArrowLineLength(arrowLineLength);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the distance the reference arrow is offset from the view boundary along the direction of projection.
	if (_nx_dpv->usedUnitValue.compare("1") == 0) {
		id_name.assign("PV_ViewingDirectionReferenceArrowGeometryOffset_MU");
	}
	else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
		id_name.assign("PV_ViewingDirectionReferenceArrowGeometryOffset_EU");
	}
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double arrowLineDistanceToGeometry;
			arrowLineDistanceToGeometry = _preferencesBuilder->ViewStyle()->ViewProjectedArrowSettings()->ArrowLineDistanceToGeometry();
			ist_id_value.assign(convert_to_string(arrowLineDistanceToGeometry));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				arrowLineDistanceToGeometry = convert_to_double(soll_id_value);
				_preferencesBuilder->ViewStyle()->ViewProjectedArrowSettings()->SetArrowLineDistanceToGeometry(arrowLineDistanceToGeometry);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the color of the viewing direction reference arrows.
	id_name.assign("PV_ViewingDirectionReferenceArrowColor");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::NXColor *lineColor;
			lineColor = _preferencesBuilder->ViewStyle()->ViewProjectedArrowSettings()->LineColorFontWidth()->LineColor();
			int lineColorIndex;
			lineColorIndex = lineColor->Handle();
			ist_id_value.assign(convert_to_string(lineColorIndex));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				lineColorIndex = convert_to_int(soll_id_value);
				lineColor = _workPart->Colors()->Find(lineColorIndex);
				_preferencesBuilder->ViewStyle()->ViewProjectedArrowSettings()->LineColorFontWidth()->SetLineColor(lineColor);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the line font for viewing direction reference arrows.
	id_name.assign("PV_ViewingDirectionReferenceArrowFont");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::LineFontBuilder::LineFontType viewingDirectionReferenceArrowFontType;
			viewingDirectionReferenceArrowFontType = _preferencesBuilder->ViewStyle()->ViewProjectedArrowSettings()->LineColorFontWidth()->LineFont()->LineFont();
			int int_viewingDirectionReferenceArrowFontType;
			if (viewingDirectionReferenceArrowFontType == NXOpen::LineFontBuilder::LineFontTypeNoChange) {
				int_viewingDirectionReferenceArrowFontType = -2;
			}
			else if (viewingDirectionReferenceArrowFontType == NXOpen::LineFontBuilder::LineFontTypeOriginal) {
				int_viewingDirectionReferenceArrowFontType = 0;
			}
			else if (viewingDirectionReferenceArrowFontType == NXOpen::LineFontBuilder::LineFontTypeInvisible) {
				int_viewingDirectionReferenceArrowFontType = -1;
			}
			else if (viewingDirectionReferenceArrowFontType == NXOpen::LineFontBuilder::LineFontTypeSolid) {
				int_viewingDirectionReferenceArrowFontType = 1;
			}
			else if (viewingDirectionReferenceArrowFontType == NXOpen::LineFontBuilder::LineFontTypeDashed) {
				int_viewingDirectionReferenceArrowFontType = 2;
			}
			else if (viewingDirectionReferenceArrowFontType == NXOpen::LineFontBuilder::LineFontTypePhantom) {
				int_viewingDirectionReferenceArrowFontType = 3;
			}
			else if (viewingDirectionReferenceArrowFontType == NXOpen::LineFontBuilder::LineFontTypeCenterline) {
				int_viewingDirectionReferenceArrowFontType = 4;
			}
			else if (viewingDirectionReferenceArrowFontType == NXOpen::LineFontBuilder::LineFontTypeDotted) {
				int_viewingDirectionReferenceArrowFontType = 5;
			}
			else if (viewingDirectionReferenceArrowFontType == NXOpen::LineFontBuilder::LineFontTypeLongDashed) {
				int_viewingDirectionReferenceArrowFontType = 6;
			}
			else if (viewingDirectionReferenceArrowFontType == NXOpen::LineFontBuilder::LineFontTypeDottedDashed) {
				int_viewingDirectionReferenceArrowFontType = 7;
			}
			ist_id_value.assign(convert_to_string(int_viewingDirectionReferenceArrowFontType));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_viewingDirectionReferenceArrowFontType = convert_to_int(soll_id_value);
				if (int_viewingDirectionReferenceArrowFontType == -2) {
					viewingDirectionReferenceArrowFontType = NXOpen::LineFontBuilder::LineFontTypeNoChange;
				}
				else if (int_viewingDirectionReferenceArrowFontType == 0) {
					viewingDirectionReferenceArrowFontType = NXOpen::LineFontBuilder::LineFontTypeOriginal;
				}
				else if (int_viewingDirectionReferenceArrowFontType == -1) {
					viewingDirectionReferenceArrowFontType = NXOpen::LineFontBuilder::LineFontTypeInvisible;
				}
				else if (int_viewingDirectionReferenceArrowFontType == 1) {
					viewingDirectionReferenceArrowFontType = NXOpen::LineFontBuilder::LineFontTypeSolid;
				}
				else if (int_viewingDirectionReferenceArrowFontType == 2) {
					viewingDirectionReferenceArrowFontType = NXOpen::LineFontBuilder::LineFontTypeDashed;
				}
				else if (int_viewingDirectionReferenceArrowFontType == 3) {
					viewingDirectionReferenceArrowFontType = NXOpen::LineFontBuilder::LineFontTypePhantom;
				}
				else if (int_viewingDirectionReferenceArrowFontType == 4) {
					viewingDirectionReferenceArrowFontType = NXOpen::LineFontBuilder::LineFontTypeCenterline;
				}
				else if (int_viewingDirectionReferenceArrowFontType == 5) {
					viewingDirectionReferenceArrowFontType = NXOpen::LineFontBuilder::LineFontTypeDotted;
				}
				else if (int_viewingDirectionReferenceArrowFontType == 6) {
					viewingDirectionReferenceArrowFontType = NXOpen::LineFontBuilder::LineFontTypeLongDashed;
				}
				else if (int_viewingDirectionReferenceArrowFontType == 7) {
					viewingDirectionReferenceArrowFontType = NXOpen::LineFontBuilder::LineFontTypeDottedDashed;
				}
				_preferencesBuilder->ViewStyle()->ViewProjectedArrowSettings()->LineColorFontWidth()->LineFont()->SetLineFont(viewingDirectionReferenceArrowFontType);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the line width for viewing direction reference arrows.
	id_name.assign("PV_ViewingDirectionReferenceArrowLineWidth");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::DisplayableObject::ObjectWidth firstExtensionLineWidth;
			firstExtensionLineWidth = _preferencesBuilder->ViewStyle()->ViewProjectedArrowSettings()->LineColorFontWidth()->LineWidth();
			int int_firstExtensionLineWidth;
			if (firstExtensionLineWidth == NXOpen::DisplayableObject::ObjectWidthNormal) {
				int_firstExtensionLineWidth = 0;
			}
			else if (firstExtensionLineWidth == NXOpen::DisplayableObject::ObjectWidthThick) {
				int_firstExtensionLineWidth = 1;
			}
			else if (firstExtensionLineWidth == NXOpen::DisplayableObject::ObjectWidthThin) {
				int_firstExtensionLineWidth = 2;
			}
			else if (firstExtensionLineWidth == NXOpen::DisplayableObject::ObjectWidthOne) {
				int_firstExtensionLineWidth = 5;
			}
			else if (firstExtensionLineWidth == NXOpen::DisplayableObject::ObjectWidthTwo) {
				int_firstExtensionLineWidth = 6;
			}
			else if (firstExtensionLineWidth == NXOpen::DisplayableObject::ObjectWidthThree) {
				int_firstExtensionLineWidth = 7;
			}
			else if (firstExtensionLineWidth == NXOpen::DisplayableObject::ObjectWidthFour) {
				int_firstExtensionLineWidth = 8;
			}
			else if (firstExtensionLineWidth == NXOpen::DisplayableObject::ObjectWidthFive) {
				int_firstExtensionLineWidth = 9;
			}
			else if (firstExtensionLineWidth == NXOpen::DisplayableObject::ObjectWidthSix) {
				int_firstExtensionLineWidth = 10;
			}
			else if (firstExtensionLineWidth == NXOpen::DisplayableObject::ObjectWidthSeven) {
				int_firstExtensionLineWidth = 11;
			}
			else if (firstExtensionLineWidth == NXOpen::DisplayableObject::ObjectWidthEight) {
				int_firstExtensionLineWidth = 12;
			}
			else if (firstExtensionLineWidth == NXOpen::DisplayableObject::ObjectWidthNine) {
				int_firstExtensionLineWidth = 13;
			}
			string id_name_tmp;
			std::map<const std::string, std::string>::iterator it_tmp;
			if (int_firstExtensionLineWidth == 0) {
				id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
				it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				int_firstExtensionLineWidth = convert_to_int(it_tmp->second);
			}
			if (int_firstExtensionLineWidth == 1) {
				id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
				it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				int_firstExtensionLineWidth = convert_to_int(it_tmp->second);
			}
			if (int_firstExtensionLineWidth == 2) {
				id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
				it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				int_firstExtensionLineWidth = convert_to_int(it_tmp->second);
			}
			//_nx_dpv->soll_dpv_map.find(id_name)->second = convert_to_string(int_firstExtensionLineWidth);
			ist_id_value.assign(convert_to_string(int_firstExtensionLineWidth));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_firstExtensionLineWidth = convert_to_int(soll_id_value);
				if (int_firstExtensionLineWidth == 0) {
					//lineColorFontWidth = NXOpen::DisplayableObject::ObjectWidthNormal;
					id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
					it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					firstExtensionLineWidth = (NXOpen::DisplayableObject::ObjectWidth) convert_to_int(it_tmp->second);
				}
				else if (int_firstExtensionLineWidth == 1) {
					//lineColorFontWidth = NXOpen::DisplayableObject::ObjectWidthThick;
					id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
					it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					firstExtensionLineWidth = (NXOpen::DisplayableObject::ObjectWidth) convert_to_int(it_tmp->second);
				}
				else if (int_firstExtensionLineWidth == 2) {
					//lineColorFontWidth = NXOpen::DisplayableObject::ObjectWidthThin;
					id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
					it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					firstExtensionLineWidth = (NXOpen::DisplayableObject::ObjectWidth) convert_to_int(it_tmp->second);
				}
				else if (int_firstExtensionLineWidth == 5) {
					firstExtensionLineWidth = NXOpen::DisplayableObject::ObjectWidthOne;
				}
				else if (int_firstExtensionLineWidth == 6) {
					firstExtensionLineWidth = NXOpen::DisplayableObject::ObjectWidthTwo;
				}
				else if (int_firstExtensionLineWidth == 7) {
					firstExtensionLineWidth = NXOpen::DisplayableObject::ObjectWidthThree;
				}
				else if (int_firstExtensionLineWidth == 8) {
					firstExtensionLineWidth = NXOpen::DisplayableObject::ObjectWidthFour;
				}
				else if (int_firstExtensionLineWidth == 9) {
					firstExtensionLineWidth = NXOpen::DisplayableObject::ObjectWidthFive;
				}
				else if (int_firstExtensionLineWidth == 10) {
					firstExtensionLineWidth = NXOpen::DisplayableObject::ObjectWidthSix;
				}
				else if (int_firstExtensionLineWidth == 11) {
					firstExtensionLineWidth = NXOpen::DisplayableObject::ObjectWidthSeven;
				}
				else if (int_firstExtensionLineWidth == 12) {
					firstExtensionLineWidth = NXOpen::DisplayableObject::ObjectWidthEight;
				}
				else if (int_firstExtensionLineWidth == 13) {
					firstExtensionLineWidth = NXOpen::DisplayableObject::ObjectWidthNine;
				}
				_preferencesBuilder->ViewStyle()->ViewProjectedArrowSettings()->LineColorFontWidth()->SetLineWidth(firstExtensionLineWidth);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- STOPP - %s --- \n", routineName.c_str());
}

/*
File - Preferences - Drafting - View - Section - Settings -> Repair these preferences.
*/
void repair_DraftingStandard_View_Section_Settings_prefs(NXOpen::Drafting::PreferencesBuilder *_preferencesBuilder, en_nx_dpv* _nx_dpv, Session * _theSession, Part* _workPart) {
	routineName.assign("repair_DraftingStandard_View_Section_Settings_prefs");
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- START - %s --- \n", routineName.c_str());
	
	//This option determines whether or not the edges behind the cutting plane should be displayed in section views.
	id_name.assign("Drafting_bgDisplay");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			bool backgroundToggle;
			backgroundToggle = _preferencesBuilder->ViewStyle()->ViewStyleSection()->Background();
			int int_backgroundToggle;
			int_backgroundToggle = (int)backgroundToggle;
			ist_id_value.assign(convert_to_string(int_backgroundToggle));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_backgroundToggle = convert_to_int(soll_id_value);
				backgroundToggle = false;
				if (int_backgroundToggle == 1) {
					backgroundToggle = true;
				}
				_preferencesBuilder->ViewStyle()->ViewStyleSection()->SetBackground(backgroundToggle);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not the edges before the cutting plane should be displayed in section views.
	id_name.assign("Drafting_fgDisplay");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			bool foregroundToggle;
			foregroundToggle = _preferencesBuilder->ViewStyle()->ViewStyleSection()->Foreground();
			int int_foregroundToggle;
			int_foregroundToggle = (int)foregroundToggle;
			ist_id_value.assign(convert_to_string(int_foregroundToggle));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_foregroundToggle = convert_to_int(soll_id_value);
				foregroundToggle = false;
				if (int_foregroundToggle == 1) {
					foregroundToggle = true;
				}
				_preferencesBuilder->ViewStyle()->ViewStyleSection()->SetForeground(foregroundToggle);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not sheet bodies should be sectioned in section views.
	id_name.assign("Drafting_sxviewSheetBody");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			bool sheetBodiesToggle;
			sheetBodiesToggle = _preferencesBuilder->ViewStyle()->ViewStyleSection()->SheetBodies();
			int int_sheetBodiesToggle;
			int_sheetBodiesToggle = (int)sheetBodiesToggle;
			ist_id_value.assign(convert_to_string(int_sheetBodiesToggle));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_sheetBodiesToggle = convert_to_int(soll_id_value);
				sheetBodiesToggle = false;
				if (int_sheetBodiesToggle == 1) {
					sheetBodiesToggle = true;
				}
				_preferencesBuilder->ViewStyle()->ViewStyleSection()->SetSheetBodies(sheetBodiesToggle);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not bend lines for solid bodies that are cut 
	//with the section line methods Simple/Stepped, Half, Revolved, or Point to Point 
	//will be displayed in section views.
	id_name.assign("Drafting_bendlinesDisplay");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			bool bendlinesToggle;
			bendlinesToggle = _preferencesBuilder->ViewStyle()->ViewStyleSection()->Bendlines();
			int int_bendlinesToggle;
			int_bendlinesToggle = (int)bendlinesToggle;
			ist_id_value.assign(convert_to_string(int_bendlinesToggle));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_bendlinesToggle = convert_to_int(soll_id_value);
				bendlinesToggle = false;
				if (int_bendlinesToggle == 1) {
					bendlinesToggle = true;
				}
				_preferencesBuilder->ViewStyle()->ViewStyleSection()->SetBendlines(bendlinesToggle);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not crosshatching should be generated in section views.
	id_name.assign("Drafting_sxviewCrosshatchDisplay");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			bool crosshatchToggle;
			crosshatchToggle = _preferencesBuilder->ViewStyle()->ViewStyleSection()->Crosshatch();
			int int_crosshatchToggle;
			int_crosshatchToggle = (int)crosshatchToggle;
			ist_id_value.assign(convert_to_string(int_crosshatchToggle));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_crosshatchToggle = convert_to_int(soll_id_value);
				crosshatchToggle = false;
				if (int_crosshatchToggle == 1) {
					crosshatchToggle = true;
				}
				_preferencesBuilder->ViewStyle()->ViewStyleSection()->SetCrosshatch(crosshatchToggle);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not hatching for break-out or pictorial section 
	//views participate in hidden line processing.
	id_name.assign("Drafting_hdCrosshatch");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			bool hiddenLineHatchingToggle;
			hiddenLineHatchingToggle = _preferencesBuilder->ViewStyle()->ViewStyleSection()->HiddenLineHatching();
			int int_hiddenLineHatchingToggle;
			int_hiddenLineHatchingToggle = (int)hiddenLineHatchingToggle;
			ist_id_value.assign(convert_to_string(int_hiddenLineHatchingToggle));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_hiddenLineHatchingToggle = convert_to_int(soll_id_value);
				hiddenLineHatchingToggle = false;
				if (int_hiddenLineHatchingToggle == 1) {
					hiddenLineHatchingToggle = true;
				}
				_preferencesBuilder->ViewStyle()->ViewStyleSection()->SetHiddenLineHatching(hiddenLineHatchingToggle);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not the crosshatching angle for each adjacent solid in an
	//assembly section view should vary to provide better visualization of each solid in the view.
	id_name.assign("Axs_assemblyXhatching");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			bool assemblyToleranceToggle;
			assemblyToleranceToggle = _preferencesBuilder->ViewStyle()->ViewStyleSection()->AssemblyTolerance();
			int int_assemblyToleranceToggle;
			int_assemblyToleranceToggle = (int)assemblyToleranceToggle;
			ist_id_value.assign(convert_to_string(int_assemblyToleranceToggle));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_assemblyToleranceToggle = convert_to_int(soll_id_value);
				assemblyToleranceToggle = false;
				if (int_assemblyToleranceToggle == 1) {
					assemblyToleranceToggle = true;
				}
				_preferencesBuilder->ViewStyle()->ViewStyleSection()->SetAssemblyTolerance(assemblyToleranceToggle);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether assembly crosshatch angles should be restricted to + or - 45 degrees.
	id_name.assign("Axs_restrictCrosshatchAngle");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			bool restrictCrosshatchAngleToggle;
			restrictCrosshatchAngleToggle = _preferencesBuilder->ViewStyle()->ViewStyleSection()->RestrictCrosshatchAngle();
			int int_restrictCrosshatchAngleToggle;
			int_restrictCrosshatchAngleToggle = restrictCrosshatchAngleToggle ? 1 : 2;
			ist_id_value.assign(convert_to_string(int_restrictCrosshatchAngleToggle));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_restrictCrosshatchAngleToggle = convert_to_int(soll_id_value);
				bool restrictCrosshatchAngleToggle;
				restrictCrosshatchAngleToggle = false;
				if (int_restrictCrosshatchAngleToggle == 1) {
					restrictCrosshatchAngleToggle = true;
				}
				_preferencesBuilder->ViewStyle()->ViewStyleSection()->SetRestrictCrosshatchAngle(restrictCrosshatchAngleToggle);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the tolerance that determines the crosshatching angle of adjacent solids in an assembly 
	//section view. If the adjacent solid is at a distance less than the specified tolerance, the system automatically 
	//calculates a different crosshatching angle for that solid.
	if (_nx_dpv->usedUnitValue.compare("1") == 0) {
		id_name.assign("Axs_xhatchAdjacencyToler_MU");
	}
	else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
		id_name.assign("Axs_xhatchAdjacencyToler_EU");
	}
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double adjacencyToleranceData;
			adjacencyToleranceData = _preferencesBuilder->ViewStyle()->ViewStyleSection()->AdjacencyToleranceData();
			ist_id_value.assign(convert_to_string(adjacencyToleranceData));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				adjacencyToleranceData = convert_to_double(soll_id_value);
				_preferencesBuilder->ViewStyle()->ViewStyleSection()->SetAdjacencyToleranceData(adjacencyToleranceData);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- STOPP - %s --- \n", routineName.c_str());
}

/*
File - Preferences - Drafting - View - Section - Label -> Repair these preferences.
*/
void repair_DraftingStandard_View_Section_Label_prefs(NXOpen::Drafting::PreferencesBuilder *_preferencesBuilder, en_nx_dpv* _nx_dpv, Session * _theSession, Part* _workPart) {
	routineName.assign("repair_DraftingStandard_View_Section_Label_prefs");
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- START - %s --- \n", routineName.c_str());

	//This option specifies the position of the view label and view scale relative to the view.
	id_name.assign("Drafting_sectionVwLabelPosition");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::LabelPositionTypes labelPosition;
			labelPosition = _preferencesBuilder->ViewSectionLabel()->LabelPosition();
			int int_labelPosition;
			if (labelPosition == NXOpen::Drawings::LabelPositionTypesAbove) {
				int_labelPosition = 1;
			}
			else if (labelPosition == NXOpen::Drawings::LabelPositionTypesBelow) {
				int_labelPosition = 2;
			}
			else {
				int_labelPosition = -999;
			}
			ist_id_value.assign(convert_to_string(int_labelPosition));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_labelPosition = convert_to_int(soll_id_value);
				if (int_labelPosition == 1) {
					labelPosition = NXOpen::Drawings::LabelPositionTypesAbove;
				}
				else if (int_labelPosition == 2) {
					labelPosition = NXOpen::Drawings::LabelPositionTypesBelow;
				}
				if (int_labelPosition != -999) {
					_preferencesBuilder->ViewSectionLabel()->SetLabelPosition(labelPosition);
				}
				_preferencesBuilder->ViewSectionLabel()->SetLabelPosition(labelPosition);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not the view text portion of a view label should be included.
	id_name.assign("Drafting_sectionVwLabelIncludeTextLabel");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			bool showViewLabel;
			showViewLabel = _preferencesBuilder->ViewSectionLabel()->ShowViewLabel();
			int int_showViewLabel;
			int_showViewLabel = (int)showViewLabel;
			ist_id_value.assign(convert_to_string(int_showViewLabel));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_showViewLabel = convert_to_int(soll_id_value);
				showViewLabel = false;
				if (int_showViewLabel == 1) {
					showViewLabel = true;
				}
				_preferencesBuilder->ViewSectionLabel()->SetShowViewLabel(showViewLabel);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies what type of view label should be used. The View Name option 
	//means that the system generated view name will be used as the view label. The View 
	//Letter option means that the specified view letter parameters will be used as the view label.
	id_name.assign("Drafting_sectionVwLabelTextLabelType");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::ViewLabelTypes viewLabelOption;
			viewLabelOption = _preferencesBuilder->ViewSectionLabel()->ViewLabelOption();
			int int_viewLabelOption;
			if (viewLabelOption == NXOpen::Drawings::ViewLabelTypesName) {
				int_viewLabelOption = 1;
			}
			else if (viewLabelOption == NXOpen::Drawings::ViewLabelTypesLetter) {
				int_viewLabelOption = 2;
			}
			else {
				int_viewLabelOption = -999;
			}
			ist_id_value.assign(convert_to_string(int_viewLabelOption));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_viewLabelOption = convert_to_int(soll_id_value);
				if (int_viewLabelOption == 1) {
					viewLabelOption = NXOpen::Drawings::ViewLabelTypesName;
				}
				else if (int_viewLabelOption == 2) {
					viewLabelOption = NXOpen::Drawings::ViewLabelTypesLetter;
				}
				if (int_viewLabelOption != -999) {
					_preferencesBuilder->ViewSectionLabel()->SetViewLabelOption(viewLabelOption);
				}
				_preferencesBuilder->ViewSectionLabel()->SetViewLabelOption(viewLabelOption);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the view label prefix.
	id_name.assign("Drafting_sectionVwLabelViewLabelPrefix");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXString labelPrefix;
			labelPrefix = _preferencesBuilder->ViewSectionLabel()->LabelPrefix();
			ist_id_value.assign(labelPrefix.GetLocaleText());
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				labelPrefix = (NXString)soll_id_value.c_str();
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - labelPrefix = %s! \n", routineName.c_str(), labelPrefix.GetLocaleText());
				_preferencesBuilder->ViewSectionLabel()->SetLabelPrefix(labelPrefix);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the letter format of the view label; 
	//single letter or two letters separated by a dash or sheet zone reference.
	id_name.assign("Drafting_sectionVwLabelLetterFormat");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::LetterFormatTypes letterFormat;
			letterFormat = _preferencesBuilder->ViewSectionLabel()->LetterFormat();
			int int_letterFormat;
			if (letterFormat == NXOpen::Drawings::LetterFormatTypesA) {
				int_letterFormat = 1;
			}
			else if (letterFormat == NXOpen::Drawings::LetterFormatTypesAA) {
				int_letterFormat = 2;
			}
			else if (letterFormat == NXOpen::Drawings::LetterFormatTypesAA1) {
				int_letterFormat = 3;
			}
			else {
				int_letterFormat = -999;
			}
			ist_id_value.assign(convert_to_string(int_letterFormat));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_letterFormat = convert_to_int(soll_id_value);
				if (int_letterFormat == 1) {
					letterFormat = NXOpen::Drawings::LetterFormatTypesA;
				}
				else if (int_letterFormat == 2) {
					letterFormat = NXOpen::Drawings::LetterFormatTypesAA;
				}
				else if (int_letterFormat == 3) {
					letterFormat = NXOpen::Drawings::LetterFormatTypesAA1;
				}
				if (int_letterFormat != -999) {
					_preferencesBuilder->ViewSectionLabel()->SetLetterFormat(letterFormat);
				}
				_preferencesBuilder->ViewSectionLabel()->SetLetterFormat(letterFormat);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines the type of rotation symbol that will appear in section 
	//view labels if the view angle is other than zero.
	id_name.assign("Drafting_sectionVwLabelIncludeRotationSymbol");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::RotationSymbolTypes rotationSymbolType;
			rotationSymbolType = _preferencesBuilder->ViewSectionLabel()->RotationSymbolType();
			int int_rotationSymbolType;
			int_rotationSymbolType = (int)rotationSymbolType;
			ist_id_value.assign(convert_to_string(int_rotationSymbolType));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_rotationSymbolType = convert_to_int(soll_id_value);
				rotationSymbolType = (NXOpen::Drawings::RotationSymbolTypes)int_rotationSymbolType;
				_preferencesBuilder->ViewSectionLabel()->SetRotationSymbolType(rotationSymbolType);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not to display the rotation angle if a rotation symbol is displayed.
	id_name.assign("Drafting_sectionVwLabelIncludeRotationAngle");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			bool includeRotationAngle;
			includeRotationAngle = _preferencesBuilder->ViewSectionLabel()->IncludeRotationAngle();
			int int_includeRotationAngle;
			int_includeRotationAngle = (int)includeRotationAngle;
			ist_id_value.assign(convert_to_string(int_includeRotationAngle));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_includeRotationAngle = convert_to_int(soll_id_value);
				includeRotationAngle = false;
				if (int_includeRotationAngle == 1) {
					includeRotationAngle = true;
				}
				_preferencesBuilder->ViewSectionLabel()->SetIncludeRotationAngle(includeRotationAngle);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the view name letter size relative to the character size of the current font.
	id_name.assign("Drafting_sectionVwLabelLetterSizeFactor");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double labelCharacterHeightFactor;
			labelCharacterHeightFactor = _preferencesBuilder->ViewSectionLabel()->LabelCharacterHeightFactor();
			ist_id_value.assign(convert_to_string(labelCharacterHeightFactor));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				labelCharacterHeightFactor = convert_to_double(soll_id_value);
				_preferencesBuilder->ViewSectionLabel()->SetLabelCharacterHeightFactor(labelCharacterHeightFactor);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the reference to show in the view label: sheet and zone, sheet only, or zone only.
	id_name.assign("Drafting_sectionVwLabelShowReference");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::ReferenceShowTypes referenceToShow;
			referenceToShow = _preferencesBuilder->ViewSectionLabel()->ReferenceToShow();
			int int_referenceToShow;
			if (referenceToShow == NXOpen::Drawings::ReferenceShowTypesSheetandZone) {
				int_referenceToShow = 0;
			}
			else if (referenceToShow == NXOpen::Drawings::ReferenceShowTypesSheet) {
				int_referenceToShow = 1;
			}
			else if (referenceToShow == NXOpen::Drawings::ReferenceShowTypesZone) {
				int_referenceToShow = 2;
			}
			else {
				int_referenceToShow = -999;
			}
			ist_id_value.assign(convert_to_string(int_referenceToShow));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_referenceToShow = convert_to_int(soll_id_value);
				if (int_referenceToShow == 0) {
					referenceToShow = NXOpen::Drawings::ReferenceShowTypesSheetandZone;
				}
				else if (int_referenceToShow == 1) {
					referenceToShow = NXOpen::Drawings::ReferenceShowTypesSheet;
				}
				else if (int_referenceToShow == 2) {
					referenceToShow = NXOpen::Drawings::ReferenceShowTypesZone;
				}
				if (int_referenceToShow != -999) {
					_preferencesBuilder->ViewSectionLabel()->SetReferenceToShow(referenceToShow);
				}
				_preferencesBuilder->ViewSectionLabel()->SetReferenceToShow(referenceToShow);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not the scale label portion of a view label should be included.
	id_name.assign("Drafting_sectionVwLabelIncludeScaleLabel");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			bool showViewScale;
			showViewScale = _preferencesBuilder->ViewSectionLabel()->ShowViewScale();
			int int_showViewScale;
			int_showViewScale = showViewScale ? 1 : 0;
			ist_id_value.assign(convert_to_string(int_showViewScale));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_showViewScale = convert_to_int(soll_id_value);
				showViewScale = false;
				if (int_showViewScale == 1) {
					showViewScale = true;
				}
				_preferencesBuilder->ViewSectionLabel()->SetShowViewScale(showViewScale);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the position of the scale label relative to the view label.
	id_name.assign("Drafting_sectionVwLabelViewScalePosition");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::ScalePositionTypes scalePosition;
			scalePosition = _preferencesBuilder->ViewSectionLabel()->ScalePosition();
			int int_scalePosition;
			if (scalePosition == NXOpen::Drawings::ScalePositionTypesAbove) {
				int_scalePosition = 1;
			}
			else if(scalePosition == NXOpen::Drawings::ScalePositionTypesBelow) {
				int_scalePosition = 2;
			}
			else if (scalePosition == NXOpen::Drawings::ScalePositionTypesBefore) {
				int_scalePosition = 3;
			}
			else if (scalePosition == NXOpen::Drawings::ScalePositionTypesAfter) {
				int_scalePosition = 4;
			}
			else {
				int_scalePosition = -999;
			}
			ist_id_value.assign(convert_to_string(int_scalePosition));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_scalePosition = convert_to_int(soll_id_value);
				if (int_scalePosition == 1) {
					scalePosition = NXOpen::Drawings::ScalePositionTypesAbove;
				}
				else if (int_scalePosition == 2) {
					scalePosition = NXOpen::Drawings::ScalePositionTypesBelow;
				}
				else if (int_scalePosition == 3) {
					scalePosition = NXOpen::Drawings::ScalePositionTypesBefore;
				}
				else if (int_scalePosition == 4) {
					scalePosition = NXOpen::Drawings::ScalePositionTypesAfter;
				}
				if (int_scalePosition != -999) {
					_preferencesBuilder->ViewSectionLabel()->SetScalePosition(scalePosition);
				}
				_preferencesBuilder->ViewSectionLabel()->SetScalePosition(scalePosition);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the scale label prefix.
	id_name.assign("Drafting_sectionVwLabelScaleLabelPrefix");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXString scalePrefix;
			scalePrefix = _preferencesBuilder->ViewSectionLabel()->ScalePrefix();
			ist_id_value.assign(scalePrefix.GetLocaleText());
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				scalePrefix = (NXString)soll_id_value.c_str();
				_preferencesBuilder->ViewSectionLabel()->SetScalePrefix(scalePrefix);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the character size of the scale label prefix relative
	id_name.assign("Drafting_sectionVwLabelScalePrefixFactor");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double prefixCharacterHeightFactor;
			prefixCharacterHeightFactor = _preferencesBuilder->ViewSectionLabel()->PrefixCharacterHeightFactor();
			ist_id_value.assign(convert_to_string(prefixCharacterHeightFactor));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				prefixCharacterHeightFactor = convert_to_double(soll_id_value);
				_preferencesBuilder->ViewSectionLabel()->SetPrefixCharacterHeightFactor(prefixCharacterHeightFactor);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the format for the scale value.
	id_name.assign("Drafting_sectionVwLabelScaleValueFormat");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::ScaleValueFormatTypes valueFormat;
			valueFormat = _preferencesBuilder->ViewSectionLabel()->ValueFormat();
			int int_valueFormat;
			if (valueFormat == NXOpen::Drawings::ScaleValueFormatTypesRatio) {
				int_valueFormat = 1;
			}
			else if (valueFormat == NXOpen::Drawings::ScaleValueFormatTypesCommonFraction) {
				int_valueFormat = 2;
			}
			else if (valueFormat == NXOpen::Drawings::ScaleValueFormatTypesSingleLineFraction) {
				int_valueFormat = 3;
			}
			else if (valueFormat == NXOpen::Drawings::ScaleValueFormatTypesNx) {
				int_valueFormat = 4;
			}
			else {
				int_valueFormat = -999;
			}
			ist_id_value.assign(convert_to_string(int_valueFormat));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_valueFormat = convert_to_int(soll_id_value);
				if (int_valueFormat == 1) {
					valueFormat = NXOpen::Drawings::ScaleValueFormatTypesRatio;
				}
				else if (int_valueFormat == 2) {
					valueFormat = NXOpen::Drawings::ScaleValueFormatTypesCommonFraction;
				}
				else if (int_valueFormat == 3) {
					valueFormat = NXOpen::Drawings::ScaleValueFormatTypesSingleLineFraction;
				}
				else if (int_valueFormat == 4) {
					valueFormat = NXOpen::Drawings::ScaleValueFormatTypesNx;
				}
				if (int_valueFormat != -999) {
					_preferencesBuilder->ViewSectionLabel()->SetValueFormat(valueFormat);
				}
				_preferencesBuilder->ViewSectionLabel()->SetValueFormat(valueFormat);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the character size of the scale value relative to the character size of the current font.
	id_name.assign("Drafting_sectionVwLabelScaleTextFactor");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double scaleCharacterHeightFactor;
			scaleCharacterHeightFactor = _preferencesBuilder->ViewSectionLabel()->ScaleCharacterHeightFactor();
			ist_id_value.assign(convert_to_string(scaleCharacterHeightFactor));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				scaleCharacterHeightFactor = convert_to_double(soll_id_value);
				_preferencesBuilder->ViewSectionLabel()->SetScaleCharacterHeightFactor(scaleCharacterHeightFactor);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not the scale label is enclosed in parentheses.
	id_name.assign("Drafting_sectionVwLabelIncludeParentheses");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			bool includedParentheses;
			includedParentheses = _preferencesBuilder->ViewSectionLabel()->IncludeParentheses();
			int int_includedParentheses;
			int_includedParentheses = (int)includedParentheses;
			ist_id_value.assign(convert_to_string(int_includedParentheses));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_includedParentheses = convert_to_int(soll_id_value);
				includedParentheses = false;
				if (int_includedParentheses == 1) {
					includedParentheses = true;
				}
				_preferencesBuilder->ViewSectionLabel()->SetIncludeParentheses(includedParentheses);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- STOPP - %s --- \n", routineName.c_str());
}

/*
File - Preferences - Drafting - View - Detail - Settings -> Repair these preferences.
*/
void repair_DraftingStandard_View_Detail_Settings_prefs(NXOpen::Drafting::PreferencesBuilder *_preferencesBuilder, en_nx_dpv* _nx_dpv, Session * _theSession, Part* _workPart) {
	routineName.assign("repair_DraftingStandard_View_Detail_Settings_prefs");
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- START - %s --- \n", routineName.c_str());

	//This option specifies the color of the detail view boundary line.
	id_name.assign("Drafting_detailViewBoundaryLineColor");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::NXColor *color;
			color = _preferencesBuilder->ViewStyle()->ViewStyleDetail()->ViewBoundaryColor();
			int colorIndex;
			colorIndex = color->Handle();
			ist_id_value.assign(convert_to_string(colorIndex));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				colorIndex = convert_to_int(soll_id_value);
				color = _workPart->Colors()->Find(colorIndex);
				_preferencesBuilder->ViewStyle()->ViewStyleDetail()->SetViewBoundaryColor(color);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the character font for appended text. Any font present in the directory
	//pointed to by the UGII_CHARACTER_FONT_DIR environment variable can be specified here.
	id_name.assign("Drafting_detailViewBoundaryLineFont");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Preferences::Font detailViewBoundaryLineFont;
			detailViewBoundaryLineFont = _preferencesBuilder->ViewStyle()->ViewStyleDetail()->ViewBoundaryFont();
			int int_detailViewBoundaryLineFont;
			if (detailViewBoundaryLineFont == NXOpen::Preferences::FontInvisible) {
				int_detailViewBoundaryLineFont = 0;
			}
			else if (detailViewBoundaryLineFont == NXOpen::Preferences::FontSolid) {
				int_detailViewBoundaryLineFont = 1;
			}
			else if (detailViewBoundaryLineFont == NXOpen::Preferences::FontDashed) {
				int_detailViewBoundaryLineFont = 2;
			}
			else if (detailViewBoundaryLineFont == NXOpen::Preferences::FontPhantom) {
				int_detailViewBoundaryLineFont = 3;
			}
			else if (detailViewBoundaryLineFont == NXOpen::Preferences::FontCenterline) {
				int_detailViewBoundaryLineFont = 4;
			}
			else if (detailViewBoundaryLineFont == NXOpen::Preferences::FontDotted) {
				int_detailViewBoundaryLineFont = 5;
			}
			else if (detailViewBoundaryLineFont == NXOpen::Preferences::FontLongDashed) {
				int_detailViewBoundaryLineFont = 6;
			}
			else if (detailViewBoundaryLineFont == NXOpen::Preferences::FontDottedDashed) {
				int_detailViewBoundaryLineFont = 7;
			}
			else if (detailViewBoundaryLineFont == NXOpen::Preferences::FontOriginal) {
				int_detailViewBoundaryLineFont = 8;
			}
			ist_id_value.assign(convert_to_string(int_detailViewBoundaryLineFont));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_detailViewBoundaryLineFont = convert_to_int(soll_id_value);
				if (int_detailViewBoundaryLineFont == 0) {
					detailViewBoundaryLineFont = NXOpen::Preferences::FontInvisible;
				}
				else if (int_detailViewBoundaryLineFont == 1) {
					detailViewBoundaryLineFont = NXOpen::Preferences::FontSolid;
				}
				else if (int_detailViewBoundaryLineFont == 2) {
					detailViewBoundaryLineFont = NXOpen::Preferences::FontDashed;
				}
				else if (int_detailViewBoundaryLineFont == 3) {
					detailViewBoundaryLineFont = NXOpen::Preferences::FontPhantom;
				}
				else if (int_detailViewBoundaryLineFont == 4) {
					detailViewBoundaryLineFont = NXOpen::Preferences::FontCenterline;
				}
				else if (int_detailViewBoundaryLineFont == 5) {
					detailViewBoundaryLineFont = NXOpen::Preferences::FontDotted;
				}
				else if (int_detailViewBoundaryLineFont == 6) {
					detailViewBoundaryLineFont = NXOpen::Preferences::FontLongDashed;
				}
				else if (int_detailViewBoundaryLineFont == 7) {
					detailViewBoundaryLineFont = NXOpen::Preferences::FontDottedDashed;
				}
				else if (int_detailViewBoundaryLineFont == 8) {
					detailViewBoundaryLineFont = NXOpen::Preferences::FontOriginal;
				}
				_preferencesBuilder->ViewStyle()->ViewStyleDetail()->SetViewBoundaryFont(detailViewBoundaryLineFont);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the detail view boundary line width.
	id_name.assign("Drafting_detailViewBoundaryLineWidth");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			int int_viewBoundaryWidth;
			NXOpen::Preferences::Width viewBoundaryWidth;
			viewBoundaryWidth = _preferencesBuilder->ViewStyle()->ViewStyleDetail()->ViewBoundaryWidth();
			if (viewBoundaryWidth == NXOpen::Preferences::WidthOriginal) {
				int_viewBoundaryWidth = 0;
			}
			else if (viewBoundaryWidth == NXOpen::Preferences::WidthThin) {
				int_viewBoundaryWidth = 1;
			}
			else if (viewBoundaryWidth == NXOpen::Preferences::WidthNormal) {
				int_viewBoundaryWidth = 2;
			}
			else if (viewBoundaryWidth == NXOpen::Preferences::WidthThick) {
				int_viewBoundaryWidth = 3;
			}
			else if (viewBoundaryWidth == NXOpen::Preferences::WidthOne) {
				int_viewBoundaryWidth = 5;
			}
			else if (viewBoundaryWidth == NXOpen::Preferences::WidthTwo) {
				int_viewBoundaryWidth = 6;
			}
			else if (viewBoundaryWidth == NXOpen::Preferences::WidthThree) {
				int_viewBoundaryWidth = 7;
			}
			else if (viewBoundaryWidth == NXOpen::Preferences::WidthFour) {
				int_viewBoundaryWidth = 8;
			}
			else if (viewBoundaryWidth == NXOpen::Preferences::WidthFive) {
				int_viewBoundaryWidth = 9;
			}
			else if (viewBoundaryWidth == NXOpen::Preferences::WidthSix) {
				int_viewBoundaryWidth = 10;
			}
			else if (viewBoundaryWidth == NXOpen::Preferences::WidthSeven) {
				int_viewBoundaryWidth = 11;
			}
			else if (viewBoundaryWidth == NXOpen::Preferences::WidthEight) {
				int_viewBoundaryWidth = 12;
			}
			else if (viewBoundaryWidth == NXOpen::Preferences::WidthNine) {
				int_viewBoundaryWidth = 13;
			}
			//string id_name_tmp;
			//std::map<const std::string, std::string>::iterator it_tmp;
			//if (int_viewBoundaryWidth == 1) {
			//	id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
			//	it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
			//	int_viewBoundaryWidth = convert_to_int(it_tmp->second);
			//}
			//if (int_viewBoundaryWidth == 2) {
			//	id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
			//	it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
			//	int_viewBoundaryWidth = convert_to_int(it_tmp->second);
			//}
			//if (int_viewBoundaryWidth == 3) {
			//	id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
			//	it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
			//	int_viewBoundaryWidth = convert_to_int(it_tmp->second);
			//}
			//_nx_dpv->soll_dpv_map.find(id_name)->second = convert_to_string(int_viewBoundaryWidth);
			ist_id_value.assign(convert_to_string(int_viewBoundaryWidth));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_viewBoundaryWidth = convert_to_int(soll_id_value);
				if (int_viewBoundaryWidth == 0) {
					viewBoundaryWidth = NXOpen::Preferences::WidthOriginal;
				}
				else if (int_viewBoundaryWidth == 1) {
					viewBoundaryWidth = NXOpen::Preferences::WidthThin;
					//id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
					//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					//viewBoundaryWidth = (NXOpen::Preferences::Width) convert_to_int(it_tmp->second);
				}
				else if (int_viewBoundaryWidth == 2) {
					viewBoundaryWidth = NXOpen::Preferences::WidthNormal;
					//id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
					//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					//viewBoundaryWidth = (NXOpen::Preferences::Width) convert_to_int(it_tmp->second);
				}
				else if (int_viewBoundaryWidth == 3) {
					viewBoundaryWidth = NXOpen::Preferences::WidthThick;
					//id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
					//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					//viewBoundaryWidth = (NXOpen::Preferences::Width) convert_to_int(it_tmp->second);
				}
				else if (int_viewBoundaryWidth == 5) {
					viewBoundaryWidth = NXOpen::Preferences::WidthOne;
				}
				else if (int_viewBoundaryWidth == 6) {
					viewBoundaryWidth = NXOpen::Preferences::WidthTwo;
				}
				else if (int_viewBoundaryWidth == 7) {
					viewBoundaryWidth = NXOpen::Preferences::WidthThree;
				}
				else if (int_viewBoundaryWidth == 8) {
					viewBoundaryWidth = NXOpen::Preferences::WidthFour;
				}
				else if (int_viewBoundaryWidth == 9) {
					viewBoundaryWidth = NXOpen::Preferences::WidthFive;
				}
				else if (int_viewBoundaryWidth == 10) {
					viewBoundaryWidth = NXOpen::Preferences::WidthSix;
				}
				else if (int_viewBoundaryWidth == 11) {
					viewBoundaryWidth = NXOpen::Preferences::WidthSeven;
				}
				else if (int_viewBoundaryWidth == 12) {
					viewBoundaryWidth = NXOpen::Preferences::WidthEight;
				}
				else if (int_viewBoundaryWidth == 13) {
					viewBoundaryWidth = NXOpen::Preferences::WidthNine;
				}
				_preferencesBuilder->ViewStyle()->ViewStyleDetail()->SetViewBoundaryWidth(viewBoundaryWidth);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not to clip detail view boundaries to 
	//only be shown where the boundary intersects with model geometry.
	id_name.assign("Drafting_detailViewClipBoundary");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			bool clipViewBoundaryToggle;
			clipViewBoundaryToggle = _preferencesBuilder->ViewStyle()->ViewStyleDetail()->ClipViewBoundary();
			ist_id_value.assign(convert_to_string(clipViewBoundaryToggle));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				clipViewBoundaryToggle = convert_to_bool(soll_id_value);
				_preferencesBuilder->ViewStyle()->ViewStyleDetail()->SetClipViewBoundary(clipViewBoundaryToggle);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not newly created detail views are independent.
	id_name.assign("Drafting_detailViewCreateIndependent");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			bool createIndependentDetailViewToggle;
			createIndependentDetailViewToggle = _preferencesBuilder->ViewStyle()->ViewStyleDetail()->CreateIndependentDetailView();
			int int_createIndependentDetailViewToggle;
			int_createIndependentDetailViewToggle = (int)createIndependentDetailViewToggle;
			ist_id_value.assign(convert_to_string(int_createIndependentDetailViewToggle));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_createIndependentDetailViewToggle = convert_to_int(soll_id_value);
				createIndependentDetailViewToggle = false;
				if (int_createIndependentDetailViewToggle == 1) {
					createIndependentDetailViewToggle = true;
				}
				_preferencesBuilder->ViewStyle()->ViewStyleDetail()->SetCreateIndependentDetailView(createIndependentDetailViewToggle);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- STOPP - %s --- \n", routineName.c_str());
}

/*
File - Preferences - Drafting - View - Detail - Label -> Repair these preferences.
*/
void repair_DraftingStandard_View_Detail_Label_prefs(NXOpen::Drafting::PreferencesBuilder *_preferencesBuilder, en_nx_dpv* _nx_dpv, Session * _theSession, Part* _workPart) {
	routineName.assign("repair_DraftingStandard_View_Detail_Label_prefs");
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- START - %s --- \n", routineName.c_str());

	//This option specifies the position of the view label and view scale relative to the view.
	id_name.assign("Drafting_detailVwLabelPosition");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::LabelPositionTypes labelPosition;
			labelPosition = _preferencesBuilder->ViewDetailLabel()->LabelPosition();
			int int_labelPosition;
			if (labelPosition == NXOpen::Drawings::LabelPositionTypesAbove) {
				int_labelPosition = 1;
			}
			else if (labelPosition == NXOpen::Drawings::LabelPositionTypesBelow) {
				int_labelPosition = 2;
			}
			else {
				int_labelPosition = -999;
			}
			ist_id_value.assign(convert_to_string(int_labelPosition));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
				soll_id_value.assign(it->second);
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
				if (ist_id_value.compare(soll_id_value) != 0) {
					//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
					int_labelPosition = convert_to_int(soll_id_value);
					if (int_labelPosition == 1) {
						labelPosition = NXOpen::Drawings::LabelPositionTypesAbove;
					}
					else if (int_labelPosition == 2) {
						labelPosition = NXOpen::Drawings::LabelPositionTypesBelow;
					}
					if (int_labelPosition != -999) {
						_preferencesBuilder->ViewDetailLabel()->SetLabelPosition(labelPosition);
					}
					_preferencesBuilder->ViewDetailLabel()->SetLabelPosition(labelPosition);
					_preferencesBuilder->Commit();
					nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
				}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not the view text portion of a view label should be included.
	id_name.assign("Drafting_detailVwLabelIncludeTextLabel");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			bool showViewLabel;
			showViewLabel = _preferencesBuilder->ViewDetailLabel()->ShowViewLabel();
			int int_showViewLabel;
			int_showViewLabel = (int)showViewLabel;
			ist_id_value.assign(convert_to_string(int_showViewLabel));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_showViewLabel = convert_to_int(soll_id_value);
				showViewLabel = false;
				if (int_showViewLabel == 1) {
					showViewLabel = true;
				}
				_preferencesBuilder->ViewDetailLabel()->SetShowViewLabel(showViewLabel);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}
	
	//This option specifies what type of view label should be used. 
	//The View Name option means that the system generated view name will be 
	//used as the view label. The View Letter option means that the specified 
	//view letter parameters will be used as the view label.
	id_name.assign("Drafting_detailVwLabelTextLabelType");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::ViewLabelTypes viewLabelOption;
			viewLabelOption = _preferencesBuilder->ViewDetailLabel()->ViewLabelOption();
			int int_viewLabelOption;
			if (viewLabelOption == NXOpen::Drawings::ViewLabelTypesName) {
				int_viewLabelOption = 1;
			}
			else if (viewLabelOption == NXOpen::Drawings::ViewLabelTypesLetter) {
				int_viewLabelOption = 2;
			}
			else {
				int_viewLabelOption = -999;
			}
			ist_id_value.assign(convert_to_string(int_viewLabelOption));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_viewLabelOption = convert_to_int(soll_id_value);
				if (int_viewLabelOption == 1) {
					viewLabelOption = NXOpen::Drawings::ViewLabelTypesName;
				}
				else if (int_viewLabelOption == 2) {
					viewLabelOption = NXOpen::Drawings::ViewLabelTypesLetter;
				}
				if (int_viewLabelOption != -999) {
					_preferencesBuilder->ViewDetailLabel()->SetViewLabelOption(viewLabelOption);
				}
				_preferencesBuilder->ViewDetailLabel()->SetViewLabelOption(viewLabelOption);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the view label prefix.
	id_name.assign("Drafting_detailVwLabelViewLabelPrefix");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXString labelPrefix;
			labelPrefix = _preferencesBuilder->ViewDetailLabel()->LabelPrefix();
			ist_id_value.assign(labelPrefix.GetLocaleText());
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				labelPrefix = (NXString)soll_id_value.c_str();
				_preferencesBuilder->ViewDetailLabel()->SetLabelPrefix(labelPrefix);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the letter format of the view label; 
	//single letter or two letters separated by a dash or sheet zone reference.
	id_name.assign("Drafting_detailVwLabelLetterFormat");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::LetterFormatTypes letterFormat;
			letterFormat = _preferencesBuilder->ViewDetailLabel()->LetterFormat();
			int int_letterFormat;
			if (letterFormat == NXOpen::Drawings::LetterFormatTypesA) {
				int_letterFormat = 1;
			}
			else if (letterFormat == NXOpen::Drawings::LetterFormatTypesAA) {
				int_letterFormat = 2;
			}
			else if (letterFormat == NXOpen::Drawings::LetterFormatTypesAA1) {
				int_letterFormat = 3;
			}
			else {
				int_letterFormat = -999;
			}
			ist_id_value.assign(convert_to_string(int_letterFormat));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_letterFormat = convert_to_int(soll_id_value);
				if (int_letterFormat == 1) {
					letterFormat = NXOpen::Drawings::LetterFormatTypesA;
				}
				else if (int_letterFormat == 2) {
					letterFormat = NXOpen::Drawings::LetterFormatTypesAA;
				}
				else if (int_letterFormat == 3) {
					letterFormat = NXOpen::Drawings::LetterFormatTypesAA1;
				}
				_preferencesBuilder->ViewDetailLabel()->SetLetterFormat(letterFormat);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the reference to show in the view label: sheet and zone, sheet only, or zone only.
	id_name.assign("Drafting_detailVwLabelShowReference");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::ReferenceShowTypes referenceToShow;
			referenceToShow = _preferencesBuilder->ViewDetailLabel()->ReferenceToShow();
			int int_referenceToShow;
			if (referenceToShow == NXOpen::Drawings::ReferenceShowTypesSheetandZone) {
				int_referenceToShow = 0;
			}
			else if (referenceToShow == NXOpen::Drawings::ReferenceShowTypesSheet) {
				int_referenceToShow = 1;
			}
			else if (referenceToShow == NXOpen::Drawings::ReferenceShowTypesZone) {
				int_referenceToShow = 2;
			}
			else {
				int_referenceToShow = -999;
			}
			ist_id_value.assign(convert_to_string(int_referenceToShow));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_referenceToShow = convert_to_int(soll_id_value);
				if (int_referenceToShow == 0) {
					referenceToShow = NXOpen::Drawings::ReferenceShowTypesSheetandZone;
				}
				else if (int_referenceToShow == 1) {
					referenceToShow = NXOpen::Drawings::ReferenceShowTypesSheet;
				}
				else if (int_referenceToShow == 2) {
					referenceToShow = NXOpen::Drawings::ReferenceShowTypesZone;
				}
				if (int_referenceToShow != -999) {
					_preferencesBuilder->ViewDetailLabel()->SetReferenceToShow(referenceToShow);
				}
				_preferencesBuilder->ViewDetailLabel()->SetReferenceToShow(referenceToShow);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the view name letter size relative to the character size of the current font.
	id_name.assign("Drafting_detailVwLabelLetterSizeFactor");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double labelCharacterHeightFactor;
			labelCharacterHeightFactor = _preferencesBuilder->ViewDetailLabel()->LabelCharacterHeightFactor();
			ist_id_value.assign(convert_to_string(labelCharacterHeightFactor));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				labelCharacterHeightFactor = convert_to_double(soll_id_value);
				_preferencesBuilder->ViewDetailLabel()->SetLabelCharacterHeightFactor(labelCharacterHeightFactor);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the view boundary and its label type for the parent view of a detail view. 
	//The second through the fifth options give a circular view boundary. The third through the fifth 
	//options also include different types of labels in relation to the circular view boundary. The 
	//sixth and seventh options display the true boundary on the parent and the seventh option also 
	//includes a label.
	id_name.assign("Drafting_detailVwLabelParentType");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::ViewDetailLabelBuilder::LabelParentDisplayTypes labelParentDisplay;
			labelParentDisplay = _preferencesBuilder->ViewDetailLabel()->LabelParentDisplay();
			int int_labelParentDisplay;
			int_labelParentDisplay = (int)labelParentDisplay;
			ist_id_value.assign(convert_to_string(int_labelParentDisplay));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_labelParentDisplay = convert_to_int(soll_id_value);
				NXOpen::Drawings::ViewDetailLabelBuilder::LabelParentDisplayTypes labelParentDisplay;
				labelParentDisplay = (NXOpen::Drawings::ViewDetailLabelBuilder::LabelParentDisplayTypes)int_labelParentDisplay;
				_preferencesBuilder->ViewDetailLabel()->SetLabelParentDisplay(labelParentDisplay);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies where the text should be placed in relation to the leader stub.
	id_name.assign("Drafting_detailVwLabelTextAboveLeader");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::ViewDetailLabelBuilder::LabelParentTextPlacement textPlacement;
			textPlacement = _preferencesBuilder->ViewDetailLabel()->TextPlacement();
			int int_textPlacement;
			if (textPlacement == NXOpen::Drawings::ViewDetailLabelBuilder::LabelParentTextPlacementBeforeOrAfterStub) {
				int_textPlacement = 0;
			}
			else if (textPlacement == NXOpen::Drawings::ViewDetailLabelBuilder::LabelParentTextPlacementAboveStub) {
				int_textPlacement = 1;
			}
			else {
				int_textPlacement = -999;
			}
			ist_id_value.assign(convert_to_string(int_textPlacement));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_textPlacement = convert_to_int(soll_id_value);
				if (int_textPlacement == 0) {
					textPlacement = NXOpen::Drawings::ViewDetailLabelBuilder::LabelParentTextPlacementBeforeOrAfterStub;
				}
				else if (int_textPlacement == 1) {
					textPlacement = NXOpen::Drawings::ViewDetailLabelBuilder::LabelParentTextPlacementAboveStub;
				}
				if (int_textPlacement != -999) {
					_preferencesBuilder->ViewDetailLabel()->SetTextPlacement(textPlacement);
				}
				_preferencesBuilder->ViewDetailLabel()->SetTextPlacement(textPlacement);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the spacing (or gap size) between the arrowhead and the embedded text 
	//for the Embedded option of Label on Parent. The gap size is equal to the character width 
	//divided by the factor.
	id_name.assign("Drafting_detailVwLabelGapFactor");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double textGapFactor;
			textGapFactor = _preferencesBuilder->ViewDetailLabel()->TextGapFactor();
			ist_id_value.assign(convert_to_string(textGapFactor));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				textGapFactor = convert_to_double(soll_id_value);
				_preferencesBuilder->ViewDetailLabel()->SetTextGapFactor(textGapFactor);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the label prefix for the parent of a detail view.
	id_name.assign("Drafting_circularDetailVwLabelPrefix");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXString parentLabelPrefix;
			parentLabelPrefix = _preferencesBuilder->ViewDetailLabel()->ParentLabelPrefix();
			ist_id_value.assign(parentLabelPrefix.GetLocaleText());
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				parentLabelPrefix = (NXString)soll_id_value.c_str();
				_preferencesBuilder->ViewDetailLabel()->SetParentLabelPrefix(parentLabelPrefix);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not the scale label portion of a view label should be included.
	id_name.assign("Drafting_detailVwLabelIncludeScaleLabel");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			bool showViewScale;
			showViewScale = _preferencesBuilder->ViewDetailLabel()->ShowViewScale();
			int int_showViewScale;
			int_showViewScale = showViewScale ? 1 : 0;
			ist_id_value.assign(convert_to_string(int_showViewScale));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_showViewScale = convert_to_int(soll_id_value);
				showViewScale = false;
				if (int_showViewScale == 1) {
					showViewScale = true;
				}
				_preferencesBuilder->ViewDetailLabel()->SetShowViewScale(showViewScale);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the position of the scale label relative to the view label.
	id_name.assign("Drafting_detailVwLabelViewScalePosition");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::ScalePositionTypes scalePosition;
			scalePosition = _preferencesBuilder->ViewDetailLabel()->ScalePosition();
			int int_labelPosition;
			if (scalePosition == NXOpen::Drawings::ScalePositionTypesAbove) {
				int_labelPosition = 1;
			}
			else if (scalePosition == NXOpen::Drawings::ScalePositionTypesBelow) {
				int_labelPosition = 2;
			}
			else if (scalePosition == NXOpen::Drawings::ScalePositionTypesBefore) {
				int_labelPosition = 3;
			}
			else if (scalePosition == NXOpen::Drawings::ScalePositionTypesAfter) {
				int_labelPosition = 4;
			}
			else {
				int_labelPosition = -999;
			}
			ist_id_value.assign(convert_to_string(int_labelPosition));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_labelPosition = convert_to_int(soll_id_value);
				if (int_labelPosition == 1) {
					scalePosition = NXOpen::Drawings::ScalePositionTypesAbove;
				}
				else if (int_labelPosition == 2) {
					scalePosition = NXOpen::Drawings::ScalePositionTypesBelow;
				}
				else if (int_labelPosition == 3) {
					scalePosition = NXOpen::Drawings::ScalePositionTypesBefore;
				}
				else if (int_labelPosition == 4) {
					scalePosition = NXOpen::Drawings::ScalePositionTypesAfter;
				}
				if (int_labelPosition != -999) {
					_preferencesBuilder->ViewDetailLabel()->SetScalePosition(scalePosition);
				}
				_preferencesBuilder->ViewDetailLabel()->SetScalePosition(scalePosition);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the scale label prefix.
	id_name.assign("Drafting_detailVwLabelScaleLabelPrefix");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXString scalePrefix;
			scalePrefix = _preferencesBuilder->ViewDetailLabel()->ScalePrefix();
			ist_id_value.assign(scalePrefix.GetLocaleText());
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				scalePrefix = (NXString)soll_id_value.c_str();
				_preferencesBuilder->ViewDetailLabel()->SetScalePrefix(scalePrefix);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the character size of the scale label prefix relative 
	//to the character size of the current font.
	id_name.assign("Drafting_detailVwLabelScalePrefixFactor");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double prefixCharacterHeightFactor;
			prefixCharacterHeightFactor = _preferencesBuilder->ViewDetailLabel()->PrefixCharacterHeightFactor();
			ist_id_value.assign(convert_to_string(prefixCharacterHeightFactor));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				prefixCharacterHeightFactor = convert_to_double(soll_id_value);
				_preferencesBuilder->ViewDetailLabel()->SetPrefixCharacterHeightFactor(prefixCharacterHeightFactor);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the format for the scale value.
	id_name.assign("Drafting_detailVwLabelScaleValueFormat");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::ScaleValueFormatTypes valueFormat;
			valueFormat = _preferencesBuilder->ViewDetailLabel()->ValueFormat();
			int int_valueFormat;
			if (valueFormat == NXOpen::Drawings::ScaleValueFormatTypesRatio) {
				int_valueFormat = 1;
			}
			if (valueFormat == NXOpen::Drawings::ScaleValueFormatTypesCommonFraction) {
				int_valueFormat = 2;
			}
			if (valueFormat == NXOpen::Drawings::ScaleValueFormatTypesSingleLineFraction) {
				int_valueFormat = 3;
			}
			if (valueFormat == NXOpen::Drawings::ScaleValueFormatTypesNx) {
				int_valueFormat = 4;
			}
			ist_id_value.assign(convert_to_string(int_valueFormat));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_valueFormat = convert_to_int(soll_id_value);
				if (int_valueFormat == 1) {
					valueFormat = NXOpen::Drawings::ScaleValueFormatTypesRatio;
				}
				else if (int_valueFormat == 2) {
					valueFormat = NXOpen::Drawings::ScaleValueFormatTypesCommonFraction;
				}
				else if (int_valueFormat == 3) {
					valueFormat = NXOpen::Drawings::ScaleValueFormatTypesSingleLineFraction;
				}
				else if (int_valueFormat == 4) {
					valueFormat = NXOpen::Drawings::ScaleValueFormatTypesNx;
				}
				if (int_valueFormat != -999) {
					_preferencesBuilder->ViewLabel()->SetValueFormat(valueFormat);
				}
				_preferencesBuilder->ViewDetailLabel()->SetValueFormat(valueFormat);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the character size of the scale value relative 
	//to the character size of the current font.
	id_name.assign("Drafting_detailVwLabelScaleTextFactor");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double scaleCharacterHeightFactor;
			scaleCharacterHeightFactor = _preferencesBuilder->ViewDetailLabel()->ScaleCharacterHeightFactor();
			ist_id_value.assign(convert_to_string(scaleCharacterHeightFactor));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				scaleCharacterHeightFactor = convert_to_double(soll_id_value);
				_preferencesBuilder->ViewDetailLabel()->SetScaleCharacterHeightFactor(scaleCharacterHeightFactor);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}
	
	//This option determines whether or not the scale label is enclosed in parentheses.
	id_name.assign("Drafting_detailVwLabelIncludeParentheses");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			bool includeParentheses;
			includeParentheses = _preferencesBuilder->ViewDetailLabel()->IncludeParentheses();
			int int_includeParentheses;
			int_includeParentheses = (int)includeParentheses;
			ist_id_value.assign(convert_to_string(int_includeParentheses));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_includeParentheses = convert_to_int(soll_id_value);
				includeParentheses = false;
				if (int_includeParentheses == 1) {
					includeParentheses = true;
				}
				_preferencesBuilder->ViewDetailLabel()->SetIncludeParentheses(includeParentheses);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- STOPP - %s --- \n", routineName.c_str());
}

/*
File - Preferences - Drafting - View - Section Line - Display and Format -> Repair these preferences.
*/
void repair_DraftingStandard_View_SectionLine_DisplayAndFormat_prefs(NXOpen::Drafting::PreferencesBuilder *_preferencesBuilder, en_nx_dpv* _nx_dpv, Session * _theSession, Part* _workPart) {
	routineName.assign("repair_DraftingStandard_View_SectionLine_DisplayAndFormat_prefs");
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- START - %s --- \n", routineName.c_str());
	
	//This option determines whether or not a section view should be created when a section line is created.
	id_name.assign("Drafting_sectionLineWithView");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::ViewSectionLineBuilder::ShowSectionLineType showSectionLine;
			NXOpen::Drawings::ViewStyleBuilder *viewStyleBuilder;
			viewStyleBuilder = _preferencesBuilder->ViewStyle();
			showSectionLine = viewStyleBuilder->ViewSectionLineStyleBuilder()->ShowSectionLine();
			int int_showSectionLine;
			int_showSectionLine = (int)showSectionLine;
			ist_id_value.assign(convert_to_string(int_showSectionLine));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_showSectionLine = convert_to_int(soll_id_value);
				showSectionLine = (NXOpen::Drawings::ViewSectionLineBuilder::ShowSectionLineType)int_showSectionLine;
				viewStyleBuilder->ViewSectionLineStyleBuilder()->SetShowSectionLine(showSectionLine);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the section line symbol display.
	if (_nx_dpv->usedUnitValue.compare("1") == 0) {
		id_name.assign("Axs_sxlDisplay_MU");
	}
	else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
		id_name.assign("Axs_sxlDisplay_EU");
	}
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::ViewSectionLineBuilder::DisplayType typeStandard;
			NXOpen::Drawings::ViewStyleBuilder *viewStyleBuilder;
			viewStyleBuilder = _preferencesBuilder->ViewStyle();
			typeStandard = viewStyleBuilder->ViewSectionLineStyleBuilder()->TypeStandard();
			int int_typeStandard;

			if (typeStandard == NXOpen::Drawings::ViewSectionLineBuilder::DisplayTypeArrowsAwayfromLine) {
				int_typeStandard = 2;
			} 
			else if (typeStandard == NXOpen::Drawings::ViewSectionLineBuilder::DisplayTypeArrowstowardsLine) {
				int_typeStandard = 3;
			}
			else if (typeStandard == NXOpen::Drawings::ViewSectionLineBuilder::DisplayTypeThickEndsArrowstowardsLine) {
				int_typeStandard = 4;
			}
			else if (typeStandard == NXOpen::Drawings::ViewSectionLineBuilder::DisplayTypeThickEndsArrowsAwayfromLine) {
				int_typeStandard = 6;
			}
			ist_id_value.assign(convert_to_string(int_typeStandard));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_typeStandard = convert_to_int(soll_id_value);
				if (int_typeStandard == 2) {
					typeStandard = NXOpen::Drawings::ViewSectionLineBuilder::DisplayTypeArrowsAwayfromLine;
				}
				else if (int_typeStandard == 3) {
					typeStandard = NXOpen::Drawings::ViewSectionLineBuilder::DisplayTypeArrowstowardsLine;
				}
				else if (int_typeStandard == 4) {
					typeStandard = NXOpen::Drawings::ViewSectionLineBuilder::DisplayTypeThickEndsArrowstowardsLine;
				}
				else if (int_typeStandard == 6) {
					typeStandard = NXOpen::Drawings::ViewSectionLineBuilder::DisplayTypeThickEndsArrowsAwayfromLine;
				}
				viewStyleBuilder->ViewSectionLineStyleBuilder()->SetTypeStandard(typeStandard);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the color of the section line.
	if (_nx_dpv->usedUnitValue.compare("1") == 0) {
		id_name.assign("Axs_sxlColor_MU");
	}
	else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
		id_name.assign("Axs_sxlColor_EU");
	}
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::NXColor *lineColor;
			NXOpen::Drawings::ViewStyleBuilder *viewStyleBuilder;
			viewStyleBuilder = _preferencesBuilder->ViewStyle();
			lineColor = viewStyleBuilder->ViewSectionLineStyleBuilder()->LineColorFontWidth()->LineColor();
			int lineColorIndex;
			lineColorIndex = lineColor->Handle();
			ist_id_value.assign(convert_to_string(lineColorIndex));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				lineColorIndex = convert_to_int(soll_id_value);
				lineColor = _workPart->Colors()->Find(lineColorIndex);
				viewStyleBuilder->ViewSectionLineStyleBuilder()->LineColorFontWidth()->SetLineColor(lineColor);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the line font for the section line. Invisible is available only for ISO128 section lines.
	id_name.assign("Axs_sxlFont");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::LineFontBuilder::LineFontType lineFont;
			NXOpen::Drawings::ViewStyleBuilder *viewStyleBuilder;
			viewStyleBuilder = _preferencesBuilder->ViewStyle();
			lineFont = viewStyleBuilder->ViewSectionLineStyleBuilder()->LineColorFontWidth()->LineFont()->LineFont();
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("Axs_sxlFont = %d \n", (int)lineFont);
			int int_lineFont;
			if (lineFont == NXOpen::LineFontBuilder::LineFontTypeNoChange) {
				int_lineFont = -2;
			}
			else if (lineFont == NXOpen::LineFontBuilder::LineFontTypeOriginal) {
				int_lineFont = 0;
			}
			else if (lineFont == NXOpen::LineFontBuilder::LineFontTypeInvisible) {
				int_lineFont = -1;
			}
			else if (lineFont == NXOpen::LineFontBuilder::LineFontTypeSolid) {
				int_lineFont = 1;
			}
			else if (lineFont == NXOpen::LineFontBuilder::LineFontTypeDashed) {
				int_lineFont = 2;
			}
			else if (lineFont == NXOpen::LineFontBuilder::LineFontTypePhantom) {
				int_lineFont = 3;
			}
			else if (lineFont == NXOpen::LineFontBuilder::LineFontTypeCenterline) {
				int_lineFont = 4;
			}
			else if (lineFont == NXOpen::LineFontBuilder::LineFontTypeDotted) {
				int_lineFont = 5;
			}
			else if (lineFont == NXOpen::LineFontBuilder::LineFontTypeLongDashed) {
				int_lineFont = 6;
			}
			else if (lineFont == NXOpen::LineFontBuilder::LineFontTypeDottedDashed) {
				int_lineFont = 7;
			}
			ist_id_value.assign(convert_to_string(int_lineFont));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_lineFont = convert_to_int(soll_id_value);
				if (int_lineFont == -2) {
					lineFont = NXOpen::LineFontBuilder::LineFontTypeNoChange;
				}
				else if (int_lineFont == 0) {
					lineFont = NXOpen::LineFontBuilder::LineFontTypeOriginal;
				}
				else if (int_lineFont == -1) {
					lineFont = NXOpen::LineFontBuilder::LineFontTypeInvisible;
				}
				else if (int_lineFont == 1) {
					lineFont = NXOpen::LineFontBuilder::LineFontTypeSolid;
				}
				else if (int_lineFont == 2) {
					lineFont = NXOpen::LineFontBuilder::LineFontTypeDashed;
				}
				else if (int_lineFont == 3) {
					lineFont = NXOpen::LineFontBuilder::LineFontTypePhantom;
				}
				else if (int_lineFont == 4) {
					lineFont = NXOpen::LineFontBuilder::LineFontTypeCenterline;
				}
				else if (int_lineFont == 5) {
					lineFont = NXOpen::LineFontBuilder::LineFontTypeDotted;
				}
				else if (int_lineFont == 6) {
					lineFont = NXOpen::LineFontBuilder::LineFontTypeLongDashed;
				}
				else if (int_lineFont == 7) {
					lineFont = NXOpen::LineFontBuilder::LineFontTypeDottedDashed;
				}
				viewStyleBuilder->ViewSectionLineStyleBuilder()->LineColorFontWidth()->LineFont()->SetLineFont(lineFont);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the line width for the section line.
	id_name.assign("Axs_sxlWidth");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::DisplayableObject::ObjectWidth lineColorFontWidth;
			NXOpen::Drawings::ViewStyleBuilder *viewStyleBuilder;
			viewStyleBuilder = _preferencesBuilder->ViewStyle();
			lineColorFontWidth = viewStyleBuilder->ViewSectionLineStyleBuilder()->LineColorFontWidth()->LineWidth();
			int int_lineColorFontWidth;
			if (lineColorFontWidth == NXOpen::DisplayableObject::ObjectWidthNormal) {
				int_lineColorFontWidth = 0;
			}
			else if (lineColorFontWidth == NXOpen::DisplayableObject::ObjectWidthThick) {
				int_lineColorFontWidth = 1;
			}
			else if (lineColorFontWidth == NXOpen::DisplayableObject::ObjectWidthThin) {
				int_lineColorFontWidth = 2;
			}
			else if (lineColorFontWidth == NXOpen::DisplayableObject::ObjectWidthOne) {
				int_lineColorFontWidth = 5;
			}
			else if (lineColorFontWidth == NXOpen::DisplayableObject::ObjectWidthTwo) {
				int_lineColorFontWidth = 6;
			}
			else if (lineColorFontWidth == NXOpen::DisplayableObject::ObjectWidthThree) {
				int_lineColorFontWidth = 7;
			}
			else if (lineColorFontWidth == NXOpen::DisplayableObject::ObjectWidthFour) {
				int_lineColorFontWidth = 8;
			}
			else if (lineColorFontWidth == NXOpen::DisplayableObject::ObjectWidthFive) {
				int_lineColorFontWidth = 9;
			}
			else if (lineColorFontWidth == NXOpen::DisplayableObject::ObjectWidthSix) {
				int_lineColorFontWidth = 10;
			}
			else if (lineColorFontWidth == NXOpen::DisplayableObject::ObjectWidthSeven) {
				int_lineColorFontWidth = 11;
			}
			else if (lineColorFontWidth == NXOpen::DisplayableObject::ObjectWidthEight) {
				int_lineColorFontWidth = 12;
			}
			else if (lineColorFontWidth == NXOpen::DisplayableObject::ObjectWidthNine) {
				int_lineColorFontWidth = 13;
			}
			string id_name_tmp;
			std::map<const std::string, std::string>::iterator it_tmp;
			if (int_lineColorFontWidth == 0) {
				id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
				it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				int_lineColorFontWidth = convert_to_int(it_tmp->second);
			}
			if (int_lineColorFontWidth == 1) {
				id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
				it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				int_lineColorFontWidth = convert_to_int(it_tmp->second);
			}
			if (int_lineColorFontWidth == 2) {
				id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
				it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				int_lineColorFontWidth = convert_to_int(it_tmp->second);
			}
			//_nx_dpv->soll_dpv_map.find(id_name)->second = convert_to_string(int_lineColorFontWidth);
			ist_id_value.assign(convert_to_string(int_lineColorFontWidth));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_lineColorFontWidth = convert_to_int(soll_id_value);
				if (int_lineColorFontWidth == 0) {
					//lineColorFontWidth = NXOpen::DisplayableObject::ObjectWidthNormal;
					id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
					it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					lineColorFontWidth = (NXOpen::DisplayableObject::ObjectWidth) convert_to_int(it_tmp->second);
				}
				else if (int_lineColorFontWidth == 1) {
					//lineColorFontWidth = NXOpen::DisplayableObject::ObjectWidthThick;
					id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
					it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					lineColorFontWidth = (NXOpen::DisplayableObject::ObjectWidth) convert_to_int(it_tmp->second);
				}
				else if (int_lineColorFontWidth == 2) {
					//lineColorFontWidth = NXOpen::DisplayableObject::ObjectWidthThin;
					id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
					it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					lineColorFontWidth = (NXOpen::DisplayableObject::ObjectWidth) convert_to_int(it_tmp->second);
				}
				else if (int_lineColorFontWidth == 5) {
					lineColorFontWidth = NXOpen::DisplayableObject::ObjectWidthOne;
				}
				else if (int_lineColorFontWidth == 6) {
					lineColorFontWidth = NXOpen::DisplayableObject::ObjectWidthTwo;
				}
				else if (int_lineColorFontWidth == 7) {
					lineColorFontWidth = NXOpen::DisplayableObject::ObjectWidthThree;
				}
				else if (int_lineColorFontWidth == 8) {
					lineColorFontWidth = NXOpen::DisplayableObject::ObjectWidthFour;
				}
				else if (int_lineColorFontWidth == 9) {
					lineColorFontWidth = NXOpen::DisplayableObject::ObjectWidthFive;
				}
				else if (int_lineColorFontWidth == 10) {
					lineColorFontWidth = NXOpen::DisplayableObject::ObjectWidthSix;
				}
				else if (int_lineColorFontWidth == 11) {
					lineColorFontWidth = NXOpen::DisplayableObject::ObjectWidthSeven;
				}
				else if (int_lineColorFontWidth == 12) {
					lineColorFontWidth = NXOpen::DisplayableObject::ObjectWidthEight;
				}
				else if (int_lineColorFontWidth == 13) {
					lineColorFontWidth = NXOpen::DisplayableObject::ObjectWidthNine;
				}
				viewStyleBuilder->ViewSectionLineStyleBuilder()->LineColorFontWidth()->SetLineWidth(lineColorFontWidth);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the section line bend and end segment width relative to the cut segment line width.
	id_name.assign("Drafting_sectionLineBendAndEndSegmentWidthFactor");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double bendAndEndSegmentWidthFactor;
			NXOpen::Drawings::ViewStyleBuilder *viewStyleBuilder;
			viewStyleBuilder = _preferencesBuilder->ViewStyle();
			bendAndEndSegmentWidthFactor = viewStyleBuilder->ViewSectionLineStyleBuilder()->BendAndEndSegmentWidthFactor();
			ist_id_value.assign(convert_to_string(bendAndEndSegmentWidthFactor));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				bendAndEndSegmentWidthFactor = convert_to_double(soll_id_value);
				viewStyleBuilder->ViewSectionLineStyleBuilder()->SetBendAndEndSegmentWidthFactor(bendAndEndSegmentWidthFactor);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- STOPP - %s --- \n", routineName.c_str());
}

/*
File - Preferences - Drafting - View - Section Line - Arrowhead -> Repair these preferences.
*/
void repair_DraftingStandard_View_SectionLine_Arrowhead_prefs(NXOpen::Drafting::PreferencesBuilder *_preferencesBuilder, en_nx_dpv* _nx_dpv, Session * _theSession, Part* _workPart) {
	routineName.assign("repair_DraftingStandard_View_SectionLine_Arrowhead_prefs");
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- START - %s --- \n", routineName.c_str());
	
	//This option specifies the section line arrowhead style.
	id_name.assign("Axs_arrowheadType");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::ViewSectionLineBuilder::StyleType style;
			NXOpen::Drawings::ViewStyleBuilder *viewStyleBuilder;
			viewStyleBuilder = _preferencesBuilder->ViewStyle();
			style = viewStyleBuilder->ViewSectionLineStyleBuilder()->Style();
			int int_style;
			//int_style = (int)style;
			if (style == NXOpen::Drawings::ViewSectionLineBuilder::StyleTypeOpen) {
				int_style = 2;
			} 
			else if (style == NXOpen::Drawings::ViewSectionLineBuilder::StyleTypeClosed) {
				int_style = 1;
			}
			else if (style == NXOpen::Drawings::ViewSectionLineBuilder::StyleTypeFilled) {
				int_style = 0;
			}
			ist_id_value.assign(convert_to_string(int_style));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_style = convert_to_int(soll_id_value);
				//style = (NXOpen::Drawings::ViewSectionLineBuilder::StyleType)int_style;
				if (int_style == 2) {
					style = NXOpen::Drawings::ViewSectionLineBuilder::StyleTypeOpen;
				}
				else if (int_style == 1) {
					style = NXOpen::Drawings::ViewSectionLineBuilder::StyleTypeClosed;
				}
				else if (int_style == 0) {
					style = NXOpen::Drawings::ViewSectionLineBuilder::StyleTypeFilled;
				}
				viewStyleBuilder->ViewSectionLineStyleBuilder()->SetStyle(style);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the arrowhead length.
	if (_nx_dpv->usedUnitValue.compare("1") == 0) {
		id_name.assign("Axs_arrowSize_MU");
	}
	else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
		id_name.assign("Axs_arrowSize_EU");
	}
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double arrowheadLength;
			NXOpen::Drawings::ViewStyleBuilder *viewStyleBuilder;
			viewStyleBuilder = _preferencesBuilder->ViewStyle();
			arrowheadLength = viewStyleBuilder->ViewSectionLineStyleBuilder()->ArrowheadLength();
			ist_id_value.assign(convert_to_string(arrowheadLength));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				arrowheadLength = convert_to_double(soll_id_value);
				viewStyleBuilder->ViewSectionLineStyleBuilder()->SetArrowheadLength(arrowheadLength);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the included angle for the arrowhead.
	id_name.assign("Axs_arrowIncludedAngle");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double arrowheadAngle;
			NXOpen::Drawings::ViewStyleBuilder *viewStyleBuilder;
			viewStyleBuilder = _preferencesBuilder->ViewStyle();
			arrowheadAngle = viewStyleBuilder->ViewSectionLineStyleBuilder()->ArrowheadAngle();
			ist_id_value.assign(convert_to_string(arrowheadAngle));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				arrowheadAngle = convert_to_double(soll_id_value);
				viewStyleBuilder->ViewSectionLineStyleBuilder()->SetArrowheadAngle(arrowheadAngle);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- STOPP - %s --- \n", routineName.c_str());
}

/*
File - Preferences - Drafting - View - Section Line - Arrowline -> Repair these preferences.
*/
void repair_DraftingStandard_View_SectionLine_Arrowline_prefs(NXOpen::Drafting::PreferencesBuilder *_preferencesBuilder, en_nx_dpv* _nx_dpv, Session * _theSession, Part* _workPart) {
	routineName.assign("repair_DraftingStandard_View_SectionLine_Arrowline_prefs");
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- START - %s --- \n", routineName.c_str());
	
	//This option specifies the arrow length.
	if (_nx_dpv->usedUnitValue.compare("1") == 0) {
		id_name.assign("Axs_arrowLength_MU");
	}
	else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
		id_name.assign("Axs_arrowLength_EU");
	}
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double arrowLength;
			NXOpen::Drawings::ViewStyleBuilder *viewStyleBuilder;
			viewStyleBuilder = _preferencesBuilder->ViewStyle();
			arrowLength = viewStyleBuilder->ViewSectionLineStyleBuilder()->ArrowLength();
			ist_id_value.assign(convert_to_string(arrowLength));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				arrowLength = convert_to_double(soll_id_value);
				viewStyleBuilder->ViewSectionLineStyleBuilder()->SetArrowLength(arrowLength);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the distance between the section line arrows segments and the geometry box enclosing the part.
	if (_nx_dpv->usedUnitValue.compare("1") == 0) {
		id_name.assign("Axs_distPastPart_MU");
	}
	else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
		id_name.assign("Axs_distPastPart_EU");
	}
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double borderToArrowDistance;
			NXOpen::Drawings::ViewStyleBuilder *viewStyleBuilder;
			viewStyleBuilder = _preferencesBuilder->ViewStyle();
			borderToArrowDistance = viewStyleBuilder->ViewSectionLineStyleBuilder()->BorderToArrowDistance();
			ist_id_value.assign(convert_to_string(borderToArrowDistance));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				borderToArrowDistance = convert_to_double(soll_id_value);
				viewStyleBuilder->ViewSectionLineStyleBuilder()->SetBorderToArrowDistance(borderToArrowDistance);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//For ISO and JIS symbols, this option specifies the stub length. Stub Length is the portion of the section line that extends past the arrows.
	if (_nx_dpv->usedUnitValue.compare("1") == 0) {
		id_name.assign("Axs_stubbLength_MU");
	}
	else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
		id_name.assign("Axs_stubbLength_EU");
	}
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double overhang;
			NXOpen::Drawings::ViewStyleBuilder *viewStyleBuilder;
			viewStyleBuilder = _preferencesBuilder->ViewStyle();
			overhang = viewStyleBuilder->ViewSectionLineStyleBuilder()->Overhang();
			ist_id_value.assign(convert_to_string(overhang));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				overhang = convert_to_double(soll_id_value);
				viewStyleBuilder->ViewSectionLineStyleBuilder()->SetOverhang(overhang);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not to display the length of the end of the ESKD section line.
	id_name.assign("Axs_useLineLength");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			bool useLineLength;
			NXOpen::Drawings::ViewStyleBuilder *viewStyleBuilder;
			viewStyleBuilder = _preferencesBuilder->ViewStyle();
			useLineLength = viewStyleBuilder->ViewSectionLineStyleBuilder()->UseLineLength();
			ist_id_value.assign(convert_to_string(useLineLength));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				useLineLength = convert_to_bool(soll_id_value);
				viewStyleBuilder->ViewSectionLineStyleBuilder()->SetUseLineLength(useLineLength);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the length of the end of the ESKD section line.
	if (_nx_dpv->usedUnitValue.compare("1") == 0) {
		id_name.assign("Axs_lineLength_MU");
	}
	else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
		id_name.assign("Axs_lineLength_EU");
	}
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double lineLength;
			NXOpen::Drawings::ViewStyleBuilder *viewStyleBuilder;
			viewStyleBuilder = _preferencesBuilder->ViewStyle();
			lineLength = viewStyleBuilder->ViewSectionLineStyleBuilder()->LineLength();
			ist_id_value.assign(convert_to_string(lineLength));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				lineLength = convert_to_double(soll_id_value);
				viewStyleBuilder->ViewSectionLineStyleBuilder()->SetLineLength(lineLength);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- STOPP - %s --- \n", routineName.c_str());
}

/*
File - Preferences - Drafting - View - Section Line - Label -> Repair these preferences.
*/
void repair_DraftingStandard_View_SectionLine_Label_prefs(NXOpen::Drafting::PreferencesBuilder *_preferencesBuilder, en_nx_dpv* _nx_dpv, Session * _theSession, Part* _workPart) {
	routineName.assign("repair_DraftingStandard_View_SectionLine_Label_prefs");
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- START %s --- \n", routineName.c_str());
	
	//This option specifies the label location for ISO128 section lines.
	id_name.assign("Axs_labelLocation");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::ViewStyleBuilder *viewStyleBuilder;
			viewStyleBuilder = _preferencesBuilder->ViewStyle();
			NXOpen::Drawings::ViewSectionLineBuilder::LocationType labelLocation;
			labelLocation = viewStyleBuilder->ViewSectionLineStyleBuilder()->LabelLocation();
			int int_labelLocation;
			int_labelLocation = (int)labelLocation;
			ist_id_value.assign(convert_to_string(int_labelLocation));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_labelLocation = convert_to_int(soll_id_value);
				labelLocation = (NXOpen::Drawings::ViewSectionLineBuilder::LocationType)int_labelLocation;
				viewStyleBuilder->ViewSectionLineStyleBuilder()->SetLabelLocation(labelLocation);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not the section line label letter will be shown on a section line.
	id_name.assign("Drafting_SectionLineDisplayLetterToggle");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			bool display;
			NXOpen::Drawings::ViewStyleBuilder *viewStyleBuilder;
			viewStyleBuilder = _preferencesBuilder->ViewStyle();
			display = viewStyleBuilder->ViewSectionLineStyleBuilder()->Display();
			ist_id_value.assign(convert_to_string(display));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				display = convert_to_bool(soll_id_value);
				viewStyleBuilder->ViewSectionLineStyleBuilder()->SetDisplay(display);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not to display the JIS section line letters on bends.
	id_name.assign("Axs_sxlDisplayLettersOnBend");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			bool displayLettersOnBends;
			NXOpen::Drawings::ViewStyleBuilder *viewStyleBuilder;
			viewStyleBuilder = _preferencesBuilder->ViewStyle();
			displayLettersOnBends = viewStyleBuilder->ViewSectionLineStyleBuilder()->DisplayLettersOnBends();
			ist_id_value.assign(convert_to_string(displayLettersOnBends));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				displayLettersOnBends = convert_to_bool(soll_id_value);
				viewStyleBuilder->ViewSectionLineStyleBuilder()->SetDisplayLettersOnBends(displayLettersOnBends);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not to display the JIS section line rotation letter.
	id_name.assign("Axs_sxlDisplayJISRotationLetter");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			bool displayRotationLetter;
			NXOpen::Drawings::ViewStyleBuilder *viewStyleBuilder;
			viewStyleBuilder = _preferencesBuilder->ViewStyle();
			displayRotationLetter=viewStyleBuilder->ViewSectionLineStyleBuilder()->DisplayRotationLetter();
			int int_displayRotationLetter;
			if (displayRotationLetter == false) {
				int_displayRotationLetter = 2;
			}
			else {
				int_displayRotationLetter = 1;
			}
			ist_id_value.assign(convert_to_string(int_displayRotationLetter));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_displayRotationLetter = convert_to_int(soll_id_value);
				if (int_displayRotationLetter == 2) {
					displayRotationLetter = false;
				}
				else {
					displayRotationLetter = true;
				}
				viewStyleBuilder->ViewSectionLineStyleBuilder()->SetDisplayRotationLetter(displayRotationLetter);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the label font size.
	if (_nx_dpv->usedUnitValue.compare("1") == 0) {
		id_name.assign("Axs_sxletterCharSize_MU");
	}
	else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
		id_name.assign("Axs_sxletterCharSize_EU");
	}
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double labelCharacterHeightFactor;
			labelCharacterHeightFactor = _preferencesBuilder->ViewLabel()->LabelCharacterHeightFactor();
			ist_id_value.assign(convert_to_string(labelCharacterHeightFactor));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				labelCharacterHeightFactor = convert_to_int(soll_id_value);
				_preferencesBuilder->ViewLabel()->SetLabelCharacterHeightFactor(labelCharacterHeightFactor);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- STOPP - %s --- \n", routineName.c_str());
}

/*
File - Preferences - Drafting - View - Section Line - Offset -> Repair these preferences.
*/
void repair_DraftingStandard_View_SectionLine_Offset_prefs(NXOpen::Drafting::PreferencesBuilder *_preferencesBuilder, en_nx_dpv* _nx_dpv, Session * _theSession, Part* _workPart) {
	routineName.assign("repair_DraftingStandard_View_SectionLine_Offset_prefs");
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- START - %s --- \n", routineName.c_str());

	//This option determines whether or not a section line should be created with a 
	//foreground and background offset for body selection.
	id_name.assign("Drafting_offsetSectionLineToggle");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			bool useOffset;
			NXOpen::Drawings::ViewStyleBuilder *viewStyleBuilder;
			viewStyleBuilder = _preferencesBuilder->ViewStyle();
			useOffset=viewStyleBuilder->ViewSectionLineStyleBuilder()->UseOffset();
			ist_id_value.assign(convert_to_string(useOffset));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				useOffset = convert_to_bool(soll_id_value);
				viewStyleBuilder->ViewSectionLineStyleBuilder()->SetUseOffset(useOffset);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- STOPP - %s --- \n", routineName.c_str());
}

/*
File - Preferences - Drafting - View - Section Line - Hinge Line -> Repair these preferences.
*/
void repair_DraftingStandard_View_SectionLine_HingeLine_prefs(NXOpen::Drafting::PreferencesBuilder *_preferencesBuilder, en_nx_dpv* _nx_dpv, Session * _theSession, Part* _workPart) {
	routineName.assign("repair_DraftingStandard_View_SectionLine_HingeLine_prefs");
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- START - %s --- \n", routineName.c_str());
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- STOPP - %s --- \n", routineName.c_str());
}

/*
File - Preferences - Drafting - View - Break - Break -> Repair these preferences.
*/
void repair_DraftingStandard_View_Break_prefs(NXOpen::Drafting::PreferencesBuilder *_preferencesBuilder, en_nx_dpv* _nx_dpv, Session * _theSession, Part* _workPart) {
	routineName.assign("repair_DraftingStandard_View_Break_prefs");
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- START - %s --- \n", routineName.c_str());
	
	//This option determines whether or not the view break is visible.
	id_name.assign("Drafting_breakLineVisibilty");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			bool showBreakLines;
			showBreakLines = _preferencesBuilder->ViewBreak()->ShowBreakLines();
			int int_showBreakLines;
			int_showBreakLines = (int)showBreakLines;
			ist_id_value.assign(convert_to_string(int_showBreakLines));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_showBreakLines = convert_to_int(soll_id_value);
				showBreakLines = false;
				if (int_showBreakLines == 1) {
					showBreakLines = true;
				}
				_preferencesBuilder->ViewBreak()->SetShowBreakLines(showBreakLines);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the break line style of the view break.
	id_name.assign("Drafting_BreakLineStyle");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Drawings::ViewBreakBuilder::Viewbreaklinestyle breakLineStyle;
			breakLineStyle = _preferencesBuilder->ViewBreak()->BreakLineStyle();
			int int_breakLineStyle;
			int_breakLineStyle = (int)breakLineStyle;
			ist_id_value.assign(convert_to_string(int_breakLineStyle));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_breakLineStyle = convert_to_int(soll_id_value);
				breakLineStyle = (NXOpen::Drawings::ViewBreakBuilder::Viewbreaklinestyle)int_breakLineStyle;
				_preferencesBuilder->ViewBreak()->SetBreakLineStyle(breakLineStyle);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the break line amplitude of the view break.
	if (_nx_dpv->usedUnitValue.compare("1") == 0) {
		id_name.assign("Drafting_BreakLineAmplitude_MU");
	}
	else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
		id_name.assign("Drafting_BreakLineAmplitude_EU");
	}
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double breakLineAmplitute;
			breakLineAmplitute = _preferencesBuilder->ViewBreak()->BreakLineAmplitude();
			ist_id_value.assign(convert_to_string(breakLineAmplitute));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				breakLineAmplitute = convert_to_double(soll_id_value);
				_preferencesBuilder->ViewBreak()->SetBreakLineAmplitude(breakLineAmplitute);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the break line extension of the view break.
	if (_nx_dpv->usedUnitValue.compare("1") == 0) {
		id_name.assign("Drafting_BreakLineExtension_MU");
	}
	else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
		id_name.assign("Drafting_BreakLineExtension_EU");
	}
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double breakLineExtension;
			breakLineExtension = _preferencesBuilder->ViewBreak()->BreakLineExtension();
			ist_id_value.assign(convert_to_string(breakLineExtension));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				breakLineExtension = convert_to_double(soll_id_value);
				_preferencesBuilder->ViewBreak()->SetBreakLineExtension(breakLineExtension);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the gap of the view break.
	if (_nx_dpv->usedUnitValue.compare("1") == 0) {
		id_name.assign("Drafting_BreakGap_MU");
	}
	else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
		id_name.assign("Drafting_BreakGap_EU");
	}
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double breakGap;
			breakGap = _preferencesBuilder->ViewBreak()->BreakGap();
			ist_id_value.assign(convert_to_string(breakGap));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				breakGap = convert_to_double(soll_id_value);
				_preferencesBuilder->ViewBreak()->SetBreakGap(breakGap);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the color of the break lines in the view break.
	id_name.assign("Drafting_BreakColor");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::NXColor *lineColor;
			lineColor = _preferencesBuilder->ViewBreak()->BreakLineColorWidth()->LineColor();
			int lineColorIndex;
			lineColorIndex = lineColor->Handle();
			ist_id_value.assign(convert_to_string(lineColorIndex));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				lineColorIndex = convert_to_int(soll_id_value);
				lineColor = _workPart->Colors()->Find(lineColorIndex);
				_preferencesBuilder->ViewBreak()->BreakLineColorWidth()->SetLineColor(lineColor);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the break lines width of the view break.
	id_name.assign("Drafting_breakLineWidth");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			int int_breakLineColorWidth;
			NXOpen::DisplayableObject::ObjectWidth breakLineColorWidth;
			breakLineColorWidth = _preferencesBuilder->ViewBreak()->BreakLineColorWidth()->LineWidth();
			if (breakLineColorWidth == NXOpen::DisplayableObject::ObjectWidthNormal) {
				int_breakLineColorWidth = 0;
			}
			else if (breakLineColorWidth == NXOpen::DisplayableObject::ObjectWidthThick) {
				int_breakLineColorWidth = 1;
			}
			else if (breakLineColorWidth == NXOpen::DisplayableObject::ObjectWidthThin) {
				int_breakLineColorWidth = 2;
			}
			else if (breakLineColorWidth == NXOpen::DisplayableObject::ObjectWidthOne) {
				int_breakLineColorWidth = 5;
			}
			else if (breakLineColorWidth == NXOpen::DisplayableObject::ObjectWidthTwo) {
				int_breakLineColorWidth = 6;
			}
			else if (breakLineColorWidth == NXOpen::DisplayableObject::ObjectWidthThree) {
				int_breakLineColorWidth = 7;
			}
			else if (breakLineColorWidth == NXOpen::DisplayableObject::ObjectWidthFour) {
				int_breakLineColorWidth = 8;
			}
			else if (breakLineColorWidth == NXOpen::DisplayableObject::ObjectWidthFive) {
				int_breakLineColorWidth = 9;
			}
			else if (breakLineColorWidth == NXOpen::DisplayableObject::ObjectWidthSix) {
				int_breakLineColorWidth = 10;
			}
			else if (breakLineColorWidth == NXOpen::DisplayableObject::ObjectWidthSeven) {
				int_breakLineColorWidth = 11;
			}
			else if (breakLineColorWidth == NXOpen::DisplayableObject::ObjectWidthEight) {
				int_breakLineColorWidth = 12;
			}
			else if (breakLineColorWidth == NXOpen::DisplayableObject::ObjectWidthNine) {
				int_breakLineColorWidth = 13;
			}
			string id_name_tmp;
			std::map<const std::string, std::string>::iterator it_tmp;
			if (int_breakLineColorWidth == 0) {
				id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
				it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				int_breakLineColorWidth = convert_to_int(it_tmp->second);
			}
			if (int_breakLineColorWidth == 1) {
				id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
				it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				int_breakLineColorWidth = convert_to_int(it_tmp->second);
			}
			if (int_breakLineColorWidth == 2) {
				id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
				it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				int_breakLineColorWidth = convert_to_int(it_tmp->second);
			}
			//_nx_dpv->soll_dpv_map.find(id_name)->second = convert_to_string(int_breakLineColorWidth);
			ist_id_value.assign(convert_to_string(int_breakLineColorWidth));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_breakLineColorWidth = convert_to_int(soll_id_value);
				if (int_breakLineColorWidth == 0) {
					//breakLineColorWidth = NXOpen::DisplayableObject::ObjectWidthNormal;
					id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
					it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					breakLineColorWidth = (NXOpen::DisplayableObject::ObjectWidth) convert_to_int(it_tmp->second);
				}
				else if (int_breakLineColorWidth == 1) {
					//breakLineColorWidth = NXOpen::DisplayableObject::ObjectWidthThick;
					id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
					it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					breakLineColorWidth = (NXOpen::DisplayableObject::ObjectWidth) convert_to_int(it_tmp->second);
				}
				else if (int_breakLineColorWidth == 2) {
					//breakLineColorWidth = NXOpen::DisplayableObject::ObjectWidthThin;
					id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
					it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					breakLineColorWidth = (NXOpen::DisplayableObject::ObjectWidth) convert_to_int(it_tmp->second);
				}
				else if (int_breakLineColorWidth == 5) {
					breakLineColorWidth = NXOpen::DisplayableObject::ObjectWidthOne;
				}
				else if (int_breakLineColorWidth == 6) {
					breakLineColorWidth = NXOpen::DisplayableObject::ObjectWidthTwo;
				}
				else if (int_breakLineColorWidth == 7) {
					breakLineColorWidth = NXOpen::DisplayableObject::ObjectWidthThree;
				}
				else if (int_breakLineColorWidth == 8) {
					breakLineColorWidth = NXOpen::DisplayableObject::ObjectWidthFour;
				}
				else if (int_breakLineColorWidth == 9) {
					breakLineColorWidth = NXOpen::DisplayableObject::ObjectWidthFive;
				}
				else if (int_breakLineColorWidth == 10) {
					breakLineColorWidth = NXOpen::DisplayableObject::ObjectWidthSix;
				}
				else if (int_breakLineColorWidth == 11) {
					breakLineColorWidth = NXOpen::DisplayableObject::ObjectWidthSeven;
				}
				else if (int_breakLineColorWidth == 12) {
					breakLineColorWidth = NXOpen::DisplayableObject::ObjectWidthEight;
				}
				else if (int_breakLineColorWidth == 13) {
					breakLineColorWidth = NXOpen::DisplayableObject::ObjectWidthNine;
				}
				_preferencesBuilder->ViewBreak()->BreakLineColorWidth()->SetLineWidth(breakLineColorWidth);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not the view break propagates to projected and section views.
	id_name.assign("Drafting_ProbagateViewBreak");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			bool propagateViewBreak;
			propagateViewBreak = _preferencesBuilder->ViewBreak()->PropagateViewBreak();
			int int_propagateViewBreak;
			int_propagateViewBreak = (int)propagateViewBreak;
			ist_id_value.assign(convert_to_string(int_propagateViewBreak));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_propagateViewBreak = convert_to_int(soll_id_value);
				propagateViewBreak = false;
				if (int_propagateViewBreak == 1) {
					propagateViewBreak = true;
				}
				_preferencesBuilder->ViewBreak()->SetPropagateViewBreak(propagateViewBreak);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not foreshortening symbols are 
	//automatically created on dimensions that cross a view break.
	id_name.assign("Drafting_AddForeshorteningSymbol");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			bool addForeshorteningSymbol;
			addForeshorteningSymbol = _preferencesBuilder->ViewBreak()->AddForeshorteningSymbol();
			ist_id_value.assign(convert_to_string(addForeshorteningSymbol));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				addForeshorteningSymbol = convert_to_bool(soll_id_value);
				_preferencesBuilder->ViewBreak()->SetAddForeshorteningSymbol(addForeshorteningSymbol);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- STOPP - %s --- \n", routineName.c_str());
}

/*
File - Preferences - Drafting - Dimension - Workflow - Directed Dimensions -> Repair these preferences.
*/
void  repair_DraftingStandard_Dimension_Workflow_DirectedDimensions_prefs(NXOpen::Drafting::PreferencesBuilder *_preferencesBuilder, en_nx_dpv* _nx_dpv, Session * _theSession, Part* _workPart) {
	routineName.assign("repair_DraftingStandardd_Dimension_Workflow_DirectedDimensions_prefs");
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- START - %s --- \n", routineName.c_str());
	
	//This option determines whether or not directed dimensions may be specified for linear and angular dimensions and 
	//feature of size dimensions for linear dimension in PMI and Drafting.
	id_name.assign("Drafting_EnableDirectedDimensions");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			bool directedDimension;
			directedDimension = _preferencesBuilder->DimensionWorkflow()->EnableDirectedDimension();
			ist_id_value.assign(convert_to_string(directedDimension));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				directedDimension = convert_to_bool(soll_id_value);
				_preferencesBuilder->DimensionWorkflow()->SetEnableDirectedDimension(directedDimension);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- STOPP - %s --- \n", routineName.c_str());
}

/*
File - Preferences - Drafting - Dimension - Workflow - General -> Repair these preferences.
*/
void repair_DraftingStandard_Dimension_Workflow_General_prefs(NXOpen::Drafting::PreferencesBuilder *_preferencesBuilder, en_nx_dpv* _nx_dpv, Session * _theSession, Part* _workPart) {
	routineName.assign("repair_DraftingStandard_Dimension_Workflow_General_prefs");
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- START - %s --- \n", routineName.c_str());
	
	//This option determines whether or not to automatically create an intersection symbol
	//after creating a dimension to a two-curve intersection point.
	id_name.assign("Drafting_AutomaticCreationIntersectionSymbol");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			bool automaticCreationIntersectionSymbol;
			automaticCreationIntersectionSymbol = _preferencesBuilder->DimensionWorkflow()->AutomaticCreationIntersectionSymbol();
			ist_id_value.assign(convert_to_string(automaticCreationIntersectionSymbol));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				automaticCreationIntersectionSymbol = convert_to_bool(soll_id_value);
				_preferencesBuilder->DimensionWorkflow()->SetAutomaticCreationIntersectionSymbol(automaticCreationIntersectionSymbol);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- STOPP - %s --- \n", routineName.c_str());
}

/*
File - Preferences - Drafting - Dimension - Tolerance - Tolerance -> Repair these preferences.
*/
void repair_DraftingStandard_Dimension_Tolerance_prefs(NXOpen::Drafting::PreferencesBuilder *_preferencesBuilder, en_nx_dpv* _nx_dpv, Session * _theSession, Part* _workPart) {
	routineName.assign("repair_DraftingStandard_Dimension_Tolerance_prefs");
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- START - %s --- \n", routineName.c_str());

	//This option specifies how the tolerance value displays.
	id_name.assign("Drafting_toleranceType");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::ToleranceType dimToleranceType;
			dimToleranceType = _preferencesBuilder->AnnotationStyle()->DimensionStyle()->ToleranceType();
			int int_dimToleranceType;
			if (dimToleranceType == NXOpen::Annotations::ToleranceTypeNone) {
				int_dimToleranceType = 1;
			}
			else if (dimToleranceType == NXOpen::Annotations::ToleranceTypeLimitOneLine) {
				int_dimToleranceType = 2;
			}
			else if (dimToleranceType == NXOpen::Annotations::ToleranceTypeLimitTwoLines) {
				int_dimToleranceType = 3;
			}
			else if (dimToleranceType == NXOpen::Annotations::ToleranceTypeBilateralOneLine) {
				int_dimToleranceType = 4;
			}
			else if (dimToleranceType == NXOpen::Annotations::ToleranceTypeBilateralTwoLines) {
				int_dimToleranceType = 5;
			}
			else if (dimToleranceType == NXOpen::Annotations::ToleranceTypeUnilateralAbove) {
				int_dimToleranceType = 6;
			}
			else if (dimToleranceType == NXOpen::Annotations::ToleranceTypeUnilateralBelow) {
				int_dimToleranceType = 7;
			}
			else if (dimToleranceType == NXOpen::Annotations::ToleranceTypeBasic) {
				int_dimToleranceType = 8;
			}
			else if (dimToleranceType == NXOpen::Annotations::ToleranceTypeReference) {
				int_dimToleranceType = 9;
			}
			else if (dimToleranceType == NXOpen::Annotations::ToleranceTypeLimitLargerFirst) {
				int_dimToleranceType = 10;
			}
			else if (dimToleranceType == NXOpen::Annotations::ToleranceTypeLimitLargerBelow) {
				int_dimToleranceType = 11;
			}
			else if (dimToleranceType == NXOpen::Annotations::ToleranceTypeLimitsAndFits) {
				int_dimToleranceType = 14;
			}
			else if (dimToleranceType == NXOpen::Annotations::ToleranceTypeNotToScale) {
				int_dimToleranceType = 13;
			}
			else if (dimToleranceType == NXOpen::Annotations::ToleranceTypeDiameterReference) {
				int_dimToleranceType = 12;
			}
			else if (dimToleranceType == NXOpen::Annotations::ToleranceTypeBasicNotToScale) {
				int_dimToleranceType = 15;
			}
			else {
				int_dimToleranceType = -999;
			}
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - %s - int_dimToleranceType = %d \n", routineName.c_str(), id_name.c_str(), int_dimToleranceType);
			ist_id_value.assign(convert_to_string(int_dimToleranceType));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				//Achtung: Rückgabewert falsch
				int_dimToleranceType = convert_to_int(soll_id_value);
				//int_dimToleranceType = convert_to_int(soll_id_value);
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - %s - soll_id_value (int_dimToleranceType) = %d \n", routineName.c_str(), id_name.c_str(), int_dimToleranceType);
				if (int_dimToleranceType == 1) {
					dimToleranceType = NXOpen::Annotations::ToleranceTypeNone;
				}
				else if (int_dimToleranceType == 2) {
					dimToleranceType = NXOpen::Annotations::ToleranceTypeLimitOneLine;
				}
				else if (int_dimToleranceType == 3) {
					dimToleranceType = NXOpen::Annotations::ToleranceTypeLimitTwoLines;
				}
				else if (int_dimToleranceType == 4) {
					dimToleranceType = NXOpen::Annotations::ToleranceTypeBilateralOneLine;
				}
				else if (int_dimToleranceType == 5) {
					dimToleranceType = NXOpen::Annotations::ToleranceTypeBilateralTwoLines;
				}
				else if (int_dimToleranceType == 6) {
					dimToleranceType = NXOpen::Annotations::ToleranceTypeUnilateralAbove;
				}
				else if (int_dimToleranceType == 7) {
					dimToleranceType = NXOpen::Annotations::ToleranceTypeUnilateralBelow;
				}
				else if (int_dimToleranceType == 8) {
					dimToleranceType = NXOpen::Annotations::ToleranceTypeBasic;
				}
				else if (int_dimToleranceType == 9) {
					dimToleranceType = NXOpen::Annotations::ToleranceTypeReference;
				}
				else if (int_dimToleranceType == 10) {
					dimToleranceType = NXOpen::Annotations::ToleranceTypeLimitLargerFirst;
				}
				else if (int_dimToleranceType == 11) {
					dimToleranceType = NXOpen::Annotations::ToleranceTypeLimitLargerBelow;
				}
				else if (int_dimToleranceType == 14) {
					dimToleranceType = NXOpen::Annotations::ToleranceTypeLimitsAndFits;
				}
				else if (int_dimToleranceType == 13) {
					dimToleranceType = NXOpen::Annotations::ToleranceTypeNotToScale;
				}
				else if (int_dimToleranceType == 12) {
					dimToleranceType = NXOpen::Annotations::ToleranceTypeDiameterReference;
				}
				else if (int_dimToleranceType == 15) {
					dimToleranceType = NXOpen::Annotations::ToleranceTypeBasicNotToScale;
				}
				else {
					int_dimToleranceType = -999;
				}
				_preferencesBuilder->AnnotationStyle()->DimensionStyle()->SetToleranceType(dimToleranceType);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the number of decimal places for the tolerance value of linear dimensions.
	if (_nx_dpv->usedUnitValue.compare("1") == 0) {
		id_name.assign("Drafting_toleranceDecimalPlaces_MU");
	}
	else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
		id_name.assign("Drafting_toleranceDecimalPlaces_EU");
	}
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			int toleranceValuePrecision;
			toleranceValuePrecision = _preferencesBuilder->AnnotationStyle()->DimensionStyle()->ToleranceValuePrecision();
			ist_id_value.assign(convert_to_string(toleranceValuePrecision));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				toleranceValuePrecision = convert_to_int(soll_id_value);
				_preferencesBuilder->AnnotationStyle()->DimensionStyle()->SetToleranceValuePrecision(toleranceValuePrecision);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the upper tolerance value for linear dimensions when the units are set to millimeters.
	id_name.assign("Drafting_toleranceUpperValue_SI");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double upperToleranceMetric;
			upperToleranceMetric = _preferencesBuilder->AnnotationStyle()->DimensionStyle()->UpperToleranceMetric();
			ist_id_value.assign(convert_to_string(upperToleranceMetric));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				upperToleranceMetric = convert_to_double(soll_id_value);
				_preferencesBuilder->AnnotationStyle()->DimensionStyle()->SetUpperToleranceMetric(upperToleranceMetric);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the lower tolerance value for linear dimensions when the units are set to millimeters.
	id_name.assign("Drafting_toleranceLowerValue_SI");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double lowerToleranceMetric;
			lowerToleranceMetric = _preferencesBuilder->AnnotationStyle()->DimensionStyle()->LowerToleranceMetric();
			ist_id_value.assign(convert_to_string(lowerToleranceMetric));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				lowerToleranceMetric = convert_to_double(soll_id_value);
				_preferencesBuilder->AnnotationStyle()->DimensionStyle()->SetLowerToleranceMetric(lowerToleranceMetric);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the upper tolerance value for linear dimensions when the units are set to inches.
	id_name.assign("Drafting_toleranceUpperValue_IN");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double upperToleranceEnglish;
			upperToleranceEnglish = _preferencesBuilder->AnnotationStyle()->DimensionStyle()->UpperToleranceEnglish();
			ist_id_value.assign(convert_to_string(upperToleranceEnglish));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				upperToleranceEnglish = convert_to_double(soll_id_value);
				_preferencesBuilder->AnnotationStyle()->DimensionStyle()->SetUpperToleranceEnglish(upperToleranceEnglish);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the lower tolerance value for linear dimensions when the units are set to inches.
	id_name.assign("Drafting_toleranceLowerValue_IN");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double lowerToleranceEnglish;
			lowerToleranceEnglish = _preferencesBuilder->AnnotationStyle()->DimensionStyle()->LowerToleranceEnglish();
			ist_id_value.assign(convert_to_string(lowerToleranceEnglish));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				lowerToleranceEnglish = convert_to_double(soll_id_value);
				_preferencesBuilder->AnnotationStyle()->DimensionStyle()->SetLowerToleranceEnglish(lowerToleranceEnglish);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies if ANSI Limits and Fits tolerance values are for a hole/shaft or pin/tab dimension. 
	//This only applies to ANSI dimension using inch units.
	id_name.assign("Drafting_limitsAndFitsTypeANSI");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::FitAnsiHoleType fitHoleType;
			fitHoleType = _preferencesBuilder->AnnotationStyle()->DimensionStyle()->LimitFitAnsiHoleType();
			int int_fitHoleType;
			if (fitHoleType== NXOpen::Annotations::FitAnsiHoleTypeHole) {
				int_fitHoleType = 0;
			}
			else if (fitHoleType == NXOpen::Annotations::FitAnsiHoleTypeShaft) {
				int_fitHoleType = 1;
			}
			else if (fitHoleType == NXOpen::Annotations::FitAnsiHoleTypeFit) {
				int_fitHoleType = 2;
			}
			ist_id_value.assign(convert_to_string(int_fitHoleType));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_fitHoleType = convert_to_int(soll_id_value);
				if (int_fitHoleType == 0) {
					fitHoleType = NXOpen::Annotations::FitAnsiHoleTypeHole;
				}
				else if (int_fitHoleType == 1) {
					fitHoleType = NXOpen::Annotations::FitAnsiHoleTypeShaft;
				}
				else if (int_fitHoleType == 2) {
					fitHoleType = NXOpen::Annotations::FitAnsiHoleTypeFit;
				}
				_preferencesBuilder->AnnotationStyle()->DimensionStyle()->SetLimitFitAnsiHoleType(fitHoleType);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the hole deviation for Limits and Fits style tolerances.
	id_name.assign("Drafting_toleranceDeviation");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::NXString fitDeviation;
			fitDeviation = _preferencesBuilder->AnnotationStyle()->DimensionStyle()->LimitFitDeviation();
			ist_id_value.assign(fitDeviation.GetLocaleText() );
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				fitDeviation = (NXString)soll_id_value;
				_preferencesBuilder->AnnotationStyle()->DimensionStyle()->SetLimitFitDeviation(fitDeviation);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the hole grade for Limits and Fits style tolerances.
	id_name.assign("Drafting_toleranceGrade");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			int fitGrade;
			fitGrade=_preferencesBuilder->AnnotationStyle()->DimensionStyle()->LimitFitGrade();
			ist_id_value.assign(convert_to_string(fitGrade));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				fitGrade = convert_to_int(soll_id_value);
				_preferencesBuilder->AnnotationStyle()->DimensionStyle()->SetLimitFitGrade(fitGrade);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the shaft deviation for Limits and Fits style tolerances.
	id_name.assign("Drafting_shaftToleranceDeviation");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::NXString fitShaftDeviation;
			fitShaftDeviation = _preferencesBuilder->AnnotationStyle()->DimensionStyle()->LimitFitShaftDeviation();
			ist_id_value.assign(fitShaftDeviation.GetLocaleText());
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				fitShaftDeviation = (NXString)soll_id_value;
				_preferencesBuilder->AnnotationStyle()->DimensionStyle()->SetLimitFitShaftDeviation(fitShaftDeviation);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the shaft grade for Limits and Fits style tolerances.
	id_name.assign("Drafting_shaftToleranceGrade");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			int fitShaftGrade;
			fitShaftGrade = _preferencesBuilder->AnnotationStyle()->DimensionStyle()->LimitFitShaftGrade();
			ist_id_value.assign(convert_to_string(fitShaftGrade));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				fitShaftGrade = convert_to_int(soll_id_value);
				_preferencesBuilder->AnnotationStyle()->DimensionStyle()->SetLimitFitShaftGrade(fitShaftGrade);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies how Limits and Fits tolerance values display.
	id_name.assign("Drafting_limitsAndFitsDisplay");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::FitDisplayStyle fitDisplayStyle;
			fitDisplayStyle = _preferencesBuilder->AnnotationStyle()->DimensionStyle()->LimitFitDisplayStyle();
			int int_fitDisplayStyle;
			if( fitDisplayStyle == NXOpen::Annotations::FitDisplayStyleFitSymbols ){
				int_fitDisplayStyle = 0;
			}
			else if (fitDisplayStyle == NXOpen::Annotations::FitDisplayStyleFitSymbolsAndLimits) {
				int_fitDisplayStyle = 1;
			}
			else if (fitDisplayStyle == NXOpen::Annotations::FitDisplayStyleFitSymbolsAndTolerances) {
				int_fitDisplayStyle = 2;
			}
			else if (fitDisplayStyle == NXOpen::Annotations::FitDisplayStyleTolerancesOnly) {
				int_fitDisplayStyle = 3;
			}
			ist_id_value.assign(convert_to_string(int_fitDisplayStyle));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_fitDisplayStyle = convert_to_int(soll_id_value);
				if (int_fitDisplayStyle == 0) {
					fitDisplayStyle = NXOpen::Annotations::FitDisplayStyleFitSymbols;
				}
				else if (int_fitDisplayStyle == 1) {
					fitDisplayStyle = NXOpen::Annotations::FitDisplayStyleFitSymbolsAndLimits;
				}
				else if (int_fitDisplayStyle == 2) {
					fitDisplayStyle = NXOpen::Annotations::FitDisplayStyleFitSymbolsAndTolerances;
				}
				else if (int_fitDisplayStyle == 3) {
					fitDisplayStyle = NXOpen::Annotations::FitDisplayStyleTolerancesOnly;
				}
				_preferencesBuilder->AnnotationStyle()->DimensionStyle()->SetLimitFitDisplayStyle(fitDisplayStyle);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies if fit type Limits and Fits tolerances will be displayed as a single or double line.
	id_name.assign("Drafting_AssemblylimitsAndFitsDisplay");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::FitAssemblyNewDisplayStyle fitAssemblyDisplayStyle;
			fitAssemblyDisplayStyle = _preferencesBuilder->AnnotationStyle()->DimensionStyle()->LimitFitAssemblyNewDisplayStyle();
			int int_fitAssemblyDisplayStyle;
			int_fitAssemblyDisplayStyle = (int)fitAssemblyDisplayStyle;
			ist_id_value.assign(convert_to_string(int_fitAssemblyDisplayStyle));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_fitAssemblyDisplayStyle = convert_to_int(soll_id_value);
				fitAssemblyDisplayStyle = (NXOpen::Annotations::FitAssemblyNewDisplayStyle)int_fitAssemblyDisplayStyle;
				_preferencesBuilder->AnnotationStyle()->DimensionStyle()->SetLimitFitAssemblyNewDisplayStyle(fitAssemblyDisplayStyle);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies how double line, fit type Limits and Fits tolerances will be displayed as split by the dimension line.
	id_name.assign("Drafting_LimitsAndFitsSplitByDimline");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::FitDisplaySplitByDimline fitDisplaySplitByDimline;
			fitDisplaySplitByDimline = _preferencesBuilder->AnnotationStyle()->DimensionStyle()->LimitFitDisplaySplitByDimline();
			int int_fitDisplaySplitByDimline;
			int_fitDisplaySplitByDimline = (int)fitDisplaySplitByDimline;
			ist_id_value.assign(convert_to_string(int_fitDisplaySplitByDimline));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_fitDisplaySplitByDimline = convert_to_int(soll_id_value);
				NXOpen::Annotations::FitDisplaySplitByDimline fitDisplaySplitByDimline;
				fitDisplaySplitByDimline = (NXOpen::Annotations::FitDisplaySplitByDimline)int_fitDisplaySplitByDimline;
				_preferencesBuilder->AnnotationStyle()->DimensionStyle()->SetLimitFitDisplaySplitByDimline(fitDisplaySplitByDimline);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies how the dimension value and fit symbols on a Limits 
	//and Fits tolerance is displayed relative to the displayed tolerance.
	id_name.assign("Drafting_LimitsAndFitsAlignment");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::FitDisplayAlignment fitDisplayAlignment;
			fitDisplayAlignment = _preferencesBuilder->AnnotationStyle()->DimensionStyle()->LimitFitDisplayAlignment();
			int int_fitDisplayAlignment;
			int_fitDisplayAlignment = (int)fitDisplayAlignment;
			ist_id_value.assign(convert_to_string(int_fitDisplayAlignment));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_fitDisplayAlignment = convert_to_int(soll_id_value);
				NXOpen::Annotations::FitDisplayAlignment fitDisplayAlignment;
				fitDisplayAlignment = (NXOpen::Annotations::FitDisplayAlignment)int_fitDisplayAlignment;
				_preferencesBuilder->AnnotationStyle()->DimensionStyle()->SetLimitFitDisplayAlignment(fitDisplayAlignment);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not a horizontal line be displayed between hole and shaft fit symbols.
	id_name.assign("Drafting_LimitsandFitsSeparator");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			bool showFitSeparator;
			showFitSeparator = _preferencesBuilder->AnnotationStyle()->DimensionStyle()->FitToleranceSeparator();
			int int_showFitSeparator;
			int_showFitSeparator = (int)showFitSeparator;
			ist_id_value.assign(convert_to_string(int_showFitSeparator));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_showFitSeparator = convert_to_int(soll_id_value);
				showFitSeparator = false;
				if (int_showFitSeparator == 1) {
					showFitSeparator = true;
				}
				_preferencesBuilder->AnnotationStyle()->DimensionStyle()->SetFitToleranceSeparator(showFitSeparator);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not parentheses should be displayed around tolerance values.
	id_name.assign("Drafting_LimitsandFitsToleranceParenthesis");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			bool showFitParentheses;
			showFitParentheses = _preferencesBuilder->AnnotationStyle()->DimensionStyle()->FitToleranceParentheses();
			int int_showFitParentheses;
			int_showFitParentheses = (int)showFitParentheses;
			ist_id_value.assign(convert_to_string(int_showFitParentheses));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_showFitParentheses = convert_to_int(soll_id_value);
				showFitParentheses = false;
				if (int_showFitParentheses == 1) {
					showFitParentheses = true;
				}
				_preferencesBuilder->AnnotationStyle()->DimensionStyle()->SetFitToleranceParentheses(showFitParentheses);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the location of the tolerance relative to the dimension value.
	id_name.assign("Drafting_tolerancePlacementSite");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::TolerancePlacement dimensionTolerancePlacement;
			dimensionTolerancePlacement = _preferencesBuilder->AnnotationStyle()->UnitsStyle()->DimensionTolerancePlacement();
			int int_dimensionTolerancePlacement;
			if (dimensionTolerancePlacement == NXOpen::Annotations::TolerancePlacementBelow) {
				int_dimensionTolerancePlacement = 1;
			}
			else if (dimensionTolerancePlacement == NXOpen::Annotations::TolerancePlacementAfter) {
				int_dimensionTolerancePlacement = 2;
			}
			else if (dimensionTolerancePlacement == NXOpen::Annotations::TolerancePlacementAbove) {
				int_dimensionTolerancePlacement = 3;
			}
			else if (dimensionTolerancePlacement == NXOpen::Annotations::TolerancePlacementLast) {
				int_dimensionTolerancePlacement = -1;
			}
			ist_id_value.assign(convert_to_string(int_dimensionTolerancePlacement));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				//Achtung: Falscher Rückgabewert
				int_dimensionTolerancePlacement = convert_to_int(soll_id_value);
				if (int_dimensionTolerancePlacement == 1) {
					dimensionTolerancePlacement = NXOpen::Annotations::TolerancePlacementBelow;
				}
				else if (int_dimensionTolerancePlacement == 2) {
					dimensionTolerancePlacement = NXOpen::Annotations::TolerancePlacementAfter;
				}
				else if (int_dimensionTolerancePlacement == 3) {
					dimensionTolerancePlacement = NXOpen::Annotations::TolerancePlacementAbove;
				}
				else if (int_dimensionTolerancePlacement == -1) {
					dimensionTolerancePlacement = NXOpen::Annotations::TolerancePlacementLast;
				}
				if (int_dimensionTolerancePlacement != -1) {
					_preferencesBuilder->AnnotationStyle()->UnitsStyle()->SetDimensionTolerancePlacement(dimensionTolerancePlacement);
					_preferencesBuilder->Commit();
				}
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the precision and format of tolerance angular dimensions.
	id_name.assign("Drafting_angularToleranceUnits");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::AngularDimensionFormat toleranceAngularFormat;
			toleranceAngularFormat = _preferencesBuilder->AnnotationStyle()->UnitsStyle()->ToleranceAngularFormat();
			int int_toleranceAngularFormat;
			//Achtung: Falscher Rückgabewert
			int_toleranceAngularFormat = (int)toleranceAngularFormat + 1;
			ist_id_value.assign(convert_to_string(int_toleranceAngularFormat));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				//Achtung: Falscher Rückgabewert
				int_toleranceAngularFormat = convert_to_int(soll_id_value) - 1;
				NXOpen::Annotations::AngularDimensionFormat toleranceAngularFormat;
				toleranceAngularFormat = (NXOpen::Annotations::AngularDimensionFormat)int_toleranceAngularFormat;
				_preferencesBuilder->AnnotationStyle()->UnitsStyle()->SetToleranceAngularFormat(toleranceAngularFormat);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies how zero tolerance values on dimensions are displayed for unilateral and bilateral tolerances.
	id_name.assign("Drafting_zeroToleranceDisplayStyle");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::ZeroToleranceDisplayStyle dimZeroToleranceDisplayStyle;
			dimZeroToleranceDisplayStyle = _preferencesBuilder->AnnotationStyle()->DimensionStyle()->DimZeroToleranceDisplayStyle();
			int int_dimZeroToleranceDisplayStyle;
			//Achtung: Falscher Rückgabewert
			int_dimZeroToleranceDisplayStyle = (int)dimZeroToleranceDisplayStyle + 1;
			ist_id_value.assign(convert_to_string(int_dimZeroToleranceDisplayStyle));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				//Achtung: Falscher Rückgabewert
				int_dimZeroToleranceDisplayStyle = convert_to_int(soll_id_value) - 1;
				NXOpen::Annotations::ZeroToleranceDisplayStyle dimZeroToleranceDisplayStyle;
				dimZeroToleranceDisplayStyle = (NXOpen::Annotations::ZeroToleranceDisplayStyle)int_dimZeroToleranceDisplayStyle;
				_preferencesBuilder->AnnotationStyle()->DimensionStyle()->SetDimZeroToleranceDisplayStyle(dimZeroToleranceDisplayStyle);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not leading zeros will be displayed for tolerance values on dimensions.
	if (_nx_dpv->usedUnitValue.compare("1") == 0) {
		id_name.assign("Drafting_tolLeadingZeros_MU");
	}
	else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
		id_name.assign("Drafting_tolLeadingZeros_EU");
	}
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			bool DisplayLeadingToleranceZeros;
			DisplayLeadingToleranceZeros = _preferencesBuilder->AnnotationStyle()->UnitsStyle()->DisplayLeadingToleranceZeros();
			int int_DisplayLeadingToleranceZeros;
			int_DisplayLeadingToleranceZeros = (int)DisplayLeadingToleranceZeros;
			ist_id_value.assign(convert_to_string(int_DisplayLeadingToleranceZeros));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_DisplayLeadingToleranceZeros = convert_to_int(soll_id_value);
				DisplayLeadingToleranceZeros = false;
				if (int_DisplayLeadingToleranceZeros == 1) {
					DisplayLeadingToleranceZeros = true;
				}
				_preferencesBuilder->AnnotationStyle()->UnitsStyle()->SetDisplayLeadingToleranceZeros(DisplayLeadingToleranceZeros);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not the tolerance values of a dimension are converted from one unit to another. 
	//This option applies to both dual and non-dual dimensions.
	id_name.assign("Drafting_dimToleranceConversion");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			bool convertPrimaryTolerance;
			convertPrimaryTolerance = _preferencesBuilder->AnnotationStyle()->UnitsStyle()->ConvertPrimaryTolerance();
			int int_convertPrimaryTolerance;
			int_convertPrimaryTolerance = (int)convertPrimaryTolerance;
			ist_id_value.assign(convert_to_string(int_convertPrimaryTolerance));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_convertPrimaryTolerance = convert_to_int(soll_id_value);
				convertPrimaryTolerance = false;
				if (int_convertPrimaryTolerance == 1) {
					convertPrimaryTolerance = true;
				}
				_preferencesBuilder->AnnotationStyle()->UnitsStyle()->SetConvertPrimaryTolerance(convertPrimaryTolerance);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- STOPP - %s --- \n", routineName.c_str());
}

/*
File - Preferences - Drafting - Dimension - Dual -> Repair these preferences.
*/
void repair_DraftingStandard_Dimension_Dual_prefs(NXOpen::Drafting::PreferencesBuilder *_preferencesBuilder, en_nx_dpv* _nx_dpv, Session * _theSession, Part* _workPart) {
	routineName.assign("repair_DraftingStandard_Dimension_Dual_prefs");
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- START - %s --- \n", routineName.c_str());

	//This option determines whether or not dimensions will be shown as dual dimensions.
	id_name.assign("Drafting_showDualDimension");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::DualDimensionPlacement dualDimensionFormat;
			dualDimensionFormat = _preferencesBuilder->AnnotationStyle()->UnitsStyle()->DualDimensionFormat();
			//int int_dualDimensionFormat;
			//int_dualDimensionFormat = (int)dualDimensionFormat;
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("get_enDraftingStandard_Dimension_Dual_prefs - dualDimensionFormat = %d", (int)dualDimensionFormat);
			bool bool_dualDimensionFormat;
			if (dualDimensionFormat == NXOpen::Annotations::DualDimensionPlacementNone) {
				bool_dualDimensionFormat = false;
			}
			else {
				bool_dualDimensionFormat = true;
			}
			ist_id_value.assign(convert_to_string(bool_dualDimensionFormat));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				bool_dualDimensionFormat = convert_to_bool(soll_id_value);
				if (bool_dualDimensionFormat == false) {
					dualDimensionFormat = NXOpen::Annotations::DualDimensionPlacementNone;
					_preferencesBuilder->AnnotationStyle()->UnitsStyle()->SetDualDimensionFormat(dualDimensionFormat);
				}

				if (bool_dualDimensionFormat == true && _preferencesBuilder->AnnotationStyle()->UnitsStyle()->DualDimensionFormat() == NXOpen::Annotations::DualDimensionPlacementNone) {
					dualDimensionFormat = NXOpen::Annotations::DualDimensionPlacementAfter;
					_preferencesBuilder->AnnotationStyle()->UnitsStyle()->SetDualDimensionFormat(dualDimensionFormat);
				}
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the units for the secondary dimension.
	if (_nx_dpv->usedUnitValue.compare("1") == 0) {
		id_name.assign("Drafting_dualDimensionsUnits_MU");
	}
	else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
		id_name.assign("Drafting_dualDimensionsUnits_EU");
	}
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::DimensionUnit dualDimensionUnits;
			dualDimensionUnits = _preferencesBuilder->AnnotationStyle()->UnitsStyle()->DualDimensionUnits();
			int int_dualDimensionUnits;
			//Achtung: Rückgabewert falsch
			int_dualDimensionUnits = (int)dualDimensionUnits + 1;
			ist_id_value.assign(convert_to_string(int_dualDimensionUnits));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				//Achtung: Rückgabewert falsch
				int_dualDimensionUnits = convert_to_int(soll_id_value) - 1;
				NXOpen::Annotations::DimensionUnit dualDimensionUnits;
				dualDimensionUnits = (NXOpen::Annotations::DimensionUnit)int_dualDimensionUnits;
				_preferencesBuilder->AnnotationStyle()->UnitsStyle()->SetDualDimensionUnits(dualDimensionUnits);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the dimension text format for non-metric dimensions.
	id_name.assign("Drafting_dualDimensionsFractions");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::DimensionTextFormat dualFractionType;
			dualFractionType = _preferencesBuilder->AnnotationStyle()->UnitsStyle()->DualFractionType();
			int int_dualFractionType;
			//Achtung: Rückgabewert falsch
			int_dualFractionType = (int)dualFractionType + 1;
			ist_id_value.assign(convert_to_string(int_dualFractionType));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				//Achtung: Rückgabewert falsch
				int_dualFractionType = convert_to_int(soll_id_value) - 1;
				NXOpen::Annotations::DimensionTextFormat dualFractionType;
				dualFractionType = (NXOpen::Annotations::DimensionTextFormat)int_dualFractionType;
				_preferencesBuilder->AnnotationStyle()->UnitsStyle()->SetDualFractionType(dualFractionType);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the number of decimal places for the nominal value of dual dimensions.
	if (_nx_dpv->usedUnitValue.compare("1") == 0) {
		id_name.assign("Drafting_dualDimensionDecimalPlaces_MU");
	}
	else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
		id_name.assign("Drafting_dualDimensionDecimalPlaces_EU");
	}
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			int dualDimensionValuePrecision;
			dualDimensionValuePrecision = _preferencesBuilder->AnnotationStyle()->DimensionStyle()->DualDimensionValuePrecision();
			ist_id_value.assign(convert_to_string(dualDimensionValuePrecision));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				dualDimensionValuePrecision = convert_to_int(soll_id_value);
				_preferencesBuilder->AnnotationStyle()->DimensionStyle()->SetDualDimensionValuePrecision(dualDimensionValuePrecision);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the denominator when dual dimension values are to be displayed with fractions (rather than with decimals).
	id_name.assign("Drafting_dualFractionDenominator");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::FractionDenominatorFormat dualDimensionFractionDenominator;
			dualDimensionFractionDenominator = _preferencesBuilder->AnnotationStyle()->DimensionStyle()->DualDimensionFractionDenominator();
			int int_dualDimensionFractionDenominator;
			if (dualDimensionFractionDenominator == NXOpen::Annotations::FractionDenominatorFormatOne) {
				int_dualDimensionFractionDenominator = 1;
			}
			else if (dualDimensionFractionDenominator == NXOpen::Annotations::FractionDenominatorFormatTwo) {
				int_dualDimensionFractionDenominator = 2;
			}
			else if (dualDimensionFractionDenominator == NXOpen::Annotations::FractionDenominatorFormatFour) {
				int_dualDimensionFractionDenominator = 3;
			}
			else if (dualDimensionFractionDenominator == NXOpen::Annotations::FractionDenominatorFormatEight) {
				int_dualDimensionFractionDenominator = 4;
			}
			else if (dualDimensionFractionDenominator == NXOpen::Annotations::FractionDenominatorFormatSixteen) {
				int_dualDimensionFractionDenominator = 5;
			}
			else if (dualDimensionFractionDenominator == NXOpen::Annotations::FractionDenominatorFormatThirtyTwo) {
				int_dualDimensionFractionDenominator = 6;
			}
			else if (dualDimensionFractionDenominator == NXOpen::Annotations::FractionDenominatorFormatSixtyFour) {
				int_dualDimensionFractionDenominator = 7;
			}
			else if (dualDimensionFractionDenominator == NXOpen::Annotations::FractionDenominatorFormatLast) {
				int_dualDimensionFractionDenominator = 8;
			}
			ist_id_value.assign(convert_to_string(int_dualDimensionFractionDenominator));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				//Achtung: Rückgabewert falsch
				int_dualDimensionFractionDenominator = convert_to_int(soll_id_value);
				if (int_dualDimensionFractionDenominator == 1) {
					dualDimensionFractionDenominator = NXOpen::Annotations::FractionDenominatorFormatOne;
				}
				else if (int_dualDimensionFractionDenominator == 2) {
					dualDimensionFractionDenominator = NXOpen::Annotations::FractionDenominatorFormatTwo;
				}
				else if (int_dualDimensionFractionDenominator == 3) {
					dualDimensionFractionDenominator = NXOpen::Annotations::FractionDenominatorFormatFour;
				}
				else if (int_dualDimensionFractionDenominator == 4) {
					dualDimensionFractionDenominator = NXOpen::Annotations::FractionDenominatorFormatEight;
				}
				else if (int_dualDimensionFractionDenominator == 5) {
					dualDimensionFractionDenominator = NXOpen::Annotations::FractionDenominatorFormatSixteen;
				}
				else if (int_dualDimensionFractionDenominator == 6) {
					dualDimensionFractionDenominator = NXOpen::Annotations::FractionDenominatorFormatThirtyTwo;
				}
				else if (int_dualDimensionFractionDenominator == 7) {
					dualDimensionFractionDenominator = NXOpen::Annotations::FractionDenominatorFormatSixtyFour;
				}
				else if (int_dualDimensionFractionDenominator == 8) {
					dualDimensionFractionDenominator = NXOpen::Annotations::FractionDenominatorFormatLast;
				}
				_preferencesBuilder->AnnotationStyle()->DimensionStyle()->SetDualDimensionFractionDenominator(dualDimensionFractionDenominator);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the format for dual dimensions.
	id_name.assign("Drafting_dualDimensionsMethod");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::DualDimensionPlacement dualDimensionFormat;
			dualDimensionFormat = _preferencesBuilder->AnnotationStyle()->UnitsStyle()->DualDimensionFormat();
			int int_dualDimensionFormat;
			if (dualDimensionFormat != NXOpen::Annotations::DualDimensionPlacementBelow) {
				int_dualDimensionFormat = 1;
			}
			else if (dualDimensionFormat != NXOpen::Annotations::DualDimensionPlacementAfter) {
				int_dualDimensionFormat = 2;
			}
			else if (dualDimensionFormat != NXOpen::Annotations::DualDimensionPlacementAbove) {
				int_dualDimensionFormat = 3;
			}
			else if (dualDimensionFormat != NXOpen::Annotations::DualDimensionPlacementBefore) {
				int_dualDimensionFormat = 4;
			}
			else if (dualDimensionFormat != NXOpen::Annotations::DualDimensionPlacementNone) {
				int_dualDimensionFormat = 5;
			}
			else {
				int_dualDimensionFormat = 6;
			}
			ist_id_value.assign(convert_to_string(int_dualDimensionFormat));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_dualDimensionFormat = convert_to_int(soll_id_value);

				NXOpen::Annotations::DualDimensionPlacement dualDimensionFormat;
				if (int_dualDimensionFormat == 1) {
					dualDimensionFormat = NXOpen::Annotations::DualDimensionPlacementBelow;
				}
				else if (int_dualDimensionFormat == 2) {
					dualDimensionFormat = NXOpen::Annotations::DualDimensionPlacementAfter;
				}
				else if (int_dualDimensionFormat == 3) {
					dualDimensionFormat = NXOpen::Annotations::DualDimensionPlacementAbove;
				}
				else if (int_dualDimensionFormat == 4) {
					dualDimensionFormat = NXOpen::Annotations::DualDimensionPlacementBefore;
				}
				else if (int_dualDimensionFormat == 5) {
					dualDimensionFormat = NXOpen::Annotations::DualDimensionPlacementNone;
				}
				else {
					dualDimensionFormat = NXOpen::Annotations::DualDimensionPlacementLast;
				}

				_preferencesBuilder->AnnotationStyle()->UnitsStyle()->SetDualDimensionFormat(dualDimensionFormat);
				_preferencesBuilder->Commit();

				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not to center dual dimension text on the dimension line.
	id_name.assign("Drafting_dualCenterDimensionText");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			bool centerDimensionLine;
			centerDimensionLine = _preferencesBuilder->AnnotationStyle()->UnitsStyle()->DualDimensionCenterDimensionLine();
			ist_id_value.assign(convert_to_string(centerDimensionLine));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				centerDimensionLine = convert_to_bool(soll_id_value);
				_preferencesBuilder->AnnotationStyle()->UnitsStyle()->SetDualDimensionCenterDimensionLine(centerDimensionLine);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the number of decimal places for the tolerance value of dual dimensions.
	if (_nx_dpv->usedUnitValue.compare("1") == 0) {
		id_name.assign("Drafting_dualToleranceDecimalPlaces_MU");
	}
	else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
		id_name.assign("Drafting_dualToleranceDecimalPlaces_EU");
	}
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			int dualToleranceValuePrecision;
			dualToleranceValuePrecision = _preferencesBuilder->AnnotationStyle()->DimensionStyle()->DualToleranceValuePrecision();
			ist_id_value.assign(convert_to_string(dualToleranceValuePrecision));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				dualToleranceValuePrecision = convert_to_int(soll_id_value);
				_preferencesBuilder->AnnotationStyle()->DimensionStyle()->SetDualToleranceValuePrecision(dualToleranceValuePrecision);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- STOPP - %s --- \n", routineName.c_str());
}

/*
File - Preferences - Drafting - Dimension - Jog -> Repair these preferences.
*/
void repair_DraftingStandard_Dimension_Jog_prefs(NXOpen::Drafting::PreferencesBuilder *_preferencesBuilder, en_nx_dpv* _nx_dpv, Session * _theSession, Part* _workPart) {
	routineName.assign("repair_DraftingStandard_Dimension_Jog_prefs");
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- START - %s --- \n", routineName.c_str());

	//This option specifies the jog creation mode.
	id_name.assign("Drafting_ordinateCreateDoglegMode");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::OrdinateDoglegCreationOption dogLegCreationOption;
			dogLegCreationOption = _preferencesBuilder->AnnotationStyle()->OrdinateStyle()->DoglegCreationOption();
			int int_dogLegCreationOption;
			int_dogLegCreationOption = (int)dogLegCreationOption;
			ist_id_value.assign(convert_to_string(int_dogLegCreationOption));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_dogLegCreationOption = convert_to_int(soll_id_value);
				NXOpen::Annotations::OrdinateDoglegCreationOption dogLegCreationOption;
				dogLegCreationOption = (NXOpen::Annotations::OrdinateDoglegCreationOption)int_dogLegCreationOption;
				_preferencesBuilder->AnnotationStyle()->OrdinateStyle()->SetDoglegCreationOption(dogLegCreationOption);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies which jog parameters are fixed when the dimension is created.
	id_name.assign("Drafting_ordinateDoglegCreationSettings");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::OrdinateDoglegDefinition dogLegSetting;
			dogLegSetting = _preferencesBuilder->AnnotationStyle()->OrdinateStyle()->DoglegSetting();
			int int_dogLegSetting;
			int_dogLegSetting = (int)dogLegSetting;
			ist_id_value.assign(convert_to_string(int_dogLegSetting));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_dogLegSetting = convert_to_int(soll_id_value);
				dogLegSetting = (NXOpen::Annotations::OrdinateDoglegDefinition)int_dogLegSetting;
				_preferencesBuilder->AnnotationStyle()->OrdinateStyle()->SetDoglegSetting(dogLegSetting);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the offset between the dimension line and the start position of a jog.
	if (_nx_dpv->usedUnitValue.compare("1") == 0) {
		id_name.assign("Drafting_ordinateDoglegStartOffset_MU");
	}
	else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
		id_name.assign("Drafting_ordinateDoglegStartOffset_EU");
	}
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double dogLegStartOffset;
			dogLegStartOffset = _preferencesBuilder->AnnotationStyle()->OrdinateStyle()->DoglegStartOffset();
			ist_id_value.assign(convert_to_string(dogLegStartOffset));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				dogLegStartOffset = convert_to_double(soll_id_value);
				_preferencesBuilder->AnnotationStyle()->OrdinateStyle()->SetDoglegStartOffset(dogLegStartOffset);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the offset between the dimension line and the end position of a jog.
	if (_nx_dpv->usedUnitValue.compare("1") == 0) {
		id_name.assign("Drafting_ordinateDoglegEndOffset_MU");
	}
	else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
		id_name.assign("Drafting_ordinateDoglegEndOffset_EU");
	}
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double dogLegEndOffset;
			dogLegEndOffset = _preferencesBuilder->AnnotationStyle()->OrdinateStyle()->DoglegEndOffset();
			ist_id_value.assign(convert_to_string(dogLegEndOffset));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				dogLegEndOffset = convert_to_double(soll_id_value);
				_preferencesBuilder->AnnotationStyle()->OrdinateStyle()->SetDoglegEndOffset(dogLegEndOffset);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the dogleg angle.
	id_name.assign("Drafting_ordinateDoglegAngle");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double dogLegAngle;
			dogLegAngle = _preferencesBuilder->AnnotationStyle()->OrdinateStyle()->DoglegAngle();
			//ACHTUNG: Liefert RAD!!!
			dogLegAngle = dogLegAngle * 180 / PI;
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%d - %d - dogLegAngle = %f \n", routineName.c_str(), id_name.c_str(), dogLegAngle);
			ist_id_value.assign(convert_to_string(dogLegAngle));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				dogLegAngle = convert_to_double(soll_id_value);
				//RAD anstatt GRAD wird hier umgesetzt!
				dogLegAngle = dogLegAngle*PI / 180;
				_preferencesBuilder->AnnotationStyle()->OrdinateStyle()->SetDoglegAngle(dogLegAngle);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the offset between the dimension line and the start position of a linear jog on the first extension line.
	if (_nx_dpv->usedUnitValue.compare("1") == 0) {
		id_name.assign("Drafting_linearSide1JogStartOffset_MU");
	}
	else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
		id_name.assign("Drafting_linearSide1JogStartOffset_EU");
	}
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double jogStartOffset;
			jogStartOffset = _preferencesBuilder->AnnotationStyle()->LineArrowStyle()->FirstJogStartOffset();
			ist_id_value.assign(convert_to_string(jogStartOffset));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				jogStartOffset = convert_to_double(soll_id_value);
				_preferencesBuilder->AnnotationStyle()->LineArrowStyle()->SetFirstJogStartOffset(jogStartOffset);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the offset between the dimension line and the end position of a linear jog on the first extension line.
	if (_nx_dpv->usedUnitValue.compare("1") == 0) {
		id_name.assign("Drafting_linearSide1JogEndOffset_MU");
	}
	else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
		id_name.assign("Drafting_linearSide1JogEndOffset_EU");
	}
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double jogEndOffset;
			jogEndOffset = _preferencesBuilder->AnnotationStyle()->LineArrowStyle()->FirstJogEndOffset();
			ist_id_value.assign(convert_to_string(jogEndOffset));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				jogEndOffset = convert_to_double(soll_id_value);
				_preferencesBuilder->AnnotationStyle()->LineArrowStyle()->SetFirstJogEndOffset(jogEndOffset);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the linear jog angle on the first extension line.
	id_name.assign("Drafting_linearSide1JogAngle");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double jogAngle;
			jogAngle = _preferencesBuilder->AnnotationStyle()->LineArrowStyle()->FirstJogAngle();
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - %s - jogAngle = %f \n", routineName.c_str(), id_name.c_str(), jogAngle);
			ist_id_value.assign(convert_to_string(jogAngle));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				jogAngle = convert_to_double(soll_id_value);
				_preferencesBuilder->AnnotationStyle()->LineArrowStyle()->SetFirstJogAngle(jogAngle);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies how the jog on the first extension line will be oriented when applied.
	id_name.assign("Drafting_linearSide1JogOrientation");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::JogOrientation jogOrientation;
			jogOrientation = _preferencesBuilder->AnnotationStyle()->LineArrowStyle()->FirstJogOrientation();
			int int_jogOrientation;
			int_jogOrientation = (int)jogOrientation;
			ist_id_value.assign(convert_to_string(int_jogOrientation));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_jogOrientation = convert_to_int(soll_id_value);
				jogOrientation = (NXOpen::Annotations::JogOrientation)int_jogOrientation;
				_preferencesBuilder->AnnotationStyle()->LineArrowStyle()->SetFirstJogOrientation(jogOrientation);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the offset between the dimension line and the start position of a linear jog on the second extension line.
	if (_nx_dpv->usedUnitValue.compare("1") == 0) {
		id_name.assign("Drafting_linearSide2JogStartOffset_MU");
	}
	else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
		id_name.assign("Drafting_linearSide2JogStartOffset_EU");
	}
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double jogStartOffset;
			jogStartOffset = _preferencesBuilder->AnnotationStyle()->LineArrowStyle()->SecondJogStartOffset();
			ist_id_value.assign(convert_to_string(jogStartOffset));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				jogStartOffset = convert_to_double(soll_id_value);
				_preferencesBuilder->AnnotationStyle()->LineArrowStyle()->SetSecondJogStartOffset(jogStartOffset);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the offset between the dimension line and the end position of a linear jog on the second extension line.
	if (_nx_dpv->usedUnitValue.compare("1") == 0) {
		id_name.assign("Drafting_linearSide2JogEndOffset_MU");
	}
	else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
		id_name.assign("Drafting_linearSide2JogEndOffset_EU");
	}
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double jogEndOffset;
			jogEndOffset = _preferencesBuilder->AnnotationStyle()->LineArrowStyle()->SecondJogEndOffset();
			ist_id_value.assign(convert_to_string(jogEndOffset));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				jogEndOffset = convert_to_double(soll_id_value);
				_preferencesBuilder->AnnotationStyle()->LineArrowStyle()->SetSecondJogEndOffset(jogEndOffset);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the linear jog angle on the second extension line.
	id_name.assign("Drafting_linearSide2JogAngle");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double jogAngle;
			jogAngle = _preferencesBuilder->AnnotationStyle()->LineArrowStyle()->SecondJogAngle();
			ist_id_value.assign(convert_to_string(jogAngle));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				jogAngle = convert_to_double(soll_id_value);
				_preferencesBuilder->AnnotationStyle()->LineArrowStyle()->SetSecondJogAngle(jogAngle);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies how the jog on the second extension line will be oriented when applied.
	id_name.assign("Drafting_linearSide2JogOrientation");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::JogOrientation jogOrientation;
			jogOrientation = _preferencesBuilder->AnnotationStyle()->LineArrowStyle()->SecondJogOrientation();
			int int_jogOrientation;
			int_jogOrientation = (int)jogOrientation;
			ist_id_value.assign(convert_to_string(int_jogOrientation));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_jogOrientation = convert_to_int(soll_id_value);
				jogOrientation = (NXOpen::Annotations::JogOrientation)int_jogOrientation;
				_preferencesBuilder->AnnotationStyle()->LineArrowStyle()->SetSecondJogOrientation(jogOrientation);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- STOPP - %s --- \n", routineName.c_str());
}

/*
File - Preferences - Drafting - Dimension - Narrow -> Repair these preferences.
*/
void repair_DraftingStandard_Dimension_Narrow_prefs(NXOpen::Drafting::PreferencesBuilder *_preferencesBuilder, en_nx_dpv* _nx_dpv, Session * _theSession, Part* _workPart) {
	routineName.assign("repair_DraftingStandard_Dimension_Narrow_prefs");
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- START - %s --- \n", routineName.c_str());

	//This option specifies the leader and stub display for narrow dimensions.
	if (_nx_dpv->usedUnitValue.compare("1") == 0) {
		id_name.assign("Drafting_narrowDimensionDisplayType_MU");
	}
	else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
		id_name.assign("Drafting_narrowDimensionDisplayType_EU");
	}
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::NarrowDisplayOption displayType;
			displayType = _preferencesBuilder->AnnotationStyle()->DimensionStyle()->NarrowDisplayType();
			int int_displayType;
			int_displayType = (int)displayType;
			ist_id_value.assign(convert_to_string(int_displayType));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_displayType = convert_to_int(soll_id_value);
				displayType = (NXOpen::Annotations::NarrowDisplayOption)int_displayType;
				_preferencesBuilder->AnnotationStyle()->DimensionStyle()->SetNarrowDisplayType(displayType);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the text orientation for narrow dimensions.
	id_name.assign("Drafting_narrowDimensionTextOrientation");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::NarrowTextOrientation narrowTextOrientation;
			narrowTextOrientation = _preferencesBuilder->AnnotationStyle()->DimensionStyle()->NarrowTextOrientation();
			int int_narrowTextOrientation;
			int_narrowTextOrientation = (int)narrowTextOrientation;
			ist_id_value.assign(convert_to_string(int_narrowTextOrientation));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_narrowTextOrientation = convert_to_int(soll_id_value);
				narrowTextOrientation = (NXOpen::Annotations::NarrowTextOrientation)int_narrowTextOrientation;
				_preferencesBuilder->AnnotationStyle()->DimensionStyle()->SetNarrowTextOrientation(narrowTextOrientation);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the arrowhead type if there is no room for the normal preferred arrowhead type when a narrow dimension in a chain dimension is automatically created.
	id_name.assign("Drafting_narrowDimensionArrowheadType");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::ArrowheadType narrowArrowType;
			narrowArrowType = _preferencesBuilder->AnnotationStyle()->DimensionStyle()->NarrowArrowType();
			int int_narrowArrowType;
			int_narrowArrowType = (int)narrowArrowType;
			ist_id_value.assign(convert_to_string(int_narrowArrowType));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_narrowArrowType = convert_to_int(soll_id_value);
				narrowArrowType = (NXOpen::Annotations::ArrowheadType)int_narrowArrowType;
				_preferencesBuilder->AnnotationStyle()->DimensionStyle()->SetNarrowArrowType(narrowArrowType);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the perpendicular distance between the leader end point and the dimension line of a narrow dimension.
	if (_nx_dpv->usedUnitValue.compare("1") == 0) {
		id_name.assign("Drafting_narrowDimensionTextOffset_MU");
	}
	else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
		id_name.assign("Drafting_narrowDimensionTextOffset_EU");
	}
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double narrowTextOffset;
			narrowTextOffset = _preferencesBuilder->AnnotationStyle()->DimensionStyle()->NarrowTextOffset();
			ist_id_value.assign(convert_to_string(narrowTextOffset));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				narrowTextOffset = convert_to_double(soll_id_value);
				_preferencesBuilder->AnnotationStyle()->DimensionStyle()->SetNarrowTextOffset(narrowTextOffset);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the angle between the leader and the positive direction of the dimension line for a narrow dimension.
	id_name.assign("Drafting_narrowDimensionLeaderAngle");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double narrowLeaderAngle;
			narrowLeaderAngle = _preferencesBuilder->AnnotationStyle()->DimensionStyle()->NarrowLeaderAngle();
			ist_id_value.assign(convert_to_string(narrowLeaderAngle));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				narrowLeaderAngle = convert_to_double(soll_id_value);
				_preferencesBuilder->AnnotationStyle()->DimensionStyle()->SetNarrowLeaderAngle(narrowLeaderAngle);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- STOPP - %s --- \n", routineName.c_str());
}

/*
File - Preferences - Drafting - Dimension - Single Sided Dimension-> Repair these preferences.
*/
void repair_DraftingStandard_Dimension_SingleSidedDimension_prefs(NXOpen::Drafting::PreferencesBuilder *_preferencesBuilder, en_nx_dpv* _nx_dpv, Session * _theSession, Part* _workPart) {
	routineName.assign("repair_DraftingStandard_Dimension_SingleSidedDimension_prefs");
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- START - %s --- \n", routineName.c_str());

	//This option specifies the dimension line length on the open side of a single sided dimension.
	if (_nx_dpv->usedUnitValue.compare("1") == 0) {
		id_name.assign("Drafting_singleSidedDimensionArrowLength_MU");
	}
	else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
		id_name.assign("Drafting_singleSidedDimensionArrowLength_EU");
	}
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double singleSidedArrowLineLength;
			singleSidedArrowLineLength = _preferencesBuilder->AnnotationStyle()->SingleSidedDisplay()->SingleSidedArrowLineLength();
			ist_id_value.assign(convert_to_string(singleSidedArrowLineLength));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				singleSidedArrowLineLength = convert_to_double(soll_id_value);
				_preferencesBuilder->AnnotationStyle()->SingleSidedDisplay()->SetSingleSidedArrowLineLength(singleSidedArrowLineLength);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- STOPP - %s --- \n", routineName.c_str());
}

/*
File - Preferences - Drafting - Dimension - Dimension Set -> Repair these preferences.
*/
void repair_DraftingStandard_Dimension_DimensionSet_prefs(NXOpen::Drafting::PreferencesBuilder *_preferencesBuilder, en_nx_dpv* _nx_dpv, Session * _theSession, Part* _workPart) {
	routineName.assign("repair_DraftingStandard_Dimension_DimensionSet_prefs");
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- START - %s --- \n", routineName.c_str());

	//This option specifies the distance between successive dimensions for chain dimensions.
	if (_nx_dpv->usedUnitValue.compare("1") == 0) {
		id_name.assign("Drafting_chainDimensionOffset_MU");
	}
	else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
		id_name.assign("Drafting_chainDimensionOffset_EU");
	}
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double chainOffset;
			chainOffset = _preferencesBuilder->AnnotationStyle()->DimensionStyle()->ChainOffset();
			string string_chainOffset;
			string_chainOffset = convert_to_string(chainOffset);
			chainOffset = convert_to_double(string_chainOffset);
			ist_id_value.assign(convert_to_string(chainOffset));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				chainOffset = convert_to_double(soll_id_value);
				_preferencesBuilder->AnnotationStyle()->DimensionStyle()->SetChainOffset(chainOffset);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the distance between successive dimensions for baseline dimensions.
	if (_nx_dpv->usedUnitValue.compare("1") == 0) {
		id_name.assign("Drafting_baselineDimensionOffset_MU");
	}
	else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
		id_name.assign("Drafting_baselineDimensionOffset_EU");
	}
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double baselineOffset;
			baselineOffset = _preferencesBuilder->AnnotationStyle()->DimensionStyle()->BaselineOffset();
			string strin_baselineOffset;
			strin_baselineOffset = convert_to_string(baselineOffset);
			baselineOffset = convert_to_double(strin_baselineOffset);
			ist_id_value.assign(convert_to_string(baselineOffset));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				baselineOffset = convert_to_double(soll_id_value);
				_preferencesBuilder->AnnotationStyle()->DimensionStyle()->SetBaselineOffset(baselineOffset);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- STOPP - %s --- \n", routineName.c_str());
}

/*
File - Preferences - Drafting - Dimension - Chamfer -> Repair these preferences.
*/
void repair_DraftingStandard_Dimension_Chamfer_prefs(NXOpen::Drafting::PreferencesBuilder *_preferencesBuilder, en_nx_dpv* _nx_dpv, Session * _theSession, Part* _workPart) {
	routineName.assign("repair_DraftingStandard_Dimension_Chamfer_prefs");
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- START - %s --- \n", routineName.c_str());

	//This option specifies the space between the text characters or symbols as a factor of the character size.
	id_name.assign("Drafting_chamferDimensionSpaceFactor");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double chamferSpaceFactor;
			chamferSpaceFactor = _preferencesBuilder->AnnotationStyle()->DimensionStyle()->ChamferSpaceFactor();
			string string_chamferSpaceFactor;
			string_chamferSpaceFactor = convert_to_string(chamferSpaceFactor);
			chamferSpaceFactor = convert_to_double(string_chamferSpaceFactor);
			ist_id_value.assign(convert_to_string(chamferSpaceFactor));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				chamferSpaceFactor = convert_to_double(soll_id_value);
				_preferencesBuilder->AnnotationStyle()->DimensionStyle()->SetChamferSpaceFactor(chamferSpaceFactor);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the placement of the dimension text on the chamfer dimension.
	id_name.assign("Drafting_chamferDimensionStub");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::ChamferStubType chamferStubType;
			chamferStubType = _preferencesBuilder->AnnotationStyle()->DimensionStyle()->ChamferStubType();
			int int_chamferStubType;
			if (chamferStubType == NXOpen::Annotations::ChamferStubTypeNoneTextAboveLeader) {
				int_chamferStubType = 1;
			}
			else if (chamferStubType == NXOpen::Annotations::ChamferStubTypeNoneTextAfterLeader) {
				int_chamferStubType = 2;
			}
			else if (chamferStubType == NXOpen::Annotations::ChamferStubTypeTextAbove) {
				int_chamferStubType = 3;
			}
			else if (chamferStubType == NXOpen::Annotations::ChamferStubTypeTextAfter) {
				int_chamferStubType = 4;
			}
			else if (chamferStubType == NXOpen::Annotations::ChamferStubTypeLast) {
				int_chamferStubType = -1;
			}
			ist_id_value.assign(convert_to_string(int_chamferStubType));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_chamferStubType = convert_to_int(soll_id_value);
				if (int_chamferStubType == 1) {
					chamferStubType = NXOpen::Annotations::ChamferStubTypeNoneTextAboveLeader;
				}
				else if (int_chamferStubType == 2) {
					chamferStubType = NXOpen::Annotations::ChamferStubTypeNoneTextAfterLeader;
				}
				else if (int_chamferStubType == 3) {
					chamferStubType = NXOpen::Annotations::ChamferStubTypeTextAbove;
				}
				else if (int_chamferStubType == 4) {
					chamferStubType = NXOpen::Annotations::ChamferStubTypeTextAfter;
				}
				else if (int_chamferStubType == -1) {
					chamferStubType = NXOpen::Annotations::ChamferStubTypeLast;
				}
				if (int_chamferStubType != -1) {
					_preferencesBuilder->AnnotationStyle()->DimensionStyle()->SetChamferStubType(chamferStubType);
				}
				else {
					_preferencesBuilder->AnnotationStyle()->DimensionStyle()->SetChamferStubType(NXOpen::Annotations::ChamferStubTypeTextAfter);
				}
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the style of the chamfer dimension.
	id_name.assign("Drafting_chamferDimensionLeader");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::ChamferLeaderPlacement chamferLeaderType;
			chamferLeaderType = _preferencesBuilder->AnnotationStyle()->DimensionStyle()->ChamferLeaderType();
			int int_chamferLeaderType;
			if (chamferLeaderType == NXOpen::Annotations::ChamferLeaderPlacementPerpendicular) {
				int_chamferLeaderType = 1;
			}
			else if (chamferLeaderType == NXOpen::Annotations::ChamferLeaderPlacementParallel) {
				int_chamferLeaderType = 2;
			}
			else if (chamferLeaderType == NXOpen::Annotations::ChamferLeaderPlacementLinear) {
				int_chamferLeaderType = 3;
			}
			else if (chamferLeaderType == NXOpen::Annotations::ChamferLeaderPlacementLast) {
				int_chamferLeaderType = -1;
			}
			ist_id_value.assign(convert_to_string(int_chamferLeaderType));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_chamferLeaderType = convert_to_int(soll_id_value);
				if (int_chamferLeaderType == 1) {
					chamferLeaderType = NXOpen::Annotations::ChamferLeaderPlacementPerpendicular;
				}
				else if (int_chamferLeaderType == 2) {
					chamferLeaderType = NXOpen::Annotations::ChamferLeaderPlacementParallel;
				}
				else if (int_chamferLeaderType == 3) {
					chamferLeaderType = NXOpen::Annotations::ChamferLeaderPlacementLinear;
				}
				else if (int_chamferLeaderType == -1) {
					chamferLeaderType = NXOpen::Annotations::ChamferLeaderPlacementLast;
				}
				if (int_chamferLeaderType != -1) {
					_preferencesBuilder->AnnotationStyle()->DimensionStyle()->SetChamferLeaderType(chamferLeaderType);
				}
				else {
					_preferencesBuilder->AnnotationStyle()->DimensionStyle()->SetChamferLeaderType(NXOpen::Annotations::ChamferLeaderPlacementLinear);
				}
				
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the display form of the chamfer dimension text.
	id_name.assign("Drafting_chamferDimensionForm");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::ChamferForm chamferForm;
			chamferForm = _preferencesBuilder->AnnotationStyle()->DimensionStyle()->ChamferForm();
			int int_chamferForm;
			if (chamferForm == NXOpen::Annotations::ChamferFormSymbol) {
				int_chamferForm = 1;
			}
			else if (chamferForm == NXOpen::Annotations::ChamferFormSize) {
				int_chamferForm = 2;
			}
			else if (chamferForm == NXOpen::Annotations::ChamferFormSizeAngle) {
				int_chamferForm = 3;
			}
			else if (chamferForm == NXOpen::Annotations::ChamferFormAngleSize) {
				int_chamferForm = 4;
			}
			else if (chamferForm == NXOpen::Annotations::ChamferFormLast) {
				int_chamferForm = -1;
			}
			ist_id_value.assign(convert_to_string(int_chamferForm));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_chamferForm = convert_to_int(soll_id_value);
				if (int_chamferForm == 1) {
					chamferForm = NXOpen::Annotations::ChamferFormSymbol;
				}
				else if (int_chamferForm == 2) {
					chamferForm = NXOpen::Annotations::ChamferFormSize;
				}
				else if (int_chamferForm == 3) {
					chamferForm = NXOpen::Annotations::ChamferFormSizeAngle;
				}
				else if (int_chamferForm == 4) {
					chamferForm = NXOpen::Annotations::ChamferFormAngleSize;
				}
				else if (int_chamferForm == -1) {
					chamferForm = NXOpen::Annotations::ChamferFormLast;
				}
				if (int_chamferForm != -1) {
					_preferencesBuilder->AnnotationStyle()->DimensionStyle()->SetChamferForm(chamferForm);
				}
				else {
					_preferencesBuilder->AnnotationStyle()->DimensionStyle()->SetChamferForm(NXOpen::Annotations::ChamferFormSizeAngle);
				}
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the capitalization of the separator for Size, Size and Angle, and Angle and Size chamfer dimensions.
	id_name.assign("Drafting_chamferDimensionSeperator");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::ChamferSeparatorType chamferSeparator;
			chamferSeparator = _preferencesBuilder->AnnotationStyle()->DimensionStyle()->ChamferSeparator();
			int int_chamferSeparator;
			if (chamferSeparator == NXOpen::Annotations::ChamferSeparatorTypeUppercaseX) {
				int_chamferSeparator = 0;
			}
			else if (chamferSeparator == NXOpen::Annotations::ChamferSeparatorTypeLowercaseX) {
				int_chamferSeparator = 1;
			}
			ist_id_value.assign(convert_to_string(int_chamferSeparator));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_chamferSeparator = convert_to_int(soll_id_value);
				if (int_chamferSeparator == 0) {
					chamferSeparator = NXOpen::Annotations::ChamferSeparatorTypeUppercaseX;
				}
				else if (int_chamferSeparator == 1) {
					chamferSeparator = NXOpen::Annotations::ChamferSeparatorTypeLowercaseX;
				}
				_preferencesBuilder->AnnotationStyle()->DimensionStyle()->SetChamferSeparator(chamferSeparator);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- STOPP - %s --- \n", routineName.c_str());
}

/*
File - Preferences - Drafting - Dimension - Dimension Line - Format -> Repair these preferences.
*/
void repair_DraftingStandard_Dimension_DimensionLine_prefs(NXOpen::Drafting::PreferencesBuilder *_preferencesBuilder, en_nx_dpv* _nx_dpv, Session * _theSession, Part* _workPart) {
	routineName.assign("repair_DraftingStandard_Dimension_DimensionLine_prefs");
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- START - %s --- \n", routineName.c_str());

	//This option determines whether or not a dimension line should be drawn between extension lines.
	id_name.assign("Drafting_dimLineBetweenExtLine");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			bool lineBetweenArrows;
			lineBetweenArrows = _preferencesBuilder->AnnotationStyle()->DimensionStyle()->LineBetweenArrows();
			int int_lineBetweenArrows;
			int_lineBetweenArrows = (int)lineBetweenArrows;
			ist_id_value.assign(convert_to_string(int_lineBetweenArrows));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_lineBetweenArrows = convert_to_int(soll_id_value);
				lineBetweenArrows = false;
				if (int_lineBetweenArrows == 1) {
					lineBetweenArrows = true;
				}
				_preferencesBuilder->AnnotationStyle()->DimensionStyle()->SetLineBetweenArrows(lineBetweenArrows);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not the dimension line will be trimmed when the dimension text crosses both extension lines.
	id_name.assign("Drafting_trimDimensionLine");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::TrimDimensionLineStyle trimDimLine;
			trimDimLine = _preferencesBuilder->AnnotationStyle()->DimensionStyle()->TrimDimLine();
			int int_trimDimLine;
			if (trimDimLine == NXOpen::Annotations::TrimDimensionLineStyleDoNotTrim) {
				int_trimDimLine = 0;
			}
			else if (trimDimLine == NXOpen::Annotations::TrimDimensionLineStyleTrim) {
				int_trimDimLine = 1;
			}
			ist_id_value.assign(convert_to_string(int_trimDimLine));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_trimDimLine = convert_to_int(soll_id_value);
				if (int_trimDimLine == 0) {
					trimDimLine = NXOpen::Annotations::TrimDimensionLineStyleDoNotTrim;
				}
				else if (int_trimDimLine == 1) {
					trimDimLine = NXOpen::Annotations::TrimDimensionLineStyleTrim;
				}
				_preferencesBuilder->AnnotationStyle()->DimensionStyle()->SetTrimDimLine(trimDimLine);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- STOPP - %s --- \n", routineName.c_str());
}

/*
File - Preferences - Drafting - Dimension - Radial -> Repair these preferences.
*/
void  repair_DraftingStandard_Dimension_Radial_prefs(NXOpen::Drafting::PreferencesBuilder *_preferencesBuilder, en_nx_dpv* _nx_dpv, Session * _theSession, Part* _workPart) {
	routineName.assign("repair_DraftingStandard_Dimension_Radial_prefs");
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- START - %s --- \n", routineName.c_str());
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- STOPP - %s --- \n", routineName.c_str());
}

/*
File - Preferences - Drafting - Dimension - Ordinate -> Repair these preferences.
*/
void repair_DraftingStandard_Dimension_Ordinate_prefs(NXOpen::Drafting::PreferencesBuilder *_preferencesBuilder, en_nx_dpv* _nx_dpv, Session * _theSession, Part* _workPart) {
	routineName.assign("repair_DraftingStandard_Dimension_Ordinate_prefs");
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- START - %s --- \n", routineName.c_str());

	//This option specifies the positive direction of measurement for an ordinate set.
	id_name.assign("Drafting_ordinatePositiveDirection");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::OrdinatePositiveDirection positiveDirection;
			positiveDirection = _preferencesBuilder->AnnotationStyle()->OrdinateStyle()->PositiveDirection();
			int int_positiveDirection;
			int_positiveDirection = (int)positiveDirection;
			ist_id_value.assign(convert_to_string(int_positiveDirection));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_positiveDirection = convert_to_int(soll_id_value);
				positiveDirection = (NXOpen::Annotations::OrdinatePositiveDirection)int_positiveDirection;
				_preferencesBuilder->AnnotationStyle()->OrdinateStyle()->SetPositiveDirection(positiveDirection);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not the dimension lines are displayed for ordinate dimensions in the set.
	id_name.assign("Drafting_ordinateShowDimensionLine");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::OrdinateLineArrowDisplayOption displayDimensionLine;
			displayDimensionLine = _preferencesBuilder->AnnotationStyle()->OrdinateStyle()->DisplayDimensionLine();
			int int_displayDimensionLine;
			int_displayDimensionLine = (int)displayDimensionLine;
			ist_id_value.assign(convert_to_string(int_displayDimensionLine));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_displayDimensionLine = convert_to_int(soll_id_value);
				displayDimensionLine = (NXOpen::Annotations::OrdinateLineArrowDisplayOption)int_displayDimensionLine;
				_preferencesBuilder->AnnotationStyle()->OrdinateStyle()->SetDisplayDimensionLine(displayDimensionLine);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not a zero is displayed at the ordinate dimension baseline.
	id_name.assign("Drafting_ordinateDisplayZeroAtBaseline");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			bool zeroTextsDisplay;
			zeroTextsDisplay = _preferencesBuilder->AnnotationStyle()->OrdinateStyle()->DisplayZeroAtBaseline();
			ist_id_value.assign(convert_to_string(zeroTextsDisplay));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				zeroTextsDisplay = convert_to_bool(soll_id_value);
				_preferencesBuilder->AnnotationStyle()->OrdinateStyle()->SetDisplayZeroAtBaseline(zeroTextsDisplay);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the name display style for an ordinate origin dimension.
	id_name.assign("Drafting_ordinateDisplayNameStyle");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::OrdinateOriginDisplayOption displayNameStyle;
			displayNameStyle = _preferencesBuilder->AnnotationStyle()->OrdinateStyle()->DisplayNameStyle();
			int int_displayNameStyle;
			if (displayNameStyle == NXOpen::Annotations::OrdinateOriginDisplayOptionUserDefinedSymbol) {
				//User-defined
				int_displayNameStyle = 0;
			}
			else if (displayNameStyle == NXOpen::Annotations::OrdinateOriginDisplayOptionOrdinateSetName) {
				//Ordinate Set Name
				int_displayNameStyle = 4;
			}
			else if (displayNameStyle == NXOpen::Annotations::OrdinateOriginDisplayOptionNoText) {
				//No Display
				int_displayNameStyle = 5;
			}
			else if (displayNameStyle == NXOpen::Annotations::OrdinateOriginDisplayOptionLast) {
				int_displayNameStyle = 3;
			}
			else {
				//on ERROR
				int_displayNameStyle = -999;
			}
			//int_displayNameStyle = (int)displayNameStyle;
			ist_id_value.assign(convert_to_string(int_displayNameStyle));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_displayNameStyle = convert_to_int(soll_id_value);
				if (int_displayNameStyle == 0) {
					//User-defined
					displayNameStyle = NXOpen::Annotations::OrdinateOriginDisplayOptionUserDefinedSymbol;
				}
				else if (int_displayNameStyle == 4) {
					//Ordinate Set Name
					displayNameStyle = NXOpen::Annotations::OrdinateOriginDisplayOptionOrdinateSetName;
				}
				else if (int_displayNameStyle == 5) {
					//No Display
					displayNameStyle = NXOpen::Annotations::OrdinateOriginDisplayOptionNoText;
				}
				else if (int_displayNameStyle == 3) {
					displayNameStyle = NXOpen::Annotations::OrdinateOriginDisplayOptionLast;
				}
				//displayNameStyle = (NXOpen::Annotations::OrdinateOriginDisplayOption)int_displayNameStyle;
				_preferencesBuilder->AnnotationStyle()->OrdinateStyle()->SetDisplayNameStyle(displayNameStyle);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the user-defined text displayed for an ordinate origin.
	id_name.assign("Drafting_ordinateUserText");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXString userDefinedText;
			userDefinedText = _preferencesBuilder->AnnotationStyle()->OrdinateStyle()->UserDefinedText();
			ist_id_value.assign(userDefinedText.GetLocaleText());
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				userDefinedText = soll_id_value.c_str();
				_preferencesBuilder->AnnotationStyle()->OrdinateStyle()->SetUserDefinedText(userDefinedText);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not the user-defined text of an ordinate origin is aligned with the baseline.
	id_name.assign("Drafting_ordinateAlignSymbol");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			bool alignSymbolWithBaseline;
			alignSymbolWithBaseline = _preferencesBuilder->AnnotationStyle()->OrdinateStyle()->AlignSymbolWithBaseline();
			int int_alignSymbolWithBaseline;
			int_alignSymbolWithBaseline = (int)alignSymbolWithBaseline;
			ist_id_value.assign(convert_to_string(int_alignSymbolWithBaseline));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_alignSymbolWithBaseline = convert_to_int(soll_id_value);
				alignSymbolWithBaseline = false;
				if (int_alignSymbolWithBaseline == 1) {
					alignSymbolWithBaseline = true;
				}
				_preferencesBuilder->AnnotationStyle()->OrdinateStyle()->SetAlignSymbolWithBaseline(alignSymbolWithBaseline);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the angle for the user-defined text displayed for an ordinate origin when Align Symbol with Baseline is turned off.
	id_name.assign("Drafting_ordinateSymbolAngle");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double symbolAngle;
			symbolAngle = _preferencesBuilder->AnnotationStyle()->OrdinateStyle()->SymbolAngle();
			ist_id_value.assign(convert_to_string(symbolAngle));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				symbolAngle = convert_to_double(soll_id_value);
				_preferencesBuilder->AnnotationStyle()->OrdinateStyle()->SetSymbolAngle(symbolAngle);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the number of margins to be created.
	id_name.assign("Drafting_marginNumber");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			int numberOfMargins;
			numberOfMargins = _preferencesBuilder->AnnotationStyle()->OrdinateStyle()->NumberOfMargins();
			ist_id_value.assign(convert_to_string(numberOfMargins));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				numberOfMargins = convert_to_int(soll_id_value);
				_preferencesBuilder->AnnotationStyle()->OrdinateStyle()->SetNumberOfMargins(numberOfMargins);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- STOPP - %s --- \n", routineName.c_str());
}

/*
File - Preferences - Drafting - Dimension - Text - Units -> Repair these preferences.
*/
void repair_DraftingStandard_Dimension_Text_Units_prefs(NXOpen::Drafting::PreferencesBuilder *_preferencesBuilder, en_nx_dpv* _nx_dpv, Session * _theSession, Part* _workPart) {
	routineName.assign("repair_DraftingStandard_Dimension_Text_Units_prefs");
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- START - %s --- \n", routineName.c_str());

	//This option specifies the units for single dimensions or the primary dimension of a dual dimension.
	if (_nx_dpv->usedUnitValue.compare("1") == 0) {
		id_name.assign("Drafting_linearUnits_MU");
	}
	else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
		id_name.assign("Drafting_linearUnits_EU");
	}
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::DimensionUnit dimensionLinearUnits;
			dimensionLinearUnits = _preferencesBuilder->AnnotationStyle()->UnitsStyle()->DimensionLinearUnits();
			int int_dimensionLinearUnits;
			int_dimensionLinearUnits = (int)dimensionLinearUnits + 1;
			ist_id_value.assign(convert_to_string(int_dimensionLinearUnits));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_dimensionLinearUnits = convert_to_int(soll_id_value);
				int_dimensionLinearUnits = int_dimensionLinearUnits - 1;
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value corrected = %d \n", routineName.c_str(), int_dimensionLinearUnits);
				dimensionLinearUnits = (NXOpen::Annotations::DimensionUnit) int_dimensionLinearUnits;
				_preferencesBuilder->AnnotationStyle()->UnitsStyle()->SetDimensionLinearUnits(dimensionLinearUnits);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the number of decimal places for the nominal value of linear dimensions.
	if (_nx_dpv->usedUnitValue.compare("1") == 0) {
		id_name.assign("Drafting_dimensionDecimalPlaces_MU");
	}
	else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
		id_name.assign("Drafting_dimensionDecimalPlaces_EU");
	}
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			int dimensionValuePrecision;
			dimensionValuePrecision = _preferencesBuilder->AnnotationStyle()->DimensionStyle()->DimensionValuePrecision();
			ist_id_value.assign(convert_to_string(dimensionValuePrecision));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				dimensionValuePrecision = convert_to_int(soll_id_value);
				_preferencesBuilder->AnnotationStyle()->DimensionStyle()->SetDimensionValuePrecision(dimensionValuePrecision);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the denominator when dimension values are to be displayed with fractions (rather than with decimals).
	id_name.assign("Drafting_fractionDenominator");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::FractionDenominatorFormat primaryDimensionFractionDenominator;
			primaryDimensionFractionDenominator = _preferencesBuilder->AnnotationStyle()->DimensionStyle()->PrimaryDimensionFractionDenominator();
			int int_primaryDimensionFractionDenominator;
			//Achtung: Rückgabefehler
			int_primaryDimensionFractionDenominator = (int)primaryDimensionFractionDenominator + 1;
			ist_id_value.assign(convert_to_string(int_primaryDimensionFractionDenominator));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_primaryDimensionFractionDenominator = convert_to_int(soll_id_value) + 1;
				NXOpen::Annotations::FractionDenominatorFormat primaryDimensionFractionDenominator;
				primaryDimensionFractionDenominator = (NXOpen::Annotations::FractionDenominatorFormat)int_primaryDimensionFractionDenominator;
				_preferencesBuilder->AnnotationStyle()->DimensionStyle()->SetPrimaryDimensionFractionDenominator(primaryDimensionFractionDenominator);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the decimal point character of a dimension. The Comma option is only valid for a dimension text unit that is metric (millimeters or meters).
	if (_nx_dpv->usedUnitValue.compare("1") == 0) {
		id_name.assign("Drafting_decimalPoint_MU");
	}
	else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
		id_name.assign("Drafting_decimalPoint_EU");
	}
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::DecimalPointCharacter decimalPointCharacter;
			decimalPointCharacter = _preferencesBuilder->AnnotationStyle()->UnitsStyle()->DecimalPointCharacter();
			int int_decimalPointCharacter;
			int_decimalPointCharacter = (int)decimalPointCharacter;
			ist_id_value.assign(convert_to_string(int_decimalPointCharacter));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_decimalPointCharacter = convert_to_int(soll_id_value);
				NXOpen::Annotations::DecimalPointCharacter decimalPointCharacter;
				decimalPointCharacter = (NXOpen::Annotations::DecimalPointCharacter)int_decimalPointCharacter;
				_preferencesBuilder->AnnotationStyle()->UnitsStyle()->SetDecimalPointCharacter(decimalPointCharacter);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not leading zeros will be displayed for dimensions.
	if (_nx_dpv->usedUnitValue.compare("1") == 0) {
		id_name.assign("Drafting_dimLeadingZeros_MU");
	}
	else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
		id_name.assign("Drafting_dimLeadingZeros_EU");
	}
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			bool displayLeadingDimensionZeros;
			displayLeadingDimensionZeros = _preferencesBuilder->AnnotationStyle()->UnitsStyle()->DisplayLeadingDimensionZeros();
			int int_displayLeadingDimensionZeros;
			int_displayLeadingDimensionZeros = (int)displayLeadingDimensionZeros;
			ist_id_value.assign(convert_to_string(int_displayLeadingDimensionZeros));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_displayLeadingDimensionZeros = convert_to_int(soll_id_value);
				displayLeadingDimensionZeros = false;
				if (int_displayLeadingDimensionZeros == 1) {
					displayLeadingDimensionZeros = true;
				}
				_preferencesBuilder->AnnotationStyle()->UnitsStyle()->SetDisplayLeadingDimensionZeros(displayLeadingDimensionZeros);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not trailing zeros will be displayed for linear dimensions.
	if (_nx_dpv->usedUnitValue.compare("1") == 0) {
		id_name.assign("Drafting_dimTrailingZeros_MU");
	}
	else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
		id_name.assign("Drafting_dimTrailingZeros_EU");
	}
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			bool displayTrailingZeros;
			displayTrailingZeros = _preferencesBuilder->AnnotationStyle()->UnitsStyle()->DisplayTrailingZeros();
			int int_displayTrailingZeros;
			int_displayTrailingZeros = (int)displayTrailingZeros;
			ist_id_value.assign(convert_to_string(int_displayTrailingZeros));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_displayTrailingZeros = convert_to_int(soll_id_value);
				displayTrailingZeros = false;
				if (int_displayTrailingZeros == 1) {
					displayTrailingZeros = true;
				}
				_preferencesBuilder->AnnotationStyle()->UnitsStyle()->SetDisplayTrailingZeros(displayTrailingZeros);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the precision and format of nominal angular dimensions.
	id_name.assign("Drafting_angularUnits");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::AngularDimensionFormat dimensionAngularFormat;
			dimensionAngularFormat = _preferencesBuilder->AnnotationStyle()->UnitsStyle()->DimensionAngularFormat();
			int int_dimensionAngularFormat;
			//Achtung: Rückgabefehler
			int_dimensionAngularFormat = (int)dimensionAngularFormat + 1;
			ist_id_value.assign(convert_to_string(int_dimensionAngularFormat));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_dimensionAngularFormat = convert_to_int(soll_id_value) + 1;
				NXOpen::Annotations::AngularDimensionFormat dimensionAngularFormat;
				dimensionAngularFormat = (NXOpen::Annotations::AngularDimensionFormat)int_dimensionAngularFormat;
				_preferencesBuilder->AnnotationStyle()->UnitsStyle()->SetDimensionAngularFormat(dimensionAngularFormat);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies if leading and / or trailing zeros should be suppressed or displayed for angular dimensions that are less than one degree.
	//The setting of this option affects both the main dimension text as well as the tolerance value.
	id_name.assign("Drafting_angularSuppressZeros");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::AngularSuppressZeros angularSuppressZeros;
			angularSuppressZeros = _preferencesBuilder->AnnotationStyle()->UnitsStyle()->AngularSuppressZeros();
			int int_angularSuppressZeros;
			int_angularSuppressZeros = (int)angularSuppressZeros;
			ist_id_value.assign(convert_to_string(int_angularSuppressZeros));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_angularSuppressZeros = convert_to_int(soll_id_value);
				NXOpen::Annotations::AngularSuppressZeros angularSuppressZeros;
				angularSuppressZeros = (NXOpen::Annotations::AngularSuppressZeros)int_angularSuppressZeros;
				_preferencesBuilder->AnnotationStyle()->UnitsStyle()->SetAngularSuppressZeros(angularSuppressZeros);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- STOPP - %s --- \n", routineName.c_str());
}

/*
File - Preferences - Drafting - Dimension - Text - Orientation and Location -> Repair these preferences.
*/
void repair_DraftingStandard_Dimension_Text_OrientationLocation_prefs(NXOpen::Drafting::PreferencesBuilder *_preferencesBuilder, en_nx_dpv* _nx_dpv, Session * _theSession, Part* _workPart) {
	routineName.assign("repair_DraftingStandard_Dimension_Text_OrientationLocation_prefs");
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- START - %s --- \n", routineName.c_str());

	//This option specifies the text orientation for dimensions.
	if (_nx_dpv->usedUnitValue.compare("1") == 0) {
		id_name.assign("Drafting_textOrientation_MU");
	}
	else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
		id_name.assign("Drafting_textOrientation_EU");
	}
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::TextOrientation textOrientation;
			textOrientation = _preferencesBuilder->AnnotationStyle()->DimensionStyle()->Orientation();
			int int_textOrientation;
			//Rückgabewert falsch
			int_textOrientation = (int)textOrientation + 1;
			ist_id_value.assign(convert_to_string(int_textOrientation));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				//Rückgabewert falsch
				int_textOrientation = convert_to_int(soll_id_value) - 1;
				textOrientation = (NXOpen::Annotations::TextOrientation)int_textOrientation;
				_preferencesBuilder->AnnotationStyle()->DimensionStyle()->SetOrientation(textOrientation);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies at what angle dimension text will be placed.
	id_name.assign("Drafting_textAngle");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double textAngle;
			textAngle = _preferencesBuilder->AnnotationStyle()->DimensionStyle()->TextAngle();
			ist_id_value.assign(convert_to_string(textAngle));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				textAngle = convert_to_double(soll_id_value);
				_preferencesBuilder->AnnotationStyle()->DimensionStyle()->SetTextAngle(textAngle);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the text orientation for ordinate dimensions.
	if (_nx_dpv->usedUnitValue.compare("1") == 0) {
		id_name.assign("Drafting_ordinateTextOrientation_MU");
	}
	else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
		id_name.assign("Drafting_ordinateTextOrientation_EU");
	}
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::TextOrientation ordinatetextOrientation;
			ordinatetextOrientation = _preferencesBuilder->AnnotationStyle()->OrdinateStyle()->OrdinateTextOrientation();
			int int_ordinatetextOrientation;
			//Rückgabewert falsch
			int_ordinatetextOrientation = (int)ordinatetextOrientation + 1;
			ist_id_value.assign(convert_to_string(int_ordinatetextOrientation));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				//Rückgabewert falsch
				int_ordinatetextOrientation = convert_to_int(soll_id_value) + 1;
				ordinatetextOrientation = (NXOpen::Annotations::TextOrientation)int_ordinatetextOrientation;
				_preferencesBuilder->AnnotationStyle()->OrdinateStyle()->SetOrdinateTextOrientation(ordinatetextOrientation);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies at what angle ordinate dimension text will be placed.
	id_name.assign("Drafting_ordinateTextAngle");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double ordinatetextAngle;
			ordinatetextAngle = _preferencesBuilder->AnnotationStyle()->OrdinateStyle()->OrdinateTextAngle();
			ist_id_value.assign(convert_to_string(ordinatetextAngle));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				ordinatetextAngle = convert_to_double(soll_id_value);
				_preferencesBuilder->AnnotationStyle()->OrdinateStyle()->SetOrdinateTextAngle(ordinatetextAngle);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//When the dimension text is positioned using a stub, this option specifies the location of the 
	//dimension text (including any appended text) in relation to the stub.
	id_name.assign("Drafting_DimensionTextPosition");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::TextPosition textPosition;
			textPosition = _preferencesBuilder->AnnotationStyle()->DimensionStyle()->TextPosition();
			int int_textPosition;
			int_textPosition = (int)textPosition;
			ist_id_value.assign(convert_to_string(int_textPosition));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_textPosition = convert_to_int(soll_id_value);
				textPosition = (NXOpen::Annotations::TextPosition)int_textPosition;
				_preferencesBuilder->AnnotationStyle()->DimensionStyle()->SetTextPosition(textPosition);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- STOPP - %s --- \n", routineName.c_str());
}

/*
File - Preferences - Drafting - Dimension - Text - Format -> Repair these preferences.
*/
void repair_DraftingStandard_Dimension_Text_Format_prefs(NXOpen::Drafting::PreferencesBuilder *_preferencesBuilder, en_nx_dpv* _nx_dpv, Session * _theSession, Part* _workPart) {
	routineName.assign("repair_DraftingStandard_Dimension_Text_Format_prefs");
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- START - %s --- \n", routineName.c_str());

	//This option determines whether or not a rounded box should be displayed around the dimension text. 
	//The rounded box is used to indicate if a dimension is to be inspected.
	id_name.assign("Drafting_inspectionDisplayType");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			bool inspectionDimension;
			inspectionDimension = _preferencesBuilder->AnnotationStyle()->DimensionStyle()->InspectionDimension();
			int int_inspectionDimension;
			int_inspectionDimension = inspectionDimension ? 1 : 0;
			ist_id_value.assign(convert_to_string(int_inspectionDimension));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_inspectionDimension = convert_to_int(soll_id_value);
				inspectionDimension = false;
				if (int_inspectionDimension == 1) {
					inspectionDimension = true;
				}
				_preferencesBuilder->AnnotationStyle()->DimensionStyle()->SetInspectionDimension(inspectionDimension);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the appended text to be included within the dimension inspection symbol.
	id_name.assign("Drafting_inspectionSymbolAroundAppendedText");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::InspectionSymbolAroundAppendedText inspectionSymbolAroundAppendedText;
			inspectionSymbolAroundAppendedText = _preferencesBuilder->AnnotationStyle()->DimensionStyle()->InspectionSymbolAroundAppendedText();
			int int_inspectionSymbolAroundAppendedText;
			int_inspectionSymbolAroundAppendedText = (int)inspectionSymbolAroundAppendedText;
			ist_id_value.assign(convert_to_string(int_inspectionSymbolAroundAppendedText));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_inspectionSymbolAroundAppendedText = convert_to_int(soll_id_value);
				inspectionSymbolAroundAppendedText = (NXOpen::Annotations::InspectionSymbolAroundAppendedText)int_inspectionSymbolAroundAppendedText;
				_preferencesBuilder->AnnotationStyle()->DimensionStyle()->SetInspectionSymbolAroundAppendedText(inspectionSymbolAroundAppendedText);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not dimensions will be shown as not to scale dimensions.
	id_name.assign("Drafting_nottoScaleToleranceType");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::ToleranceType dimToeranceType;
			dimToeranceType = _preferencesBuilder->AnnotationStyle()->DimensionStyle()->ToleranceType();
			int int_dimToeranceType;
			int_dimToeranceType = (int)dimToeranceType;
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - %s - int_dimToeranceType = %d \n", routineName.c_str(), id_name.c_str(), int_dimToeranceType);
			NXOpen::Annotations::InspectionSymbolAroundAppendedText inspectionSymbolAroundAppendedText;
			inspectionSymbolAroundAppendedText = _preferencesBuilder->AnnotationStyle()->DimensionStyle()->InspectionSymbolAroundAppendedText();
			int int_inspectionSymbolAroundAppendedText;
			if (inspectionSymbolAroundAppendedText == NXOpen::Annotations::InspectionSymbolAroundAppendedTextNone) {
				int_inspectionSymbolAroundAppendedText = 0;
			}
			else if (inspectionSymbolAroundAppendedText == NXOpen::Annotations::InspectionSymbolAroundAppendedTextBefore) {
				int_inspectionSymbolAroundAppendedText = 1;
			}
			else if (inspectionSymbolAroundAppendedText == NXOpen::Annotations::InspectionSymbolAroundAppendedTextAfter) {
				int_inspectionSymbolAroundAppendedText = 2;
			}
			else if (inspectionSymbolAroundAppendedText == NXOpen::Annotations::InspectionSymbolAroundAppendedTextBeforeAfter) {
				int_inspectionSymbolAroundAppendedText = 3;
			}
			else if (inspectionSymbolAroundAppendedText == NXOpen::Annotations::InspectionSymbolAroundAppendedTextAll) {
				int_inspectionSymbolAroundAppendedText = 4;
			}
			bool bool_dimToeranceType;
			if (dimToeranceType != NXOpen::Annotations::ToleranceTypeBasicNotToScale || int_inspectionSymbolAroundAppendedText==0) {
				bool_dimToeranceType = false;
			}
			else {
				bool_dimToeranceType = true;
			}
			ist_id_value.assign(convert_to_string(bool_dimToeranceType));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				bool_dimToeranceType = convert_to_bool(soll_id_value);
				if (bool_dimToeranceType == true) {
					dimToeranceType = NXOpen::Annotations::ToleranceTypeNotToScale;
				}
				else {
					dimToeranceType = NXOpen::Annotations::ToleranceTypeNone;
				}
				_preferencesBuilder->AnnotationStyle()->DimensionStyle()->SetToleranceType(dimToeranceType);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- STOPP - %s --- \n", routineName.c_str());
}

/*
File - Preferences - Drafting - Dimension - Text - Appended -> Repair these preferences.
*/
void repair_DraftingStandard_Dimension_Text_Appended_prefs(NXOpen::Drafting::PreferencesBuilder *_preferencesBuilder, en_nx_dpv* _nx_dpv, Session * _theSession, Part* _workPart) {
	routineName.assign("repair_DraftingStandard_Dimension_Text_Appended_prefs");
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- START - %s --- \n", routineName.c_str());

	//This option specifies the color of appended text.
	id_name.assign("Drafting_appTextColor");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::NXColor *appendedTextColor;
			appendedTextColor = _preferencesBuilder->AnnotationStyle()->LetteringStyle()->AppendedTextColor();
			int appendedTextColorIndex;
			appendedTextColorIndex = appendedTextColor->Handle();
			ist_id_value.assign(convert_to_string(appendedTextColorIndex));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				appendedTextColorIndex = convert_to_int(soll_id_value);
				appendedTextColor = _workPart->Colors()->Find(appendedTextColorIndex);
				_preferencesBuilder->AnnotationStyle()->LetteringStyle()->SetAppendedTextColor(appendedTextColor);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the character font for appended text. Any font present in the directory
	//pointed to by the UGII_CHARACTER_FONT_DIR environment variable can be specified here.
	id_name.assign("Drafting_appTextFont");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			int appendedTextFontIndex;
			appendedTextFontIndex = _preferencesBuilder->AnnotationStyle()->LetteringStyle()->AppendedTextFont();
			NXString appendedTextFont;
			appendedTextFont = _workPart->Fonts()->GetFontName(appendedTextFontIndex);
			ist_id_value.assign(appendedTextFont.GetLocaleText());
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				appendedTextFont = (NXString)soll_id_value;
				appendedTextFontIndex = _workPart->Fonts()->AddFont(appendedTextFont);
				_preferencesBuilder->AnnotationStyle()->LetteringStyle()->SetAppendedTextFont(appendedTextFontIndex);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the line width for the font for appended text.
	id_name.assign("Drafting_appTextWidth");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::LineWidth appendedTextLineWidth;
			appendedTextLineWidth = _preferencesBuilder->AnnotationStyle()->LetteringStyle()->AppendedTextLineWidth();
			int int_appendedTextLineWidth;
			if (appendedTextLineWidth == NXOpen::Annotations::LineWidthNormal) {
				int_appendedTextLineWidth = 1;
			}
			else if (appendedTextLineWidth == NXOpen::Annotations::LineWidthThick) {
				int_appendedTextLineWidth = 2;
			}
			else if (appendedTextLineWidth == NXOpen::Annotations::LineWidthThin) {
				int_appendedTextLineWidth = 3;
			}
			else if (appendedTextLineWidth == NXOpen::Annotations::LineWidthOne) {
				int_appendedTextLineWidth = 6;
			}
			else if (appendedTextLineWidth == NXOpen::Annotations::LineWidthTwo) {
				int_appendedTextLineWidth = 7;
			}
			else if (appendedTextLineWidth == NXOpen::Annotations::LineWidthThree) {
				int_appendedTextLineWidth = 8;
			}
			else if (appendedTextLineWidth == NXOpen::Annotations::LineWidthFour) {
				int_appendedTextLineWidth = 9;
			}
			else if (appendedTextLineWidth == NXOpen::Annotations::LineWidthFive) {
				int_appendedTextLineWidth = 10;
			}
			else if (appendedTextLineWidth == NXOpen::Annotations::LineWidthSix) {
				int_appendedTextLineWidth = 11;
			}
			else if (appendedTextLineWidth == NXOpen::Annotations::LineWidthSeven) {
				int_appendedTextLineWidth = 12;
			}
			else if (appendedTextLineWidth == NXOpen::Annotations::LineWidthEight) {
				int_appendedTextLineWidth = 13;
			}
			else if (appendedTextLineWidth == NXOpen::Annotations::LineWidthNine) {
				int_appendedTextLineWidth = 14;
			}
			//string id_name_tmp;
			//std::map<const std::string, std::string>::iterator it_tmp;
			//if (int_appendedTextLineWidth == 1) {
			//	id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
			//	it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
			//	int_appendedTextLineWidth = convert_to_int(it_tmp->second);
			//}
			//if (int_appendedTextLineWidth == 2) {
			//	id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
			//	it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
			//	int_appendedTextLineWidth = convert_to_int(it_tmp->second);
			//}
			//if (int_appendedTextLineWidth == 3) {
			//	id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
			//	it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
			//	int_appendedTextLineWidth = convert_to_int(it_tmp->second);
			//}
			//_nx_dpv->soll_dpv_map.find(id_name)->second = convert_to_string( int_appendedTextLineWidth );
			ist_id_value.assign(convert_to_string(int_appendedTextLineWidth));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_appendedTextLineWidth = convert_to_int(soll_id_value);
				if (int_appendedTextLineWidth == 1) {
					appendedTextLineWidth = NXOpen::Annotations::LineWidthNormal;
					//id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
					//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					//appendedTextLineWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
				}
				else if (int_appendedTextLineWidth == 2) {
					appendedTextLineWidth = NXOpen::Annotations::LineWidthThick;
					//id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
					//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					//appendedTextLineWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
				}
				else if (int_appendedTextLineWidth == 3) {
					appendedTextLineWidth = NXOpen::Annotations::LineWidthThin;
					//id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
					//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					//appendedTextLineWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
				}
				else if (int_appendedTextLineWidth == 6) {
					appendedTextLineWidth = NXOpen::Annotations::LineWidthOne;
				}
				else if (int_appendedTextLineWidth == 7) {
					appendedTextLineWidth = NXOpen::Annotations::LineWidthTwo;
				}
				else if (int_appendedTextLineWidth == 8) {
					appendedTextLineWidth = NXOpen::Annotations::LineWidthThree;
				}
				else if (int_appendedTextLineWidth == 9) {
					appendedTextLineWidth = NXOpen::Annotations::LineWidthFour;
				}
				else if (int_appendedTextLineWidth == 10) {
					appendedTextLineWidth = NXOpen::Annotations::LineWidthFive;
				}
				else if (int_appendedTextLineWidth == 11) {
					appendedTextLineWidth = NXOpen::Annotations::LineWidthSix;
				}
				else if (int_appendedTextLineWidth == 12) {
					appendedTextLineWidth = NXOpen::Annotations::LineWidthSeven;
				}
				else if (int_appendedTextLineWidth == 13) {
					appendedTextLineWidth = NXOpen::Annotations::LineWidthEight;
				}
				else if (int_appendedTextLineWidth == 14) {
					appendedTextLineWidth = NXOpen::Annotations::LineWidthNine;
				}
				_preferencesBuilder->AnnotationStyle()->LetteringStyle()->SetAppendedTextLineWidth(appendedTextLineWidth);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the character height for appended text.
	if (_nx_dpv->usedUnitValue.compare("1") == 0) {
		id_name.assign("Drafting_appTextCharSize_MU");
	}
	else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
		id_name.assign("Drafting_appTextCharSize_EU");
	}
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double appendedTextSize;
			appendedTextSize = _preferencesBuilder->AnnotationStyle()->LetteringStyle()->AppendedTextSize();
			ist_id_value.assign(convert_to_string(appendedTextSize));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				appendedTextSize = convert_to_double(soll_id_value);
				_preferencesBuilder->AnnotationStyle()->LetteringStyle()->SetAppendedTextSize(appendedTextSize);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the NX Font spacing between the characters in the appended text 
	//as a multiple of the standard character spacing for the current font.
	id_name.assign("Drafting_appTextSpaceFactor");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double appendedNXTextCharSpaceFactor;
			appendedNXTextCharSpaceFactor = _preferencesBuilder->AnnotationStyle()->LetteringStyle()->AppendedNxTextCharacterSpaceFactor();
			ist_id_value.assign(convert_to_string(appendedNXTextCharSpaceFactor));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				appendedNXTextCharSpaceFactor = convert_to_double(soll_id_value);
				_preferencesBuilder->AnnotationStyle()->LetteringStyle()->SetAppendedNxTextCharacterSpaceFactor(appendedNXTextCharSpaceFactor);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the Standard Font spacing between the characters in the 
	//appended text as a multiple of the standard character spacing for the current font.
	id_name.assign("Drafting_standardAppTextSpaceFactor");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double appendedStandardTextCharSpaceFactor;
			appendedStandardTextCharSpaceFactor = _preferencesBuilder->AnnotationStyle()->LetteringStyle()->AppendedStandardTextCharacterSpaceFactor();
			ist_id_value.assign(convert_to_string(appendedStandardTextCharSpaceFactor));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				appendedStandardTextCharSpaceFactor = convert_to_double(soll_id_value);
				_preferencesBuilder->AnnotationStyle()->LetteringStyle()->SetAppendedStandardTextCharacterSpaceFactor(appendedStandardTextCharSpaceFactor);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the aspect ratio at which appended text is displayed in relation to the original size of the current font. 
	//The aspect ratio is the ratio of the character's width to its height.
	id_name.assign("Drafting_appTextAspectRatio");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double appendedTextAspectRatio;
			appendedTextAspectRatio = _preferencesBuilder->AnnotationStyle()->LetteringStyle()->AppendedTextAspectRatio();
			ist_id_value.assign(convert_to_string(appendedTextAspectRatio));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				appendedTextAspectRatio = convert_to_double(soll_id_value);
				_preferencesBuilder->AnnotationStyle()->LetteringStyle()->SetAppendedTextAspectRatio(appendedTextAspectRatio);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the aspect ratio at which the symbols are displayed in relation to the original
	//size of the current symbol. The aspect ratio is the ratio of the symbol's width to its height. Only 
	//symbols created using the NX control characters are supported.
	id_name.assign("Drafting_appSymbolAspectRatio");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double appendedTextSymbolAspect;
			appendedTextSymbolAspect = _preferencesBuilder->AnnotationStyle()->LetteringStyle()->AppendedTextSymbolAspectRatio();
			ist_id_value.assign(convert_to_string(appendedTextSymbolAspect));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				appendedTextSymbolAspect = convert_to_double(soll_id_value);
				_preferencesBuilder->AnnotationStyle()->LetteringStyle()->SetAppendedTextSymbolAspectRatio(appendedTextSymbolAspect);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the line spacing value for appended text as a multiple of the standard spacing for the current font.
	id_name.assign("Drafting_appTextLineFactor");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double appendedTextLineSpaceFactor;
			appendedTextLineSpaceFactor = _preferencesBuilder->AnnotationStyle()->LetteringStyle()->AppendedTextLineSpaceFactor();
			ist_id_value.assign(convert_to_string(appendedTextLineSpaceFactor));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				appendedTextLineSpaceFactor = convert_to_double(soll_id_value);
				_preferencesBuilder->AnnotationStyle()->LetteringStyle()->SetAppendedTextLineSpaceFactor(appendedTextLineSpaceFactor);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the spacing between the before appended text and the next piece of dimension text to its right; 
	//and the spacing between the after appended text and the next piece of text to its left. The space is equal to the 
	//appended text character size multiplied by the space factor.
	id_name.assign("Drafting_dimAppTextSpaceFactor");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double appendedTextSpaceFactor;
			appendedTextSpaceFactor = _preferencesBuilder->AnnotationStyle()->LetteringStyle()->AppendedTextSpaceFactor();
			ist_id_value.assign(convert_to_string(appendedTextSpaceFactor));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				appendedTextSpaceFactor = convert_to_double(soll_id_value);
				_preferencesBuilder->AnnotationStyle()->LetteringStyle()->SetAppendedTextSpaceFactor(appendedTextSpaceFactor);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- STOPP - %s --- \n", routineName.c_str());
}

/*
File - Preferences - Drafting - Dimension - Text - Dimension -> Repair these preferences.
*/
void repair_DraftingStandard_Dimension_Text_Dimension_prefs(NXOpen::Drafting::PreferencesBuilder *_preferencesBuilder, en_nx_dpv* _nx_dpv, Session * _theSession, Part* _workPart) {
	routineName.assign("repair_DraftingStandard_Dimension_Text_Dimension_prefs");
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- START - %s --- \n", routineName.c_str());

	//This option specifies the color of dimension text.
	if (_nx_dpv->usedUnitValue.compare("1") == 0) {
		id_name.assign("Drafting_dimTextColor_MU");
	}
	else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
		id_name.assign("Drafting_dimTextColor_EU");
	}
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::NXColor *dimensionTextColor;
			dimensionTextColor = _preferencesBuilder->AnnotationStyle()->LetteringStyle()->DimensionTextColor();
			int dimensionTextColorIndex;
			dimensionTextColorIndex = dimensionTextColor->Handle();
			ist_id_value.assign(convert_to_string(dimensionTextColorIndex));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				dimensionTextColorIndex = convert_to_int(soll_id_value);
				dimensionTextColor = _workPart->Colors()->Find(dimensionTextColorIndex);
				_preferencesBuilder->AnnotationStyle()->LetteringStyle()->SetDimensionTextColor(dimensionTextColor);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the character font for dimension text. Any font present in the directory  
	//pointed to by the UGII_CHARACTER_FONT_DIR environment variable can be specified here.
	id_name.assign("Drafting_dimTextFont");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			int dimensionTextFontIndex;
			dimensionTextFontIndex = _preferencesBuilder->AnnotationStyle()->LetteringStyle()->DimensionTextFont();
			NXString dimensionTextFont;
			dimensionTextFont = _workPart->Fonts()->GetFontName(dimensionTextFontIndex);
			ist_id_value.assign(dimensionTextFont.GetLocaleText());
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				dimensionTextFont = (NXString)soll_id_value;
				dimensionTextFontIndex = _workPart->Fonts()->AddFont(dimensionTextFont.GetLocaleText());
				_preferencesBuilder->AnnotationStyle()->LetteringStyle()->SetDimensionTextFont(dimensionTextFontIndex);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the line width for the font for dimension text.
	id_name.assign("Drafting_dimTextWidth");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::LineWidth dimensionTextLineWidth;
			dimensionTextLineWidth = _preferencesBuilder->AnnotationStyle()->LetteringStyle()->DimensionTextLineWidth();
			int int_dimensionTextLineWidth;
			if (dimensionTextLineWidth == NXOpen::Annotations::LineWidthNormal) {
				int_dimensionTextLineWidth = 1;
			}
			else if (dimensionTextLineWidth == NXOpen::Annotations::LineWidthThick) {
				int_dimensionTextLineWidth = 2;
			}
			else if (dimensionTextLineWidth == NXOpen::Annotations::LineWidthThin) {
				int_dimensionTextLineWidth = 3;
			}
			else if (dimensionTextLineWidth == NXOpen::Annotations::LineWidthOne) {
				int_dimensionTextLineWidth = 6;
			}
			else if (dimensionTextLineWidth == NXOpen::Annotations::LineWidthTwo) {
				int_dimensionTextLineWidth = 7;
			}
			else if (dimensionTextLineWidth == NXOpen::Annotations::LineWidthThree) {
				int_dimensionTextLineWidth = 8;
			}
			else if (dimensionTextLineWidth == NXOpen::Annotations::LineWidthFour) {
				int_dimensionTextLineWidth = 9;
			}
			else if (dimensionTextLineWidth == NXOpen::Annotations::LineWidthFive) {
				int_dimensionTextLineWidth = 10;
			}
			else if (dimensionTextLineWidth == NXOpen::Annotations::LineWidthSix) {
				int_dimensionTextLineWidth = 11;
			}
			else if (dimensionTextLineWidth == NXOpen::Annotations::LineWidthSeven) {
				int_dimensionTextLineWidth = 12;
			}
			else if (dimensionTextLineWidth == NXOpen::Annotations::LineWidthEight) {
				int_dimensionTextLineWidth = 13;
			}
			else if (dimensionTextLineWidth == NXOpen::Annotations::LineWidthNine) {
				int_dimensionTextLineWidth = 14;
			}
			//string id_name_tmp;
			//std::map<const std::string, std::string>::iterator it_tmp;
			//if (int_dimensionTextLineWidth == 1) {
			//	id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
			//	it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
			//	int_dimensionTextLineWidth = convert_to_int(it_tmp->second);
			//}
			//if (int_dimensionTextLineWidth == 2) {
			//	id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
			//	it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
			//	int_dimensionTextLineWidth = convert_to_int(it_tmp->second);
			//}
			//if (int_dimensionTextLineWidth == 3) {
			//	id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
			//	it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
			//	int_dimensionTextLineWidth = convert_to_int(it_tmp->second);
			//}
			//_nx_dpv->soll_dpv_map.find(id_name)->second = convert_to_string( int_dimensionTextLineWidth );
			ist_id_value.assign(convert_to_string(int_dimensionTextLineWidth));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_dimensionTextLineWidth = convert_to_int(soll_id_value);
				if (int_dimensionTextLineWidth == 1) {
					dimensionTextLineWidth = NXOpen::Annotations::LineWidthNormal;
					//id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
					//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					//dimensionTextLineWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
				}
				else if (int_dimensionTextLineWidth == 2) {
					dimensionTextLineWidth = NXOpen::Annotations::LineWidthThick;
					//id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
					//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					//dimensionTextLineWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
				}
				else if (int_dimensionTextLineWidth == 3) {
					dimensionTextLineWidth = NXOpen::Annotations::LineWidthThin;
					//id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
					//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					//dimensionTextLineWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
				}
				else if (int_dimensionTextLineWidth == 6) {
					dimensionTextLineWidth = NXOpen::Annotations::LineWidthOne;
				}
				else if (int_dimensionTextLineWidth == 7) {
					dimensionTextLineWidth = NXOpen::Annotations::LineWidthTwo;
				}
				else if (int_dimensionTextLineWidth == 8) {
					dimensionTextLineWidth = NXOpen::Annotations::LineWidthThree;
				}
				else if (int_dimensionTextLineWidth == 9) {
					dimensionTextLineWidth = NXOpen::Annotations::LineWidthFour;
				}
				else if (int_dimensionTextLineWidth == 10) {
					dimensionTextLineWidth = NXOpen::Annotations::LineWidthFive;
				}
				else if (int_dimensionTextLineWidth == 11) {
					dimensionTextLineWidth = NXOpen::Annotations::LineWidthSix;
				}
				else if (int_dimensionTextLineWidth == 12) {
					dimensionTextLineWidth = NXOpen::Annotations::LineWidthSeven;
				}
				else if (int_dimensionTextLineWidth == 13) {
					dimensionTextLineWidth = NXOpen::Annotations::LineWidthEight;
				}
				else if (int_dimensionTextLineWidth == 14) {
					dimensionTextLineWidth = NXOpen::Annotations::LineWidthNine;
				}
				_preferencesBuilder->AnnotationStyle()->LetteringStyle()->SetDimensionTextLineWidth(dimensionTextLineWidth);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the character height for dimension text.
	if (_nx_dpv->usedUnitValue.compare("1") == 0) {
		id_name.assign("Drafting_dimTextCharSize_MU");
	}
	else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
		id_name.assign("Drafting_dimTextCharSize_EU");
	}
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double dimensionTextSize;
			dimensionTextSize = _preferencesBuilder->AnnotationStyle()->LetteringStyle()->DimensionTextSize();
			ist_id_value.assign(convert_to_string(dimensionTextSize));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				dimensionTextSize = convert_to_double(soll_id_value);
				_preferencesBuilder->AnnotationStyle()->LetteringStyle()->SetDimensionTextSize(dimensionTextSize);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the NX Font spacing between the characters in the dimension text 
	//as a multiple of the standard character spacing for the current font.
	id_name.assign("Drafting_dimTextSpaceFactor");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double dimensionNXTextCharSpaceFactor;
			dimensionNXTextCharSpaceFactor = _preferencesBuilder->AnnotationStyle()->LetteringStyle()->DimensionNxTextCharacterSpaceFactor();
			ist_id_value.assign(convert_to_string(dimensionNXTextCharSpaceFactor));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				dimensionNXTextCharSpaceFactor = convert_to_double(soll_id_value);
				_preferencesBuilder->AnnotationStyle()->LetteringStyle()->SetDimensionNxTextCharacterSpaceFactor(dimensionNXTextCharSpaceFactor);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the Standard Font spacing between the characters in the dimension text as a multiple of 
	//the standard character spacing for the current font.
	id_name.assign("Drafting_standardDimTextSpaceFactor");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double dimensionStandardTextCharSpaceFactor;
			dimensionStandardTextCharSpaceFactor = _preferencesBuilder->AnnotationStyle()->LetteringStyle()->DimensionStandardTextCharacterSpaceFactor();
			ist_id_value.assign(convert_to_string(dimensionStandardTextCharSpaceFactor));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				dimensionStandardTextCharSpaceFactor = convert_to_double(soll_id_value);
				_preferencesBuilder->AnnotationStyle()->LetteringStyle()->SetDimensionStandardTextCharacterSpaceFactor(dimensionStandardTextCharSpaceFactor);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the aspect ratio at which dimension text is displayed in relation to the original size of the current font. 
	//The aspect ratio is the ratio of the character's width to its height.
	id_name.assign("Drafting_dimTextAspectRatio");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double dimensionTextAspectRatio;
			dimensionTextAspectRatio = _preferencesBuilder->AnnotationStyle()->LetteringStyle()->DimensionTextAspectRatio();
			ist_id_value.assign(convert_to_string(dimensionTextAspectRatio));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				dimensionTextAspectRatio = convert_to_double(soll_id_value);
				_preferencesBuilder->AnnotationStyle()->LetteringStyle()->SetDimensionTextAspectRatio(dimensionTextAspectRatio);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the aspect ratio at which the symbols are displayed in relation to the 
	//original size of the current symbol. The aspect ratio is the ratio of the symbol's width to its height. 
	//Only symbols created using the NX control characters are supported.
	id_name.assign("Drafting_dimSymbolAspectRatio");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double dimensionTextSymbolAspectRatio;
			dimensionTextSymbolAspectRatio = _preferencesBuilder->AnnotationStyle()->LetteringStyle()->DimensionTextSymbolAspectRatio();
			ist_id_value.assign(convert_to_string(dimensionTextSymbolAspectRatio));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				dimensionTextSymbolAspectRatio = convert_to_double(soll_id_value);
				_preferencesBuilder->AnnotationStyle()->LetteringStyle()->SetDimensionTextSymbolAspectRatio(dimensionTextSymbolAspectRatio);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the line spacing value for dimension text as a multiple of the standard spacing for the current font.
	id_name.assign("Drafting_dimTextLineFactor");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double dimensionTextLineSpaceFactor;
			dimensionTextLineSpaceFactor = _preferencesBuilder->AnnotationStyle()->LetteringStyle()->DimensionTextLineSpaceFactor();
			ist_id_value.assign(convert_to_string(dimensionTextLineSpaceFactor));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				dimensionTextLineSpaceFactor = convert_to_double(soll_id_value);
				_preferencesBuilder->AnnotationStyle()->LetteringStyle()->SetDimensionTextLineSpaceFactor(dimensionTextLineSpaceFactor);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the spacing between the bottom most piece of text on the dimension and 
	//the dimension line. This only applies when the text orientation is text over dimension line. 
	//The space is equal to the dimension text character size multiplied by the space factor.
	id_name.assign("Drafting_dimDimLineSpaceFactor");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double dimLineSpaceFactor;
			dimLineSpaceFactor = _preferencesBuilder->AnnotationStyle()->LetteringStyle()->DimLineSpaceFactor();
			ist_id_value.assign(convert_to_string(dimLineSpaceFactor));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				dimLineSpaceFactor = convert_to_double(soll_id_value);
				_preferencesBuilder->AnnotationStyle()->LetteringStyle()->SetDimLineSpaceFactor(dimLineSpaceFactor);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- STOPP - %s --- \n", routineName.c_str());
}

/*
File - Preferences - Drafting - Dimension - Text - Tolerance -> Repair these preferences.
*/
void repair_DraftingStandard_Dimension_Text_Tolerance_prefs(NXOpen::Drafting::PreferencesBuilder *_preferencesBuilder, en_nx_dpv* _nx_dpv, Session * _theSession, Part* _workPart) {
	routineName.assign("repair_DraftingStandard_Dimension_Text_Tolerance_prefs");
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- START - %s --- \n", routineName.c_str());

	//This option specifies the color of tolerance text.
	if (_nx_dpv->usedUnitValue.compare("1") == 0) {
		id_name.assign("Drafting_tolTextColor_MU");
	}
	else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
		id_name.assign("Drafting_tolTextColor_EU");
	}
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::NXColor *toleranceTextColor;
			toleranceTextColor = _preferencesBuilder->AnnotationStyle()->LetteringStyle()->ToleranceTextColor();
			int toleranceTextColorIndex;
			toleranceTextColorIndex = toleranceTextColor->Handle();
			ist_id_value.assign(convert_to_string(toleranceTextColorIndex));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				toleranceTextColorIndex = convert_to_int(soll_id_value);
				toleranceTextColor = _workPart->Colors()->Find(toleranceTextColorIndex);
				_preferencesBuilder->AnnotationStyle()->LetteringStyle()->SetToleranceTextColor(toleranceTextColor);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the character font for tolerance text. Any font present in the directory
	//pointed to by the UGII_CHARACTER_FONT_DIR environment variable can be specified here.
	id_name.assign("Drafting_tolTextFont");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			int toleranceTextFontIndex;
			toleranceTextFontIndex = _preferencesBuilder->AnnotationStyle()->LetteringStyle()->ToleranceTextFont();
			NXString toleranceTextFont;
			toleranceTextFont = _workPart->Fonts()->GetFontName(toleranceTextFontIndex);
			ist_id_value.assign(toleranceTextFont.GetLocaleText());
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				toleranceTextFont = (NXString)soll_id_value;
				toleranceTextFontIndex = _workPart->Fonts()->AddFont(toleranceTextFont.GetLocaleText());
				_preferencesBuilder->AnnotationStyle()->LetteringStyle()->SetToleranceTextFont(toleranceTextFontIndex);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}
	
	//This option specifies the line width for the font for tolerance text.
	id_name.assign("Drafting_tolTextWidth");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::LineWidth toleranceTextLineWidth;
			toleranceTextLineWidth = _preferencesBuilder->AnnotationStyle()->LetteringStyle()->ToleranceTextLineWidth();
			int int_toleranceTextLineWidth;
			if (toleranceTextLineWidth == NXOpen::Annotations::LineWidthNormal) {
				int_toleranceTextLineWidth = 1;
			}
			else if (toleranceTextLineWidth == NXOpen::Annotations::LineWidthThick) {
				int_toleranceTextLineWidth = 2;
			}
			else if (toleranceTextLineWidth == NXOpen::Annotations::LineWidthThin) {
				int_toleranceTextLineWidth = 3;
			}
			else if (toleranceTextLineWidth == NXOpen::Annotations::LineWidthOne) {
				int_toleranceTextLineWidth = 6;
			}
			else if (toleranceTextLineWidth == NXOpen::Annotations::LineWidthTwo) {
				int_toleranceTextLineWidth = 7;
			}
			else if (toleranceTextLineWidth == NXOpen::Annotations::LineWidthThree) {
				int_toleranceTextLineWidth = 8;
			}
			else if (toleranceTextLineWidth == NXOpen::Annotations::LineWidthFour) {
				int_toleranceTextLineWidth = 9;
			}
			else if (toleranceTextLineWidth == NXOpen::Annotations::LineWidthFive) {
				int_toleranceTextLineWidth = 10;
			}
			else if (toleranceTextLineWidth == NXOpen::Annotations::LineWidthSix) {
				int_toleranceTextLineWidth = 11;
			}
			else if (toleranceTextLineWidth == NXOpen::Annotations::LineWidthSeven) {
				int_toleranceTextLineWidth = 12;
			}
			else if (toleranceTextLineWidth == NXOpen::Annotations::LineWidthEight) {
				int_toleranceTextLineWidth = 13;
			}
			else if (toleranceTextLineWidth == NXOpen::Annotations::LineWidthNine) {
				int_toleranceTextLineWidth = 14;
			}
			//string id_name_tmp;
			//std::map<const std::string, std::string>::iterator it_tmp;
			//if (int_toleranceTextLineWidth == 1) {
			//	id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
			//	it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
			//	int_toleranceTextLineWidth = convert_to_int(it_tmp->second);
			//}
			//if (int_toleranceTextLineWidth == 2) {
			//	id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
			//	it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
			//	int_toleranceTextLineWidth = convert_to_int(it_tmp->second);
			//}
			//if (int_toleranceTextLineWidth == 3) {
			//	id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
			//	it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
			//	int_toleranceTextLineWidth = convert_to_int(it_tmp->second);
			//}
			//_nx_dpv->soll_dpv_map.find(id_name)->second = convert_to_string( int_toleranceTextLineWidth );
			ist_id_value.assign(convert_to_string(int_toleranceTextLineWidth));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_toleranceTextLineWidth = convert_to_int(soll_id_value);
				if (int_toleranceTextLineWidth == 1) {
					toleranceTextLineWidth = NXOpen::Annotations::LineWidthNormal;
					//id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
					//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					//toleranceTextLineWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
				}
				else if (int_toleranceTextLineWidth == 2) {
					toleranceTextLineWidth = NXOpen::Annotations::LineWidthThick;
					//id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
					//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					//toleranceTextLineWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
				}
				else if (int_toleranceTextLineWidth == 3) {
					toleranceTextLineWidth = NXOpen::Annotations::LineWidthThin;
					//id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
					//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					//toleranceTextLineWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
				}
				else if (int_toleranceTextLineWidth == 6) {
					toleranceTextLineWidth = NXOpen::Annotations::LineWidthOne;
				}
				else if (int_toleranceTextLineWidth == 7) {
					toleranceTextLineWidth = NXOpen::Annotations::LineWidthTwo;
				}
				else if (int_toleranceTextLineWidth == 8) {
					toleranceTextLineWidth = NXOpen::Annotations::LineWidthThree;
				}
				else if (int_toleranceTextLineWidth == 9) {
					toleranceTextLineWidth = NXOpen::Annotations::LineWidthFour;
				}
				else if (int_toleranceTextLineWidth == 10) {
					toleranceTextLineWidth = NXOpen::Annotations::LineWidthFive;
				}
				else if (int_toleranceTextLineWidth == 11) {
					toleranceTextLineWidth = NXOpen::Annotations::LineWidthSix;
				}
				else if (int_toleranceTextLineWidth == 12) {
					toleranceTextLineWidth = NXOpen::Annotations::LineWidthSeven;
				}
				else if (int_toleranceTextLineWidth == 13) {
					toleranceTextLineWidth = NXOpen::Annotations::LineWidthEight;
				}
				else if (int_toleranceTextLineWidth == 14) {
					toleranceTextLineWidth = NXOpen::Annotations::LineWidthNine;
				}
				_preferencesBuilder->AnnotationStyle()->LetteringStyle()->SetToleranceTextLineWidth(toleranceTextLineWidth);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the character height for the tolerance text when the tolerance type is set to Equal Bilateral Tolerance.
	if (_nx_dpv->usedUnitValue.compare("1") == 0) {
		id_name.assign("Drafting_tolTextCharSize_MU");
	}
	else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
		id_name.assign("Drafting_tolTextCharSize_EU");
	}
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double toleranceTextSize;
			toleranceTextSize = _preferencesBuilder->AnnotationStyle()->LetteringStyle()->ToleranceTextSize();
			ist_id_value.assign(convert_to_string(toleranceTextSize));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				toleranceTextSize = convert_to_double(soll_id_value);
				_preferencesBuilder->AnnotationStyle()->LetteringStyle()->SetToleranceTextSize(toleranceTextSize);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the character height for the tolerance text when the tolerance type is set to Bilateral Tolerance, 
	//Unilateral +, Unilateral -, or Limits and Fits.
	if (_nx_dpv->usedUnitValue.compare("1") == 0) {
		id_name.assign("Drafting_twoLineTolTextCharSize_MU");
	}
	else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
		id_name.assign("Drafting_twoLineTolTextCharSize_EU");
	}
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double twoLinetoleranceTextSize;
			twoLinetoleranceTextSize = _preferencesBuilder->AnnotationStyle()->LetteringStyle()->TwoLineToleranceTextSize();
			ist_id_value.assign(convert_to_string(twoLinetoleranceTextSize));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				twoLinetoleranceTextSize = convert_to_double(soll_id_value);
				_preferencesBuilder->AnnotationStyle()->LetteringStyle()->SetTwoLineToleranceTextSize(twoLinetoleranceTextSize);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the NX Font spacing between the characters in the tolerance text as a
	//multiple of the standard character spacing for the current font.
	id_name.assign("Drafting_tolTextSpaceFactor");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double toleranceNXTextCharSpaceFactor;
			toleranceNXTextCharSpaceFactor = _preferencesBuilder->AnnotationStyle()->LetteringStyle()->ToleranceNxTextCharacterSpaceFactor();
			ist_id_value.assign(convert_to_string(toleranceNXTextCharSpaceFactor));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				toleranceNXTextCharSpaceFactor = convert_to_double(soll_id_value);
				_preferencesBuilder->AnnotationStyle()->LetteringStyle()->SetToleranceNxTextCharacterSpaceFactor(toleranceNXTextCharSpaceFactor);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the Standard Font spacing between the characters in the tolerance text as a 
	//multiple of the standard character spacing for the current font.
	id_name.assign("Drafting_standardTolTextSpaceFactor");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double toleranceStandardTextCharSpaceFactor;
			toleranceStandardTextCharSpaceFactor = _preferencesBuilder->AnnotationStyle()->LetteringStyle()->ToleranceStandardTextCharacterSpaceFactor();
			ist_id_value.assign(convert_to_string(toleranceStandardTextCharSpaceFactor));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				toleranceStandardTextCharSpaceFactor = convert_to_double(soll_id_value);
				_preferencesBuilder->AnnotationStyle()->LetteringStyle()->SetToleranceStandardTextCharacterSpaceFactor(toleranceStandardTextCharSpaceFactor);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the aspect ratio at which tolerance text is displayed in relation to the original size of the current font. 
	//The aspect ratio is the ratio of the character's width to its height.
	id_name.assign("Drafting_tolTextAspectRatio");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double toleranceTextAspectRatio;
			toleranceTextAspectRatio = _preferencesBuilder->AnnotationStyle()->LetteringStyle()->ToleranceTextAspectRatio();
			ist_id_value.assign(convert_to_string(toleranceTextAspectRatio));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				toleranceTextAspectRatio = convert_to_double(soll_id_value);
				_preferencesBuilder->AnnotationStyle()->LetteringStyle()->SetToleranceTextAspectRatio(toleranceTextAspectRatio);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the aspect ratio at which the symbols are displayed in relation to 
	//the original size of the current symbol. The aspect ratio is the ratio of the symbol's width 
	//to its height. Only symbols created using the NX control characters are supported.
	id_name.assign("Drafting_tolSymbolAspectRatio");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double toleranceTextSymbolAspectRatio;
			toleranceTextSymbolAspectRatio = _preferencesBuilder->AnnotationStyle()->LetteringStyle()->ToleranceTextSymbolAspectRatio();
			ist_id_value.assign(convert_to_string(toleranceTextSymbolAspectRatio));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				toleranceTextSymbolAspectRatio = convert_to_double(soll_id_value);
				_preferencesBuilder->AnnotationStyle()->LetteringStyle()->SetToleranceTextSymbolAspectRatio(toleranceTextSymbolAspectRatio);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}
	
	//This option specifies the line spacing value for tolerance text as a multiple of the standard spacing for the current font.
	id_name.assign("Drafting_tolTextLineFactor");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double toleranceTextLineSpaceFactor;
			toleranceTextLineSpaceFactor = _preferencesBuilder->AnnotationStyle()->LetteringStyle()->ToleranceTextLineSpaceFactor();
			ist_id_value.assign(convert_to_string(toleranceTextLineSpaceFactor));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				toleranceTextLineSpaceFactor = convert_to_double(soll_id_value);
				_preferencesBuilder->AnnotationStyle()->LetteringStyle()->SetToleranceTextLineSpaceFactor(toleranceTextLineSpaceFactor);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the spacing between the dimension main text and the after tolerance text. 
	//The space is equal to the tolerance text character size multiplied by the space factor.
	id_name.assign("Drafting_dimTolTextSpaceFactor");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double toleranceTextSpaceFactor;
			toleranceTextSpaceFactor = _preferencesBuilder->AnnotationStyle()->LetteringStyle()->ToleranceTextSpaceFactor();
			ist_id_value.assign(convert_to_string(toleranceTextSpaceFactor));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				toleranceTextSpaceFactor = convert_to_double(soll_id_value);
				_preferencesBuilder->AnnotationStyle()->LetteringStyle()->SetToleranceTextSpaceFactor(toleranceTextSpaceFactor);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- STOPP - %s --- \n", routineName.c_str());
}

/*
File - Preferences - Drafting - Dimension - Reference -> Repair these preferences.
*/
void repair_DraftingStandard_Dimension_Reference_prefs(NXOpen::Drafting::PreferencesBuilder *_preferencesBuilder, en_nx_dpv* _nx_dpv, Session * _theSession, Part* _workPart) {
	routineName.assign("repair_DraftingStandard_Dimension_Reference_prefs");
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- START - %s --- \n", routineName.c_str());

	//This option determines whether or not dimensions will be shown as reference dimensions.
	id_name.assign("Drafting_showReferenceDimension");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			bool referenceDimension;
			referenceDimension = _preferencesBuilder->AnnotationStyle()->DimensionStyle()->ReferenceDimension();
			ist_id_value.assign(convert_to_string(referenceDimension));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				referenceDimension = convert_to_bool(soll_id_value);
				_preferencesBuilder->AnnotationStyle()->DimensionStyle()->SetReferenceDimension(referenceDimension);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies what parts of the dimension text will be included inside the reference dimension parenthesis.
	id_name.assign("Drafting_referncetoleranceType");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::ToleranceType dimToleranceType;
			dimToleranceType = _preferencesBuilder->AnnotationStyle()->DimensionStyle()->ToleranceType();
			bool referenceDimension;
			referenceDimension = _preferencesBuilder->AnnotationStyle()->DimensionStyle()->ReferenceDimension();
			if (referenceDimension == false) {
				_preferencesBuilder->AnnotationStyle()->DimensionStyle()->SetReferenceDimension(true);
			}
			int int_dimToleranceType;
			if (dimToleranceType == NXOpen::Annotations::ToleranceTypeNone) {
				int_dimToleranceType = 0;
			}
			else if (dimToleranceType == NXOpen::Annotations::ToleranceTypeLimitOneLine) {
				int_dimToleranceType = 1;
			}
			else if (dimToleranceType == NXOpen::Annotations::ToleranceTypeLimitTwoLines) {
				int_dimToleranceType = 2;
			}
			else if (dimToleranceType == NXOpen::Annotations::ToleranceTypeBilateralOneLine) {
				int_dimToleranceType = 3;
			}
			else if (dimToleranceType == NXOpen::Annotations::ToleranceTypeBilateralTwoLines) {
				int_dimToleranceType = 4;
			}
			else if (dimToleranceType == NXOpen::Annotations::ToleranceTypeUnilateralAbove) {
				int_dimToleranceType = 5;
			}
			else if (dimToleranceType == NXOpen::Annotations::ToleranceTypeUnilateralBelow) {
				int_dimToleranceType = 6;
			}
			else if (dimToleranceType == NXOpen::Annotations::ToleranceTypeBasic) {
				int_dimToleranceType = 7;
			}
			else if (dimToleranceType == NXOpen::Annotations::ToleranceTypeReference) {
				int_dimToleranceType = 8;
			}
			else if (dimToleranceType == NXOpen::Annotations::ToleranceTypeLimitLargerFirst) {
				int_dimToleranceType = 9;
			}
			else if (dimToleranceType == NXOpen::Annotations::ToleranceTypeLimitLargerBelow) {
				int_dimToleranceType = 10;
			}
			else if (dimToleranceType == NXOpen::Annotations::ToleranceTypeLimitsAndFits) {
				int_dimToleranceType = 11;
			}
			else if (dimToleranceType == NXOpen::Annotations::ToleranceTypeNotToScale) {
				int_dimToleranceType = 12;
			}
			else if (dimToleranceType == NXOpen::Annotations::ToleranceTypeDiameterReference) {
				int_dimToleranceType = 13;
			}
			else if (dimToleranceType == NXOpen::Annotations::ToleranceTypeBasicNotToScale) {
				int_dimToleranceType = 14;
			}
			else {
				int_dimToleranceType = -999;
			}
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - %s - int_dimToleranceType = %d \n", routineName.c_str(), id_name.c_str(), int_dimToleranceType);
			ist_id_value.assign(convert_to_string(int_dimToleranceType));
			if (referenceDimension == false) {
				_preferencesBuilder->AnnotationStyle()->DimensionStyle()->SetReferenceDimension(false);
			}
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
			int_dimToleranceType = convert_to_int(soll_id_value);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - %s - soll_id_value - (int_dimToleranceType) = %d \n", routineName.c_str(), id_name.c_str(), int_dimToleranceType);
			if (int_dimToleranceType == 0) {
				dimToleranceType = NXOpen::Annotations::ToleranceTypeNone;
			}
			else if (int_dimToleranceType == 1) {
				dimToleranceType = NXOpen::Annotations::ToleranceTypeLimitOneLine;
			}
			else if (int_dimToleranceType == 2) {
				dimToleranceType = NXOpen::Annotations::ToleranceTypeLimitTwoLines;
			}
			else if (int_dimToleranceType == 3) {
				dimToleranceType = NXOpen::Annotations::ToleranceTypeBilateralOneLine;
			}
			else if (int_dimToleranceType == 4) {
				dimToleranceType = NXOpen::Annotations::ToleranceTypeBilateralTwoLines;
			}
			else if (int_dimToleranceType == 5) {
				dimToleranceType = NXOpen::Annotations::ToleranceTypeUnilateralAbove;
			}
			else if (int_dimToleranceType == 6) {
				dimToleranceType = NXOpen::Annotations::ToleranceTypeUnilateralBelow;
			}
			else if (int_dimToleranceType == 7) {
				dimToleranceType = NXOpen::Annotations::ToleranceTypeBasic;
			}
			else if (int_dimToleranceType == 8) {
				dimToleranceType = NXOpen::Annotations::ToleranceTypeReference;
			}
			else if (int_dimToleranceType == 9) {
				dimToleranceType = NXOpen::Annotations::ToleranceTypeLimitLargerFirst;
			}
			else if (int_dimToleranceType == 10) {
				dimToleranceType = NXOpen::Annotations::ToleranceTypeLimitLargerBelow;
			}
			else if (int_dimToleranceType == 11) {
				dimToleranceType = NXOpen::Annotations::ToleranceTypeLimitsAndFits;
			}
			else if (int_dimToleranceType == 12) {
				dimToleranceType = NXOpen::Annotations::ToleranceTypeNotToScale;
			}
			else if (int_dimToleranceType == 13) {
				dimToleranceType = NXOpen::Annotations::ToleranceTypeDiameterReference;
			}
			else if (int_dimToleranceType == 14) {
				dimToleranceType = NXOpen::Annotations::ToleranceTypeBasicNotToScale;
			}
			if (referenceDimension == false) {
				_preferencesBuilder->AnnotationStyle()->DimensionStyle()->SetReferenceDimension(true);
				_preferencesBuilder->AnnotationStyle()->DimensionStyle()->SetToleranceType(dimToleranceType);
				//_preferencesBuilder->AnnotationStyle()->DimensionStyle()->SetReferenceDimension(false);
			}
			_preferencesBuilder->Commit();
			nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not to use custom reference text.
	id_name.assign("Drafting_PrefixSuffixReference");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			//bool referenceDimension;
			//referenceDimension = _preferencesBuilder->AnnotationStyle()->DimensionStyle()->ReferenceDimension();
			//_preferencesBuilder->AnnotationStyle()->DimensionStyle()->SetReferenceDimension(true);
			//
			//
			//
			bool prefixSuffixReference;
			prefixSuffixReference = _preferencesBuilder->AnnotationStyle()->DimensionStyle()->PrefixSuffixReference();
			int int_prefixSuffixReference;
			int_prefixSuffixReference = (int)prefixSuffixReference;
			ist_id_value.assign(convert_to_string(int_prefixSuffixReference));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_prefixSuffixReference = convert_to_int(soll_id_value);
				prefixSuffixReference = false;
				if (int_prefixSuffixReference == 1) {
					prefixSuffixReference = true;
				}
				_preferencesBuilder->AnnotationStyle()->DimensionStyle()->SetPrefixSuffixReference(prefixSuffixReference);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//If the reference dimensions display is set to Use Prefix/Suffix Characters, this option specifies the characters to be displayed before the reference dimension.
	id_name.assign("Drafting_ReferenceDimensionPrefix");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			//bool referenceDimension;
			//referenceDimension = _preferencesBuilder->AnnotationStyle()->DimensionStyle()->ReferenceDimension();
			//_preferencesBuilder->AnnotationStyle()->DimensionStyle()->SetReferenceDimension(true);
			//bool prefixSuffixReference;
			//prefixSuffixReference = _preferencesBuilder->AnnotationStyle()->DimensionStyle()->PrefixSuffixReference();
			//_preferencesBuilder->AnnotationStyle()->DimensionStyle()->SetPrefixSuffixReference(true);
			//
			//
			//
			NXString prefix;
			prefix = _preferencesBuilder->AnnotationStyle()->DimensionStyle()->ReferenceDimensionPrefix();
			ist_id_value.assign(prefix.GetLocaleText());
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				const char * prefix = NULL;
				prefix = soll_id_value.c_str();
				_preferencesBuilder->AnnotationStyle()->DimensionStyle()->SetReferenceDimensionPrefix(prefix);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//If the reference dimensions display is set to Use Prefix/Suffix Characters, this option specifies the characters to be displayed after the reference dimension.
	id_name.assign("Drafting_ReferenceDimensionSuffix");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			//bool referenceDimension;
			//referenceDimension = _preferencesBuilder->AnnotationStyle()->DimensionStyle()->ReferenceDimension();
			//_preferencesBuilder->AnnotationStyle()->DimensionStyle()->SetReferenceDimension(true);
			//bool prefixSuffixReference;
			//prefixSuffixReference = _preferencesBuilder->AnnotationStyle()->DimensionStyle()->PrefixSuffixReference();
			//_preferencesBuilder->AnnotationStyle()->DimensionStyle()->SetPrefixSuffixReference(true);
			//
			//
			//
			NXString suffix;
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("Drafting_ReferenceDimensionSuffix - suffix = %s\n", suffix.GetLocaleText());
			suffix = _preferencesBuilder->AnnotationStyle()->DimensionStyle()->ReferenceDimensionSuffix();
			ist_id_value.assign(suffix.GetLocaleText());
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				const char * suffix = NULL;
				suffix = soll_id_value.c_str();
				_preferencesBuilder->AnnotationStyle()->DimensionStyle()->SetReferenceDimensionSuffix(suffix);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- STOPP - %s --- \n", routineName.c_str());
}

/*
File - Preferences - Drafting - Dimension - Hole Callout - Lettering -> Repair these preferences.
*/
void repair_DraftingStandard_Dimension_HoleCallout_Lettering_prefs(NXOpen::Drafting::PreferencesBuilder *_preferencesBuilder, en_nx_dpv* _nx_dpv, Session * _theSession, Part* _workPart) {
	routineName.assign("repair_DraftingStandard_Dimension_HoleCallout_Lettering_prefs");
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- START - %s --- \n", routineName.c_str());

	//This option specifies the leader attachment for hole callouts.
	id_name.assign("Drafting_CalloutGeneral_DisplayOption");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::HoleCalloutSettingsBuilder::LeaderAttachment leaderAttachment;
			leaderAttachment = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetLeaderAttachment();
			int int_leaderAttachment;
			int_leaderAttachment = (int)leaderAttachment;
			ist_id_value.assign(convert_to_string(int_leaderAttachment));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_leaderAttachment = convert_to_int(soll_id_value);
				leaderAttachment = (NXOpen::Annotations::HoleCalloutSettingsBuilder::LeaderAttachment)int_leaderAttachment;
				_preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->SetLeaderAttachment(leaderAttachment);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the spacing between the hole callout parameters, as a factor of the text character size.
	id_name.assign("Drafting_CalloutGeneral_TextSpaceFactor");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double parameterSpaceFactor;
			parameterSpaceFactor = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetParameterSpaceFactor();
			string string_parameterSpaceFactor;
			string_parameterSpaceFactor = convert_to_string(parameterSpaceFactor);
			parameterSpaceFactor = convert_to_double(string_parameterSpaceFactor);
			ist_id_value.assign(convert_to_string(parameterSpaceFactor));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				parameterSpaceFactor = convert_to_double(soll_id_value);
				_preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->SetParameterSpaceFactor(parameterSpaceFactor);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the spacing between the hole callout text lines, as a factor of the text character size.
	id_name.assign("Drafting_CalloutGeneral_LineSpaceFactor");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double lineSpaceFactor;
			lineSpaceFactor = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetLineSpaceFactor();
			string string_lineSpaceFactor;
			string_lineSpaceFactor = convert_to_string(lineSpaceFactor);
			lineSpaceFactor = convert_to_double(string_lineSpaceFactor);
			ist_id_value.assign(convert_to_string(lineSpaceFactor));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				lineSpaceFactor = convert_to_double(soll_id_value);
				_preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->SetLineSpaceFactor(lineSpaceFactor);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- STOPP - %s --- \n", routineName.c_str());
}

/*
File - Preferences - Drafting - Dimension - Hole Callout - General Hole -> Repair these preferences.
*/
void repair_DraftingStandard_Dimension_HoleCallout_GeneralHole_prefs(NXOpen::Drafting::PreferencesBuilder *_preferencesBuilder, en_nx_dpv* _nx_dpv, Session * _theSession, Part* _workPart) {
	routineName.assign("repair_DraftingStandard_Dimension_HoleCallout_GeneralHole_prefs");
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- START - %s --- \n", routineName.c_str());

	//This option specifies the pattern count prefix for a general hole which is included in a pattern feature.
	id_name.assign("Drafting_GeneralHole_PatternCount_Prefix");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::HoleCalloutSettingsBuilder::Featuretype holeType;
			holeType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeGeneralHole;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype> parameterTypes;
			parameterTypes = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetListOfParameters(holeType);
			int nth = 0;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype>::iterator parameterTypes_it;
			for (parameterTypes_it = parameterTypes.begin(); parameterTypes_it != parameterTypes.end(); parameterTypes_it++) {
				if (*parameterTypes_it == NXOpen::Annotations::HoleCalloutSettingsBuilder::ParametertypePatternFeatureCount) {
					break;
				}
				nth++;
			}
			std::vector<NXOpen::NXString> lines;
			lines = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetNthParameterPrefix(holeType, nth);
			string result;
			result = retrieveXml(string(lines[0].GetLocaleText()));
			ist_id_value.assign(result);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				string generalHolePatternCountPrefix;
				generalHolePatternCountPrefix.assign(soll_id_value.c_str());
				holeType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeGeneralHole;
				lines[0] = (NXString)generalHolePatternCountPrefix;
				_preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->SetNthParameterPrefix(holeType, 0, lines);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the pattern count suffix for a general hole which is included in a pattern feature.
	id_name.assign("Drafting_GeneralHole_PatternCount_Suffix");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::HoleCalloutSettingsBuilder::Featuretype holeType;
			holeType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeGeneralHole;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype> parameterTypes;
			parameterTypes = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetListOfParameters(holeType);
			int nth = 0;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype>::iterator parameterTypes_it;
			for (parameterTypes_it = parameterTypes.begin(); parameterTypes_it != parameterTypes.end(); parameterTypes_it++) {
				if (*parameterTypes_it == NXOpen::Annotations::HoleCalloutSettingsBuilder::ParametertypePatternFeatureCount) {
					break;
				}
				nth++;
			}
			std::vector<NXOpen::NXString> lines;
			lines = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetNthParameterSuffix(holeType, nth);
			string result;
			result = retrieveXml(string(lines[0].GetLocaleText()));
			ist_id_value.assign(result);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				string generalHolePatternCountSuffix;
				generalHolePatternCountSuffix.assign(soll_id_value.c_str());
				holeType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeGeneralHole;
				lines[0] = (NXString)generalHolePatternCountSuffix;
				_preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->SetNthParameterSuffix(holeType, 0, lines);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the diameter prefix for a general hole.
	id_name.assign("Drafting_GeneralHole_Diameter_Prefix");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::HoleCalloutSettingsBuilder::Featuretype holeType;
			holeType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeGeneralHole;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype> parameterTypes;
			parameterTypes = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetListOfParameters(holeType);
			int nth = 0;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype>::iterator parameterTypes_it;
			for (parameterTypes_it = parameterTypes.begin(); parameterTypes_it != parameterTypes.end(); parameterTypes_it++) {
				if (*parameterTypes_it == NXOpen::Annotations::HoleCalloutSettingsBuilder::ParametertypeDiameter) {
					break;
				}
				nth++;
			}
			std::vector<NXOpen::NXString> lines;
			lines = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetNthParameterPrefix(holeType, nth);
			string result;
			result = retrieveXml(string(lines[0].GetLocaleText()));
			ist_id_value.assign(result);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				string generalHoleDiameterPrefix;
				generalHoleDiameterPrefix.assign(soll_id_value.c_str());
				holeType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeGeneralHole;
				lines[0] = (NXString)generalHoleDiameterPrefix;
				_preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->SetNthParameterPrefix(holeType, 1, lines);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the diameter suffix for a general hole.
	id_name.assign("Drafting_GeneralHole_Diameter_Suffix");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::HoleCalloutSettingsBuilder::Featuretype holeType;
			holeType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeGeneralHole;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype> parameterTypes;
			parameterTypes = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetListOfParameters(holeType);
			int nth = 0;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype>::iterator parameterTypes_it;
			for (parameterTypes_it = parameterTypes.begin(); parameterTypes_it != parameterTypes.end(); parameterTypes_it++) {
				if (*parameterTypes_it == NXOpen::Annotations::HoleCalloutSettingsBuilder::ParametertypeDiameter) {
					break;
				}
				nth++;
			}
			std::vector<NXOpen::NXString> lines;
			lines = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetNthParameterSuffix(holeType, nth);
			string result;
			result = retrieveXml(string(lines[0].GetLocaleText()));
			ist_id_value.assign(result);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				string generalHoleDiameterSuffix;
				generalHoleDiameterSuffix.assign(soll_id_value.c_str());
				holeType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeGeneralHole;
				lines[0] = (NXString)generalHoleDiameterSuffix;
				_preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->SetNthParameterSuffix(holeType, 1, lines);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the depth prefix for a general hole.
	id_name.assign("Drafting_GeneralHole_Depth_Prefix");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::HoleCalloutSettingsBuilder::Featuretype holeType;
			holeType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeGeneralHole;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype> parameterTypes;
			parameterTypes = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetListOfParameters(holeType);
			int nth = 0;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype>::iterator parameterTypes_it;
			for (parameterTypes_it = parameterTypes.begin(); parameterTypes_it != parameterTypes.end(); parameterTypes_it++) {
				if (*parameterTypes_it == NXOpen::Annotations::HoleCalloutSettingsBuilder::ParametertypeDepth) {
					break;
				}
				nth++;
			}
			std::vector<NXOpen::NXString> lines;
			lines = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetNthParameterPrefix(holeType, nth);
			string result;
			result = retrieveXml(string(lines[0].GetLocaleText()));
			ist_id_value.assign(result);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				string generalHoleDepthPrefix;
				generalHoleDepthPrefix.assign(soll_id_value.c_str());
				holeType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeGeneralHole;
				lines[0] = (NXString)generalHoleDepthPrefix;
				_preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->SetNthParameterPrefix(holeType, 2, lines);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the depth suffix for a general hole.
	id_name.assign("Drafting_GeneralHole_Depth_Suffix");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::HoleCalloutSettingsBuilder::Featuretype holeType;
			holeType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeGeneralHole;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype> parameterTypes;
			parameterTypes = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetListOfParameters(holeType);
			int nth = 0;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype>::iterator parameterTypes_it;
			for (parameterTypes_it = parameterTypes.begin(); parameterTypes_it != parameterTypes.end(); parameterTypes_it++) {
				if (*parameterTypes_it == NXOpen::Annotations::HoleCalloutSettingsBuilder::ParametertypeDepth) {
					break;
				}
				nth++;
			}
			std::vector<NXOpen::NXString> lines;
			lines = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetNthParameterSuffix(holeType, nth);
			string result;
			result = retrieveXml(string(lines[0].GetLocaleText()));
			ist_id_value.assign(result);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				string generalHoleDepthSuffix;
				generalHoleDepthSuffix.assign(soll_id_value.c_str());
				holeType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeGeneralHole;
				lines[0] = (NXString)generalHoleDepthSuffix;
				_preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->SetNthParameterSuffix(holeType, 2, lines);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the counterbore diameter prefix for a general hole.
	id_name.assign("Drafting_GeneralHole_CounterboreDiameter_Prefix");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::HoleCalloutSettingsBuilder::Featuretype holeType;
			holeType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeGeneralHole;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype> parameterTypes;
			parameterTypes = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetListOfParameters(holeType);
			int nth = 0;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype>::iterator parameterTypes_it;
			for (parameterTypes_it = parameterTypes.begin(); parameterTypes_it != parameterTypes.end(); parameterTypes_it++) {
				if (*parameterTypes_it == NXOpen::Annotations::HoleCalloutSettingsBuilder::ParametertypeCounterBoreDiameter) {
					break;
				}
				nth++;
			}
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - %s - nth = %d \n", routineName.c_str(), id_name.c_str(), nth);
			std::vector<NXOpen::NXString> lines;
			lines = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetNthParameterPrefix(holeType, nth);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - %s - value=\"%s\" \n", routineName.c_str(), id_name.c_str(), _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetNthParameterValue(holeType, nth).GetLocaleText());
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - %s - display=%d \n", routineName.c_str(), id_name.c_str(), (int) _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetNthParameterDisplay(holeType, nth));
			string result;
			result = retrieveXml(string(lines[0].GetLocaleText()));
			ist_id_value.assign(result);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				string symbolicThreadPatternCountPrefix;
				symbolicThreadPatternCountPrefix.assign(soll_id_value.c_str());
				holeType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeGeneralHole;
				parameterTypes = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetListOfParameters(holeType);
				nth = 0;
				for (parameterTypes_it = parameterTypes.begin(); parameterTypes_it != parameterTypes.end(); parameterTypes_it++) {
					if (*parameterTypes_it == NXOpen::Annotations::HoleCalloutSettingsBuilder::ParametertypeCounterBoreDiameter) {
						break;
					}
					nth++;
				}
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - %s - nth = %d \n", routineName.c_str(), id_name.c_str(), nth);
				lines[0] = (NXString)symbolicThreadPatternCountPrefix;
				_preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->SetNthParameterPrefix(holeType, nth, lines);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the counterbore diameter suffix for a general hole.
	id_name.assign("Drafting_GeneralHole_CounterboreDiameter_Suffix");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::HoleCalloutSettingsBuilder::Featuretype holeType;
			holeType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeGeneralHole;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype> parameterTypes;
			parameterTypes = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetListOfParameters(holeType);
			int nth = 0;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype>::iterator parameterTypes_it;
			for (parameterTypes_it = parameterTypes.begin(); parameterTypes_it != parameterTypes.end(); parameterTypes_it++) {
				if (*parameterTypes_it == NXOpen::Annotations::HoleCalloutSettingsBuilder::ParametertypeCounterBoreDiameter) {
					break;
				}
				nth++;
			}
			std::vector<NXOpen::NXString> lines;
			lines = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetNthParameterSuffix(holeType, nth);
			string result;
			result = retrieveXml(string(lines[0].GetLocaleText()));
			ist_id_value.assign(result);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				string generalHoleCounterboreDiameterSuffix;
				generalHoleCounterboreDiameterSuffix.assign(soll_id_value.c_str());
				holeType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeGeneralHole;
				lines[0] = (NXString)generalHoleCounterboreDiameterSuffix;
				_preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->SetNthParameterSuffix(holeType, 4, lines);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the counterbore depth prefix for a general hole.
	id_name.assign("Drafting_GeneralHole_CounterboreDepth_Prefix");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::HoleCalloutSettingsBuilder::Featuretype holeType;
			holeType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeGeneralHole;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype> parameterTypes;
			parameterTypes = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetListOfParameters(holeType);
			int nth = 0;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype>::iterator parameterTypes_it;
			for (parameterTypes_it = parameterTypes.begin(); parameterTypes_it != parameterTypes.end(); parameterTypes_it++) {
				if (*parameterTypes_it == NXOpen::Annotations::HoleCalloutSettingsBuilder::ParametertypeCounterBoreDepth) {
					break;
				}
				nth++;
			}
			std::vector<NXOpen::NXString> lines;
			lines = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetNthParameterPrefix(holeType, nth);
			string result;
			result = retrieveXml(string(lines[0].GetLocaleText()));
			ist_id_value.assign(result);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				string generalHoleCounterboreDepthPrefix;
				generalHoleCounterboreDepthPrefix.assign(soll_id_value.c_str());
				holeType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeGeneralHole;
				lines[0] = (NXString)generalHoleCounterboreDepthPrefix;
				_preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->SetNthParameterPrefix(holeType, 5, lines);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the counterbore depth suffix for a general hole.
	id_name.assign("Drafting_GeneralHole_CounterboreDepth_Suffix");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::HoleCalloutSettingsBuilder::Featuretype holeType;
			holeType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeGeneralHole;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype> parameterTypes;
			parameterTypes = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetListOfParameters(holeType);
			int nth = 0;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype>::iterator parameterTypes_it;
			for (parameterTypes_it = parameterTypes.begin(); parameterTypes_it != parameterTypes.end(); parameterTypes_it++) {
				if (*parameterTypes_it == NXOpen::Annotations::HoleCalloutSettingsBuilder::ParametertypeCounterBoreDepth) {
					break;
				}
				nth++;
			}
			std::vector<NXOpen::NXString> lines;
			lines = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetNthParameterSuffix(holeType, nth);
			string result;
			result = retrieveXml(string(lines[0].GetLocaleText()));
			ist_id_value.assign(result);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				string generalHoleCounterboreDepthSuffix;
				generalHoleCounterboreDepthSuffix.assign(soll_id_value.c_str());
				holeType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeGeneralHole;
				lines[0] = (NXString)generalHoleCounterboreDepthSuffix;
				_preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->SetNthParameterSuffix(holeType, 5, lines);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the countersink diameter prefix for a general hole.
	id_name.assign("Drafting_GeneralHole_CountersinkDiameter_Prefix");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::HoleCalloutSettingsBuilder::Featuretype holeType;
			holeType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeGeneralHole;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype> parameterTypes;
			parameterTypes = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetListOfParameters(holeType);
			int nth = 0;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype>::iterator parameterTypes_it;
			for (parameterTypes_it = parameterTypes.begin(); parameterTypes_it != parameterTypes.end(); parameterTypes_it++) {
				if (*parameterTypes_it == NXOpen::Annotations::HoleCalloutSettingsBuilder::ParametertypeCounterSinkDiameter) {
					break;
				}
				nth++;
			}
			std::vector<NXOpen::NXString> lines;
			lines = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetNthParameterPrefix(holeType, nth);
			string result;
			result = retrieveXml(string(lines[0].GetLocaleText()));
			ist_id_value.assign(result);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				string generalHoleCountersinkDiameterPrefix;
				generalHoleCountersinkDiameterPrefix.assign(soll_id_value.c_str());
				holeType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeGeneralHole;
				lines[0] = (NXString)generalHoleCountersinkDiameterPrefix;
				_preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->SetNthParameterPrefix(holeType, 6, lines);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the countersink diameter suffix for a general hole.
	id_name.assign("Drafting_GeneralHole_CountersinkDiameter_Suffix");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::HoleCalloutSettingsBuilder::Featuretype holeType;
			holeType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeGeneralHole;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype> parameterTypes;
			parameterTypes = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetListOfParameters(holeType);
			int nth = 0;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype>::iterator parameterTypes_it;
			for (parameterTypes_it = parameterTypes.begin(); parameterTypes_it != parameterTypes.end(); parameterTypes_it++) {
				if (*parameterTypes_it == NXOpen::Annotations::HoleCalloutSettingsBuilder::ParametertypeCounterSinkDiameter) {
					break;
				}
				nth++;
			}
			std::vector<NXOpen::NXString> lines;
			lines = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetNthParameterSuffix(holeType, nth);
			string result;
			result = retrieveXml(string(lines[0].GetLocaleText()));
			ist_id_value.assign(result);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				string generalHoleCountersinkDiameterSuffix;
				generalHoleCountersinkDiameterSuffix.assign(soll_id_value.c_str());
				holeType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeGeneralHole;
				lines[0] = (NXString)generalHoleCountersinkDiameterSuffix;
				_preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->SetNthParameterSuffix(holeType, 6, lines);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the countersink angle prefix for a general hole.
	id_name.assign("Drafting_GeneralHole_CountersinkAngle_Prefix");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::HoleCalloutSettingsBuilder::Featuretype holeType;
			holeType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeGeneralHole;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype> parameterTypes;
			parameterTypes = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetListOfParameters(holeType);
			int nth = 0;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype>::iterator parameterTypes_it;
			for (parameterTypes_it = parameterTypes.begin(); parameterTypes_it != parameterTypes.end(); parameterTypes_it++) {
				if (*parameterTypes_it == NXOpen::Annotations::HoleCalloutSettingsBuilder::ParametertypeCounterSinkAngle) {
					break;
				}
				nth++;
			}
			std::vector<NXOpen::NXString> lines;
			lines = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetNthParameterPrefix(holeType, nth);
			string result;
			result = retrieveXml(string(lines[0].GetLocaleText()));
			ist_id_value.assign(result);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				string generalHoleCountersinkAnglePrefix;
				generalHoleCountersinkAnglePrefix.assign(soll_id_value.c_str());
				holeType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeGeneralHole;
				lines[0] = (NXString)generalHoleCountersinkAnglePrefix;
				_preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->SetNthParameterPrefix(holeType, 7, lines);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the countersink angle suffix for a general hole.
	id_name.assign("Drafting_GeneralHole_CountersinkAngle_Suffix");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::HoleCalloutSettingsBuilder::Featuretype holeType;
			holeType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeGeneralHole;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype> parameterTypes;
			parameterTypes = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetListOfParameters(holeType);
			int nth = 0;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype>::iterator parameterTypes_it;
			for (parameterTypes_it = parameterTypes.begin(); parameterTypes_it != parameterTypes.end(); parameterTypes_it++) {
				if (*parameterTypes_it == NXOpen::Annotations::HoleCalloutSettingsBuilder::ParametertypeCounterSinkAngle) {
					break;
				}
				nth++;
			}
			std::vector<NXOpen::NXString> lines;
			lines = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetNthParameterSuffix(holeType, nth);
			string result;
			result = retrieveXml(string(lines[0].GetLocaleText()));
			ist_id_value.assign(result);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				string generalHoleCountersinkAngleSuffix;
				generalHoleCountersinkAngleSuffix.assign(soll_id_value.c_str());
				holeType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeGeneralHole;
				lines[0] = (NXString)generalHoleCountersinkAngleSuffix;
				_preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->SetNthParameterSuffix(holeType, 7, lines);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the taper angle prefix for a general hole.
	id_name.assign("Drafting_GeneralHole_TaperAngle_Prefix");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::HoleCalloutSettingsBuilder::Featuretype holeType;
			holeType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeGeneralHole;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype> parameterTypes;
			parameterTypes = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetListOfParameters(holeType);
			int nth = 0;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype>::iterator parameterTypes_it;
			for (parameterTypes_it = parameterTypes.begin(); parameterTypes_it != parameterTypes.end(); parameterTypes_it++) {
				if (*parameterTypes_it == NXOpen::Annotations::HoleCalloutSettingsBuilder::ParametertypeTaperAngle) {
					break;
				}
				nth++;
			}
			std::vector<NXOpen::NXString> lines;
			lines = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetNthParameterPrefix(holeType, nth);
			string result;
			result = retrieveXml(string(lines[0].GetLocaleText()));
			ist_id_value.assign(result);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				string generalHoleTaperAnglePrefix;
				generalHoleTaperAnglePrefix.assign(soll_id_value.c_str());
				holeType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeGeneralHole;
				lines[0] = (NXString)generalHoleTaperAnglePrefix;
				_preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->SetNthParameterPrefix(holeType, 8, lines);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the taper angle suffix for a general hole.
	id_name.assign("Drafting_GeneralHole_TaperAngle_Suffix");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::HoleCalloutSettingsBuilder::Featuretype holeType;
			holeType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeGeneralHole;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype> parameterTypes;
			parameterTypes = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetListOfParameters(holeType);
			int nth = 0;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype>::iterator parameterTypes_it;
			for (parameterTypes_it = parameterTypes.begin(); parameterTypes_it != parameterTypes.end(); parameterTypes_it++) {
				if (*parameterTypes_it == NXOpen::Annotations::HoleCalloutSettingsBuilder::ParametertypeTaperAngle) {
					break;
				}
				nth++;
			}
			std::vector<NXOpen::NXString> lines;
			lines = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetNthParameterSuffix(holeType, nth);
			string result;
			result = retrieveXml(string(lines[0].GetLocaleText()));
			ist_id_value.assign(result);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				string generalHoleTaperAngleSuffix;
				generalHoleTaperAngleSuffix.assign(soll_id_value.c_str());
				holeType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeGeneralHole;
				lines[0] = (NXString)generalHoleTaperAngleSuffix;
				_preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->SetNthParameterSuffix(holeType, 8, lines);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This list specifies which general hole callout parameters should be displayed and their order.
	id_name.assign("Drafting_GeneralHole_Parameter_Order");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - %s - _soll_id_value = \"%s\" \n", routineName.c_str(), id_name.c_str(), it->second.c_str());
			
			/*
			DIAMETER
			DEPTH
			CBORE_DIAMETER
			CBORE_DEPTH
			CSINK_DIAMETER
			CSINK_ANGLE
			TAPER_ANGLE
			PATTERN_COUNT
			LINE_BREAK1
			LINE_BREAK2
			*/

			string input_list;
			input_list.assign(it->second.c_str());
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - %s - input_list = \"%s\" \n", routineName.c_str(), id_name.c_str(), input_list.c_str());

			//Anzahl Inputs ermitteln:
			int anz = 0;
			string toSearch;
			toSearch.assign(":");
			size_t pos = input_list.find(toSearch, 0);
			size_t pos_merker = pos;
			while (pos != std::string::npos) {
				anz++;
				pos = input_list.find(toSearch, pos_merker + 1);
				pos_merker = pos;
			}
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - %s - anz = %d \n", routineName.c_str(), id_name.c_str(), anz);
			NXOpen::Annotations::HoleCalloutSettingsBuilder::Featuretype holeType;
			holeType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeGeneralHole;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype> parameterTypes(anz);
			parameterTypes = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetListOfParameters(holeType);
			string toErase;
			toErase.assign("&quot;");
			pos = std::string::npos;
			while ((pos = input_list.find(toErase)) != std::string::npos)
			{
				input_list.erase(pos, toErase.length());
			}
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - %s - input_list = \"%s\" \n", routineName.c_str(), id_name.c_str(), input_list.c_str());
			string toReplace;
			toReplace.assign("\\");
			pos = std::string::npos;
			while ((pos = input_list.find(toReplace)) != std::string::npos)
			{
				input_list.replace(pos, toReplace.length(), " ");
			}
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - %s - input_list = \"%s\" \n", routineName.c_str(), id_name.c_str(), input_list.c_str());
			//columnOrders.begin();
			string output_list;
			output_list.assign(input_list);
			//output_list.clear();
			bool done = false;
			for (int i = 0; i < parameterTypes.size(); i++) {
				NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype parameterType;
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("i=%d \n", i);
				parameterType = parameterTypes[i];
				switch (parameterType) {
					//NXOpen::Annotations::HoleCalloutSettingsBuilder::ParametertypeDiameter 0
				case NXOpen::Annotations::HoleCalloutSettingsBuilder::ParametertypeDiameter:
					//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("ParametertypeDiameter \n");
					toReplace.assign("DIAMETER:");
					pos = output_list.find(toReplace);
					output_list.replace(pos, toReplace.size() + 1, toReplace + "1");
					break;
					//NXOpen::Annotations::HoleCalloutSettingsBuilder::ParametertypeDepth 1					
				case NXOpen::Annotations::HoleCalloutSettingsBuilder::ParametertypeDepth:
					//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("ParametertypeDepth \n");
					toReplace.assign("DEPTH:");
					pos = output_list.find(toReplace);
					output_list.replace(pos, toReplace.size() + 1, toReplace + "1");
					break;
					//NXOpen::Annotations::HoleCalloutSettingsBuilder::ParametertypeCounterBoreDiameter 2					
				case NXOpen::Annotations::HoleCalloutSettingsBuilder::ParametertypeCounterBoreDiameter:
					//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("ParametertypeCounterBoreDiameter \n");
					toReplace.assign("CBORE_DIAMETER:");
					pos = output_list.find(toReplace);
					output_list.replace(pos, toReplace.size() + 1, toReplace + "1");
					break;
					//NXOpen::Annotations::HoleCalloutSettingsBuilder::ParametertypeCounterBoreDepth 3					
				case NXOpen::Annotations::HoleCalloutSettingsBuilder::ParametertypeCounterBoreDepth:
					//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("ParametertypeCounterBoreDepth \n");
					toReplace.assign("CBORE_DEPTH:");
					pos = output_list.find(toReplace);
					output_list.replace(pos, toReplace.size() + 1, toReplace + "1");
					break;
					//NXOpen::Annotations::HoleCalloutSettingsBuilder::ParametertypeCounterSinkDiameter 4
				case NXOpen::Annotations::HoleCalloutSettingsBuilder::ParametertypeCounterSinkDiameter:
					//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("ParametertypeCounterSinkDiameter \n");
					toReplace.assign("CSINK_DIAMETER:");
					pos = output_list.find(toReplace);
					output_list.replace(pos, toReplace.size() + 1, toReplace + "1");
					break;
					//NXOpen::Annotations::HoleCalloutSettingsBuilder::ParametertypeCounterSinkAngle 5
				case NXOpen::Annotations::HoleCalloutSettingsBuilder::ParametertypeCounterSinkAngle:
					//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("ParametertypeCounterSinkAngle \n");
					toReplace.assign("CSINK_ANGLE:");
					pos = output_list.find(toReplace);
					output_list.replace(pos, toReplace.size() + 1, toReplace + "1");
					break;
					//NXOpen::Annotations::HoleCalloutSettingsBuilder::ParametertypeTaperAngle 6
				case NXOpen::Annotations::HoleCalloutSettingsBuilder::ParametertypeTaperAngle:
					//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("ParametertypeTaperAngle \n");
					toReplace.assign("TAPER_ANGLE:");
					pos = output_list.find(toReplace);
					output_list.replace(pos, toReplace.size() + 1, toReplace + "1");
					break;
					//NXOpen::Annotations::HoleCalloutSettingsBuilder::ParametertypePatternFeatureCount 7
				case NXOpen::Annotations::HoleCalloutSettingsBuilder::ParametertypePatternFeatureCount:
					//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("ParametertypePatternFeatureCount \n");
					toReplace.assign("PATTERN_COUNT:");
					pos = output_list.find(toReplace);
					output_list.replace(pos, toReplace.size() + 1, toReplace + "1");
					break;
					//NXOpen::Annotations::HoleCalloutSettingsBuilder::ParametertypeLineBreak 10
				case NXOpen::Annotations::HoleCalloutSettingsBuilder::ParametertypeLineBreak:
					//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("ParametertypeLineBreak \n");
					if (done == false) {
						toReplace.assign("LINE_BREAK1:");
						done = true;
					}
					else {
						toReplace.assign("LINE_BREAK2:");
					}
					pos = output_list.find(toReplace);
					output_list.replace(pos, toReplace.size() + 1, toReplace + "1");
					break;
				default:
					if (parameterType == NXOpen::Annotations::HoleCalloutSettingsBuilder::ParametertypeDiameter) {
						//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("ParametertypeDiameter \n");
						toReplace.assign("DIAMETER:");
						pos = output_list.find(toReplace);
						output_list.replace(pos, toReplace.size() + 1, toReplace + "0");
					}
					if (parameterType == NXOpen::Annotations::HoleCalloutSettingsBuilder::ParametertypeDepth) {
						//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("ParametertypeDepth \n");
						toReplace.assign("DEPTH:");
						pos = output_list.find(toReplace);
						output_list.replace(pos, toReplace.size() + 1, toReplace + "0");
					}
					if (parameterType == NXOpen::Annotations::HoleCalloutSettingsBuilder::ParametertypeCounterBoreDiameter) {
						//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("ParametertypeCounterBoreDiameter \n");
						toReplace.assign("CBORE_DIAMETER:");
						pos = output_list.find(toReplace);
						output_list.replace(pos, toReplace.size() + 1, toReplace + "0");
					}
					if (parameterType == NXOpen::Annotations::HoleCalloutSettingsBuilder::ParametertypeCounterBoreDepth) {
						//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("ParametertypeCounterBoreDepth \n");
						toReplace.assign("CBORE_DEPTH:");
						pos = output_list.find(toReplace);
						output_list.replace(pos, toReplace.size() + 1, toReplace + "0");
					}
					if (parameterType == NXOpen::Annotations::HoleCalloutSettingsBuilder::ParametertypeCounterSinkDiameter) {
						//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("ParametertypeCounterSinkDiameter \n");
						toReplace.assign("CSINK_DIAMETER:");
						pos = output_list.find(toReplace);
						output_list.replace(pos, toReplace.size() + 1, toReplace + "0");
					}
					if (parameterType == NXOpen::Annotations::HoleCalloutSettingsBuilder::ParametertypeCounterSinkAngle) {
						//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("ParametertypeCounterSinkAngle \n");
						toReplace.assign("CSINK_ANGLE:");
						pos = output_list.find(toReplace);
						output_list.replace(pos, toReplace.size() + 1, toReplace + "0");
					}
					if (parameterType == NXOpen::Annotations::HoleCalloutSettingsBuilder::ParametertypeTaperAngle) {
						//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("ParametertypeTaperAngle \n");
						toReplace.assign("TAPER_ANGLE:");
						pos = output_list.find(toReplace);
						output_list.replace(pos, toReplace.size() + 1, toReplace + "0");
					}
					if (parameterType == NXOpen::Annotations::HoleCalloutSettingsBuilder::ParametertypePatternFeatureCount) {
						//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("ParametertypePatternFeatureCount \n");
						toReplace.assign("PATTERN_COUNT:");
						pos = output_list.find(toReplace);
						output_list.replace(pos, toReplace.size() + 1, toReplace + "0");
					}
					if (parameterType == NXOpen::Annotations::HoleCalloutSettingsBuilder::ParametertypeLineBreak) {
						//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("ParametertypeLineBreak \n");
						if (done == false) {
							toReplace.assign("LINE_BREAK1:");
							done = true;
						}
						else {
							toReplace.assign("LINE_BREAK2:");
						}
						pos = output_list.find(toReplace);
						output_list.replace(pos, toReplace.size() + 1, toReplace + "0");
					}
					break;
				}
			}
			//output_list.pop_back();
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - %s - output_list = \"%s\" \n", routineName.c_str(), id_name.c_str(), output_list.c_str());

			//output_list.append("""");
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - %s - output_list=%s \n", routineName.c_str(), id_name.c_str(), output_list.c_str());

			string result;
			result = retrieveXmlList(output_list);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - %s - retrieveXml(output_list) = \"%s\" \n", routineName.c_str(), id_name.c_str(), output_list.c_str());
			ist_id_value.assign(result);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				input_list.assign(soll_id_value);
				//Anzahl Inputs ermitteln:
				int anz = 0;
				string toSearch;
				toSearch.assign(":");
				size_t pos = input_list.find(toSearch, 0);
				size_t pos_merker = pos;
				while (pos != std::string::npos) {
					anz++;
					pos = input_list.find(toSearch, pos_merker + 1);
					pos_merker = pos;
				}
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - %s - anz = %d \n", routineName.c_str(), id_name.c_str(), anz);
				std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype> parameterTypes(anz + 1);
				string toErase;
				toErase.assign("&quot;");
				pos = std::string::npos;
				while ((pos = input_list.find(toErase)) != std::string::npos)
				{
					input_list.erase(pos, toErase.length());
				}
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - %s - input_list = \"%s\" \n", routineName.c_str(), id_name.c_str(), input_list.c_str());
				string toReplace;
				toReplace.assign("\\");
				pos = std::string::npos;
				while ((pos = input_list.find(toReplace)) != std::string::npos)
				{
					input_list.replace(pos, toReplace.length(), " ");
				}
				input_list.append(" ");
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - %s - input_list = \"%s\" \n", routineName.c_str(), id_name.c_str(), input_list.c_str());
				bool linebreak_included = false;
				if (input_list.find("BREAK") != std::string::npos) {
					linebreak_included = true;
				}
				toSearch;
				toSearch.assign(" ");
				string separator;
				separator.assign(":");
				pos = 0;
				pos_merker = pos;
				int nth = 0;
				string result_to_set;
				while ((pos = input_list.find(toSearch, pos)) != std::string::npos)
				{
					//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - %s - pos_merker = %d / pos = %d \n", routineName.c_str(), id_name.c_str(), (int) pos_merker, (int) pos);
					result_to_set.assign(input_list.substr(pos_merker, pos - pos_merker));
					pos_merker = pos + 1;
					//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - %s - result_to_set = \"%s\" \n", routineName.c_str(), id_name.c_str(), result_to_set.c_str());
					size_t pos_sep = 0;
					pos_sep = 0;
					pos_sep = result_to_set.find_first_of(separator);
					if (pos_sep != std::string::npos) {
						string par;
						par.assign(result_to_set.substr(0, pos_sep));
						//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - %s - par = \"%s\" until pos = %d \n", routineName.c_str(), id_name.c_str(), par.c_str(), pos_sep);
						string val;
						val.assign(result_to_set.substr(pos_sep + (size_t)1, 1));
						//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - %s - val = \"%s\" at pos = %d \n", routineName.c_str(), id_name.c_str(), val.c_str(), pos_sep);
						if (par.compare("PATTERN_COUNT") == 0) {
							//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - %s - \"PATTERN_COUNT\" at %d was found \n", routineName.c_str(), id_name.c_str(), nth);
							parameterTypes.at(nth) = NXOpen::Annotations::HoleCalloutSettingsBuilder::ParametertypePatternFeatureCount;
							bool display = false;
							if (val.compare("1") == 0) {
								display = true;
								_preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->SetNthParameterValue(holeType, nth, "1");
							}
							else {
								_preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->SetNthParameterValue(holeType, nth, "0");
							}

							_preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->SetNthParameterDisplay(holeType, nth, display);
							nth++;
						}
						else if (par.compare("DIAMETER") == 0) {
							//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - %s - \"DIAMETER\" at %d was found \n", routineName.c_str(), id_name.c_str(), nth);
							parameterTypes.at(nth) = NXOpen::Annotations::HoleCalloutSettingsBuilder::ParametertypeDiameter;
							bool display = false;
							if (val.compare("1") == 0) {
								display = true;
								_preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->SetNthParameterValue(holeType, nth, "1");
							}
							else {
								_preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->SetNthParameterValue(holeType, nth, "0");
							}

							_preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->SetNthParameterDisplay(holeType, nth, display);
							nth++;
						}
						else if (par.compare("DEPTH") == 0) {
							//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - %s - \"DEPTH\" at %d was found \n", routineName.c_str(), id_name.c_str(), nth);
							parameterTypes.at(nth) = NXOpen::Annotations::HoleCalloutSettingsBuilder::ParametertypeDepth;
							bool display = false;
							if (val.compare("1") == 0) {
								display = true;
								_preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->SetNthParameterValue(holeType, nth, "1");
							}
							else {
								_preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->SetNthParameterValue(holeType, nth, "0");
							}

							_preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->SetNthParameterDisplay(holeType, nth, display);
							nth++;
						}
						else if (par.compare("LINE_BREAK1") == 0) {
							//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - %s - \"LINE_BREAK1\" at %d was found \n", routineName.c_str(), id_name.c_str(), nth);
							parameterTypes.at(nth) = NXOpen::Annotations::HoleCalloutSettingsBuilder::ParametertypeLineBreak;
							bool display = false;
							if (val.compare("1") == 0) {
								display = true;
								_preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->SetNthParameterValue(holeType, nth, "1");
							}
							else {
								_preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->SetNthParameterValue(holeType, nth, "0");
							}

							_preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->SetNthParameterDisplay(holeType, nth, display);
							nth++;
						}
						else if (par.compare("CBORE_DIAMETER") == 0) {
							//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - %s - \"CBORE_DIAMETER\" at %d was found \n", routineName.c_str(), id_name.c_str(), nth);
							parameterTypes.at(nth) = NXOpen::Annotations::HoleCalloutSettingsBuilder::ParametertypeCounterBoreDiameter;
							bool display = false;
							if (val.compare("1") == 0) {
								display = true;
								_preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->SetNthParameterValue(holeType, nth, "1");
							}
							else {
								_preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->SetNthParameterValue(holeType, nth, "0");
							}

							_preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->SetNthParameterDisplay(holeType, nth, display);
							nth++;
						}
						else if (par.compare("CBORE_DEPTH") == 0) {
							//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - %s - \"CBORE_DEPTH\" at %d was found \n", routineName.c_str(), id_name.c_str(), nth);
							parameterTypes.at(nth) = NXOpen::Annotations::HoleCalloutSettingsBuilder::ParametertypeCounterBoreDepth;
							bool display = false;
							if (val.compare("1") == 0) {
								display = true;
								_preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->SetNthParameterValue(holeType, nth, "1");
							}
							else {
								_preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->SetNthParameterValue(holeType, nth, "0");
							}

							_preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->SetNthParameterDisplay(holeType, nth, display);
							nth++;
						}
						else if (par.compare("CSINK_DIAMETER") == 0) {
							//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - %s - \"CSINK_DIAMETER\" at %d was found \n", routineName.c_str(), id_name.c_str(), nth);
							parameterTypes.at(nth) = NXOpen::Annotations::HoleCalloutSettingsBuilder::ParametertypeCounterSinkDiameter;
							bool display = false;
							if (val.compare("1") == 0) {
								display = true;
								_preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->SetNthParameterValue(holeType, nth, "1");
							}
							else {
								_preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->SetNthParameterValue(holeType, nth, "0");
							}

							_preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->SetNthParameterDisplay(holeType, nth, display);
							nth++;
						}
						else if (par.compare("CSINK_ANGLE") == 0) {
							//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - %s - \"CSINK_ANGLE\" at %d was found \n", routineName.c_str(), id_name.c_str(), nth);
							parameterTypes.at(nth) = NXOpen::Annotations::HoleCalloutSettingsBuilder::ParametertypeCounterSinkAngle;
							bool display = false;
							if (val.compare("1") == 0) {
								display = true;
								_preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->SetNthParameterValue(holeType, nth, "1");
							}
							else {
								_preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->SetNthParameterValue(holeType, nth, "0");
							}

							_preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->SetNthParameterDisplay(holeType, nth, display);
							nth++;
						}
						else if (par.compare("TAPER_ANGLE") == 0) {
							//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - %s - \"TAPER_ANGLE\" at %d was found \n", routineName.c_str(), id_name.c_str(), nth);
							parameterTypes.at(nth) = NXOpen::Annotations::HoleCalloutSettingsBuilder::ParametertypeTaperAngle;
							bool display = false;
							if (val.compare("1") == 0) {
								display = true;
								_preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->SetNthParameterValue(holeType, nth, "1");
							}
							else {
								_preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->SetNthParameterValue(holeType, nth, "0");
							}

							_preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->SetNthParameterDisplay(holeType, nth, display);
							nth++;
						}
						else if (par.compare("LINE_BREAK2") == 0) {
							//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - %s - \"LINE_BREAK2\" at %d was found \n", routineName.c_str(), id_name.c_str(), nth);
							parameterTypes.at(nth) = NXOpen::Annotations::HoleCalloutSettingsBuilder::ParametertypeLineBreak;
							bool display = false;
							if (val.compare("1") == 0) {
								display = true;
								_preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->SetNthParameterValue(holeType, nth, "1");
							}
							else {
								_preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->SetNthParameterValue(holeType, nth, "0");
							}

							_preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->SetNthParameterDisplay(holeType, nth, display);
							nth++;
						}
						else if (par.compare("LINE_BREAK2") == 0 && linebreak_included) {
							//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - %s - \"LINE_BREAK2\" at %d was found \n", routineName.c_str(), id_name.c_str(), nth);
							parameterTypes.at(nth) = NXOpen::Annotations::HoleCalloutSettingsBuilder::ParametertypeLineBreak;
							bool display = false;
							if (val.compare("1") == 0) {
								display = true;
								_preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->SetNthParameterValue(holeType, nth, "1");
							}
							else {
								_preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->SetNthParameterValue(holeType, nth, "0");
							}
							_preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->SetNthParameterDisplay(holeType, nth, display);
							nth++;
						}
						else {
							//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("ERROR - %s - %s - \"%s\" is missed!!! \n", routineName.c_str(), id_name.c_str(), par.c_str());
							break;
						}
						_preferencesBuilder->Commit();
					}
					pos++;
					pos = input_list.find(toSearch, pos);
					//if (pos == std::string::npos) {
					//	last_ParameterValue = true;
					//}
					//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("Drafting_GeneralHole_Parameter_Order - next pos = %d \n", pos);
				}

				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("Drafting_GeneralHole_Parameter_Order - done \n");

				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- STOPP - %s --- \n", routineName.c_str());
}

/*
File - Preferences - Drafting - Dimension - Hole Callout - Drill Size Hole -> Repair these preferences.
*/
void repair_DraftingStandard_Dimension_HoleCallout_DrillSizeHole_prefs(NXOpen::Drafting::PreferencesBuilder *_preferencesBuilder, en_nx_dpv* _nx_dpv, Session * _theSession, Part* _workPart) {
	routineName.assign("repair_DraftingStandard_Dimension_HoleCallout_DrillSizeHole_prefs");
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- START - %s --- \n", routineName.c_str());

	//This option specifies the pattern count prefix for a drill size hole which is included in a pattern feature.
	id_name.assign("Drafting_DrillSizeHole_PatternCount_Prefix");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::HoleCalloutSettingsBuilder::Featuretype holeType;
			holeType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeDrillSizeHole;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype> parameterTypes;
			parameterTypes = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetListOfParameters(holeType);
			int nth = 0;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype>::iterator parameterTypes_it;
			for (parameterTypes_it = parameterTypes.begin(); parameterTypes_it != parameterTypes.end(); parameterTypes_it++) {
				if (*parameterTypes_it == NXOpen::Annotations::HoleCalloutSettingsBuilder::ParametertypePatternFeatureCount) {
					break;
				}
				nth++;
			}
			std::vector<NXOpen::NXString> lines;
			lines = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetNthParameterPrefix(holeType, nth);
			string result;
			result = retrieveXml(string(lines[0].GetLocaleText()));
			ist_id_value.assign(result);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				string drillSizeHolePatternCountPrefix;
				drillSizeHolePatternCountPrefix.assign(soll_id_value.c_str());
				holeType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeDrillSizeHole;
				lines[0] = (NXString)drillSizeHolePatternCountPrefix;
				_preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->SetNthParameterPrefix(holeType, 0, lines);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the pattern count suffix for a drill size hole which is included in a pattern feature.
	id_name.assign("Drafting_DrillSizeHole_PatternCount_Suffix");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::HoleCalloutSettingsBuilder::Featuretype holeType;
			holeType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeDrillSizeHole;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype> parameterTypes;
			parameterTypes = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetListOfParameters(holeType);
			int nth = 0;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype>::iterator parameterTypes_it;
			for (parameterTypes_it = parameterTypes.begin(); parameterTypes_it != parameterTypes.end(); parameterTypes_it++) {
				if (*parameterTypes_it == NXOpen::Annotations::HoleCalloutSettingsBuilder::ParametertypePatternFeatureCount) {
					break;
				}
				nth++;
			}
			std::vector<NXOpen::NXString> lines;
			lines = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetNthParameterSuffix(holeType, nth);
			string result;
			result = retrieveXml(string(lines[0].GetLocaleText()));
			ist_id_value.assign(result);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				string drillSizeHolePatternCountSuffix;
				drillSizeHolePatternCountSuffix.assign(soll_id_value.c_str());
				holeType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeDrillSizeHole;
				lines[0] = (NXString)drillSizeHolePatternCountSuffix;
				_preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->SetNthParameterSuffix(holeType, 0, lines);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the diameter prefix for a drill size hole.
	id_name.assign("Drafting_DrillSizeHole_Diameter_Prefix");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::HoleCalloutSettingsBuilder::Featuretype holeType;
			holeType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeDrillSizeHole;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype> parameterTypes;
			parameterTypes = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetListOfParameters(holeType);
			int nth = 0;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype>::iterator parameterTypes_it;
			for (parameterTypes_it = parameterTypes.begin(); parameterTypes_it != parameterTypes.end(); parameterTypes_it++) {
				if (*parameterTypes_it == NXOpen::Annotations::HoleCalloutSettingsBuilder::ParametertypeDiameter) {
					break;
				}
				nth++;
			}
			std::vector<NXOpen::NXString> lines;
			lines = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetNthParameterPrefix(holeType, nth);
			string result;
			result = retrieveXml(string(lines[0].GetLocaleText()));
			ist_id_value.assign(result);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				string drillSizeHoleDiameterPrefix;
				drillSizeHoleDiameterPrefix.assign(soll_id_value.c_str());
				holeType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeDrillSizeHole;
				lines[0] = (NXString)drillSizeHoleDiameterPrefix;
				_preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->SetNthParameterPrefix(holeType, 1, lines);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the diameter suffix for a drill size hole.
	id_name.assign("Drafting_DrillSizeHole_Diameter_Suffix");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::HoleCalloutSettingsBuilder::Featuretype holeType;
			holeType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeDrillSizeHole;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype> parameterTypes;
			parameterTypes = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetListOfParameters(holeType);
			int nth = 0;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype>::iterator parameterTypes_it;
			for (parameterTypes_it = parameterTypes.begin(); parameterTypes_it != parameterTypes.end(); parameterTypes_it++) {
				if (*parameterTypes_it == NXOpen::Annotations::HoleCalloutSettingsBuilder::ParametertypeDiameter) {
					break;
				}
				nth++;
			}
			std::vector<NXOpen::NXString> lines;
			lines = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetNthParameterSuffix(holeType, nth);
			string result;
			result = retrieveXml(string(lines[0].GetLocaleText()));
			ist_id_value.assign(result);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				string drillSizeHoleDiameterSuffix;
				drillSizeHoleDiameterSuffix.assign(soll_id_value.c_str());
				holeType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeDrillSizeHole;
				lines[0] = (NXString)drillSizeHoleDiameterSuffix;
				_preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->SetNthParameterSuffix(holeType, 1, lines);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the depth prefix for a drill size hole.
	id_name.assign("Drafting_DrillSizeHole_Depth_Prefix");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::HoleCalloutSettingsBuilder::Featuretype holeType;
			holeType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeDrillSizeHole;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype> parameterTypes;
			parameterTypes = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetListOfParameters(holeType);
			int nth = 0;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype>::iterator parameterTypes_it;
			for (parameterTypes_it = parameterTypes.begin(); parameterTypes_it != parameterTypes.end(); parameterTypes_it++) {
				if (*parameterTypes_it == NXOpen::Annotations::HoleCalloutSettingsBuilder::ParametertypeDepth) {
					break;
				}
				nth++;
			}
			std::vector<NXOpen::NXString> lines;
			lines = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetNthParameterPrefix(holeType, nth);
			string result;
			result = retrieveXml(string(lines[0].GetLocaleText()));
			ist_id_value.assign(result);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				string drillSizeHoleDepthPrefix;
				drillSizeHoleDepthPrefix.assign(soll_id_value.c_str());
				holeType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeDrillSizeHole;
				lines[0] = (NXString)drillSizeHoleDepthPrefix;
				_preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->SetNthParameterPrefix(holeType, 2, lines);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the depth suffix for a drill size hole.
	id_name.assign("Drafting_DrillSizeHole_Depth_Suffix");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::HoleCalloutSettingsBuilder::Featuretype holeType;
			holeType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeDrillSizeHole;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype> parameterTypes;
			parameterTypes = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetListOfParameters(holeType);
			int nth = 0;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype>::iterator parameterTypes_it;
			for (parameterTypes_it = parameterTypes.begin(); parameterTypes_it != parameterTypes.end(); parameterTypes_it++) {
				if (*parameterTypes_it == NXOpen::Annotations::HoleCalloutSettingsBuilder::ParametertypeDepth) {
					break;
				}
				nth++;
			}
			std::vector<NXOpen::NXString> lines;
			lines = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetNthParameterSuffix(holeType, nth);
			string result;
			result = retrieveXml(string(lines[0].GetLocaleText()));
			ist_id_value.assign(result);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				string drillSizeHoleDepthSuffix;
				drillSizeHoleDepthSuffix.assign(soll_id_value.c_str());
				holeType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeDrillSizeHole;
				lines[0] = (NXString)drillSizeHoleDepthSuffix;
				_preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->SetNthParameterSuffix(holeType, 2, lines);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- STOPP - %s --- \n", routineName.c_str());
}

/*
File - Preferences - Drafting - Dimension - Hole Callout - Screw Clearance Hole -> Repair these preferences.
*/
void repair_DraftingStandard_Dimension_HoleCallout_ScrewClearanceHole_prefs(NXOpen::Drafting::PreferencesBuilder *_preferencesBuilder, en_nx_dpv* _nx_dpv, Session * _theSession, Part* _workPart) {
	routineName.assign("repair_DraftingStandard_Dimension_HoleCallout_ScrewClearanceHole_prefs");
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- START - %s --- \n", routineName.c_str());

	//This option specifies the pattern count prefix for a screw clearance hole which is included in a pattern feature.
	id_name.assign("Drafting_ScrewClearanceHole_PatternCount_Prefix");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::HoleCalloutSettingsBuilder::Featuretype holeType;
			holeType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeScrewClearanceHole;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype> parameterTypes;
			parameterTypes = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetListOfParameters(holeType);
			int nth = 0;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype>::iterator parameterTypes_it;
			for (parameterTypes_it = parameterTypes.begin(); parameterTypes_it != parameterTypes.end(); parameterTypes_it++) {
				if (*parameterTypes_it == NXOpen::Annotations::HoleCalloutSettingsBuilder::ParametertypePatternFeatureCount) {
					break;
				}
				nth++;
			}
			std::vector<NXOpen::NXString> lines;
			lines = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetNthParameterPrefix(holeType, nth);
			string result;
			result = retrieveXml(string(lines[0].GetLocaleText()));
			ist_id_value.assign(result);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				string screwClearanceHolePatternCountPrefix;
				screwClearanceHolePatternCountPrefix.assign(soll_id_value.c_str());
				holeType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeScrewClearanceHole;
				lines[0] = (NXString)screwClearanceHolePatternCountPrefix;
				_preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->SetNthParameterPrefix(holeType, 0, lines);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the pattern count suffix for a screw clearance hole which is included in a pattern feature.
	id_name.assign("Drafting_ScrewClearanceHole_PatternCount_Suffix");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::HoleCalloutSettingsBuilder::Featuretype holeType;
			holeType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeScrewClearanceHole;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype> parameterTypes;
			parameterTypes = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetListOfParameters(holeType);
			int nth = 0;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype>::iterator parameterTypes_it;
			for (parameterTypes_it = parameterTypes.begin(); parameterTypes_it != parameterTypes.end(); parameterTypes_it++) {
				if (*parameterTypes_it == NXOpen::Annotations::HoleCalloutSettingsBuilder::ParametertypePatternFeatureCount) {
					break;
				}
				nth++;
			}
			std::vector<NXOpen::NXString> lines;
			lines = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetNthParameterSuffix(holeType, nth);
			string result;
			result = retrieveXml(string(lines[0].GetLocaleText()));
			ist_id_value.assign(result);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				string screwClearanceHolePatternCountSuffix;
				screwClearanceHolePatternCountSuffix.assign(soll_id_value.c_str());
				holeType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeScrewClearanceHole;
				lines[0] = (NXString)screwClearanceHolePatternCountSuffix;
				_preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->SetNthParameterSuffix(holeType, 0, lines);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the screw size prefix for a screw clearance hole.
	id_name.assign("Drafting_ScrewClearanceHole_ScrewSize_Prefix");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::HoleCalloutSettingsBuilder::Featuretype holeType;
			holeType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeScrewClearanceHole;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype> parameterTypes;
			parameterTypes = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetListOfParameters(holeType);
			int nth = 0;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype>::iterator parameterTypes_it;
			for (parameterTypes_it = parameterTypes.begin(); parameterTypes_it != parameterTypes.end(); parameterTypes_it++) {
				if (*parameterTypes_it == NXOpen::Annotations::HoleCalloutSettingsBuilder::ParametertypeScrewSize) {
					break;
				}
				nth++;
			}
			std::vector<NXOpen::NXString> lines;
			lines = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetNthParameterPrefix(holeType, nth);
			string result;
			result = retrieveXml(string(lines[0].GetLocaleText()));
			ist_id_value.assign(result);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				string screwClearanceHoleScrewSizePrefix;
				screwClearanceHoleScrewSizePrefix.assign(soll_id_value.c_str());
				holeType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeScrewClearanceHole;
				lines[0] = (NXString)screwClearanceHoleScrewSizePrefix;
				_preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->SetNthParameterPrefix(holeType, 1, lines);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the screw size suffix for a screw clearance hole.
	id_name.assign("Drafting_ScrewClearanceHole_ScrewSize_Suffix");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::HoleCalloutSettingsBuilder::Featuretype holeType;
			holeType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeScrewClearanceHole;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype> parameterTypes;
			parameterTypes = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetListOfParameters(holeType);
			int nth = 0;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype>::iterator parameterTypes_it;
			for (parameterTypes_it = parameterTypes.begin(); parameterTypes_it != parameterTypes.end(); parameterTypes_it++) {
				if (*parameterTypes_it == NXOpen::Annotations::HoleCalloutSettingsBuilder::ParametertypeScrewSize) {
					break;
				}
				nth++;
			}
			std::vector<NXOpen::NXString> lines;
			lines = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetNthParameterSuffix(holeType, nth);
			string result;
			result = retrieveXml(string(lines[0].GetLocaleText()));
			ist_id_value.assign(result);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				string screwClearanceHoleScrewSizeSuffix;
				screwClearanceHoleScrewSizeSuffix.assign(soll_id_value.c_str());
				holeType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeScrewClearanceHole;
				lines[0] = (NXString)screwClearanceHoleScrewSizeSuffix;
				_preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->SetNthParameterSuffix(holeType, 1, lines);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the diameter prefix for a screw clearance hole.
	id_name.assign("Drafting_ScrewClearanceHole_Diameter_Prefix");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::HoleCalloutSettingsBuilder::Featuretype holeType;
			holeType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeScrewClearanceHole;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype> parameterTypes;
			parameterTypes = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetListOfParameters(holeType);
			int nth = 0;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype>::iterator parameterTypes_it;
			for (parameterTypes_it = parameterTypes.begin(); parameterTypes_it != parameterTypes.end(); parameterTypes_it++) {
				if (*parameterTypes_it == NXOpen::Annotations::HoleCalloutSettingsBuilder::ParametertypeDiameter) {
					break;
				}
				nth++;
			}
			std::vector<NXOpen::NXString> lines;
			lines = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetNthParameterPrefix(holeType, nth);
			string result;
			result = retrieveXml(string(lines[0].GetLocaleText()));
			ist_id_value.assign(result);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				string screwClearanceHoleDiameterPrefix;
				screwClearanceHoleDiameterPrefix.assign(soll_id_value.c_str());
				holeType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeScrewClearanceHole;
				lines[0] = (NXString)screwClearanceHoleDiameterPrefix;
				_preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->SetNthParameterPrefix(holeType, 2, lines);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}
	
	//This option specifies the diameter suffix for a screw clearance hole.
	id_name.assign("Drafting_ScrewClearanceHole_Diameter_Suffix");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::HoleCalloutSettingsBuilder::Featuretype holeType;
			holeType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeScrewClearanceHole;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype> parameterTypes;
			parameterTypes = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetListOfParameters(holeType);
			int nth = 0;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype>::iterator parameterTypes_it;
			for (parameterTypes_it = parameterTypes.begin(); parameterTypes_it != parameterTypes.end(); parameterTypes_it++) {
				if (*parameterTypes_it == NXOpen::Annotations::HoleCalloutSettingsBuilder::ParametertypeDiameter) {
					break;
				}
				nth++;
			}
			std::vector<NXOpen::NXString> lines;
			lines = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetNthParameterSuffix(holeType, nth);
			string result;
			result = retrieveXml(string(lines[0].GetLocaleText()));
			ist_id_value.assign(result);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				string screwClearanceHoleDiameterSuffix;
				screwClearanceHoleDiameterSuffix.assign(soll_id_value.c_str());
				holeType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeScrewClearanceHole;
				lines[0] = (NXString)screwClearanceHoleDiameterSuffix;
				_preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->SetNthParameterSuffix(holeType, 2, lines);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the fit prefix for a screw clearance hole.
	id_name.assign("Drafting_ScrewClearanceHole_Fit_Prefix");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::HoleCalloutSettingsBuilder::Featuretype holeType;
			holeType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeScrewClearanceHole;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype> parameterTypes;
			parameterTypes = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetListOfParameters(holeType);
			int nth = 0;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype>::iterator parameterTypes_it;
			for (parameterTypes_it = parameterTypes.begin(); parameterTypes_it != parameterTypes.end(); parameterTypes_it++) {
				if (*parameterTypes_it == NXOpen::Annotations::HoleCalloutSettingsBuilder::ParametertypeFit) {
					break;
				}
				nth++;
			}
			std::vector<NXOpen::NXString> lines;
			lines = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetNthParameterPrefix(holeType, nth);
			string result;
			result = retrieveXml(string(lines[0].GetLocaleText()));
			ist_id_value.assign(result);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				string screwClearanceHoleFitPrefix;
				screwClearanceHoleFitPrefix.assign(soll_id_value.c_str());
				holeType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeScrewClearanceHole;
				lines[0] = (NXString)screwClearanceHoleFitPrefix;
				_preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->SetNthParameterPrefix(holeType, 3, lines);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the fit suffix for a screw clearance hole.
	id_name.assign("Drafting_ScrewClearanceHole_Fit_Suffix");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::HoleCalloutSettingsBuilder::Featuretype holeType;
			holeType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeScrewClearanceHole;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype> parameterTypes;
			parameterTypes = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetListOfParameters(holeType);
			int nth = 0;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype>::iterator parameterTypes_it;
			for (parameterTypes_it = parameterTypes.begin(); parameterTypes_it != parameterTypes.end(); parameterTypes_it++) {
				if (*parameterTypes_it == NXOpen::Annotations::HoleCalloutSettingsBuilder::ParametertypeFit) {
					break;
				}
				nth++;
			}
			std::vector<NXOpen::NXString> lines;
			lines = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetNthParameterSuffix(holeType, nth);
			string result;
			result = retrieveXml(string(lines[0].GetLocaleText()));
			ist_id_value.assign(result);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				string screwClearanceHoleFitSuffix;
				screwClearanceHoleFitSuffix.assign(soll_id_value.c_str());
				holeType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeScrewClearanceHole;
				lines[0] = (NXString)screwClearanceHoleFitSuffix;
				_preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->SetNthParameterSuffix(holeType, 3, lines);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the depth prefix for a screw clearance hole.
	id_name.assign("Drafting_ScrewClearanceHole_Depth_Prefix");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::HoleCalloutSettingsBuilder::Featuretype holeType;
			holeType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeScrewClearanceHole;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype> parameterTypes;
			parameterTypes = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetListOfParameters(holeType);
			int nth = 0;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype>::iterator parameterTypes_it;
			for (parameterTypes_it = parameterTypes.begin(); parameterTypes_it != parameterTypes.end(); parameterTypes_it++) {
				if (*parameterTypes_it == NXOpen::Annotations::HoleCalloutSettingsBuilder::ParametertypeDepth) {
					break;
				}
				nth++;
			}
			std::vector<NXOpen::NXString> lines;
			lines = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetNthParameterPrefix(holeType, nth);
			string result;
			result = retrieveXml(string(lines[0].GetLocaleText()));
			ist_id_value.assign(result);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				string screwClearanceHoleDepthPrefix;
				screwClearanceHoleDepthPrefix.assign(soll_id_value.c_str());
				holeType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeScrewClearanceHole;
				lines[0] = (NXString)screwClearanceHoleDepthPrefix;
				_preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->SetNthParameterPrefix(holeType, 4, lines);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the depth suffix for a screw clearance hole.
	id_name.assign("Drafting_ScrewClearanceHole_Depth_Suffix");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::HoleCalloutSettingsBuilder::Featuretype holeType;
			holeType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeScrewClearanceHole;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype> parameterTypes;
			parameterTypes = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetListOfParameters(holeType);
			int nth = 0;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype>::iterator parameterTypes_it;
			for (parameterTypes_it = parameterTypes.begin(); parameterTypes_it != parameterTypes.end(); parameterTypes_it++) {
				if (*parameterTypes_it == NXOpen::Annotations::HoleCalloutSettingsBuilder::ParametertypeDepth) {
					break;
				}
				nth++;
			}
			std::vector<NXOpen::NXString> lines;
			lines = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetNthParameterSuffix(holeType, nth);
			string result;
			result = retrieveXml(string(lines[0].GetLocaleText()));
			ist_id_value.assign(result);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				string screwClearanceHoleDepthSuffix;
				screwClearanceHoleDepthSuffix.assign(soll_id_value.c_str());
				holeType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeScrewClearanceHole;
				lines[0] = (NXString)screwClearanceHoleDepthSuffix;
				_preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->SetNthParameterSuffix(holeType, 4, lines);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the counterbore diameter prefix for a screw clearance hole.
	id_name.assign("Drafting_ScrewClearanceHole_CounterboreDiameter_Prefix");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::HoleCalloutSettingsBuilder::Featuretype holeType;
			holeType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeScrewClearanceHole;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype> parameterTypes;
			parameterTypes = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetListOfParameters(holeType);
			int nth = 0;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype>::iterator parameterTypes_it;
			for (parameterTypes_it = parameterTypes.begin(); parameterTypes_it != parameterTypes.end(); parameterTypes_it++) {
				if (*parameterTypes_it == NXOpen::Annotations::HoleCalloutSettingsBuilder::ParametertypeCounterBoreDiameter) {
					break;
				}
				nth++;
			}
			std::vector<NXOpen::NXString> lines;
			lines = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetNthParameterPrefix(holeType, nth);
			string result;
			result = retrieveXml(string(lines[0].GetLocaleText()));
			ist_id_value.assign(result);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				string screwClearanceHoleCounterboreDiameterPrefix;
				screwClearanceHoleCounterboreDiameterPrefix.assign(soll_id_value.c_str());
				holeType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeScrewClearanceHole;
				lines[0] = (NXString)screwClearanceHoleCounterboreDiameterPrefix;
				_preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->SetNthParameterPrefix(holeType, 6, lines);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the counterbore diameter suffix for a screw clearance hole.
	id_name.assign("Drafting_ScrewClearanceHole_CounterboreDiameter_Suffix");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::HoleCalloutSettingsBuilder::Featuretype holeType;
			holeType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeScrewClearanceHole;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype> parameterTypes;
			parameterTypes = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetListOfParameters(holeType);
			int nth = 0;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype>::iterator parameterTypes_it;
			for (parameterTypes_it = parameterTypes.begin(); parameterTypes_it != parameterTypes.end(); parameterTypes_it++) {
				if (*parameterTypes_it == NXOpen::Annotations::HoleCalloutSettingsBuilder::ParametertypeCounterBoreDiameter) {
					break;
				}
				nth++;
			}
			std::vector<NXOpen::NXString> lines;
			lines = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetNthParameterSuffix(holeType, nth);
			string result;
			result = retrieveXml(string(lines[0].GetLocaleText()));
			ist_id_value.assign(result);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				string screwClearanceHoleCounterboreDiameterSuffix;
				screwClearanceHoleCounterboreDiameterSuffix.assign(soll_id_value.c_str());
				holeType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeScrewClearanceHole;
				lines[0] = (NXString)screwClearanceHoleCounterboreDiameterSuffix;
				_preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->SetNthParameterSuffix(holeType, 6, lines);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the counterbore depth prefix for a screw clearance hole.
	id_name.assign("Drafting_ScrewClearanceHole_CounterboreDepth_Prefix");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::HoleCalloutSettingsBuilder::Featuretype holeType;
			holeType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeScrewClearanceHole;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype> parameterTypes;
			parameterTypes = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetListOfParameters(holeType);
			int nth = 0;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype>::iterator parameterTypes_it;
			for (parameterTypes_it = parameterTypes.begin(); parameterTypes_it != parameterTypes.end(); parameterTypes_it++) {
				if (*parameterTypes_it == NXOpen::Annotations::HoleCalloutSettingsBuilder::ParametertypeCounterBoreDepth) {
					break;
				}
				nth++;
			}
			std::vector<NXOpen::NXString> lines;
			lines = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetNthParameterPrefix(holeType, nth);
			string result;
			result = retrieveXml(string(lines[0].GetLocaleText()));
			ist_id_value.assign(result);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				string screwClearanceHoleCounterboreDepthPrefix;
				screwClearanceHoleCounterboreDepthPrefix.assign(soll_id_value.c_str());
				holeType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeScrewClearanceHole;
				lines[0] = (NXString)screwClearanceHoleCounterboreDepthPrefix;
				_preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->SetNthParameterPrefix(holeType, 7, lines);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the counterbore depth suffix for a screw clearance hole.
	id_name.assign("Drafting_ScrewClearanceHole_CounterboreDepth_Suffix");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::HoleCalloutSettingsBuilder::Featuretype holeType;
			holeType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeScrewClearanceHole;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype> parameterTypes;
			parameterTypes = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetListOfParameters(holeType);
			int nth = 0;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype>::iterator parameterTypes_it;
			for (parameterTypes_it = parameterTypes.begin(); parameterTypes_it != parameterTypes.end(); parameterTypes_it++) {
				if (*parameterTypes_it == NXOpen::Annotations::HoleCalloutSettingsBuilder::ParametertypeCounterBoreDepth) {
					break;
				}
				nth++;
			}
			std::vector<NXOpen::NXString> lines;
			lines = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetNthParameterSuffix(holeType, nth);
			string result;
			result = retrieveXml(string(lines[0].GetLocaleText()));
			ist_id_value.assign(result);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				string screwClearanceHoleCounterboreDepthSuffix;
				screwClearanceHoleCounterboreDepthSuffix.assign(soll_id_value.c_str());
				holeType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeScrewClearanceHole;
				lines[0] = (NXString)screwClearanceHoleCounterboreDepthSuffix;
				_preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->SetNthParameterSuffix(holeType, 7, lines);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the countersink diameter prefix for a screw clearance hole.
	id_name.assign("Drafting_ScrewClearanceHole_CountersinkDiameter_Prefix");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::HoleCalloutSettingsBuilder::Featuretype holeType;
			holeType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeScrewClearanceHole;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype> parameterTypes;
			parameterTypes = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetListOfParameters(holeType);
			int nth = 0;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype>::iterator parameterTypes_it;
			for (parameterTypes_it = parameterTypes.begin(); parameterTypes_it != parameterTypes.end(); parameterTypes_it++) {
				if (*parameterTypes_it == NXOpen::Annotations::HoleCalloutSettingsBuilder::ParametertypeCounterSinkDiameter) {
					break;
				}
				nth++;
			}
			std::vector<NXOpen::NXString> lines;
			lines = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetNthParameterPrefix(holeType, nth);
			string result;
			result = retrieveXml(string(lines[0].GetLocaleText()));
			ist_id_value.assign(result);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				string screwClearanceHoleCountersinkDiameterPrefix;
				screwClearanceHoleCountersinkDiameterPrefix.assign(soll_id_value.c_str());
				holeType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeScrewClearanceHole;
				lines[0] = (NXString)screwClearanceHoleCountersinkDiameterPrefix;
				_preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->SetNthParameterPrefix(holeType, 8, lines);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the countersink diameter suffix for a screw clearance hole.
	id_name.assign("Drafting_ScrewClearanceHole_CountersinkDiameter_Suffix");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::HoleCalloutSettingsBuilder::Featuretype holeType;
			holeType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeScrewClearanceHole;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype> parameterTypes;
			parameterTypes = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetListOfParameters(holeType);
			int nth = 0;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype>::iterator parameterTypes_it;
			for (parameterTypes_it = parameterTypes.begin(); parameterTypes_it != parameterTypes.end(); parameterTypes_it++) {
				if (*parameterTypes_it == NXOpen::Annotations::HoleCalloutSettingsBuilder::ParametertypeCounterSinkDiameter) {
					break;
				}
				nth++;
			}
			std::vector<NXOpen::NXString> lines;
			lines = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetNthParameterSuffix(holeType, nth);
			string result;
			result = retrieveXml(string(lines[0].GetLocaleText()));
			ist_id_value.assign(result);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				string screwClearanceHoleCountersinkDiameterSuffix;
				screwClearanceHoleCountersinkDiameterSuffix.assign(soll_id_value.c_str());
				holeType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeScrewClearanceHole;
				lines[0] = (NXString)screwClearanceHoleCountersinkDiameterSuffix;
				_preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->SetNthParameterSuffix(holeType, 8, lines);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}
	//This option specifies the countersink angle prefix for a screw clearance hole.
	id_name.assign("Drafting_ScrewClearanceHole_CountersinkAngle_Prefix");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::HoleCalloutSettingsBuilder::Featuretype holeType;
			holeType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeScrewClearanceHole;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype> parameterTypes;
			parameterTypes = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetListOfParameters(holeType);
			int nth = 0;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype>::iterator parameterTypes_it;
			for (parameterTypes_it = parameterTypes.begin(); parameterTypes_it != parameterTypes.end(); parameterTypes_it++) {
				if (*parameterTypes_it == NXOpen::Annotations::HoleCalloutSettingsBuilder::ParametertypeCounterSinkAngle) {
					break;
				}
				nth++;
			}
			std::vector<NXOpen::NXString> lines;
			lines = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetNthParameterPrefix(holeType, nth);
			string result;
			result = retrieveXml(string(lines[0].GetLocaleText()));
			ist_id_value.assign(result);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				string screwClearanceHoleCountersinkAnglePrefix;
				screwClearanceHoleCountersinkAnglePrefix.assign(soll_id_value.c_str());
				holeType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeScrewClearanceHole;
				lines[0] = (NXString)screwClearanceHoleCountersinkAnglePrefix;
				_preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->SetNthParameterPrefix(holeType, 9, lines);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the countersink angle suffix for a screw clearance hole.
	id_name.assign("Drafting_ScrewClearanceHole_CountersinkAngle_Suffix");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::HoleCalloutSettingsBuilder::Featuretype holeType;
			holeType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeScrewClearanceHole;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype> parameterTypes;
			parameterTypes = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetListOfParameters(holeType);
			int nth = 0;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype>::iterator parameterTypes_it;
			for (parameterTypes_it = parameterTypes.begin(); parameterTypes_it != parameterTypes.end(); parameterTypes_it++) {
				if (*parameterTypes_it == NXOpen::Annotations::HoleCalloutSettingsBuilder::ParametertypeCounterSinkAngle) {
					break;
				}
				nth++;
			}
			std::vector<NXOpen::NXString> lines;
			lines = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetNthParameterSuffix(holeType, nth);
			string result;
			result = retrieveXml(string(lines[0].GetLocaleText()));
			ist_id_value.assign(result);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				string screwClearanceHoleCountersinkAngleSuffix;
				screwClearanceHoleCountersinkAngleSuffix.assign(soll_id_value.c_str());
				holeType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeScrewClearanceHole;
				lines[0] = (NXString)screwClearanceHoleCountersinkAngleSuffix;
				_preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->SetNthParameterSuffix(holeType, 9, lines);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- STOPP - %s --- \n", routineName.c_str());
}

/*
File - Preferences - Drafting - Dimension - Hole Callout - Threaded Hole -> Repair these preferences.
*/
void repair_DraftingStandard_Dimension_HoleCallout_ThreadedHole_prefs(NXOpen::Drafting::PreferencesBuilder *_preferencesBuilder, en_nx_dpv* _nx_dpv, Session * _theSession, Part* _workPart) {
	routineName.assign("repair_DraftingStandard_Dimension_HoleCallout_ThreadedHole_prefs");
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- START - %s --- \n", routineName.c_str());

	//This option specifies the pattern count prefix for a threaded hole which is included in a pattern feature.
	id_name.assign("Drafting_ThreadedHole_PatternCount_Prefix");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::HoleCalloutSettingsBuilder::Featuretype holeType;
			holeType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeThreadedHole;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype> parameterTypes;
			parameterTypes = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetListOfParameters(holeType);
			int nth = 0;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype>::iterator parameterTypes_it;
			for (parameterTypes_it = parameterTypes.begin(); parameterTypes_it != parameterTypes.end(); parameterTypes_it++) {
				if (*parameterTypes_it == NXOpen::Annotations::HoleCalloutSettingsBuilder::ParametertypePatternFeatureCount) {
					break;
				}
				nth++;
			}
			std::vector<NXOpen::NXString> lines;
			lines = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetNthParameterPrefix(holeType, nth);
			string result;
			result = retrieveXml(string(lines[0].GetLocaleText()));
			ist_id_value.assign(result);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				string threadedHolePatternCountPrefix;
				threadedHolePatternCountPrefix.assign(soll_id_value.c_str());
				holeType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeThreadedHole;
				lines[0] = (NXString)threadedHolePatternCountPrefix;
				_preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->SetNthParameterPrefix(holeType, 0, lines);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the pattern count suffix for a threaded hole which is included in a pattern feature.
	id_name.assign("Drafting_ThreadedHole_PatternCount_Suffix");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::HoleCalloutSettingsBuilder::Featuretype holeType;
			holeType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeThreadedHole;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype> parameterTypes;
			parameterTypes = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetListOfParameters(holeType);
			int nth = 0;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype>::iterator parameterTypes_it;
			for (parameterTypes_it = parameterTypes.begin(); parameterTypes_it != parameterTypes.end(); parameterTypes_it++) {
				if (*parameterTypes_it == NXOpen::Annotations::HoleCalloutSettingsBuilder::ParametertypePatternFeatureCount) {
					break;
				}
				nth++;
			}
			std::vector<NXOpen::NXString> lines;
			lines = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetNthParameterSuffix(holeType, nth);
			string result;
			result = retrieveXml(string(lines[0].GetLocaleText()));
			ist_id_value.assign(result);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				string threadedHolePatternCountSuffix;
				threadedHolePatternCountSuffix.assign(soll_id_value.c_str());
				holeType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeThreadedHole;
				lines[0] = (NXString)threadedHolePatternCountSuffix;
				_preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->SetNthParameterSuffix(holeType, 0, lines);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the thread size prefix for a threaded hole.
	id_name.assign("Drafting_ThreadedHole_ThreadSize_Prefix");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::HoleCalloutSettingsBuilder::Featuretype holeType;
			holeType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeThreadedHole;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype> parameterTypes;
			parameterTypes = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetListOfParameters(holeType);
			int nth = 0;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype>::iterator parameterTypes_it;
			for (parameterTypes_it = parameterTypes.begin(); parameterTypes_it != parameterTypes.end(); parameterTypes_it++) {
				if (*parameterTypes_it == NXOpen::Annotations::HoleCalloutSettingsBuilder::ParametertypeThreadSize) {
					break;
				}
				nth++;
			}
			std::vector<NXOpen::NXString> lines;
			lines = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetNthParameterPrefix(holeType, nth);
			string result;
			result = retrieveXml(string(lines[0].GetLocaleText()));
			ist_id_value.assign(result);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				string threadedHoleThreadSizePrefix;
				threadedHoleThreadSizePrefix.assign(soll_id_value.c_str());
				NXOpen::Annotations::HoleCalloutSettingsBuilder::Featuretype featureType;
				featureType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeThreadedHole;
				std::vector<NXOpen::NXString> lines;
				lines[0] = (NXString)threadedHoleThreadSizePrefix;
				_preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->SetNthParameterPrefix(featureType, 1, lines);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the thread size suffix for a threaded hole.
	id_name.assign("Drafting_ThreadedHole_ThreadSize_Suffix");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::HoleCalloutSettingsBuilder::Featuretype holeType;
			holeType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeThreadedHole;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype> parameterTypes;
			parameterTypes = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetListOfParameters(holeType);
			int nth = 0;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype>::iterator parameterTypes_it;
			for (parameterTypes_it = parameterTypes.begin(); parameterTypes_it != parameterTypes.end(); parameterTypes_it++) {
				if (*parameterTypes_it == NXOpen::Annotations::HoleCalloutSettingsBuilder::ParametertypeThreadSize) {
					break;
				}
				nth++;
			}
			std::vector<NXOpen::NXString> lines;
			lines = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetNthParameterSuffix(holeType, nth);
			string result;
			result = retrieveXml(string(lines[0].GetLocaleText()));
			ist_id_value.assign(result);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				string threadedHoleThreadSizeSuffix;
				threadedHoleThreadSizeSuffix.assign(soll_id_value.c_str());
				NXOpen::Annotations::HoleCalloutSettingsBuilder::Featuretype featureType;
				featureType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeThreadedHole;
				std::vector<NXOpen::NXString> lines;
				lines[0] = (NXString)threadedHoleThreadSizeSuffix;
				_preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->SetNthParameterSuffix(featureType, 1, lines);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the thread depth prefix for a threaded hole.
	id_name.assign("Drafting_ThreadedHole_ThreadDepth_Prefix");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::HoleCalloutSettingsBuilder::Featuretype holeType;
			holeType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeThreadedHole;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype> parameterTypes;
			parameterTypes = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetListOfParameters(holeType);
			int nth = 0;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype>::iterator parameterTypes_it;
			for (parameterTypes_it = parameterTypes.begin(); parameterTypes_it != parameterTypes.end(); parameterTypes_it++) {
				if (*parameterTypes_it == NXOpen::Annotations::HoleCalloutSettingsBuilder::ParametertypeThreadDepth) {
					break;
				}
				nth++;
			}
			std::vector<NXOpen::NXString> lines;
			lines = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetNthParameterPrefix(holeType, nth);
			string result;
			result = retrieveXml(string(lines[0].GetLocaleText()));
			ist_id_value.assign(result);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				string threadedHoleThreadDepthPrefix;
				threadedHoleThreadDepthPrefix.assign(soll_id_value.c_str());
				holeType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeThreadedHole;
				lines[0] = (NXString)threadedHoleThreadDepthPrefix;
				_preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->SetNthParameterPrefix(holeType, 2, lines);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the thread depth suffix for a threaded hole.
	id_name.assign("Drafting_ThreadedHole_ThreadDepth_Suffix");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::HoleCalloutSettingsBuilder::Featuretype holeType;
			holeType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeThreadedHole;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype> parameterTypes;
			parameterTypes = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetListOfParameters(holeType);
			int nth = 0;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype>::iterator parameterTypes_it;
			for (parameterTypes_it = parameterTypes.begin(); parameterTypes_it != parameterTypes.end(); parameterTypes_it++) {
				if (*parameterTypes_it == NXOpen::Annotations::HoleCalloutSettingsBuilder::ParametertypeThreadDepth) {
					break;
				}
				nth++;
			}
			std::vector<NXOpen::NXString> lines;
			lines = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetNthParameterSuffix(holeType, nth);
			string result;
			result = retrieveXml(string(lines[0].GetLocaleText()));
			ist_id_value.assign(result);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				string threadedHoleThreadDepthSuffix;
				threadedHoleThreadDepthSuffix.assign(soll_id_value.c_str());
				holeType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeThreadedHole;
				lines[0] = (NXString)threadedHoleThreadDepthSuffix;
				_preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->SetNthParameterSuffix(holeType, 2, lines);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the depth prefix for a threaded hole.
	id_name.assign("Drafting_ThreadedHole_Depth_Prefix");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::HoleCalloutSettingsBuilder::Featuretype holeType;
			holeType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeThreadedHole;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype> parameterTypes;
			parameterTypes = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetListOfParameters(holeType);
			int nth = 0;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype>::iterator parameterTypes_it;
			for (parameterTypes_it = parameterTypes.begin(); parameterTypes_it != parameterTypes.end(); parameterTypes_it++) {
				if (*parameterTypes_it == NXOpen::Annotations::HoleCalloutSettingsBuilder::ParametertypeDepth) {
					break;
				}
				nth++;
			}
			std::vector<NXOpen::NXString> lines;
			lines = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetNthParameterPrefix(holeType, nth);
			string result;
			result = retrieveXml(string(lines[0].GetLocaleText()));
			ist_id_value.assign(result);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				string threadedHoleDepthPrefix;
				threadedHoleDepthPrefix.assign(soll_id_value.c_str());
				holeType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeThreadedHole;
				lines[0] = (NXString)threadedHoleDepthPrefix;
				_preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->SetNthParameterPrefix(holeType, 3, lines);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the depth suffix for a threaded hole.
	id_name.assign("Drafting_ThreadedHole_Depth_Suffix");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::HoleCalloutSettingsBuilder::Featuretype holeType;
			holeType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeThreadedHole;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype> parameterTypes;
			parameterTypes = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetListOfParameters(holeType);
			int nth = 0;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype>::iterator parameterTypes_it;
			for (parameterTypes_it = parameterTypes.begin(); parameterTypes_it != parameterTypes.end(); parameterTypes_it++) {
				if (*parameterTypes_it == NXOpen::Annotations::HoleCalloutSettingsBuilder::ParametertypeDepth) {
					break;
				}
				nth++;
			}
			std::vector<NXOpen::NXString> lines;
			lines = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetNthParameterSuffix(holeType, nth);
			string result;
			result = retrieveXml(string(lines[0].GetLocaleText()));
			ist_id_value.assign(result);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				string threadedHoleDepthSuffix;
				threadedHoleDepthSuffix.assign(soll_id_value.c_str());
				holeType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeThreadedHole;
				lines[0] = (NXString)threadedHoleDepthSuffix;
				_preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->SetNthParameterSuffix(holeType, 3, lines);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the pitch prefix for a threaded hole.
	id_name.assign("Drafting_ThreadedHole_Pitch_Prefix");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::HoleCalloutSettingsBuilder::Featuretype holeType;
			holeType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeThreadedHole;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype> parameterTypes;
			parameterTypes = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetListOfParameters(holeType);
			int nth = 0;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype>::iterator parameterTypes_it;
			for (parameterTypes_it = parameterTypes.begin(); parameterTypes_it != parameterTypes.end(); parameterTypes_it++) {
				if (*parameterTypes_it == NXOpen::Annotations::HoleCalloutSettingsBuilder::ParametertypePitch) {
					break;
				}
				nth++;
			}
			std::vector<NXOpen::NXString> lines;
			lines = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetNthParameterPrefix(holeType, nth);
			string result;
			result = retrieveXml(string(lines[0].GetLocaleText()));
			ist_id_value.assign(result);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				string threadedHolePitchPrefix;
				threadedHolePitchPrefix.assign(soll_id_value.c_str());
				holeType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeThreadedHole;
				lines[0] = (NXString)threadedHolePitchPrefix;
				_preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->SetNthParameterPrefix(holeType, 4, lines);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the pitch Suffix for a threaded hole.
	id_name.assign("Drafting_ThreadedHole_Pitch_Suffix");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::HoleCalloutSettingsBuilder::Featuretype holeType;
			holeType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeThreadedHole;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype> parameterTypes;
			parameterTypes = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetListOfParameters(holeType);
			int nth = 0;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype>::iterator parameterTypes_it;
			for (parameterTypes_it = parameterTypes.begin(); parameterTypes_it != parameterTypes.end(); parameterTypes_it++) {
				if (*parameterTypes_it == NXOpen::Annotations::HoleCalloutSettingsBuilder::ParametertypePitch) {
					break;
				}
				nth++;
			}
			std::vector<NXOpen::NXString> lines;
			lines = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetNthParameterSuffix(holeType, nth);
			string result;
			result = retrieveXml(string(lines[0].GetLocaleText()));
			ist_id_value.assign(result);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				string threadedHolePitchSuffix;
				threadedHolePitchSuffix.assign(soll_id_value.c_str());
				holeType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeThreadedHole;
				lines[0] = (NXString)threadedHolePitchSuffix;
				_preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->SetNthParameterSuffix(holeType, 4, lines);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the angle prefix for a threaded hole.
	id_name.assign("Drafting_ThreadedHole_Angle_Prefix");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::HoleCalloutSettingsBuilder::Featuretype holeType;
			holeType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeThreadedHole;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype> parameterTypes;
			parameterTypes = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetListOfParameters(holeType);
			int nth = 0;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype>::iterator parameterTypes_it;
			for (parameterTypes_it = parameterTypes.begin(); parameterTypes_it != parameterTypes.end(); parameterTypes_it++) {
				if (*parameterTypes_it == NXOpen::Annotations::HoleCalloutSettingsBuilder::ParametertypeAngle) {
					break;
				}
				nth++;
			}
			std::vector<NXOpen::NXString> lines;
			lines = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetNthParameterPrefix(holeType, nth);
			string result;
			result = retrieveXml(string(lines[0].GetLocaleText()));
			ist_id_value.assign(result);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				string threadedHoleAnglePrefix;
				threadedHoleAnglePrefix.assign(soll_id_value.c_str());
				holeType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeThreadedHole;
				lines[0] = (NXString)threadedHoleAnglePrefix;
				_preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->SetNthParameterPrefix(holeType, 5, lines);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the angle suffix for a threaded hole.
	id_name.assign("Drafting_ThreadedHole_Angle_Suffix");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::HoleCalloutSettingsBuilder::Featuretype holeType;
			holeType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeThreadedHole;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype> parameterTypes;
			parameterTypes = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetListOfParameters(holeType);
			int nth = 0;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype>::iterator parameterTypes_it;
			for (parameterTypes_it = parameterTypes.begin(); parameterTypes_it != parameterTypes.end(); parameterTypes_it++) {
				if (*parameterTypes_it == NXOpen::Annotations::HoleCalloutSettingsBuilder::ParametertypeAngle) {
					break;
				}
				nth++;
			}
			std::vector<NXOpen::NXString> lines;
			lines = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetNthParameterSuffix(holeType, nth);
			string result;
			result = retrieveXml(string(lines[0].GetLocaleText()));
			ist_id_value.assign(result);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				string threadedHoleAngleSuffix;
				threadedHoleAngleSuffix.assign(soll_id_value.c_str());
				holeType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeThreadedHole;
				lines[0] = (NXString)threadedHoleAngleSuffix;
				_preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->SetNthParameterSuffix(holeType, 5, lines);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the minor diameter prefix for a threaded hole.
	id_name.assign("Drafting_ThreadedHole_MinorDiameter_Prefix");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::HoleCalloutSettingsBuilder::Featuretype holeType;
			holeType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeThreadedHole;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype> parameterTypes;
			parameterTypes = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetListOfParameters(holeType);
			int nth = 0;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype>::iterator parameterTypes_it;
			for (parameterTypes_it = parameterTypes.begin(); parameterTypes_it != parameterTypes.end(); parameterTypes_it++) {
				if (*parameterTypes_it == NXOpen::Annotations::HoleCalloutSettingsBuilder::ParametertypeMinorDiameter) {
					break;
				}
				nth++;
			}
			std::vector<NXOpen::NXString> lines;
			lines = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetNthParameterPrefix(holeType, nth);
			string result;
			result = retrieveXml(string(lines[0].GetLocaleText()));
			ist_id_value.assign(result);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				string threadedHoleMinorDiameterPrefix;
				threadedHoleMinorDiameterPrefix.assign(soll_id_value.c_str());
				holeType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeThreadedHole;
				lines[0] = (NXString)threadedHoleMinorDiameterPrefix;
				_preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->SetNthParameterPrefix(holeType, 6, lines);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the minor diameter suffix for a threaded hole.
	id_name.assign("Drafting_ThreadedHole_MinorDiameter_Suffix");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::HoleCalloutSettingsBuilder::Featuretype holeType;
			holeType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeThreadedHole;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype> parameterTypes;
			parameterTypes = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetListOfParameters(holeType);
			int nth = 0;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype>::iterator parameterTypes_it;
			for (parameterTypes_it = parameterTypes.begin(); parameterTypes_it != parameterTypes.end(); parameterTypes_it++) {
				if (*parameterTypes_it == NXOpen::Annotations::HoleCalloutSettingsBuilder::ParametertypeMinorDiameter) {
					break;
				}
				nth++;
			}
			std::vector<NXOpen::NXString> lines;
			lines = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetNthParameterSuffix(holeType, nth);
			string result;
			result = retrieveXml(string(lines[0].GetLocaleText()));
			ist_id_value.assign(result);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				string threadedHoleMinorDiameterSuffix;
				threadedHoleMinorDiameterSuffix.assign(soll_id_value.c_str());
				holeType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeThreadedHole;
				lines[0] = (NXString)threadedHoleMinorDiameterSuffix;
				_preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->SetNthParameterSuffix(holeType, 6, lines);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the major diameter prefix for a threaded hole.
	id_name.assign("Drafting_ThreadedHole_MajorDiameter_Prefix");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::HoleCalloutSettingsBuilder::Featuretype holeType;
			holeType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeThreadedHole;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype> parameterTypes;
			parameterTypes = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetListOfParameters(holeType);
			int nth = 0;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype>::iterator parameterTypes_it;
			for (parameterTypes_it = parameterTypes.begin(); parameterTypes_it != parameterTypes.end(); parameterTypes_it++) {
				if (*parameterTypes_it == NXOpen::Annotations::HoleCalloutSettingsBuilder::ParametertypeMajorDiameter) {
					break;
				}
				nth++;
			}
			std::vector<NXOpen::NXString> lines;
			lines = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetNthParameterPrefix(holeType, nth);
			string result;
			result = retrieveXml(string(lines[0].GetLocaleText()));
			ist_id_value.assign(result);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				string threadedHoleMajorDiameterPrefix;
				threadedHoleMajorDiameterPrefix.assign(soll_id_value.c_str());
				holeType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeThreadedHole;
				lines[0] = (NXString)threadedHoleMajorDiameterPrefix;
				_preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->SetNthParameterPrefix(holeType, 7, lines);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the major diameter suffix for a threaded hole.
	id_name.assign("Drafting_ThreadedHole_MajorDiameter_Suffix");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::HoleCalloutSettingsBuilder::Featuretype holeType;
			holeType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeThreadedHole;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype> parameterTypes;
			parameterTypes = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetListOfParameters(holeType);
			int nth = 0;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype>::iterator parameterTypes_it;
			for (parameterTypes_it = parameterTypes.begin(); parameterTypes_it != parameterTypes.end(); parameterTypes_it++) {
				if (*parameterTypes_it == NXOpen::Annotations::HoleCalloutSettingsBuilder::ParametertypeMajorDiameter) {
					break;
				}
				nth++;
			}
			std::vector<NXOpen::NXString> lines;
			lines = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetNthParameterSuffix(holeType, nth);
			string result;
			result = retrieveXml(string(lines[0].GetLocaleText()));
			ist_id_value.assign(result);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				string threadedHoleMajorDiameterSuffix;
				threadedHoleMajorDiameterSuffix.assign(soll_id_value.c_str());
				holeType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeThreadedHole;
				lines[0] = (NXString)threadedHoleMajorDiameterSuffix;
				_preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->SetNthParameterSuffix(holeType, 7, lines);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the tap drill diameter prefix for a threaded hole.
	id_name.assign("Drafting_ThreadedHole_TapDrillDiameter_Prefix");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::HoleCalloutSettingsBuilder::Featuretype holeType;
			holeType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeThreadedHole;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype> parameterTypes;
			parameterTypes = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetListOfParameters(holeType);
			int nth = 0;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype>::iterator parameterTypes_it;
			for (parameterTypes_it = parameterTypes.begin(); parameterTypes_it != parameterTypes.end(); parameterTypes_it++) {
				if (*parameterTypes_it == NXOpen::Annotations::HoleCalloutSettingsBuilder::ParametertypeTapDrillDiameter) {
					break;
				}
				nth++;
			}
			std::vector<NXOpen::NXString> lines;
			lines = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetNthParameterPrefix(holeType, nth);
			string result;
			result = retrieveXml(string(lines[0].GetLocaleText()));
			ist_id_value.assign(result);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				string threadedHoleTapDrillDiameterPrefix;
				threadedHoleTapDrillDiameterPrefix.assign(soll_id_value.c_str());
				holeType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeThreadedHole;
				lines[0] = (NXString)threadedHoleTapDrillDiameterPrefix;
				_preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->SetNthParameterPrefix(holeType, 8, lines);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the tap drill diameter suffix for a threaded hole.
	id_name.assign("Drafting_ThreadedHole_TapDrillDiameter_Suffix");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::HoleCalloutSettingsBuilder::Featuretype holeType;
			holeType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeThreadedHole;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype> parameterTypes;
			parameterTypes = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetListOfParameters(holeType);
			int nth = 0;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype>::iterator parameterTypes_it;
			for (parameterTypes_it = parameterTypes.begin(); parameterTypes_it != parameterTypes.end(); parameterTypes_it++) {
				if (*parameterTypes_it == NXOpen::Annotations::HoleCalloutSettingsBuilder::ParametertypeTapDrillDiameter) {
					break;
				}
				nth++;
			}
			std::vector<NXOpen::NXString> lines;
			lines = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetNthParameterSuffix(holeType, nth);
			string result;
			result = retrieveXml(string(lines[0].GetLocaleText()));
			ist_id_value.assign(result);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				string threadedHoleTapDrillDiameterSuffix;
				threadedHoleTapDrillDiameterSuffix.assign(soll_id_value.c_str());
				holeType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeThreadedHole;
				lines[0] = (NXString)threadedHoleTapDrillDiameterSuffix;
				_preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->SetNthParameterSuffix(holeType, 8, lines);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- STOPP - %s --- \n", routineName.c_str());
}

/*
File - Preferences - Drafting - Dimension - Hole Callout - Symbolic Thread -> Repair these preferences.
*/
void repair_DraftingStandard_Dimension_HoleCallout_SymbolicThread_prefs(NXOpen::Drafting::PreferencesBuilder *_preferencesBuilder, en_nx_dpv* _nx_dpv, Session * _theSession, Part* _workPart) {
	routineName.assign("repair_DraftingStandard_Dimension_HoleCallout_SymbolicThread_prefs");
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- START - %s --- \n", routineName.c_str());

	//This option specifies the pattern count prefix for a symbolic thread on a hole which is included in a pattern feature.
	id_name.assign("Drafting_SymbolicThread_PatternCount_Prefix");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::HoleCalloutSettingsBuilder::Featuretype holeType;
			holeType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeSymbolicThread;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype> parameterTypes;
			parameterTypes = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetListOfParameters(holeType);
			int nth = 0;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype>::iterator parameterTypes_it;
			for (parameterTypes_it = parameterTypes.begin(); parameterTypes_it != parameterTypes.end(); parameterTypes_it++) {
				if (*parameterTypes_it == NXOpen::Annotations::HoleCalloutSettingsBuilder::ParametertypePatternFeatureCount) {
					break;
				}
				nth++;
			}
			std::vector<NXOpen::NXString> lines;
			lines = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetNthParameterPrefix(holeType, nth);
			string result;
			result = retrieveXml(string(lines[0].GetLocaleText()));
			ist_id_value.assign(result);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				string symbolicThreadPatternCountPrefix;
				symbolicThreadPatternCountPrefix.assign(soll_id_value.c_str());
				holeType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeSymbolicThread;
				parameterTypes = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetListOfParameters(holeType);
				nth = 0;
				for (parameterTypes_it = parameterTypes.begin(); parameterTypes_it != parameterTypes.end(); parameterTypes_it++) {
					if (*parameterTypes_it == NXOpen::Annotations::HoleCalloutSettingsBuilder::ParametertypePatternFeatureCount) {
						break;
					}
					nth++;
				}
				lines[0] = (NXString)symbolicThreadPatternCountPrefix;
				_preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->SetNthParameterPrefix(holeType, nth, lines);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the pattern count suffix for a symbolic thread on a hole which is included in a pattern feature.
	id_name.assign("Drafting_SymbolicThread_PatternCount_Suffix");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::HoleCalloutSettingsBuilder::Featuretype holeType;
			holeType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeSymbolicThread;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype> parameterTypes;
			parameterTypes = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetListOfParameters(holeType);
			int nth = 0;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype>::iterator parameterTypes_it;
			for (parameterTypes_it = parameterTypes.begin(); parameterTypes_it != parameterTypes.end(); parameterTypes_it++) {
				if (*parameterTypes_it == NXOpen::Annotations::HoleCalloutSettingsBuilder::ParametertypePatternFeatureCount) {
					break;
				}
				nth++;
			}
			std::vector<NXOpen::NXString> lines;
			lines = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetNthParameterSuffix(holeType, nth);
			string result;
			result = retrieveXml(string(lines[0].GetLocaleText()));
			ist_id_value.assign(result);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				string symbolicThreadPatternCountSuffix;
				symbolicThreadPatternCountSuffix.assign(soll_id_value.c_str());
				holeType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeSymbolicThread;
				lines[0] = (NXString)symbolicThreadPatternCountSuffix;
				_preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->SetNthParameterSuffix(holeType, 0, lines);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the callout prefix for a symbolic thread on a hole.
	id_name.assign("Drafting_SymbolicThread_Callout_Prefix");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::HoleCalloutSettingsBuilder::Featuretype holeType;
			holeType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeSymbolicThread;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype> parameterTypes;
			parameterTypes = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetListOfParameters(holeType);
			int nth = 0;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype>::iterator parameterTypes_it;
			for (parameterTypes_it = parameterTypes.begin(); parameterTypes_it != parameterTypes.end(); parameterTypes_it++) {
				if (*parameterTypes_it == NXOpen::Annotations::HoleCalloutSettingsBuilder::ParametertypeCallout) {
					break;
				}
				nth++;
			}
			std::vector<NXOpen::NXString> lines;
			lines = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetNthParameterPrefix(holeType, nth);
			string result;
			result = retrieveXml(string(lines[0].GetLocaleText()));
			ist_id_value.assign(result);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				string symbolicThreadCalloutPrefix;
				symbolicThreadCalloutPrefix.assign(soll_id_value.c_str());
				holeType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeSymbolicThread;
				lines[0] = (NXString)symbolicThreadCalloutPrefix;
				_preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->SetNthParameterPrefix(holeType, 1, lines);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the callout suffix for a symbolic thread on a hole.
	id_name.assign("Drafting_SymbolicThread_Callout_Suffix");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::HoleCalloutSettingsBuilder::Featuretype holeType;
			holeType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeSymbolicThread;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype> parameterTypes;
			parameterTypes = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetListOfParameters(holeType);
			int nth = 0;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype>::iterator parameterTypes_it;
			for (parameterTypes_it = parameterTypes.begin(); parameterTypes_it != parameterTypes.end(); parameterTypes_it++) {
				if (*parameterTypes_it == NXOpen::Annotations::HoleCalloutSettingsBuilder::ParametertypeCallout) {
					break;
				}
				nth++;
			}
			std::vector<NXOpen::NXString> lines;
			lines = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetNthParameterSuffix(holeType, nth);
			string result;
			result = retrieveXml(string(lines[0].GetLocaleText()));
			ist_id_value.assign(result);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				string symbolicThreadCalloutSuffix;
				symbolicThreadCalloutSuffix.assign(soll_id_value.c_str());
				holeType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeSymbolicThread;
				lines[0] = (NXString)symbolicThreadCalloutSuffix;
				_preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->SetNthParameterSuffix(holeType, 1, lines);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the length prefix for a symbolic thread on a hole.
	id_name.assign("Drafting_SymbolicThread_Length_Prefix");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::HoleCalloutSettingsBuilder::Featuretype holeType;
			holeType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeSymbolicThread;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype> parameterTypes;
			parameterTypes = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetListOfParameters(holeType);
			int nth = 0;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype>::iterator parameterTypes_it;
			for (parameterTypes_it = parameterTypes.begin(); parameterTypes_it != parameterTypes.end(); parameterTypes_it++) {
				if (*parameterTypes_it == NXOpen::Annotations::HoleCalloutSettingsBuilder::ParametertypeLength) {
					break;
				}
				nth++;
			}
			std::vector<NXOpen::NXString> lines;
			lines = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetNthParameterPrefix(holeType, nth);
			string result;
			result = retrieveXml(string(lines[0].GetLocaleText()));
			ist_id_value.assign(result);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				string symbolicThreadLengthPrefix;
				symbolicThreadLengthPrefix.assign(soll_id_value.c_str());
				holeType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeSymbolicThread;
				lines[0] = (NXString)symbolicThreadLengthPrefix;
				_preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->SetNthParameterPrefix(holeType, 2, lines);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the length suffix for a symbolic thread on a hole.
	id_name.assign("Drafting_SymbolicThread_Length_Suffix");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::HoleCalloutSettingsBuilder::Featuretype holeType;
			holeType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeSymbolicThread;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype> parameterTypes;
			parameterTypes = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetListOfParameters(holeType);
			int nth = 0;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype>::iterator parameterTypes_it;
			for (parameterTypes_it = parameterTypes.begin(); parameterTypes_it != parameterTypes.end(); parameterTypes_it++) {
				if (*parameterTypes_it == NXOpen::Annotations::HoleCalloutSettingsBuilder::ParametertypeLength) {
					break;
				}
				nth++;
			}
			std::vector<NXOpen::NXString> lines;
			lines = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetNthParameterSuffix(holeType, nth);
			string result;
			result = retrieveXml(string(lines[0].GetLocaleText()));
			ist_id_value.assign(result);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				string symbolicThreadLengthSuffix;
				symbolicThreadLengthSuffix.assign(soll_id_value.c_str());
				holeType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeSymbolicThread;
				lines[0] = (NXString)symbolicThreadLengthSuffix;
				_preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->SetNthParameterSuffix(holeType, 2, lines);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the pitch prefix for a symbolic thread on a hole.
	id_name.assign("Drafting_SymbolicThread_Pitch_Prefix");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::HoleCalloutSettingsBuilder::Featuretype holeType;
			holeType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeSymbolicThread;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype> parameterTypes;
			parameterTypes = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetListOfParameters(holeType);
			int nth = 0;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype>::iterator parameterTypes_it;
			for (parameterTypes_it = parameterTypes.begin(); parameterTypes_it != parameterTypes.end(); parameterTypes_it++) {
				if (*parameterTypes_it == NXOpen::Annotations::HoleCalloutSettingsBuilder::ParametertypePitch) {
					break;
				}
				nth++;
			}
			std::vector<NXOpen::NXString> lines;
			lines = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetNthParameterPrefix(holeType, nth);
			string result;
			result = retrieveXml(string(lines[0].GetLocaleText()));
			ist_id_value.assign(result);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				string symbolicThreadPitchPrefix;
				symbolicThreadPitchPrefix.assign(soll_id_value.c_str());
				holeType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeSymbolicThread;
				lines[0] = (NXString)symbolicThreadPitchPrefix;
				_preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->SetNthParameterPrefix(holeType, 4, lines);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the pitch suffix for a symbolic thread on a hole.
	id_name.assign("Drafting_SymbolicThread_Pitch_Suffix");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::HoleCalloutSettingsBuilder::Featuretype holeType;
			holeType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeSymbolicThread;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype> parameterTypes;
			parameterTypes = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetListOfParameters(holeType);
			int nth = 0;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype>::iterator parameterTypes_it;
			for (parameterTypes_it = parameterTypes.begin(); parameterTypes_it != parameterTypes.end(); parameterTypes_it++) {
				if (*parameterTypes_it == NXOpen::Annotations::HoleCalloutSettingsBuilder::ParametertypePitch) {
					break;
				}
				nth++;
			}
			std::vector<NXOpen::NXString> lines;
			lines = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetNthParameterSuffix(holeType, nth);
			string result;
			result = retrieveXml(string(lines[0].GetLocaleText()));
			ist_id_value.assign(result);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				string symbolicThreadPitchSuffix;
				symbolicThreadPitchSuffix.assign(soll_id_value.c_str());
				holeType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeSymbolicThread;
				lines[0] = (NXString)symbolicThreadPitchSuffix;
				_preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->SetNthParameterSuffix(holeType, 4, lines);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the angle prefix for a symbolic thread on a hole.
	id_name.assign("Drafting_SymbolicThread_Angle_Prefix");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::HoleCalloutSettingsBuilder::Featuretype holeType;
			holeType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeSymbolicThread;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype> parameterTypes;
			parameterTypes = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetListOfParameters(holeType);
			int nth = 0;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype>::iterator parameterTypes_it;
			for (parameterTypes_it = parameterTypes.begin(); parameterTypes_it != parameterTypes.end(); parameterTypes_it++) {
				if (*parameterTypes_it == NXOpen::Annotations::HoleCalloutSettingsBuilder::ParametertypeAngle) {
					break;
				}
				nth++;
			}
			std::vector<NXOpen::NXString> lines;
			lines = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetNthParameterPrefix(holeType, nth);
			string result;
			result = retrieveXml(string(lines[0].GetLocaleText()));
			ist_id_value.assign(result);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				string symbolicThreadAnglePrefix;
				symbolicThreadAnglePrefix.assign(soll_id_value.c_str());
				holeType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeSymbolicThread;
				lines[0] = (NXString)symbolicThreadAnglePrefix;
				_preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->SetNthParameterPrefix(holeType, 5, lines);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the angle suffix for a symbolic thread on a hole.
	id_name.assign("Drafting_SymbolicThread_Angle_Suffix");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::HoleCalloutSettingsBuilder::Featuretype holeType;
			holeType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeSymbolicThread;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype> parameterTypes;
			parameterTypes = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetListOfParameters(holeType);
			int nth = 0;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype>::iterator parameterTypes_it;
			for (parameterTypes_it = parameterTypes.begin(); parameterTypes_it != parameterTypes.end(); parameterTypes_it++) {
				if (*parameterTypes_it == NXOpen::Annotations::HoleCalloutSettingsBuilder::ParametertypeAngle) {
					break;
				}
				nth++;
			}
			std::vector<NXOpen::NXString> lines;
			lines = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetNthParameterSuffix(holeType, nth);
			string result;
			result = retrieveXml(string(lines[0].GetLocaleText()));
			ist_id_value.assign(result);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				string symbolicThreadAngleSuffix;
				symbolicThreadAngleSuffix.assign(soll_id_value.c_str());
				holeType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeSymbolicThread;
				lines[0] = (NXString)symbolicThreadAngleSuffix;
				_preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->SetNthParameterSuffix(holeType, 5, lines);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the minor diameter prefix for a symbolic thread on a hole.
	id_name.assign("Drafting_SymbolicThread_MinorDiameter_Prefix");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::HoleCalloutSettingsBuilder::Featuretype holeType;
			holeType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeSymbolicThread;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype> parameterTypes;
			parameterTypes = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetListOfParameters(holeType);
			int nth = 0;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype>::iterator parameterTypes_it;
			for (parameterTypes_it = parameterTypes.begin(); parameterTypes_it != parameterTypes.end(); parameterTypes_it++) {
				if (*parameterTypes_it == NXOpen::Annotations::HoleCalloutSettingsBuilder::ParametertypeMinorDiameter) {
					break;
				}
				nth++;
			}
			std::vector<NXOpen::NXString> lines;
			lines = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetNthParameterPrefix(holeType, nth);
			string result;
			result = retrieveXml(string(lines[0].GetLocaleText()));
			ist_id_value.assign(result);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				string symbolicThreadMinorDiameterPrefix;
				symbolicThreadMinorDiameterPrefix.assign(soll_id_value.c_str());
				holeType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeSymbolicThread;
				lines[0] = (NXString)symbolicThreadMinorDiameterPrefix;
				_preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->SetNthParameterPrefix(holeType, 7, lines);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the minor diameter suffix for a symbolic thread on a hole.
	id_name.assign("Drafting_SymbolicThread_MinorDiameter_Suffix");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::HoleCalloutSettingsBuilder::Featuretype holeType;
			holeType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeSymbolicThread;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype> parameterTypes;
			parameterTypes = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetListOfParameters(holeType);
			int nth = 0;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype>::iterator parameterTypes_it;
			for (parameterTypes_it = parameterTypes.begin(); parameterTypes_it != parameterTypes.end(); parameterTypes_it++) {
				if (*parameterTypes_it == NXOpen::Annotations::HoleCalloutSettingsBuilder::ParametertypeMinorDiameter) {
					break;
				}
				nth++;
			}
			std::vector<NXOpen::NXString> lines;
			lines = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetNthParameterSuffix(holeType, nth);
			string result;
			result = retrieveXml(string(lines[0].GetLocaleText()));
			ist_id_value.assign(result);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				string symbolicThreadMinorDiameterSuffix;
				symbolicThreadMinorDiameterSuffix.assign(soll_id_value.c_str());
				holeType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeSymbolicThread;
				lines[0] = (NXString)symbolicThreadMinorDiameterSuffix;
				_preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->SetNthParameterSuffix(holeType, 7, lines);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the major diameter prefix for a symbolic thread on a hole.
	id_name.assign("Drafting_SymbolicThread_MajorDiameter_Prefix");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;_preferencesBuilder->Commit();
			NXOpen::Annotations::HoleCalloutSettingsBuilder::Featuretype holeType;
			holeType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeSymbolicThread;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype> parameterTypes;
			parameterTypes = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetListOfParameters(holeType);
			int nth = 0;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype>::iterator parameterTypes_it;
			for (parameterTypes_it = parameterTypes.begin(); parameterTypes_it != parameterTypes.end(); parameterTypes_it++) {
				if (*parameterTypes_it == NXOpen::Annotations::HoleCalloutSettingsBuilder::ParametertypeMajorDiameter) {
					break;
				}
				nth++;
			}
			std::vector<NXOpen::NXString> lines;
			lines = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetNthParameterPrefix(holeType, nth);
			string result;
			result = retrieveXml(string(lines[0].GetLocaleText()));
			ist_id_value.assign(result);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				string symbolicThreadMajorDiameterPrefix;
				symbolicThreadMajorDiameterPrefix.assign(soll_id_value.c_str());
				holeType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeSymbolicThread;
				lines[0] = (NXString)symbolicThreadMajorDiameterPrefix;
				_preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->SetNthParameterPrefix(holeType, 9, lines);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the major diameter suffix for a symbolic thread on a hole.
	id_name.assign("Drafting_SymbolicThread_MajorDiameter_Suffix");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::HoleCalloutSettingsBuilder::Featuretype holeType;
			holeType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeSymbolicThread;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype> parameterTypes;
			parameterTypes = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetListOfParameters(holeType);
			int nth = 0;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype>::iterator parameterTypes_it;
			for (parameterTypes_it = parameterTypes.begin(); parameterTypes_it != parameterTypes.end(); parameterTypes_it++) {
				if (*parameterTypes_it == NXOpen::Annotations::HoleCalloutSettingsBuilder::ParametertypeMajorDiameter) {
					break;
				}
				nth++;
			}
			std::vector<NXOpen::NXString> lines;
			lines = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetNthParameterSuffix(holeType, nth);
			string result;
			result = retrieveXml(string(lines[0].GetLocaleText()));
			ist_id_value.assign(result);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				string symbolicThreadMajorDiameterSuffix;
				symbolicThreadMajorDiameterSuffix.assign(soll_id_value.c_str());
				holeType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeSymbolicThread;
				lines[0] = (NXString)symbolicThreadMajorDiameterSuffix;
				_preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->SetNthParameterSuffix(holeType, 9, lines);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the tap drill size prefix for a symbolic thread on a hole.
	id_name.assign("Drafting_SymbolicThread_TapDrillSize_Prefix");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::HoleCalloutSettingsBuilder::Featuretype holeType;
			holeType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeSymbolicThread;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype> parameterTypes;
			parameterTypes = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetListOfParameters(holeType);
			int nth = 0;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype>::iterator parameterTypes_it;
			for (parameterTypes_it = parameterTypes.begin(); parameterTypes_it != parameterTypes.end(); parameterTypes_it++) {
				if (*parameterTypes_it == NXOpen::Annotations::HoleCalloutSettingsBuilder::ParametertypeTapDrillDiameter) {
					break;
				}
				nth++;
			}
			std::vector<NXOpen::NXString> lines;
			lines = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetNthParameterPrefix(holeType, nth);
			string result;
			result = retrieveXml(string(lines[0].GetLocaleText()));
			ist_id_value.assign(result);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				string symbolicThreadTapDrillSizePrefix;
				symbolicThreadTapDrillSizePrefix.assign(soll_id_value.c_str());
				holeType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeSymbolicThread;
				lines[0] = (NXString)symbolicThreadTapDrillSizePrefix;
				_preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->SetNthParameterPrefix(holeType, 10, lines);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the tap drill size suffix for a symbolic thread on a hole.
	id_name.assign("Drafting_SymbolicThread_TapDrillSize_Suffix");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::HoleCalloutSettingsBuilder::Featuretype holeType;
			holeType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeSymbolicThread;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype> parameterTypes;
			parameterTypes = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetListOfParameters(holeType);
			int nth = 0;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype>::iterator parameterTypes_it;
			for (parameterTypes_it = parameterTypes.begin(); parameterTypes_it != parameterTypes.end(); parameterTypes_it++) {
				if (*parameterTypes_it == NXOpen::Annotations::HoleCalloutSettingsBuilder::ParametertypeTapDrillDiameter) {
					break;
				}
				nth++;
			}
			std::vector<NXOpen::NXString> lines;
			lines = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetNthParameterSuffix(holeType, nth);
			string result;
			result = retrieveXml(string(lines[0].GetLocaleText()));
			ist_id_value.assign(result);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				string symbolicThreadTapDrillSizeSuffix;
				symbolicThreadTapDrillSizeSuffix.assign(soll_id_value.c_str());
				holeType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeSymbolicThread;
				lines[0] = (NXString)symbolicThreadTapDrillSizeSuffix;
				_preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->SetNthParameterSuffix(holeType, 10, lines);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the shaft size prefix for a symbolic thread on a cylinder.
	id_name.assign("Drafting_SymbolicThread_ShaftSize_Prefix");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::HoleCalloutSettingsBuilder::Featuretype holeType;
			holeType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeSymbolicThread;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype> parameterTypes;
			parameterTypes = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetListOfParameters(holeType);
			int nth = 0;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype>::iterator parameterTypes_it;
			for (parameterTypes_it = parameterTypes.begin(); parameterTypes_it != parameterTypes.end(); parameterTypes_it++) {
				if (*parameterTypes_it == NXOpen::Annotations::HoleCalloutSettingsBuilder::ParametertypeShaftSize) {
					break;
				}
				nth++;
			}
			std::vector<NXOpen::NXString> lines;
			lines = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetNthParameterPrefix(holeType, nth);
			string result;
			result = retrieveXml(string(lines[0].GetLocaleText()));
			ist_id_value.assign(result);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				string symbolicThreadShaftSizePrefix;
				symbolicThreadShaftSizePrefix.assign(soll_id_value.c_str());
				holeType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeSymbolicThread;
				lines[0] = (NXString)symbolicThreadShaftSizePrefix;
				_preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->SetNthParameterPrefix(holeType, 11, lines);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the shaft size suffix for a symbolic thread on a cylinder.
	id_name.assign("Drafting_SymbolicThread_ShaftSize_Suffix");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::HoleCalloutSettingsBuilder::Featuretype holeType;
			holeType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeSymbolicThread;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype> parameterTypes;
			parameterTypes = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetListOfParameters(holeType);
			int nth = 0;
			std::vector<NXOpen::Annotations::HoleCalloutSettingsBuilder::Parametertype>::iterator parameterTypes_it;
			for (parameterTypes_it = parameterTypes.begin(); parameterTypes_it != parameterTypes.end(); parameterTypes_it++) {
				if (*parameterTypes_it == NXOpen::Annotations::HoleCalloutSettingsBuilder::ParametertypeShaftSize) {
					break;
				}
				nth++;
			}
			std::vector<NXOpen::NXString> lines;
			lines = _preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->GetNthParameterSuffix(holeType, nth);
			string result;
			result = retrieveXml(string(lines[0].GetLocaleText()));
			ist_id_value.assign(result);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				string symbolicThreadShaftSizeSuffix;
				symbolicThreadShaftSizeSuffix.assign(soll_id_value.c_str());
				holeType = NXOpen::Annotations::HoleCalloutSettingsBuilder::FeaturetypeSymbolicThread;
				lines[0] = (NXString)symbolicThreadShaftSizeSuffix;
				_preferencesBuilder->AnnotationStyle()->HoleCalloutSettings()->SetNthParameterSuffix(holeType, 11, lines);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- STOPP - %s --- \n", routineName.c_str());
}

/*
File - Preferences - Drafting - Annotation - GDT -> Repair these preferences.
*/
void repair_DraftingStandard_Annotation_GDT_prefs(NXOpen::Drafting::PreferencesBuilder *_preferencesBuilder, en_nx_dpv* _nx_dpv, Session * _theSession, Part* _workPart) {
	routineName.assign("repair_DraftingStandard_Annotation_GDT_prefs");
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- START - %s --- \n", routineName.c_str());

	//This option specifies the color of the geometric tolerance symbol.
	id_name.assign("Drafting_gdtColor");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::NXColor *gdtSymbolColor;
			gdtSymbolColor = _preferencesBuilder->AnnotationStyle()->SymbolStyle()->GdtSymbolColor();
			int gdtSymbolColorIndex;
			gdtSymbolColorIndex = gdtSymbolColor->Handle();
			ist_id_value.assign(convert_to_string(gdtSymbolColorIndex));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				gdtSymbolColorIndex = convert_to_int(soll_id_value);
				gdtSymbolColor = _workPart->Colors()->Find(gdtSymbolColorIndex);
				_preferencesBuilder->AnnotationStyle()->SymbolStyle()->SetGdtSymbolColor(gdtSymbolColor);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the line font for the geometric tolerance symbol.
	id_name.assign("Drafting_gdtFont");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::DisplayableObject::ObjectFont gdtSymbolFont;
			gdtSymbolFont = _preferencesBuilder->AnnotationStyle()->SymbolStyle()->GdtSymbolFont();
			int int_gdtSymbolFont;
			if (gdtSymbolFont == NXOpen::DisplayableObject::ObjectFontSolid) {
				int_gdtSymbolFont = 1;
			}
			else if (gdtSymbolFont == NXOpen::DisplayableObject::ObjectFontDashed) {
				int_gdtSymbolFont = 2;
			}
			else if (gdtSymbolFont == NXOpen::DisplayableObject::ObjectFontPhantom) {
				int_gdtSymbolFont = 3;
			}
			else if (gdtSymbolFont == NXOpen::DisplayableObject::ObjectFontCenterline) {
				int_gdtSymbolFont = 4;
			}
			else if (gdtSymbolFont == NXOpen::DisplayableObject::ObjectFontDotted) {
				int_gdtSymbolFont = 5;
			}
			else if (gdtSymbolFont == NXOpen::DisplayableObject::ObjectFontLongDashed) {
				int_gdtSymbolFont = 6;
			}
			else if (gdtSymbolFont == NXOpen::DisplayableObject::ObjectFontDottedDashed) {
				int_gdtSymbolFont = 7;
			}
			ist_id_value.assign(convert_to_string(int_gdtSymbolFont));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_gdtSymbolFont = convert_to_int(soll_id_value);
				if (int_gdtSymbolFont == 1) {
					gdtSymbolFont = NXOpen::DisplayableObject::ObjectFontSolid;
				}
				else if (int_gdtSymbolFont == 2) {
					gdtSymbolFont = NXOpen::DisplayableObject::ObjectFontDashed;
				}
				else if (int_gdtSymbolFont == 3) {
					gdtSymbolFont = NXOpen::DisplayableObject::ObjectFontPhantom;
				}
				else if (int_gdtSymbolFont == 4) {
					gdtSymbolFont = NXOpen::DisplayableObject::ObjectFontCenterline;
				}
				else if (int_gdtSymbolFont == 5) {
					gdtSymbolFont = NXOpen::DisplayableObject::ObjectFontDotted;
				}
				else if (int_gdtSymbolFont == 6) {
					gdtSymbolFont = NXOpen::DisplayableObject::ObjectFontLongDashed;
				}
				else if (int_gdtSymbolFont == 7) {
					gdtSymbolFont = NXOpen::DisplayableObject::ObjectFontDottedDashed;
				}
				_preferencesBuilder->AnnotationStyle()->SymbolStyle()->SetGdtSymbolFont(gdtSymbolFont);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the line width for the geometric tolerance symbol.
	id_name.assign("Drafting_gdtWidth");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::LineWidth gdtSymbolWidth;
			//gdtSymbolWidth = _workPart->Annotations()->Preferences()->GetSymbolPreferences()->GetGdtSymbolCfw().Width;
			gdtSymbolWidth = _preferencesBuilder->AnnotationStyle()->SymbolStyle()->GdtSymbolWidth();
			int int_gdtSymbolWidth;
			if (gdtSymbolWidth == NXOpen::Annotations::LineWidthNormal) {
				//if (g_nxLog_en_nx_manage_drawing_standards) nxLog("%s - %s - LineWidthNormal \n", routineName.c_str(), id_name.c_str());
				int_gdtSymbolWidth = 1;
			}
			else if (gdtSymbolWidth == NXOpen::Annotations::LineWidthThick) {
				//if (g_nxLog_en_nx_manage_drawing_standards) nxLog("%s - %s - LineWidthThick \n", routineName.c_str(), id_name.c_str());
				int_gdtSymbolWidth = 2;
			}
			else if (gdtSymbolWidth == NXOpen::Annotations::LineWidthThin) {
				//if (g_nxLog_en_nx_manage_drawing_standards) nxLog("%s - %s - LineWidthThin \n", routineName.c_str(), id_name.c_str());
				int_gdtSymbolWidth = 3;
			}
			else if (gdtSymbolWidth == NXOpen::Annotations::LineWidthOne) {
				//if (g_nxLog_en_nx_manage_drawing_standards) nxLog("%s - %s - LineWidthOne \n", routineName.c_str(), id_name.c_str());
				int_gdtSymbolWidth = 6;
			}
			else if (gdtSymbolWidth == NXOpen::Annotations::LineWidthTwo) {
				//if (g_nxLog_en_nx_manage_drawing_standards) nxLog("%s - %s - LineWidthTwo \n", routineName.c_str(), id_name.c_str());
				int_gdtSymbolWidth = 7;
			}
			else if (gdtSymbolWidth == NXOpen::Annotations::LineWidthThree) {
				//if (g_nxLog_en_nx_manage_drawing_standards) nxLog("%s - %s - LineWidthThree \n", routineName.c_str(), id_name.c_str());
				int_gdtSymbolWidth = 8;
			}
			else if (gdtSymbolWidth == NXOpen::Annotations::LineWidthFour) {
				//if (g_nxLog_en_nx_manage_drawing_standards) nxLog("%s - %s - LineWidthFour \n", routineName.c_str(), id_name.c_str());
				int_gdtSymbolWidth = 9;
			}
			else if (gdtSymbolWidth == NXOpen::Annotations::LineWidthFive) {
				//if (g_nxLog_en_nx_manage_drawing_standards) nxLog("%s - %s - LineWidthFive \n", routineName.c_str(), id_name.c_str());
				int_gdtSymbolWidth = 10;
			}
			else if (gdtSymbolWidth == NXOpen::Annotations::LineWidthSix) {
				//if (g_nxLog_en_nx_manage_drawing_standards) nxLog("%s - %s - LineWidthSix \n", routineName.c_str(), id_name.c_str());
				int_gdtSymbolWidth = 11;
			}
			else if (gdtSymbolWidth == NXOpen::Annotations::LineWidthSeven) {
				//if (g_nxLog_en_nx_manage_drawing_standards) nxLog("%s - %s - LineWidthSeven \n", routineName.c_str(), id_name.c_str());
				int_gdtSymbolWidth = 12;
			}
			else if (gdtSymbolWidth == NXOpen::Annotations::LineWidthEight) {
				//if (g_nxLog_en_nx_manage_drawing_standards) nxLog("%s - %s - LineWidthEight \n", routineName.c_str(), id_name.c_str());
				int_gdtSymbolWidth = 13;
			}
			else if (gdtSymbolWidth == NXOpen::Annotations::LineWidthNine) {
				//if (g_nxLog_en_nx_manage_drawing_standards) nxLog("%s - %s - LineWidthNine \n", routineName.c_str(), id_name.c_str());
				int_gdtSymbolWidth = 14;
			}
			else {
				//if (g_nxLog_en_nx_manage_drawing_standards) nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
				int_gdtSymbolWidth = -999;
			}
			//string id_name_tmp;
			//std::map<const std::string, std::string>::iterator it_tmp;
			//if (int_gdtSymbolWidth == 1) {
			//	id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
			//	it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
			//	int_gdtSymbolWidth = convert_to_int(it_tmp->second);
			//}
			//if (int_gdtSymbolWidth == 2) {
			//	id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
			//	it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
			//	int_gdtSymbolWidth = convert_to_int(it_tmp->second);
			//}
			//if (int_gdtSymbolWidth == 3) {
			//	id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
			//	it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
			//	int_gdtSymbolWidth = convert_to_int(it_tmp->second);
			//}
			//_nx_dpv->soll_dpv_map.find(id_name)->second = convert_to_string( int_gdtSymbolWidth );
			//if (g_nxLog_en_nx_manage_drawing_standards) nxLog("%s - %s - =%d \n", routineName.c_str(), id_name.c_str(), int_gdtSymbolWidth);
			ist_id_value.assign(convert_to_string(int_gdtSymbolWidth));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_gdtSymbolWidth = convert_to_int(soll_id_value);
				//if (g_nxLog_en_nx_manage_drawing_standards) nxLog("%s - %s - input - int_gdtSymbolWidth=%d \n", int_gdtSymbolWidth);
				NXOpen::Annotations::LineWidth gdtSymbolWidth;
				if (int_gdtSymbolWidth == 1) {
					//if (g_nxLog_en_nx_manage_drawing_standards) nxLog("%s - %s - LineWidthNormal \n", routineName.c_str(), id_name.c_str());
					gdtSymbolWidth = NXOpen::Annotations::LineWidthNormal;
					//id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
					//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					//gdtSymbolWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
				}
				else if (int_gdtSymbolWidth == 2) {
					//if (g_nxLog_en_nx_manage_drawing_standards) nxLog("%s - %s - LineWidthThick \n", routineName.c_str(), id_name.c_str());
					gdtSymbolWidth = NXOpen::Annotations::LineWidthThick;
					//id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
					//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					//gdtSymbolWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
				}
				else if (int_gdtSymbolWidth == 3) {
					//if (g_nxLog_en_nx_manage_drawing_standards) nxLog("%s - %s - LineWidthThin \n", routineName.c_str(), id_name.c_str());
					gdtSymbolWidth = NXOpen::Annotations::LineWidthThin;
					//id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
					//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					//gdtSymbolWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
				}
				else if (int_gdtSymbolWidth == 6) {
					//if (g_nxLog_en_nx_manage_drawing_standards) nxLog("%s - %s - LineWidthOne \n", routineName.c_str(), id_name.c_str());
					gdtSymbolWidth = NXOpen::Annotations::LineWidthOne;
				}
				else if (int_gdtSymbolWidth == 7) {
					//if (g_nxLog_en_nx_manage_drawing_standards) nxLog("%s - %s - LineWidthTwo \n", routineName.c_str(), id_name.c_str());
					gdtSymbolWidth = NXOpen::Annotations::LineWidthTwo;
				}
				else if (int_gdtSymbolWidth == 8) {
					//if (g_nxLog_en_nx_manage_drawing_standards) nxLog("%s - %s - LineWidthThree \n", routineName.c_str(), id_name.c_str());
					gdtSymbolWidth = NXOpen::Annotations::LineWidthThree;
				}
				else if (int_gdtSymbolWidth == 9) {
					//if (g_nxLog_en_nx_manage_drawing_standards) nxLog("%s - %s - LineWidthFour \n", routineName.c_str(), id_name.c_str());
					gdtSymbolWidth = NXOpen::Annotations::LineWidthFour;
				}
				else if (int_gdtSymbolWidth == 10) {
					//if (g_nxLog_en_nx_manage_drawing_standards) nxLog("%s - %s - LineWidthFive \n", routineName.c_str(), id_name.c_str());
					gdtSymbolWidth = NXOpen::Annotations::LineWidthFive;
				}
				else if (int_gdtSymbolWidth == 11) {
					//if (g_nxLog_en_nx_manage_drawing_standards) nxLog("%s - %s - LineWidthSix \n", routineName.c_str(), id_name.c_str());
					gdtSymbolWidth = NXOpen::Annotations::LineWidthSix;
				}
				else if (int_gdtSymbolWidth == 12) {
					//if (g_nxLog_en_nx_manage_drawing_standards) nxLog("%s - %s - LineWidthSeven \n", routineName.c_str(), id_name.c_str());
					gdtSymbolWidth = NXOpen::Annotations::LineWidthSeven;
				}
				else if (int_gdtSymbolWidth == 13) {
					//if (g_nxLog_en_nx_manage_drawing_standards) nxLog("%s - %s - LineWidthEight \n", routineName.c_str(), id_name.c_str());
					gdtSymbolWidth = NXOpen::Annotations::LineWidthEight;
				}
				else if (int_gdtSymbolWidth == 14) {
					//if (g_nxLog_en_nx_manage_drawing_standards) nxLog("%s - %s - LineWidthNine \n", routineName.c_str(), id_name.c_str());
					gdtSymbolWidth = NXOpen::Annotations::LineWidthNine;
				}
				_preferencesBuilder->AnnotationStyle()->SymbolStyle()->SetGdtSymbolWidth(gdtSymbolWidth);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies what additional text (if any) on an FCF will be underlined.
	id_name.assign("Drafting_underlineAdditionalText");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::SymbolStyleBuilder::FcfTextUnderlineOption underlineTextOption;
			underlineTextOption = _preferencesBuilder->AnnotationStyle()->SymbolStyle()->FcfAdditionalTextUnderline();
			int int_underlineTextOption;
			int_underlineTextOption = (int)underlineTextOption;
			ist_id_value.assign(convert_to_string(int_underlineTextOption));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_underlineTextOption = convert_to_int(soll_id_value);
				underlineTextOption = (NXOpen::Annotations::SymbolStyleBuilder::FcfTextUnderlineOption)int_underlineTextOption;
				_preferencesBuilder->AnnotationStyle()->SymbolStyle()->SetFcfAdditionalTextUnderline(underlineTextOption);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- STOPP - %s --- \n", routineName.c_str());
}

/*
File - Preferences - Drafting - Annotation - Feature Control Frame -> Repair these preferences.
*/
void repair_DraftingStandard_Annotation_FeatureControlFrame_prefs(NXOpen::Drafting::PreferencesBuilder *_preferencesBuilder, en_nx_dpv* _nx_dpv, Session * _theSession, Part* _workPart) {
	routineName.assign("repair_DraftingStandard_Annotation_FeatureControlFrame_prefs");
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- START - %s --- \n", routineName.c_str());
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- STOPP - %s --- \n", routineName.c_str());
}

/*
File - Preferences - Drafting - Annotation - Balloon -> Repair these preferences.
*/
void repair_DraftingStandard_Annotation_Balloon_prefs(NXOpen::Drafting::PreferencesBuilder *_preferencesBuilder, en_nx_dpv* _nx_dpv, Session * _theSession, Part* _workPart) {
	routineName.assign("repair_DraftingStandard_Annotation_Balloon_prefs");
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- START - %s --- \n", routineName.c_str());

	//This option specifies the color of the balloon.
	if (_nx_dpv->usedUnitValue.compare("1") == 0) {
		id_name.assign("Drafting_idSymbolColor_MU");
	}
	else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
		id_name.assign("Drafting_idSymbolColor_EU");
	}
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::NXColor * idSymbolColor;
			idSymbolColor = _preferencesBuilder->AnnotationStyle()->SymbolStyle()->IdSymbolColor();
			int idSymbolColorIndex;
			idSymbolColorIndex = idSymbolColor->Handle();
			ist_id_value.assign(convert_to_string(idSymbolColorIndex));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				idSymbolColorIndex = convert_to_int(soll_id_value);
				idSymbolColor = _workPart->Colors()->Find(idSymbolColorIndex);
				_preferencesBuilder->AnnotationStyle()->SymbolStyle()->SetIdSymbolColor(idSymbolColor);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the line font for the balloon.
	id_name.assign("Drafting_idSymbolFont");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::DisplayableObject::ObjectFont idSymbolFont;
			idSymbolFont = _preferencesBuilder->AnnotationStyle()->SymbolStyle()->IdSymbolFont();
			int int_idSymbolFont;
			if (idSymbolFont == NXOpen::DisplayableObject::ObjectFontSolid) {
				int_idSymbolFont = 1;
			}
			else if (idSymbolFont == NXOpen::DisplayableObject::ObjectFontDashed) {
				int_idSymbolFont = 2;
			}
			else if (idSymbolFont == NXOpen::DisplayableObject::ObjectFontPhantom) {
				int_idSymbolFont = 3;
			}
			else if (idSymbolFont == NXOpen::DisplayableObject::ObjectFontCenterline) {
				int_idSymbolFont = 4;
			}
			else if (idSymbolFont == NXOpen::DisplayableObject::ObjectFontDotted) {
				int_idSymbolFont = 5;
			}
			else if (idSymbolFont == NXOpen::DisplayableObject::ObjectFontLongDashed) {
				int_idSymbolFont = 6;
			}
			else if (idSymbolFont == NXOpen::DisplayableObject::ObjectFontDottedDashed) {
				int_idSymbolFont = 7;
			}
			ist_id_value.assign(convert_to_string(int_idSymbolFont));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_idSymbolFont = convert_to_int(soll_id_value);
				if (int_idSymbolFont == 1) {
					idSymbolFont = NXOpen::DisplayableObject::ObjectFontSolid;
				}
				else if (int_idSymbolFont == 2) {
					idSymbolFont = NXOpen::DisplayableObject::ObjectFontDashed;
				}
				else if (int_idSymbolFont == 3) {
					idSymbolFont = NXOpen::DisplayableObject::ObjectFontPhantom;
				}
				else if (int_idSymbolFont == 4) {
					idSymbolFont = NXOpen::DisplayableObject::ObjectFontCenterline;
				}
				else if (int_idSymbolFont == 5) {
					idSymbolFont = NXOpen::DisplayableObject::ObjectFontDotted;
				}
				else if (int_idSymbolFont == 6) {
					idSymbolFont = NXOpen::DisplayableObject::ObjectFontLongDashed;
				}
				else if (int_idSymbolFont == 7) {
					idSymbolFont = NXOpen::DisplayableObject::ObjectFontDottedDashed;
				}
				_preferencesBuilder->AnnotationStyle()->SymbolStyle()->SetIdSymbolFont(idSymbolFont);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the line width for the balloon.
	id_name.assign("Drafting_idSymbolWidth");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			//_preferencesBuilder->InheritSettingsFromCustomerDefault();
			//_preferencesBuilder->InheritSettingsFromPreferences();
			//_preferencesBuilder->initialize();
			//_preferencesBuilder->GetObject();
			NXOpen::Annotations::LineWidth idSymbolWidth;
			NXOpen::Annotations::SymbolStyleBuilder *symbolStyleBuilder;
			symbolStyleBuilder = _preferencesBuilder->AnnotationStyle()->SymbolStyle();
			//idSymbolWidth = _preferencesBuilder->AnnotationStyle()->SymbolStyle()->IdSymbolWidth();
			idSymbolWidth = symbolStyleBuilder->IdSymbolWidth();

			//_preferencesBuilder->GetObject();

			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("get - Drafting_idSymbolWidth  IdSymbolWidth = %d \n", idSymbolWidth);
			idSymbolWidth = _workPart->Annotations()->Preferences()->GetSymbolPreferences()->GetIdSymbolCfw().Width;
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("get - Drafting_idSymbolWidth  GetIdSymbolCfw().Width = %d \n", idSymbolWidth);
			int int_idSymbolWidth;
			if (idSymbolWidth == NXOpen::Annotations::LineWidthNormal) {
				int_idSymbolWidth = 1;
			}
			else if (idSymbolWidth == NXOpen::Annotations::LineWidthThick) {
				int_idSymbolWidth = 2;
			}
			else if (idSymbolWidth == NXOpen::Annotations::LineWidthThin) {
				int_idSymbolWidth = 3;
			}
			else if (idSymbolWidth == NXOpen::Annotations::LineWidthOne) {
				int_idSymbolWidth = 6;
			}
			else if (idSymbolWidth == NXOpen::Annotations::LineWidthTwo) {
				int_idSymbolWidth = 7;
			}
			else if (idSymbolWidth == NXOpen::Annotations::LineWidthThree) {
				int_idSymbolWidth = 8;
			}
			else if (idSymbolWidth == NXOpen::Annotations::LineWidthFour) {
				int_idSymbolWidth = 9;
			}
			else if (idSymbolWidth == NXOpen::Annotations::LineWidthFive) {
				int_idSymbolWidth = 10;
			}
			else if (idSymbolWidth == NXOpen::Annotations::LineWidthSix) {
				int_idSymbolWidth = 11;
			}
			else if (idSymbolWidth == NXOpen::Annotations::LineWidthSeven) {
				int_idSymbolWidth = 12;
			}
			else if (idSymbolWidth == NXOpen::Annotations::LineWidthEight) {
				int_idSymbolWidth = 13;
			}
			else if (idSymbolWidth == NXOpen::Annotations::LineWidthNine) {
				int_idSymbolWidth = 14;
			}
			else {
				int_idSymbolWidth = -999;
			}
			//string id_name_tmp;
			//std::map<const std::string, std::string>::iterator it_tmp;
			//if (int_idSymbolWidth == 1) {
			//	id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
			//	it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
			//	int_idSymbolWidth = convert_to_int(it_tmp->second);
			//}
			//if (int_idSymbolWidth == 2) {
			//	id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
			//	it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
			//	int_idSymbolWidth = convert_to_int(it_tmp->second);
			//}
			//if (int_idSymbolWidth == 3) {
			//	id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
			//	it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
			//	int_idSymbolWidth = convert_to_int(it_tmp->second);
			//}
			//_nx_dpv->soll_dpv_map.find(id_name)->second = convert_to_string( int_idSymbolWidth );
			ist_id_value.assign(convert_to_string(int_idSymbolWidth));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_idSymbolWidth = convert_to_int(soll_id_value);
				if (int_idSymbolWidth == 1) {
					idSymbolWidth = NXOpen::Annotations::LineWidthNormal;
					//id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
					//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					//idSymbolWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
				}
				else if (int_idSymbolWidth == 2) {
					idSymbolWidth = NXOpen::Annotations::LineWidthThick;
					//id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
					//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					//idSymbolWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
				}
				else if (int_idSymbolWidth == 3) {
					idSymbolWidth = NXOpen::Annotations::LineWidthThin;
					//id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
					//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					//idSymbolWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
				}
				else if (int_idSymbolWidth == 6) {
					idSymbolWidth = NXOpen::Annotations::LineWidthOne;
				}
				else if (int_idSymbolWidth == 7) {
					idSymbolWidth = NXOpen::Annotations::LineWidthTwo;
				}
				else if (int_idSymbolWidth == 8) {
					idSymbolWidth = NXOpen::Annotations::LineWidthThree;
				}
				else if (int_idSymbolWidth == 9) {
					idSymbolWidth = NXOpen::Annotations::LineWidthFour;
				}
				else if (int_idSymbolWidth == 10) {
					idSymbolWidth = NXOpen::Annotations::LineWidthFive;
				}
				else if (int_idSymbolWidth == 11) {
					idSymbolWidth = NXOpen::Annotations::LineWidthSix;
				}
				else if (int_idSymbolWidth == 12) {
					idSymbolWidth = NXOpen::Annotations::LineWidthSeven;
				}
				else if (int_idSymbolWidth == 13) {
					idSymbolWidth = NXOpen::Annotations::LineWidthEight;
				}
				else if (int_idSymbolWidth == 14) {
					idSymbolWidth = NXOpen::Annotations::LineWidthNine;
				}
				_preferencesBuilder->AnnotationStyle()->SymbolStyle()->SetIdSymbolWidth(idSymbolWidth);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not the leader will attach to a balloon vertex when the leader type is Without Stub and balloon type is Triangle Up, Triangle Down, Square, Divided Square, Hexagon, or Divided Hexagon.
	id_name.assign("Drafting_attachToIdSymbolVertex");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			bool attachToldSymbolVertex;
			attachToldSymbolVertex = _preferencesBuilder->AnnotationStyle()->SymbolStyle()->AttachToIdSymbolVertex();
			ist_id_value.assign(convert_to_string(attachToldSymbolVertex));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				attachToldSymbolVertex = convert_to_bool(soll_id_value);
				_preferencesBuilder->AnnotationStyle()->SymbolStyle()->SetAttachToIdSymbolVertex(attachToldSymbolVertex);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the line width for the balloon.
	if (_nx_dpv->usedUnitValue.compare("1") == 0) {
		id_name.assign("Drafting_idSymbolSize_MU");
	}
	else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
		id_name.assign("Drafting_idSymbolSize_EU");
	}
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double idSymbolSize;
			idSymbolSize = _preferencesBuilder->AnnotationStyle()->SymbolStyle()->IdSymbolSize();
			ist_id_value.assign(convert_to_string(idSymbolSize));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				idSymbolSize = convert_to_double(soll_id_value);
				_preferencesBuilder->AnnotationStyle()->SymbolStyle()->SetIdSymbolSize(idSymbolSize);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- STOPP - %s --- \n", routineName.c_str());
}

/*
File - Preferences - Drafting - Annotation - Surface Finish Symbol -> Repair these preferences.
*/
void repair_DraftingStandard_Annotation_SurfaceFinishSymbol_prefs(NXOpen::Drafting::PreferencesBuilder *_preferencesBuilder, en_nx_dpv* _nx_dpv, Session * _theSession, Part* _workPart) {
	routineName.assign("repair_DraftingStandard_Annotation_SurfaceFinishSymbol_prefs");
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- START - %s --- \n", routineName.c_str());

	//This option specifies the color of the surface finish symbol.
	id_name.assign("Drafting_SFsymbolColor");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::NXColor *surfaceFinishColor;
			surfaceFinishColor = _preferencesBuilder->AnnotationStyle()->SymbolStyle()->SurfaceFinishColor();
			int surfaceFinishColorIndex;
			surfaceFinishColorIndex = surfaceFinishColor->Handle();
			ist_id_value.assign(convert_to_string(surfaceFinishColorIndex));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				surfaceFinishColorIndex = convert_to_int(soll_id_value);
				surfaceFinishColor = _workPart->Colors()->Find(surfaceFinishColorIndex);
				_preferencesBuilder->AnnotationStyle()->SymbolStyle()->SetSurfaceFinishColor(surfaceFinishColor);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the line font for the surface finish symbol.
	id_name.assign("Drafting_SFsymbolLineFont");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::DisplayableObject::ObjectFont surfaceFinishFont;
			surfaceFinishFont = _preferencesBuilder->AnnotationStyle()->SymbolStyle()->SurfaceFinishFont();
			int int_surfaceFinishFont;
			if (surfaceFinishFont == NXOpen::DisplayableObject::ObjectFontSolid) {
				int_surfaceFinishFont = 1;
			}
			else if (surfaceFinishFont == NXOpen::DisplayableObject::ObjectFontDashed) {
				int_surfaceFinishFont = 2;
			}
			else if (surfaceFinishFont == NXOpen::DisplayableObject::ObjectFontPhantom) {
				int_surfaceFinishFont = 3;
			}
			else if (surfaceFinishFont == NXOpen::DisplayableObject::ObjectFontCenterline) {
				int_surfaceFinishFont = 4;
			}
			else if (surfaceFinishFont == NXOpen::DisplayableObject::ObjectFontDotted) {
				int_surfaceFinishFont = 5;
			}
			else if (surfaceFinishFont == NXOpen::DisplayableObject::ObjectFontLongDashed) {
				int_surfaceFinishFont = 6;
			}
			else if (surfaceFinishFont == NXOpen::DisplayableObject::ObjectFontDottedDashed) {
				int_surfaceFinishFont = 7;
			}
			ist_id_value.assign(convert_to_string(int_surfaceFinishFont));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_surfaceFinishFont = convert_to_int(soll_id_value);
				if (int_surfaceFinishFont == 1) {
					surfaceFinishFont = NXOpen::DisplayableObject::ObjectFontSolid;
				}
				else if (int_surfaceFinishFont == 2) {
					surfaceFinishFont = NXOpen::DisplayableObject::ObjectFontDashed;
				}
				else if (int_surfaceFinishFont == 3) {
					surfaceFinishFont = NXOpen::DisplayableObject::ObjectFontPhantom;
				}
				else if (int_surfaceFinishFont == 4) {
					surfaceFinishFont = NXOpen::DisplayableObject::ObjectFontCenterline;
				}
				else if (int_surfaceFinishFont == 5) {
					surfaceFinishFont = NXOpen::DisplayableObject::ObjectFontDotted;
				}
				else if (int_surfaceFinishFont == 6) {
					surfaceFinishFont = NXOpen::DisplayableObject::ObjectFontLongDashed;
				}
				else if (int_surfaceFinishFont == 7) {
					surfaceFinishFont = NXOpen::DisplayableObject::ObjectFontDottedDashed;
				}
				_preferencesBuilder->AnnotationStyle()->SymbolStyle()->SetSurfaceFinishFont(surfaceFinishFont);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the line width for the surface finish symbol.
	id_name.assign("Drafting_SFsymbolLineWidth");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::LineWidth surfaceFinishWidth;
			surfaceFinishWidth = _preferencesBuilder->AnnotationStyle()->SymbolStyle()->SurfaceFinishWidth();
			int int_surfaceFinishWidth;
			if (surfaceFinishWidth == NXOpen::Annotations::LineWidthNormal) {
				int_surfaceFinishWidth = 1;
			}
			else if (surfaceFinishWidth == NXOpen::Annotations::LineWidthThick) {
				int_surfaceFinishWidth = 2;
			}
			else if (surfaceFinishWidth == NXOpen::Annotations::LineWidthThin) {
				int_surfaceFinishWidth = 3;
			}
			else if (surfaceFinishWidth == NXOpen::Annotations::LineWidthOne) {
				int_surfaceFinishWidth = 6;
			}
			else if (surfaceFinishWidth == NXOpen::Annotations::LineWidthTwo) {
				int_surfaceFinishWidth = 7;
			}
			else if (surfaceFinishWidth == NXOpen::Annotations::LineWidthThree) {
				int_surfaceFinishWidth = 8;
			}
			else if (surfaceFinishWidth == NXOpen::Annotations::LineWidthFour) {
				int_surfaceFinishWidth = 9;
			}
			else if (surfaceFinishWidth == NXOpen::Annotations::LineWidthFive) {
				int_surfaceFinishWidth = 10;
			}
			else if (surfaceFinishWidth == NXOpen::Annotations::LineWidthSix) {
				int_surfaceFinishWidth = 11;
			}
			else if (surfaceFinishWidth == NXOpen::Annotations::LineWidthSeven) {
				int_surfaceFinishWidth = 12;
			}
			else if (surfaceFinishWidth == NXOpen::Annotations::LineWidthEight) {
				int_surfaceFinishWidth = 13;
			}
			else if (surfaceFinishWidth == NXOpen::Annotations::LineWidthNine) {
				int_surfaceFinishWidth = 14;
			}
			//string id_name_tmp;
			//std::map<const std::string, std::string>::iterator it_tmp;
			//if (int_surfaceFinishWidth == 1) {
			//	id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
			//	it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
			//	int_surfaceFinishWidth = convert_to_int(it_tmp->second);
			//}
			//if (int_surfaceFinishWidth == 2) {
			//	id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
			//	it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
			//	int_surfaceFinishWidth = convert_to_int(it_tmp->second);
			//}
			//if (int_surfaceFinishWidth == 3) {
			//	id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
			//	it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
			//	int_surfaceFinishWidth = convert_to_int(it_tmp->second);
			//}
			//_nx_dpv->soll_dpv_map.find(id_name)->second = convert_to_string( int_surfaceFinishWidth );
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - %s = %d \n", routineName.c_str(), id_name.c_str(), int_surfaceFinishWidth);
			ist_id_value.assign(convert_to_string(int_surfaceFinishWidth));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_surfaceFinishWidth = convert_to_int(soll_id_value);
				if (int_surfaceFinishWidth == 1) {
					surfaceFinishWidth = NXOpen::Annotations::LineWidthNormal;
					//id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
					//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					//surfaceFinishWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
				}
				else if (int_surfaceFinishWidth == 2) {
					surfaceFinishWidth = NXOpen::Annotations::LineWidthThick;
					//id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
					//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					//surfaceFinishWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
				}
				else if (int_surfaceFinishWidth == 3) {
					surfaceFinishWidth = NXOpen::Annotations::LineWidthThin;
					//id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
					//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					//surfaceFinishWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
				}
				else if (int_surfaceFinishWidth == 6) {
					surfaceFinishWidth = NXOpen::Annotations::LineWidthOne;
				}
				else if (int_surfaceFinishWidth == 7) {
					surfaceFinishWidth = NXOpen::Annotations::LineWidthTwo;
				}
				else if (int_surfaceFinishWidth == 8) {
					surfaceFinishWidth = NXOpen::Annotations::LineWidthThree;
				}
				else if (int_surfaceFinishWidth == 9) {
					surfaceFinishWidth = NXOpen::Annotations::LineWidthFour;
				}
				else if (int_surfaceFinishWidth == 10) {
					surfaceFinishWidth = NXOpen::Annotations::LineWidthFive;
				}
				else if (int_surfaceFinishWidth == 11) {
					surfaceFinishWidth = NXOpen::Annotations::LineWidthSix;
				}
				else if (int_surfaceFinishWidth == 12) {
					surfaceFinishWidth = NXOpen::Annotations::LineWidthSeven;
				}
				else if (int_surfaceFinishWidth == 13) {
					surfaceFinishWidth = NXOpen::Annotations::LineWidthEight;
				}
				else if (int_surfaceFinishWidth == 14) {
					surfaceFinishWidth = NXOpen::Annotations::LineWidthNine;
				}
				_preferencesBuilder->AnnotationStyle()->SymbolStyle()->SetSurfaceFinishWidth(surfaceFinishWidth);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- STOPP - %s --- \n", routineName.c_str());
}

/*
File - Preferences - Drafting - Annotation - Weld Symbol -> Repair these preferences.
*/
void repair_DraftingStandard_Annotation_WeldSymbol_prefs(NXOpen::Drafting::PreferencesBuilder *_preferencesBuilder, en_nx_dpv* _nx_dpv, Session * _theSession, Part* _workPart) {
	routineName.assign("repair_DraftingStandard_Annotation_WeldSymbol_prefs");
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- START - %s --- \n", routineName.c_str());

	//This option specifies the color of the weld symbol.
	id_name.assign("Drafting_weldSymbolColor");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::NXColor *weldSymbolColor;
			weldSymbolColor = _preferencesBuilder->AnnotationStyle()->SymbolStyle()->WeldSymbolColor();
			int weldSymbolColorIndex;
			weldSymbolColorIndex = weldSymbolColor->Handle();
			ist_id_value.assign(convert_to_string(weldSymbolColorIndex));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				weldSymbolColorIndex = convert_to_int(soll_id_value);
				weldSymbolColor = _workPart->Colors()->Find(weldSymbolColorIndex);
				_preferencesBuilder->AnnotationStyle()->SymbolStyle()->SetWeldSymbolColor(weldSymbolColor);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the line font for the weld symbol.
	id_name.assign("Drafting_weldSymbolFont");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::DisplayableObject::ObjectFont weldSymbolFont;
			weldSymbolFont = _preferencesBuilder->AnnotationStyle()->SymbolStyle()->WeldSymbolFont();
			int int_weldSymbolFont;
			if (weldSymbolFont == NXOpen::DisplayableObject::ObjectFontSolid) {
				int_weldSymbolFont = 1;
			}
			else if (weldSymbolFont == NXOpen::DisplayableObject::ObjectFontDashed) {
				int_weldSymbolFont = 2;
			}
			else if (weldSymbolFont == NXOpen::DisplayableObject::ObjectFontPhantom) {
				int_weldSymbolFont = 3;
			}
			else if (weldSymbolFont == NXOpen::DisplayableObject::ObjectFontCenterline) {
				int_weldSymbolFont = 4;
			}
			else if (weldSymbolFont == NXOpen::DisplayableObject::ObjectFontDotted) {
				int_weldSymbolFont = 5;
			}
			else if (weldSymbolFont == NXOpen::DisplayableObject::ObjectFontLongDashed) {
				int_weldSymbolFont = 6;
			}
			else if (weldSymbolFont == NXOpen::DisplayableObject::ObjectFontDottedDashed) {
				int_weldSymbolFont = 7;
			}
			ist_id_value.assign(convert_to_string(int_weldSymbolFont));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_weldSymbolFont = convert_to_int(soll_id_value);
				if (int_weldSymbolFont == 1) {
					weldSymbolFont = NXOpen::DisplayableObject::ObjectFontSolid;
				}
				else if (int_weldSymbolFont == 2) {
					weldSymbolFont = NXOpen::DisplayableObject::ObjectFontDashed;
				}
				else if (int_weldSymbolFont == 3) {
					weldSymbolFont = NXOpen::DisplayableObject::ObjectFontPhantom;
				}
				else if (int_weldSymbolFont == 4) {
					weldSymbolFont = NXOpen::DisplayableObject::ObjectFontCenterline;
				}
				else if (int_weldSymbolFont == 5) {
					weldSymbolFont = NXOpen::DisplayableObject::ObjectFontDotted;
				}
				else if (int_weldSymbolFont == 6) {
					weldSymbolFont = NXOpen::DisplayableObject::ObjectFontLongDashed;
				}
				else if (int_weldSymbolFont == 7) {
					weldSymbolFont = NXOpen::DisplayableObject::ObjectFontDottedDashed;
				}
				_preferencesBuilder->AnnotationStyle()->SymbolStyle()->SetWeldSymbolFont(weldSymbolFont);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the line width for the weld symbol.
	id_name.assign("Drafting_weldSymbolWidth");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::LineWidth weldSymbolWidth;
			weldSymbolWidth = _preferencesBuilder->AnnotationStyle()->SymbolStyle()->WeldSymbolWidth();
			int int_weldSymbolWidth;
			if (weldSymbolWidth == NXOpen::Annotations::LineWidthNormal) {
				int_weldSymbolWidth = 1;
			}
			else if (weldSymbolWidth == NXOpen::Annotations::LineWidthThick) {
				int_weldSymbolWidth = 2;
			}
			else if (weldSymbolWidth == NXOpen::Annotations::LineWidthThin) {
				int_weldSymbolWidth = 3;
			}
			else if (weldSymbolWidth == NXOpen::Annotations::LineWidthOne) {
				int_weldSymbolWidth = 6;
			}
			else if (weldSymbolWidth == NXOpen::Annotations::LineWidthTwo) {
				int_weldSymbolWidth = 7;
			}
			else if (weldSymbolWidth == NXOpen::Annotations::LineWidthThree) {
				int_weldSymbolWidth = 8;
			}
			else if (weldSymbolWidth == NXOpen::Annotations::LineWidthFour) {
				int_weldSymbolWidth = 9;
			}
			else if (weldSymbolWidth == NXOpen::Annotations::LineWidthFive) {
				int_weldSymbolWidth = 10;
			}
			else if (weldSymbolWidth == NXOpen::Annotations::LineWidthSix) {
				int_weldSymbolWidth = 11;
			}
			else if (weldSymbolWidth == NXOpen::Annotations::LineWidthSeven) {
				int_weldSymbolWidth = 12;
			}
			else if (weldSymbolWidth == NXOpen::Annotations::LineWidthEight) {
				int_weldSymbolWidth = 13;
			}
			else if (weldSymbolWidth == NXOpen::Annotations::LineWidthNine) {
				int_weldSymbolWidth = 14;
			}
			else {
				int_weldSymbolWidth = -999;
			}
			//string id_name_tmp;
			//std::map<const std::string, std::string>::iterator it_tmp;
			//if (int_weldSymbolWidth == 1) {
			//	id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
			//	it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
			//	int_weldSymbolWidth = convert_to_int(it_tmp->second);
			//}
			//if (int_weldSymbolWidth == 2) {
			//	id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
			//	it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
			//	int_weldSymbolWidth = convert_to_int(it_tmp->second);
			//}
			//if (int_weldSymbolWidth == 3) {
			//	id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
			//	it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
			//	int_weldSymbolWidth = convert_to_int(it_tmp->second);
			//}
			//_nx_dpv->soll_dpv_map.find(id_name)->second = convert_to_string(int_weldSymbolWidth );
			ist_id_value.assign(convert_to_string(int_weldSymbolWidth));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_weldSymbolWidth = convert_to_int(soll_id_value);
				if (int_weldSymbolWidth == 1) {
					weldSymbolWidth = NXOpen::Annotations::LineWidthNormal;
					//id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
					//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					//weldSymbolWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
				}
				else if (int_weldSymbolWidth == 2) {
					weldSymbolWidth = NXOpen::Annotations::LineWidthThick;
					//id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
					//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					//weldSymbolWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
				}
				else if (int_weldSymbolWidth == 3) {
					weldSymbolWidth = NXOpen::Annotations::LineWidthThin;
					//id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
					//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					//weldSymbolWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
				}
				else if (int_weldSymbolWidth == 6) {
					weldSymbolWidth = NXOpen::Annotations::LineWidthOne;
				}
				else if (int_weldSymbolWidth == 7) {
					weldSymbolWidth = NXOpen::Annotations::LineWidthTwo;
				}
				else if (int_weldSymbolWidth == 8) {
					weldSymbolWidth = NXOpen::Annotations::LineWidthThree;
				}
				else if (int_weldSymbolWidth == 9) {
					weldSymbolWidth = NXOpen::Annotations::LineWidthFour;
				}
				else if (int_weldSymbolWidth == 10) {
					weldSymbolWidth = NXOpen::Annotations::LineWidthFive;
				}
				else if (int_weldSymbolWidth == 11) {
					weldSymbolWidth = NXOpen::Annotations::LineWidthSix;
				}
				else if (int_weldSymbolWidth == 12) {
					weldSymbolWidth = NXOpen::Annotations::LineWidthSeven;
				}
				else if (int_weldSymbolWidth == 13) {
					weldSymbolWidth = NXOpen::Annotations::LineWidthEight;
				}
				else if (int_weldSymbolWidth == 14) {
					weldSymbolWidth = NXOpen::Annotations::LineWidthNine;
				}
				_preferencesBuilder->AnnotationStyle()->SymbolStyle()->SetWeldSymbolWidth(weldSymbolWidth);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the space between the various parts of the weld symbol as a factor of the character size.
	id_name.assign("Drafting_weldSymbolStandard_weldSpaceFactor");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double spaceFactor;
			spaceFactor = _preferencesBuilder->AnnotationStyle()->SymbolStyle()->WeldSpaceFactor();
			ist_id_value.assign(convert_to_string(spaceFactor));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				spaceFactor = convert_to_double(soll_id_value);
				_preferencesBuilder->AnnotationStyle()->SymbolStyle()->SetWeldSpaceFactor(spaceFactor);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//For the ESKD standard, this option specifies the gap between the weld line and the weld type symbol.
	if (_nx_dpv->usedUnitValue.compare("1") == 0) {
		id_name.assign("Drafting_weldSymbolStandard_weldLineGap_MU");
	}
	else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
		id_name.assign("Drafting_weldSymbolStandard_weldLineGap_EU");
	}
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double lineGapFactor;
			lineGapFactor = _preferencesBuilder->AnnotationStyle()->SymbolStyle()->WeldLineGap();
			ist_id_value.assign(convert_to_string(lineGapFactor));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				lineGapFactor = convert_to_double(soll_id_value);
				_preferencesBuilder->AnnotationStyle()->SymbolStyle()->SetWeldLineGap(lineGapFactor);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the size of the symbols used in welds relative to the character size.
	id_name.assign("Drafting_weldSymbolStandard_weldSymbolSizeFactor");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double symbolSizeFactor;
			symbolSizeFactor = _preferencesBuilder->AnnotationStyle()->SymbolStyle()->WeldSymbolSizeFactor();
			ist_id_value.assign(convert_to_string(symbolSizeFactor));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				symbolSizeFactor = convert_to_double(soll_id_value);
				_preferencesBuilder->AnnotationStyle()->SymbolStyle()->SetWeldSymbolSizeFactor(symbolSizeFactor);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- STOPP - %s --- \n", routineName.c_str());
}

/*
File - Preferences - Drafting - Annotation - Target Point Symbol -> Repair these preferences.
*/
void repair_DraftingStandard_Annotation_TargetPointSymbol_prefs(NXOpen::Drafting::PreferencesBuilder *_preferencesBuilder, en_nx_dpv* _nx_dpv, Session * _theSession, Part* _workPart) {
	routineName.assign("repair_DraftingStandard_Annotation_TargetPointSymbol_prefs");
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- START - %s --- \n", routineName.c_str());

	//This option specifies the color of the target symbol.
	id_name.assign("Drafting_targetPointColor");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::NXColor *targetSymbolColor;
			targetSymbolColor = _preferencesBuilder->AnnotationStyle()->SymbolStyle()->TargetSymbolColor();
			int targetSymbolColorIndex;
			targetSymbolColorIndex = targetSymbolColor->Handle();
			ist_id_value.assign(convert_to_string(targetSymbolColorIndex));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				targetSymbolColorIndex = convert_to_int(soll_id_value);
				targetSymbolColor = _workPart->Colors()->Find(targetSymbolColorIndex);
				_preferencesBuilder->AnnotationStyle()->SymbolStyle()->SetTargetSymbolColor(targetSymbolColor);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the line font for the target symbol.
	id_name.assign("Drafting_targetPointFont");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::DisplayableObject::ObjectFont targetSymbolFont;
			targetSymbolFont = _preferencesBuilder->AnnotationStyle()->SymbolStyle()->TargetSymbolFont();
			int int_targetSymbolFont;
			if (targetSymbolFont == NXOpen::DisplayableObject::ObjectFontSolid) {
				int_targetSymbolFont = 1;
			}
			else if (targetSymbolFont == NXOpen::DisplayableObject::ObjectFontDashed) {
				int_targetSymbolFont = 2;
			}
			else if (targetSymbolFont == NXOpen::DisplayableObject::ObjectFontPhantom) {
				int_targetSymbolFont = 3;
			}
			else if (targetSymbolFont == NXOpen::DisplayableObject::ObjectFontCenterline) {
				int_targetSymbolFont = 4;
			}
			else if (targetSymbolFont == NXOpen::DisplayableObject::ObjectFontDotted) {
				int_targetSymbolFont = 5;
			}
			else if (targetSymbolFont == NXOpen::DisplayableObject::ObjectFontLongDashed) {
				int_targetSymbolFont = 6;
			}
			else if (targetSymbolFont == NXOpen::DisplayableObject::ObjectFontDottedDashed) {
				int_targetSymbolFont = 7;
			}
			ist_id_value.assign(convert_to_string(int_targetSymbolFont));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_targetSymbolFont = convert_to_int(soll_id_value);
				if (int_targetSymbolFont == 1) {
					targetSymbolFont = NXOpen::DisplayableObject::ObjectFontSolid;
				}
				else if (int_targetSymbolFont == 2) {
					targetSymbolFont = NXOpen::DisplayableObject::ObjectFontDashed;
				}
				else if (int_targetSymbolFont == 3) {
					targetSymbolFont = NXOpen::DisplayableObject::ObjectFontPhantom;
				}
				else if (int_targetSymbolFont == 4) {
					targetSymbolFont = NXOpen::DisplayableObject::ObjectFontCenterline;
				}
				else if (int_targetSymbolFont == 5) {
					targetSymbolFont = NXOpen::DisplayableObject::ObjectFontDotted;
				}
				else if (int_targetSymbolFont == 6) {
					targetSymbolFont = NXOpen::DisplayableObject::ObjectFontLongDashed;
				}
				else if (int_targetSymbolFont == 7) {
					targetSymbolFont = NXOpen::DisplayableObject::ObjectFontDottedDashed;
				}
				_preferencesBuilder->AnnotationStyle()->SymbolStyle()->SetTargetSymbolFont(targetSymbolFont);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the line width for the target symbol.
	id_name.assign("Drafting_targetPointWidth");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::LineWidth targetSymbolWidth;
			targetSymbolWidth = _preferencesBuilder->AnnotationStyle()->SymbolStyle()->TargetSymbolWidth();
			int int_targetSymbolWidth;
			if (targetSymbolWidth == NXOpen::Annotations::LineWidthNormal) {
				int_targetSymbolWidth = 1;
			}
			else if (targetSymbolWidth == NXOpen::Annotations::LineWidthThick) {
				int_targetSymbolWidth = 2;
			}
			else if (targetSymbolWidth == NXOpen::Annotations::LineWidthThin) {
				int_targetSymbolWidth = 3;
			}
			else if (targetSymbolWidth == NXOpen::Annotations::LineWidthOne) {
				int_targetSymbolWidth = 6;
			}
			else if (targetSymbolWidth == NXOpen::Annotations::LineWidthTwo) {
				int_targetSymbolWidth = 7;
			}
			else if (targetSymbolWidth == NXOpen::Annotations::LineWidthThree) {
				int_targetSymbolWidth = 8;
			}
			else if (targetSymbolWidth == NXOpen::Annotations::LineWidthFour) {
				int_targetSymbolWidth = 9;
			}
			else if (targetSymbolWidth == NXOpen::Annotations::LineWidthFive) {
				int_targetSymbolWidth = 10;
			}
			else if (targetSymbolWidth == NXOpen::Annotations::LineWidthSix) {
				int_targetSymbolWidth = 11;
			}
			else if (targetSymbolWidth == NXOpen::Annotations::LineWidthSeven) {
				int_targetSymbolWidth = 12;
			}
			else if (targetSymbolWidth == NXOpen::Annotations::LineWidthEight) {
				int_targetSymbolWidth = 13;
			}
			else if (targetSymbolWidth == NXOpen::Annotations::LineWidthNine) {
				int_targetSymbolWidth = 14;
			}
			else {
				int_targetSymbolWidth = -999;
			}
			//string id_name_tmp;
			//std::map<const std::string, std::string>::iterator it_tmp;
			//if (int_targetSymbolWidth == 1) {
			//	id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
			//	it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
			//	int_targetSymbolWidth = convert_to_int(it_tmp->second);
			//}
			//if (int_targetSymbolWidth == 2) {
			//	id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
			//	it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
			//	int_targetSymbolWidth = convert_to_int(it_tmp->second);
			//}
			//if (int_targetSymbolWidth == 3) {
			//	id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
			//	it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
			//	int_targetSymbolWidth = convert_to_int(it_tmp->second);
			//}
			//_nx_dpv->soll_dpv_map.find(id_name)->second = convert_to_string(int_targetSymbolWidth);
			ist_id_value.assign(convert_to_string(int_targetSymbolWidth));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_targetSymbolWidth = convert_to_int(soll_id_value);
				if (int_targetSymbolWidth == 1) {
					targetSymbolWidth = NXOpen::Annotations::LineWidthNormal;
					//id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
					//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					//targetSymbolWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
				}
				else if (int_targetSymbolWidth == 2) {
					targetSymbolWidth = NXOpen::Annotations::LineWidthThick;
					//id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
					//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					//targetSymbolWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
				}
				else if (int_targetSymbolWidth == 3) {
					targetSymbolWidth = NXOpen::Annotations::LineWidthThin;
					//id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
					//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					//targetSymbolWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
				}
				else if (int_targetSymbolWidth == 6) {
					targetSymbolWidth = NXOpen::Annotations::LineWidthOne;
				}
				else if (int_targetSymbolWidth == 7) {
					targetSymbolWidth = NXOpen::Annotations::LineWidthTwo;
				}
				else if (int_targetSymbolWidth == 8) {
					targetSymbolWidth = NXOpen::Annotations::LineWidthThree;
				}
				else if (int_targetSymbolWidth == 9) {
					targetSymbolWidth = NXOpen::Annotations::LineWidthFour;
				}
				else if (int_targetSymbolWidth == 10) {
					targetSymbolWidth = NXOpen::Annotations::LineWidthFive;
				}
				else if (int_targetSymbolWidth == 11) {
					targetSymbolWidth = NXOpen::Annotations::LineWidthSix;
				}
				else if (int_targetSymbolWidth == 12) {
					targetSymbolWidth = NXOpen::Annotations::LineWidthSeven;
				}
				else if (int_targetSymbolWidth == 13) {
					targetSymbolWidth = NXOpen::Annotations::LineWidthEight;
				}
				else if (int_targetSymbolWidth == 14) {
					targetSymbolWidth = NXOpen::Annotations::LineWidthNine;
				}
				_preferencesBuilder->AnnotationStyle()->SymbolStyle()->SetTargetSymbolWidth(targetSymbolWidth);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- STOPP - %s --- \n", routineName.c_str());
}

/*
File - Preferences - Drafting - Annotation - Intersection Symbol -> Repair these preferences.
*/
void repair_DraftingStandard_Annotation_IntersectionSymbol_prefs(NXOpen::Drafting::PreferencesBuilder *_preferencesBuilder, en_nx_dpv* _nx_dpv, Session * _theSession, Part* _workPart) {
	routineName.assign("repair_DraftingStandard_Annotation_IntersectionSymbol_prefs");
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- START - %s --- \n", routineName.c_str());

	//This option specifies the color of the intersection symbol.
	if (_nx_dpv->usedUnitValue.compare("1") == 0) {
		id_name.assign("Drafting_intersectionColor_MU");
	}
	else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
		id_name.assign("Drafting_intersectionColor_EU");
	}
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::NXColor *intersectionSymbolColor;
			intersectionSymbolColor = _preferencesBuilder->AnnotationStyle()->SymbolStyle()->IntersectionSymbolColor();
			int intersectionSymbolColorIndex;
			intersectionSymbolColorIndex = intersectionSymbolColor->Handle();
			ist_id_value.assign(convert_to_string(intersectionSymbolColorIndex));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
				soll_id_value.assign(it->second);
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
				if (ist_id_value.compare(soll_id_value) != 0) {
					//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
					intersectionSymbolColorIndex = convert_to_int(soll_id_value);
					NXOpen::NXColor *intersectionSymbolColor;
					intersectionSymbolColor = _workPart->Colors()->Find(intersectionSymbolColorIndex);
					_preferencesBuilder->AnnotationStyle()->SymbolStyle()->SetIntersectionSymbolColor(intersectionSymbolColor);
					_preferencesBuilder->Commit();
					nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
				}
			
			
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the line font for the intersection symbol.
	id_name.assign("Drafting_intersectionFont");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::DisplayableObject::ObjectFont intersectionSymbolFont;
			intersectionSymbolFont = _preferencesBuilder->AnnotationStyle()->SymbolStyle()->IntersectionSymbolFont();
			int int_intersectionSymbolFont;
			if (intersectionSymbolFont == NXOpen::DisplayableObject::ObjectFontSolid) {
				int_intersectionSymbolFont = 1;
			}
			else if (intersectionSymbolFont == NXOpen::DisplayableObject::ObjectFontDashed) {
				int_intersectionSymbolFont = 2;
			}
			else if (intersectionSymbolFont == NXOpen::DisplayableObject::ObjectFontPhantom) {
				int_intersectionSymbolFont = 3;
			}
			else if (intersectionSymbolFont == NXOpen::DisplayableObject::ObjectFontCenterline) {
				int_intersectionSymbolFont = 4;
			}
			else if (intersectionSymbolFont == NXOpen::DisplayableObject::ObjectFontDotted) {
				int_intersectionSymbolFont = 5;
			}
			else if (intersectionSymbolFont == NXOpen::DisplayableObject::ObjectFontLongDashed) {
				int_intersectionSymbolFont = 6;
			}
			else if (intersectionSymbolFont == NXOpen::DisplayableObject::ObjectFontDottedDashed) {
				int_intersectionSymbolFont = 7;
			}
			ist_id_value.assign(convert_to_string(int_intersectionSymbolFont));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_intersectionSymbolFont = convert_to_int(soll_id_value);
				if (int_intersectionSymbolFont == 1) {
					intersectionSymbolFont = NXOpen::DisplayableObject::ObjectFontSolid;
				}
				else if (int_intersectionSymbolFont == 2) {
					intersectionSymbolFont = NXOpen::DisplayableObject::ObjectFontDashed;
				}
				else if (int_intersectionSymbolFont == 3) {
					intersectionSymbolFont = NXOpen::DisplayableObject::ObjectFontPhantom;
				}
				else if (int_intersectionSymbolFont == 4) {
					intersectionSymbolFont = NXOpen::DisplayableObject::ObjectFontCenterline;
				}
				else if (int_intersectionSymbolFont == 5) {
					intersectionSymbolFont = NXOpen::DisplayableObject::ObjectFontDotted;
				}
				else if (int_intersectionSymbolFont == 6) {
					intersectionSymbolFont = NXOpen::DisplayableObject::ObjectFontLongDashed;
				}
				else if (int_intersectionSymbolFont == 7) {
					intersectionSymbolFont = NXOpen::DisplayableObject::ObjectFontDottedDashed;
				}
				_preferencesBuilder->AnnotationStyle()->SymbolStyle()->SetIntersectionSymbolFont(intersectionSymbolFont);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the line width for the intersection symbol.
	id_name.assign("Drafting_intersectionWidth");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::LineWidth intersectionSymbolWidth;
			intersectionSymbolWidth = _preferencesBuilder->AnnotationStyle()->SymbolStyle()->IntersectionSymbolWidth();
			int int_intersectionSymbolWidth;
			int_intersectionSymbolWidth = (int)intersectionSymbolWidth;
			if (intersectionSymbolWidth == NXOpen::Annotations::LineWidthNormal) {
				int_intersectionSymbolWidth = 1;
			}
			else if (intersectionSymbolWidth == NXOpen::Annotations::LineWidthThick) {
				int_intersectionSymbolWidth = 2;
			}
			else if (intersectionSymbolWidth == NXOpen::Annotations::LineWidthThin) {
				int_intersectionSymbolWidth = 3;
			}
			else if (intersectionSymbolWidth == NXOpen::Annotations::LineWidthOne) {
				int_intersectionSymbolWidth = 6;
			}
			else if (intersectionSymbolWidth == NXOpen::Annotations::LineWidthTwo) {
				int_intersectionSymbolWidth = 7;
			}
			else if (intersectionSymbolWidth == NXOpen::Annotations::LineWidthThree) {
				int_intersectionSymbolWidth = 8;
			}
			else if (intersectionSymbolWidth == NXOpen::Annotations::LineWidthFour) {
				int_intersectionSymbolWidth = 9;
			}
			else if (intersectionSymbolWidth == NXOpen::Annotations::LineWidthFive) {
				int_intersectionSymbolWidth = 10;
			}
			else if (intersectionSymbolWidth == NXOpen::Annotations::LineWidthSix) {
				int_intersectionSymbolWidth = 11;
			}
			else if (intersectionSymbolWidth == NXOpen::Annotations::LineWidthSeven) {
				int_intersectionSymbolWidth = 12;
			}
			else if (intersectionSymbolWidth == NXOpen::Annotations::LineWidthEight) {
				int_intersectionSymbolWidth = 13;
			}
			else if (intersectionSymbolWidth == NXOpen::Annotations::LineWidthNine) {
				int_intersectionSymbolWidth = 14;
			}
			//string id_name_tmp;
			//std::map<const std::string, std::string>::iterator it_tmp;
			//if (int_intersectionSymbolWidth == 1) {
			//	id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
			//	it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
			//	int_intersectionSymbolWidth = convert_to_int(it_tmp->second);
			//}
			//if (int_intersectionSymbolWidth == 2) {
			//	id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
			//	it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
			//	int_intersectionSymbolWidth = convert_to_int(it_tmp->second);
			//}
			//if (int_intersectionSymbolWidth == 3) {
			//	id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
			//	it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
			//	int_intersectionSymbolWidth = convert_to_int(it_tmp->second);
			//}
			//_nx_dpv->soll_dpv_map.find(id_name)->second = convert_to_string(int_intersectionSymbolWidth);
			ist_id_value.assign(convert_to_string(int_intersectionSymbolWidth));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_intersectionSymbolWidth = convert_to_int(soll_id_value);
				if (int_intersectionSymbolWidth == 1) {
					intersectionSymbolWidth = NXOpen::Annotations::LineWidthNormal;
					//id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
					//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					//intersectionSymbolWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
				}
				else if (int_intersectionSymbolWidth == 2) {
					intersectionSymbolWidth = NXOpen::Annotations::LineWidthThick;
					//id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
					//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					//intersectionSymbolWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
				}
				else if (int_intersectionSymbolWidth == 3) {
					intersectionSymbolWidth = NXOpen::Annotations::LineWidthThin;
					//id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
					//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					//intersectionSymbolWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
				}
				else if (int_intersectionSymbolWidth == 6) {
					intersectionSymbolWidth = NXOpen::Annotations::LineWidthOne;
				}
				else if (int_intersectionSymbolWidth == 7) {
					intersectionSymbolWidth = NXOpen::Annotations::LineWidthTwo;
				}
				else if (int_intersectionSymbolWidth == 8) {
					intersectionSymbolWidth = NXOpen::Annotations::LineWidthThree;
				}
				else if (int_intersectionSymbolWidth == 9) {
					intersectionSymbolWidth = NXOpen::Annotations::LineWidthFour;
				}
				else if (int_intersectionSymbolWidth == 10) {
					intersectionSymbolWidth = NXOpen::Annotations::LineWidthFive;
				}
				else if (int_intersectionSymbolWidth == 11) {
					intersectionSymbolWidth = NXOpen::Annotations::LineWidthSix;
				}
				else if (int_intersectionSymbolWidth == 12) {
					intersectionSymbolWidth = NXOpen::Annotations::LineWidthSeven;
				}
				else if (int_intersectionSymbolWidth == 13) {
					intersectionSymbolWidth = NXOpen::Annotations::LineWidthEight;
				}
				else if (int_intersectionSymbolWidth == 14) {
					intersectionSymbolWidth = NXOpen::Annotations::LineWidthNine;
				}

				intersectionSymbolWidth = (NXOpen::Annotations::LineWidth)int_intersectionSymbolWidth;
				_preferencesBuilder->AnnotationStyle()->SymbolStyle()->SetIntersectionSymbolWidth(intersectionSymbolWidth);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- STOPP - %s --- \n", routineName.c_str());
}

/*
File - Preferences - Drafting - Annotation - Crosshatch/Area Fill -> Repair these preferences.
*/
void repair_DraftingStandard_Annotation_CrosshatchAreaFill_prefs(NXOpen::Drafting::PreferencesBuilder *_preferencesBuilder, en_nx_dpv* _nx_dpv, Session * _theSession, Part* _workPart) {
	routineName.assign("repair_DraftingStandard_Annotation_CrosshatchAreaFill_prefs");
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- START - %s --- \n", routineName.c_str());

	//This option specifies the distance between crosshatch lines.
	if (_nx_dpv->usedUnitValue.compare("1") == 0) {
		id_name.assign("Drafting_crosshatchSpacing_MU");
	}
	else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
		id_name.assign("Drafting_crosshatchSpacing_EU");
	}
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double distance;
			distance = _preferencesBuilder->AnnotationStyle()->HatchStyle()->HatchDistance();
			ist_id_value.assign(convert_to_string(distance));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				distance = convert_to_double(soll_id_value);
				_preferencesBuilder->AnnotationStyle()->HatchStyle()->SetHatchDistance(distance);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the inclination angle of the crosshatch lines.
	id_name.assign("Drafting_crosshatchAngle");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double angle;
			angle = _preferencesBuilder->AnnotationStyle()->HatchStyle()->HatchAngle();
			ist_id_value.assign(convert_to_string(angle));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				angle = convert_to_double(soll_id_value);
				_preferencesBuilder->AnnotationStyle()->HatchStyle()->SetHatchAngle(angle);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the area fill style.
	id_name.assign("Drafting_areafillPattern");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::AreaFillMaterial areaFillMaterial;
			areaFillMaterial = _preferencesBuilder->AnnotationStyle()->HatchStyle()->AreaFillMaterial();
			int int_areaFillMaterial;
			//Achtung: Rückgabewert falsch
			int_areaFillMaterial = (int)areaFillMaterial + 1;
			ist_id_value.assign(convert_to_string(int_areaFillMaterial));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				//Achtung: Rückgabewert falsch
				int_areaFillMaterial = convert_to_int(soll_id_value) - 1;
				NXOpen::Annotations::AreaFillMaterial areaFillMaterial;
				areaFillMaterial = (NXOpen::Annotations::AreaFillMaterial)int_areaFillMaterial;
				_preferencesBuilder->AnnotationStyle()->HatchStyle()->SetAreaFillMaterial(areaFillMaterial);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the line width for the centerline symbol.
	id_name.assign("Drafting_areafillAngle");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double areaFillAngle;
			areaFillAngle = _preferencesBuilder->AnnotationStyle()->HatchStyle()->AreaFillAngle();
			ist_id_value.assign(convert_to_string(areaFillAngle));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				areaFillAngle = convert_to_double(soll_id_value);
				_preferencesBuilder->AnnotationStyle()->HatchStyle()->SetAreaFillAngle(areaFillAngle);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the scale of the area fill pattern.
	id_name.assign("Drafting_areafillScale");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double areaFillScale;
			areaFillScale = _preferencesBuilder->AnnotationStyle()->HatchStyle()->AreaFillScale();
			ist_id_value.assign(convert_to_string(areaFillScale));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				areaFillScale = convert_to_double(soll_id_value);
				_preferencesBuilder->AnnotationStyle()->HatchStyle()->SetAreaFillScale(areaFillScale);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the color of the crosshatch lines, area fill lines, and the solid area fill.
	if (_nx_dpv->usedUnitValue.compare("1") == 0) {
		id_name.assign("Drafting_crosshatchColor_MU");
	}
	else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
		id_name.assign("Drafting_crosshatchColor_EU");
	}
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::NXColor * crosshatchColor;
			crosshatchColor = _preferencesBuilder->AnnotationStyle()->HatchStyle()->Color();
			int crosshatchColorIndex;
			crosshatchColorIndex = crosshatchColor->Handle();
			ist_id_value.assign(convert_to_string(crosshatchColorIndex));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				crosshatchColorIndex = convert_to_int(soll_id_value);
				crosshatchColor = _workPart->Colors()->Find(crosshatchColorIndex);
				_preferencesBuilder->AnnotationStyle()->HatchStyle()->SetColor(crosshatchColor);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the line width for the crosshatch and area fill lines.
	id_name.assign("Drafting_crosshatchWidth");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::LineWidth lineWidth;
			//NXOpen::Annotations::HatchStyleBuilder *hatchStyleBuilder;
			//hatchStyleBuilder = _preferencesBuilder->AnnotationStyle()->HatchStyle();
			bool res;
			res = _preferencesBuilder->AnnotationStyle()->HatchStyle()->Validate();
			if (res) {
				//if(g_nxLog_en_nx_getset_dpv_prefs) nxLog("get - Drafting_crosshatchWidth - Validate hatch style - res = true \n");
			}
			else {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("get - Drafting_crosshatchWidth - Validate hatch style - res = false \n");
			}

			lineWidth = _preferencesBuilder->AnnotationStyle()->HatchStyle()->LineWidth();

			int int_lineWidth;
			if (lineWidth == NXOpen::Annotations::LineWidthNormal) {
				int_lineWidth = 1;
			}
			else if (lineWidth == NXOpen::Annotations::LineWidthThick) {
				int_lineWidth = 2;
			}
			else if (lineWidth == NXOpen::Annotations::LineWidthThin) {
				int_lineWidth = 3;
			}
			else if (lineWidth == NXOpen::Annotations::LineWidthOne) {
				int_lineWidth = 6;
			}
			else if (lineWidth == NXOpen::Annotations::LineWidthTwo) {
				int_lineWidth = 7;
			}
			else if (lineWidth == NXOpen::Annotations::LineWidthThree) {
				int_lineWidth = 8;
			}
			else if (lineWidth == NXOpen::Annotations::LineWidthFour) {
				int_lineWidth = 9;
			}
			else if (lineWidth == NXOpen::Annotations::LineWidthFive) {
				int_lineWidth = 10;
			}
			else if (lineWidth == NXOpen::Annotations::LineWidthSix) {
				int_lineWidth = 11;
			}
			else if (lineWidth == NXOpen::Annotations::LineWidthSeven) {
				int_lineWidth = 12;
			}
			else if (lineWidth == NXOpen::Annotations::LineWidthEight) {
				int_lineWidth = 13;
			}
			else if (lineWidth == NXOpen::Annotations::LineWidthNine) {
				int_lineWidth = 14;
			}
			else {
				int_lineWidth = -999;
			}
			//string id_name_tmp;
			//std::map<const std::string, std::string>::iterator it_tmp;
			//if (int_lineWidth == 1) {
			//	id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
			//	it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
			//	int_lineWidth = convert_to_int(it_tmp->second);
			//}
			//if (int_lineWidth == 2) {
			//	id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
			//	it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
			//	int_lineWidth = convert_to_int(it_tmp->second);
			//}
			//if (int_lineWidth == 3) {
			//	id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
			//	it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
			//	int_lineWidth = convert_to_int(it_tmp->second);
			//}
			//_nx_dpv->soll_dpv_map.find(id_name)->second = convert_to_string(int_lineWidth);
			ist_id_value.assign(convert_to_string(int_lineWidth));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_lineWidth = convert_to_int(soll_id_value);
				if (int_lineWidth == 1) {
					lineWidth = NXOpen::Annotations::LineWidthNormal;
					//id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
					//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					//lineWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
				}
				else if (int_lineWidth == 2) {
					lineWidth = NXOpen::Annotations::LineWidthThick;
					//id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
					//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					//lineWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
				}
				else if (int_lineWidth == 3) {
					lineWidth = NXOpen::Annotations::LineWidthThin;
					//id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
					//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					//lineWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
				}
				else if (int_lineWidth == 6) {
					lineWidth = NXOpen::Annotations::LineWidthOne;
				}
				else if (int_lineWidth == 7) {
					lineWidth = NXOpen::Annotations::LineWidthTwo;
				}
				else if (int_lineWidth == 8) {
					lineWidth = NXOpen::Annotations::LineWidthThree;
				}
				else if (int_lineWidth == 9) {
					lineWidth = NXOpen::Annotations::LineWidthFour;
				}
				else if (int_lineWidth == 10) {
					lineWidth = NXOpen::Annotations::LineWidthFive;
				}
				else if (int_lineWidth == 11) {
					lineWidth = NXOpen::Annotations::LineWidthSix;
				}
				else if (int_lineWidth == 12) {
					lineWidth = NXOpen::Annotations::LineWidthSeven;
				}
				else if (int_lineWidth == 13) {
					lineWidth = NXOpen::Annotations::LineWidthEight;
				}
				else if (int_lineWidth == 14) {
					lineWidth = NXOpen::Annotations::LineWidthNine;
				}
				_preferencesBuilder->AnnotationStyle()->HatchStyle()->SetLineWidth(lineWidth);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies how closely the system approximates the boundary along curves, such as splines and conics.
	if (_nx_dpv->usedUnitValue.compare("1") == 0) {
		id_name.assign("Drafting_crosshatchTolerance_MU");
	}
	else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
		id_name.assign("Drafting_crosshatchTolerance_EU");
	}
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double tolerance;
			tolerance = _preferencesBuilder->AnnotationStyle()->HatchStyle()->Tolerance();
			ist_id_value.assign(convert_to_string(tolerance));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				tolerance = convert_to_double(soll_id_value);
				_preferencesBuilder->AnnotationStyle()->HatchStyle()->SetTolerance(tolerance);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//When Stop at Intersection is turned on and the chaining for the crosshatch and area fill boundaries encounters which is not a true intersection, this option determines whether or not the chaining will use the apparent intersection.
	id_name.assign("Drafting_hatchApparentMode");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			bool findApparentIntersections;
			findApparentIntersections = _preferencesBuilder->AnnotationStyle()->HatchStyle()->FindApparentIntersections();
			ist_id_value.assign(convert_to_string(findApparentIntersections));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				findApparentIntersections = convert_to_bool(soll_id_value);
				_preferencesBuilder->AnnotationStyle()->HatchStyle()->SetFindApparentIntersections(findApparentIntersections);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the margin around text boxes for text islands. The number represents a percentage of the text character size. The number will be added to the text box to calculate the size of the text island.
	id_name.assign("Drafting_hatchMargin");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double islandMargin;
			islandMargin = _preferencesBuilder->AnnotationStyle()->HatchStyle()->IslandMargin();
			ist_id_value.assign(convert_to_string(islandMargin));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				islandMargin = convert_to_double(soll_id_value);
				_preferencesBuilder->AnnotationStyle()->HatchStyle()->SetIslandMargin(islandMargin);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not annotation will be automatically excluded during point in region crosshatch or area fill creation.
	id_name.assign("Drafting_autoTextIsland");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			bool autoTextIsland;
			autoTextIsland = _preferencesBuilder->AnnotationStyle()->HatchStyle()->AutoTextIsland();
			int int_autoTextIsland;
			int_autoTextIsland = (int)autoTextIsland;
			ist_id_value.assign(convert_to_string(int_autoTextIsland));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_autoTextIsland = convert_to_int(soll_id_value);
				autoTextIsland = false;
				if (int_autoTextIsland == 1) {
					autoTextIsland = true;
				}
				_preferencesBuilder->AnnotationStyle()->HatchStyle()->SetAutoTextIsland(autoTextIsland);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- STOPP - %s --- \n", routineName.c_str());
}

/*
File - Preferences - Drafting - Annotation - Centerline -> Repair these preferences.
*/
void repair_DraftingStandard_Annotation_Centerline_prefs(NXOpen::Drafting::PreferencesBuilder *_preferencesBuilder, en_nx_dpv* _nx_dpv, Session * _theSession, Part* _workPart){
	routineName.assign("repair_DraftingStandard_Annotation_Centerline_prefs");
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- START - %s --- \n", routineName.c_str());

	//This option specifies the color of the centerline symbol.
	if (_nx_dpv->usedUnitValue.compare("1") == 0) {
		id_name.assign("Drafting_centerlineColor_MU");
	}
	else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
		id_name.assign("Drafting_centerlineColor_EU");
	}
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::NXColor * centerlineSymbolColor;
			centerlineSymbolColor = _preferencesBuilder->AnnotationStyle()->SymbolStyle()->CenterlineSymbolColor();
			int centerlineSymbolColorIndex;
			centerlineSymbolColorIndex = centerlineSymbolColor->Handle();
			ist_id_value.assign(convert_to_string(centerlineSymbolColorIndex));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				centerlineSymbolColorIndex = convert_to_int(soll_id_value);
				centerlineSymbolColor = _workPart->Colors()->Find(centerlineSymbolColorIndex);
				_preferencesBuilder->AnnotationStyle()->SymbolStyle()->SetCenterlineSymbolColor(centerlineSymbolColor);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the line width for the centerline symbol.
	id_name.assign("Drafting_centerlineWidth");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::LineWidth centerlineSymbolWidth;
			centerlineSymbolWidth = _preferencesBuilder->AnnotationStyle()->SymbolStyle()->CenterlineSymbolWidth();
			int int_centerlineSymbolWidth;

			if (centerlineSymbolWidth == NXOpen::Annotations::LineWidthNormal) {
				int_centerlineSymbolWidth = 1;
			}
			else if (centerlineSymbolWidth == NXOpen::Annotations::LineWidthThick) {
				int_centerlineSymbolWidth = 2;
			}
			else if (centerlineSymbolWidth == NXOpen::Annotations::LineWidthThin) {
				int_centerlineSymbolWidth = 3;
			}
			else if (centerlineSymbolWidth == NXOpen::Annotations::LineWidthOne) {
				int_centerlineSymbolWidth = 6;
			}
			else if (centerlineSymbolWidth == NXOpen::Annotations::LineWidthTwo) {
				int_centerlineSymbolWidth = 7;
			}
			else if (centerlineSymbolWidth == NXOpen::Annotations::LineWidthThree) {
				int_centerlineSymbolWidth = 8;
			}
			else if (centerlineSymbolWidth == NXOpen::Annotations::LineWidthFour) {
				int_centerlineSymbolWidth = 9;
			}
			else if (centerlineSymbolWidth == NXOpen::Annotations::LineWidthFive) {
				int_centerlineSymbolWidth = 10;
			}
			else if (centerlineSymbolWidth == NXOpen::Annotations::LineWidthSix) {
				int_centerlineSymbolWidth = 11;
			}
			else if (centerlineSymbolWidth == NXOpen::Annotations::LineWidthSeven) {
				int_centerlineSymbolWidth = 12;
			}
			else if (centerlineSymbolWidth == NXOpen::Annotations::LineWidthEight) {
				int_centerlineSymbolWidth = 13;
			}
			else if (centerlineSymbolWidth == NXOpen::Annotations::LineWidthNine) {
				int_centerlineSymbolWidth = 14;
			}
			else {
				int_centerlineSymbolWidth = -999;
			}
			//string id_name_tmp;
			//std::map<const std::string, std::string>::iterator it_tmp;
			//if (int_centerlineSymbolWidth == 1) {
			//	id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
			//	it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
			//	int_centerlineSymbolWidth = convert_to_int(it_tmp->second);
			//}
			//if (int_centerlineSymbolWidth == 2) {
			//	id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
			//	it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
			//	int_centerlineSymbolWidth = convert_to_int(it_tmp->second);
			//}
			//if (int_centerlineSymbolWidth == 3) {
			//	id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
			//	it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
			//	int_centerlineSymbolWidth = convert_to_int(it_tmp->second);
			//}
			//_nx_dpv->soll_dpv_map.find(id_name)->second = convert_to_string(int_centerlineSymbolWidth);
			ist_id_value.assign(convert_to_string(int_centerlineSymbolWidth));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_centerlineSymbolWidth = convert_to_int(soll_id_value);
				if (int_centerlineSymbolWidth == 1) {
					centerlineSymbolWidth = NXOpen::Annotations::LineWidthNormal;
					//id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
					//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					//centerlineSymbolWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
				}
				else if (int_centerlineSymbolWidth == 2) {
					centerlineSymbolWidth = NXOpen::Annotations::LineWidthThick;
					//id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
					//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					//centerlineSymbolWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
				}
				else if (int_centerlineSymbolWidth == 3) {
					centerlineSymbolWidth = NXOpen::Annotations::LineWidthThin;
					//id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
					//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					//centerlineSymbolWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
				}
				else if (int_centerlineSymbolWidth == 6) {
					centerlineSymbolWidth = NXOpen::Annotations::LineWidthOne;
				}
				else if (int_centerlineSymbolWidth == 7) {
					centerlineSymbolWidth = NXOpen::Annotations::LineWidthTwo;
				}
				else if (int_centerlineSymbolWidth == 8) {
					centerlineSymbolWidth = NXOpen::Annotations::LineWidthThree;
				}
				else if (int_centerlineSymbolWidth == 9) {
					centerlineSymbolWidth = NXOpen::Annotations::LineWidthFour;
				}
				else if (int_centerlineSymbolWidth == 10) {
					centerlineSymbolWidth = NXOpen::Annotations::LineWidthFive;
				}
				else if (int_centerlineSymbolWidth == 11) {
					centerlineSymbolWidth = NXOpen::Annotations::LineWidthSix;
				}
				else if (int_centerlineSymbolWidth == 12) {
					centerlineSymbolWidth = NXOpen::Annotations::LineWidthSeven;
				}
				else if (int_centerlineSymbolWidth == 13) {
					centerlineSymbolWidth = NXOpen::Annotations::LineWidthEight;
				}
				else if (int_centerlineSymbolWidth == 14) {
					centerlineSymbolWidth = NXOpen::Annotations::LineWidthNine;
				}
				_preferencesBuilder->AnnotationStyle()->SymbolStyle()->SetCenterlineSymbolWidth(centerlineSymbolWidth);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- STOPP - %s --- \n", routineName.c_str());
}

/*
File - Preferences - Drafting - Annotation - Offset Center Point -> Repair these preferences.
*/
void repair_DraftingStandard_Annotation_OffsetCenterPoint_prefs(NXOpen::Drafting::PreferencesBuilder *_preferencesBuilder, en_nx_dpv* _nx_dpv, Session * _theSession, Part* _workPart) {
	routineName.assign("repair_DraftingStandard_Annotation_OffsetCenterPoint_prefs");
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- START - %s --- \n", routineName.c_str());
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- STOPP - %s --- \n", routineName.c_str());
}

/*
File - Preferences - Drafting - Symbol - Workflow -> Repair these preferences.
*/
void repair_DraftingStandard_Symbol_Workflow_prefs(NXOpen::Drafting::PreferencesBuilder *_preferencesBuilder, en_nx_dpv* _nx_dpv, Session * _theSession, Part* _workPart) {
	routineName.assign("repair_DraftingStandard_Symbol_Workflow_prefs");
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- START - %s --- \n", routineName.c_str());

	//This option determines whether or not unlocked, associative custom symbol instances 
	//update automatically when changes are made to their master custom symbol.
	id_name.assign("Drafting_symbolAutoUpdate");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			bool symbolAutoUpdate;
			symbolAutoUpdate= _preferencesBuilder->SymbolWorkflow()->SymbolAutoUpdate();
			ist_id_value.assign(convert_to_string(symbolAutoUpdate));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				symbolAutoUpdate = convert_to_bool(soll_id_value);
				_preferencesBuilder->SymbolWorkflow()->SetSymbolAutoUpdate(symbolAutoUpdate);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not curve objects in symbols are added to a sketch on custom symbol smash.
	id_name.assign("Drafting_SymbolSmashToSketch");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			bool symbolSmashToSketch;
			symbolSmashToSketch = _preferencesBuilder->SymbolWorkflow()->SymbolSmashToSketch();
			ist_id_value.assign(convert_to_string(symbolSmashToSketch));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				symbolSmashToSketch = convert_to_bool(soll_id_value);
				_preferencesBuilder->SymbolWorkflow()->SetSymbolSmashToSketch(symbolSmashToSketch);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- STOPP - %s --- \n", routineName.c_str());
}

/*
File - Preferences - Drafting - Table - Common - Cell -> Repair these preferences.
*/
void repair_DraftingStandard_Table_Common_Cell_prefs(NXOpen::Drafting::PreferencesBuilder *_preferencesBuilder, en_nx_dpv* _nx_dpv, Session * _theSession, Part* _workPart) {
	routineName.assign("repair_DraftingStandard_Table_Common_Cell_prefs");
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- START - %s --- \n", routineName.c_str());

	//This option specifies the format and format type of the cell content.
	id_name.assign("Drafting_tabnoteCellFormat");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::TableCellStyleBuilder::CellFormatTypes format;
			format = _preferencesBuilder->TableCellStyle()->CellFormatType();
			int int_format;
			int_format = (int)format;
			ist_id_value.assign(convert_to_string(int_format));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_format = convert_to_int(soll_id_value);
				format = (NXOpen::Annotations::TableCellStyleBuilder::CellFormatTypes)int_format;
				_preferencesBuilder->TableCellStyle()->SetCellFormatType(format);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the date format type of the cell content.
	id_name.assign("Drafting_tabnoteCellDateFormat");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::TableCellStyleBuilder::DateFormatTypes dateFormat;
			dateFormat = _preferencesBuilder->TableCellStyle()->DateFormatType();
			int int_dateFormat;
			int_dateFormat = (int)dateFormat;
			ist_id_value.assign(convert_to_string(int_dateFormat));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_dateFormat = convert_to_int(soll_id_value);
				dateFormat = (NXOpen::Annotations::TableCellStyleBuilder::DateFormatTypes)int_dateFormat;
				_preferencesBuilder->TableCellStyle()->SetDateFormatType(dateFormat);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the time format type of the cell content.
	id_name.assign("Drafting_tabnoteCellTimeFormat");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::TableCellStyleBuilder::TimeFormatTypes timeFormat;
			timeFormat = _preferencesBuilder->TableCellStyle()->TimeFormatType();
			int int_timeFormat;
			int_timeFormat = (int)timeFormat;
			ist_id_value.assign(convert_to_string(int_timeFormat));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_timeFormat = convert_to_int(soll_id_value);
				timeFormat = (NXOpen::Annotations::TableCellStyleBuilder::TimeFormatTypes)int_timeFormat;
				_preferencesBuilder->TableCellStyle()->SetTimeFormatType(timeFormat);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the alignment for cell text.
	id_name.assign("Drafting_tabnoteCellTextAlignment");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::TableCellStyleBuilder::TextAlignmentType textAlignment;
			textAlignment = _preferencesBuilder->TableCellStyle()->TextAlignment();
			int int_textAlignment;
			int_textAlignment = (int)textAlignment;
			ist_id_value.assign(convert_to_string(int_textAlignment));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_textAlignment = convert_to_int(soll_id_value);
				textAlignment = (NXOpen::Annotations::TableCellStyleBuilder::TextAlignmentType)int_textAlignment;
				_preferencesBuilder->TableCellStyle()->SetTextAlignment(textAlignment);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the angle of cell text.
	id_name.assign("Drafting_tabnoteCellTextSlant");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double slantAngle;
			slantAngle = _preferencesBuilder->TableCellStyle()->SlantAngle();
			ist_id_value.assign(convert_to_string(slantAngle));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				slantAngle = convert_to_double(soll_id_value);
				_preferencesBuilder->TableCellStyle()->SetSlantAngle(slantAngle);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies how a zero should display when the format is a numeric type.
	id_name.assign("Drafting_tabnoteCellZeroDisplay");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::TableCellStyleBuilder::ZeroDisplayType zeroDisplay;
			zeroDisplay = _preferencesBuilder->TableCellStyle()->ZeroDisplay();
			int int_zeroDisplay;
			int_zeroDisplay = (int)zeroDisplay;
			ist_id_value.assign(convert_to_string(int_zeroDisplay));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_zeroDisplay = convert_to_int(soll_id_value);
				zeroDisplay = (NXOpen::Annotations::TableCellStyleBuilder::ZeroDisplayType)int_zeroDisplay;
				_preferencesBuilder->TableCellStyle()->SetZeroDisplay(zeroDisplay);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the number of decimal places for the Number, Currency, 
	//Percent, Degrees/Minutes/Seconds, and Fraction format options.
	id_name.assign("Drafting_tabnoteCellPrecision");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			int precision;
			precision = _preferencesBuilder->TableCellStyle()->Precision();
			ist_id_value.assign(convert_to_string(precision));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				precision = convert_to_int(soll_id_value);
				_preferencesBuilder->TableCellStyle()->SetPrecision(precision);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies how to treat a situation when the text does not fit within a table cell. 
	//The methods turned on will be the ones used to fit the text to the cell. The order of the list 
	//indicates the order in which they will be executed.
	id_name.assign("Drafting_tabnoteCellFitMethods");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			string input_list;
			input_list.assign(it->second.c_str());
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - %s - input_list = \"%s\" \n", routineName.c_str(), id_name.c_str(), input_list.c_str());

			//Anzahl Inputs ermitteln:
			int anz = 0;
			string toSearch;
			toSearch.assign(":");
			size_t pos = input_list.find(toSearch, 0);
			size_t pos_merker = pos;

			while (pos != std::string::npos) {
				anz++;
				pos = input_list.find(toSearch, pos_merker + 1);
				pos_merker = pos;
			}
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("Drafting_tabnoteCellFitMethods - anz = %d \n", anz);
			std::vector<NXOpen::Annotations::TableCellStyleBuilder::FitMethodType> fitmethods(anz);
			fitmethods = _preferencesBuilder->TableCellStyle()->GetFitMethods();
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - %s - fitmethods.size() = %d \n", routineName.c_str(), id_name.c_str(), fitmethods.size());

			string toErase;
			toErase.assign("&quot;");
			pos = std::string::npos;

			while ((pos = input_list.find(toErase)) != std::string::npos)
			{
				input_list.erase(pos, toErase.length());
			}
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - %s - input_list = \"%s\" \n", routineName.c_str(), id_name.c_str(), input_list.c_str());
			string toReplace;
			toReplace.assign("\\");
			pos = std::string::npos;
			while ((pos = input_list.find(toReplace)) != std::string::npos)
			{
				input_list.replace(pos, toReplace.length(), " ");
			}
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - %s - input_list = \"%s\" \n", routineName.c_str(), id_name.c_str(), input_list.c_str());

			string output_list;
			output_list.assign(input_list);

			for (int i = 0; i<fitmethods.size(); i++) {
				NXOpen::Annotations::TableCellStyleBuilder::FitMethodType methodType;
				methodType = fitmethods[i];
				switch (methodType) {
					//NXOpen::Annotations::TableCellStyleBuilder::FitMethodTypeWrap 3
				case NXOpen::Annotations::TableCellStyleBuilder::FitMethodTypeWrap:
					//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("FitMethodTypeWrap \n");
					//output_list.append("wrap:1 ");
					toReplace.assign("wrap:");
					pos = output_list.find(toReplace);
					output_list.replace(pos, toReplace.size() + 1, toReplace + "1");
					break;
					//NXOpen::Annotations::TableCellStyleBuilder::FitMethodTypeAutoSizeRow 6
				case NXOpen::Annotations::TableCellStyleBuilder::FitMethodTypeAutoSizeRow:
					//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("FitMethodTypeAutoSizeRow \n");
					//output_list.append("auto_size_row:1 ");
					toReplace.assign("auto_size_row:");
					pos = output_list.find(toReplace);
					output_list.replace(pos, toReplace.size() + 1, toReplace + "1");
					break;
					//NXOpen::Annotations::TableCellStyleBuilder::FitMethodTypeAutoSizeText 2
				case NXOpen::Annotations::TableCellStyleBuilder::FitMethodTypeAutoSizeText:
					//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("FitMethodTypeAutoSizeText \n");
					//output_list.append("auto_size_text:1 ");
					toReplace.assign("auto_size_text:");
					pos = output_list.find(toReplace);
					output_list.replace(pos, toReplace.size() + 1, toReplace + "1");
					break;
					//NXOpen::Annotations::TableCellStyleBuilder::FitMethodTypeOverwriteBorder 1
				case NXOpen::Annotations::TableCellStyleBuilder::FitMethodTypeOverwriteBorder:
					//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("FitMethodTypeOverwriteBorder \n");
					//output_list.append("overwrite_border:1 ");
					toReplace.assign("overwrite_border:");
					pos = output_list.find(toReplace);
					output_list.replace(pos, toReplace.size() + 1, toReplace + "1");
					break;
					//NXOpen::Annotations::TableCellStyleBuilder::FitMethodTypeAutoSizeCol 7
				case NXOpen::Annotations::TableCellStyleBuilder::FitMethodTypeAutoSizeCol:
					//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("FitMethodTypeAutoSizeCol \n");
					//output_list.append("auto_size_column:1 ");
					toReplace.assign("auto_size_column:");
					pos = output_list.find(toReplace);
					output_list.replace(pos, toReplace.size() + 1, toReplace + "1");
					break;
					//NXOpen::Annotations::TableCellStyleBuilder::FitMethodTypeAbbreviate 4
				case NXOpen::Annotations::TableCellStyleBuilder::FitMethodTypeAbbreviate:
					//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("FitMethodTypeAbbreviate \n");
					//output_list.append("abbreviate:1 ");
					toReplace.assign("abbreviate:");
					pos = output_list.find(toReplace);
					output_list.replace(pos, toReplace.size() + 1, toReplace + "1");
					break;
					//NXOpen::Annotations::TableCellStyleBuilder::FitMethodTypeRemoveSpaces 5
				case NXOpen::Annotations::TableCellStyleBuilder::FitMethodTypeRemoveSpaces:
					//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("FitMethodTypeRemoveSpaces \n");
					//output_list.append("remove_spaces:1 ");
					toReplace.assign("remove_spaces:");
					pos = output_list.find(toReplace);
					output_list.replace(pos, toReplace.size() + 1, toReplace + "1");
					break;
					//NXOpen::Annotations::TableCellStyleBuilder::FitMethodTypeTruncate 8
				case NXOpen::Annotations::TableCellStyleBuilder::FitMethodTypeTruncate:
					//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("FitMethodTypeTruncate \n");
					//output_list.append("truncate:1 ");
					toReplace.assign("truncate:");
					pos = output_list.find(toReplace);
					output_list.replace(pos, toReplace.size() + 1, toReplace + "1");
					break;
				default:
					if (methodType == NXOpen::Annotations::TableCellStyleBuilder::FitMethodTypeWrap) {
						//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("DEFAULT: FitMethodTypeWrap \n");
						toReplace.assign("wrap:");
						pos = output_list.find(toReplace);
						output_list.replace(pos, toReplace.size() + 1, toReplace + "0");
					}
					if (methodType == NXOpen::Annotations::TableCellStyleBuilder::FitMethodTypeAutoSizeRow) {
						//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("DEFAULT: FitMethodTypeAutoSizeRow \n");
						toReplace.assign("auto_size_row:");
						pos = output_list.find(toReplace);
						output_list.replace(pos, toReplace.size() + 1, toReplace + "0");
					}
					if (methodType == NXOpen::Annotations::TableCellStyleBuilder::FitMethodTypeAutoSizeText) {
						//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("DEFAULT: FitMethodTypeAutoSizeText \n");
						toReplace.assign("auto_size_text:");
						pos = output_list.find(toReplace);
						output_list.replace(pos, toReplace.size() + 1, toReplace + "0");
					}
					if (methodType == NXOpen::Annotations::TableCellStyleBuilder::FitMethodTypeOverwriteBorder) {
						//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("DEFAULT: FitMethodTypeOverwriteBorder \n");
						toReplace.assign("overwrite_border:");
						pos = output_list.find(toReplace);
						output_list.replace(pos, toReplace.size() + 1, toReplace + "0");
					}
					if (methodType == NXOpen::Annotations::TableCellStyleBuilder::FitMethodTypeAutoSizeCol) {
						//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("DEFAULT: FitMethodTypeAutoSizeCol \n");
						toReplace.assign("auto_size_column:");
						pos = output_list.find(toReplace);
						output_list.replace(pos, toReplace.size() + 1, toReplace + "0");
					}
					if (methodType == NXOpen::Annotations::TableCellStyleBuilder::FitMethodTypeAbbreviate) {
						//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("DEFAULT: FitMethodTypeAbbreviate \n");
						toReplace.assign("abbreviate:");
						pos = output_list.find(toReplace);
						output_list.replace(pos, toReplace.size() + 1, toReplace + "0");
					}
					if (methodType == NXOpen::Annotations::TableCellStyleBuilder::FitMethodTypeRemoveSpaces) {
						//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("DEFAULT: FitMethodTypeRemoveSpaces \n");
						toReplace.assign("remove_spaces:");
						pos = output_list.find(toReplace);
						output_list.replace(pos, toReplace.size() + 1, toReplace + "0");
					}
					if (methodType == NXOpen::Annotations::TableCellStyleBuilder::FitMethodTypeTruncate) {
						//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("DEFAULT: FitMethodTypeTruncate \n");
						toReplace.assign("truncate:");
						pos = output_list.find(toReplace);
						output_list.replace(pos, toReplace.size() + 1, toReplace + "0");
					}
					break;
				}
			}

			string result;
			result = retrieveXmlList(output_list);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - %s - retrieveXml(output_list) = \"%s\" \n", routineName.c_str(), id_name.c_str(), output_list.c_str());
			ist_id_value.assign(result);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - %s - ist_id_value = \"%s\" \n", routineName.c_str(), id_name.c_str(), ist_id_value.c_str());
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				string input_list;
				input_list.assign(soll_id_value);

				//Anzahl Inputs ermitteln:
				int anz = 0;
				string toSearch;
				toSearch.assign(":1");
				size_t pos = input_list.find(toSearch, 0);
				size_t pos_merker = pos;

				while (pos != std::string::npos) {
					anz++;
					pos = input_list.find(toSearch, pos_merker + 1);
					pos_merker = pos;
				}

				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - %s - anz = %d \n", routineName.c_str(), id_name.c_str(), anz);
				std::vector<NXOpen::Annotations::TableCellStyleBuilder::FitMethodType> fitmethods(anz);
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("Drafting_tabnoteCellFitMethods - vector done \n");
				int nr = 0;

				if (input_list.find("wrap:1", 0) != std::string::npos) {
					fitmethods.at(nr) = NXOpen::Annotations::TableCellStyleBuilder::FitMethodTypeWrap;
					nr++;
					//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("Drafting_tabnoteCellFitMethods - wrap done \n");
				}
				if (input_list.find("auto_size_row:1", 0) != std::string::npos) {
					fitmethods.at(nr) = NXOpen::Annotations::TableCellStyleBuilder::FitMethodTypeAutoSizeRow;
					nr++;
					//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("Drafting_tabnoteCellFitMethods - auto_size_row done \n");
				}
				if (input_list.find("auto_size_text:1", 0) != std::string::npos) {
					fitmethods.at(nr) = NXOpen::Annotations::TableCellStyleBuilder::FitMethodTypeAutoSizeText;
					nr++;
					//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("Drafting_tabnoteCellFitMethods - auto_size_text done \n");
				}
				if (input_list.find("overwrite_border:1", 0) != std::string::npos) {
					fitmethods.at(nr) = NXOpen::Annotations::TableCellStyleBuilder::FitMethodTypeOverwriteBorder;
					nr++;
					//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("Drafting_tabnoteCellFitMethods - overwrite_border done \n");
				}
				if (input_list.find("auto_size_column:1", 0) != std::string::npos) {
					fitmethods.at(nr) = NXOpen::Annotations::TableCellStyleBuilder::FitMethodTypeAutoSizeCol;
					nr++;
					//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("Drafting_tabnoteCellFitMethods - auto_size_column done \n");
				}
				if (input_list.find("abbreviate:1", 0) != std::string::npos) {
					fitmethods.at(nr) = NXOpen::Annotations::TableCellStyleBuilder::FitMethodTypeAbbreviate;
					nr++;
					//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("Drafting_tabnoteCellFitMethods - abbreviate done \n");
				}
				if (input_list.find("remove_spaces:1", 0) != std::string::npos) {
					fitmethods.at(nr) = NXOpen::Annotations::TableCellStyleBuilder::FitMethodTypeRemoveSpaces;
					nr++;
					//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("Drafting_tabnoteCellFitMethods - remove_spaces done \n");
				}
				if (input_list.find("truncate:1", 0) != std::string::npos) {
					fitmethods.at(nr) = NXOpen::Annotations::TableCellStyleBuilder::FitMethodTypeTruncate;
					nr++;
					//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("Drafting_tabnoteCellFitMethods - truncate done \n");
				}
				_preferencesBuilder->TableCellStyle()->SetFitMethods(fitmethods);
				_preferencesBuilder->Commit();
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("Drafting_tabnoteCellFitMethods - SetFitMethods done \n");

				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("Drafting_tabnoteCellFitMethods - Commit done \n");

				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- STOPP - %s --- \n", routineName.c_str());
}

/*
File - Preferences - Drafting - Table - Common - Section -> Repair these preferences.
*/
void repair_DraftingStandard_Table_Common_Section_prefs(NXOpen::Drafting::PreferencesBuilder *_preferencesBuilder, en_nx_dpv* _nx_dpv, Session * _theSession, Part* _workPart) {
	routineName.assign("repair_DraftingStandard_Table_Common_Section_prefs");
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- START - %s --- \n", routineName.c_str());

	//This option specifies if header rows (if any) display at the top or bottom of the sections.
	id_name.assign("Drafting_tabnoteSectionHeaderLocation");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::TableSectionStyleBuilder::LocationOfHeader headerLocation;
			headerLocation = _preferencesBuilder->TableSection()->HeaderLocation();
			int int_headerLocation;
			//Achtung: Rückgabewert falsch
			int_headerLocation = (int)headerLocation + 1;
			ist_id_value.assign(convert_to_string(int_headerLocation));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				//Achtung: Rückgabewert falsch
				int_headerLocation = convert_to_int(soll_id_value) - 1;
				NXOpen::Annotations::TableSectionStyleBuilder::LocationOfHeader headerLocation;
				headerLocation = (NXOpen::Annotations::TableSectionStyleBuilder::LocationOfHeader)int_headerLocation;
				_preferencesBuilder->TableSection()->SetHeaderLocation(headerLocation);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies maximum height of each section before continuing to the next section. 
	//The value 0 (zero) means that there is no maximum.
	if (_nx_dpv->usedUnitValue.compare("1") == 0) {
		id_name.assign("Drafting_tabnoteSectionMaxHeight_MU");
	}
	else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
		id_name.assign("Drafting_tabnoteSectionMaxHeight_EU");
	}
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double maximumHeight;
			maximumHeight = _preferencesBuilder->TableSection()->MaximumHeight();
			ist_id_value.assign(convert_to_string(maximumHeight));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				maximumHeight = convert_to_double(soll_id_value);
				_preferencesBuilder->TableSection()->SetMaximumHeight(maximumHeight);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies how the tabular note section aligns relative to the cursor 
	//during placement and relative to other sections when origins are aligned.
	id_name.assign("Drafting_tabnoteSectionAttachPoint");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::TableSectionStyleBuilder::AlignmentPositionType alignmentPosition;
			alignmentPosition = _preferencesBuilder->TableSection()->AlignmentPosition();
			int int_alignmentPosition;
			//Achtung: Rückgabewert falsch
			int_alignmentPosition = (int)alignmentPosition + 1;
			ist_id_value.assign(convert_to_string(int_alignmentPosition));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				//Achtung: Rückgabewert falsch
				int_alignmentPosition = convert_to_int(soll_id_value) - 1;
				NXOpen::Annotations::TableSectionStyleBuilder::AlignmentPositionType alignmentPosition;
				alignmentPosition = (NXOpen::Annotations::TableSectionStyleBuilder::AlignmentPositionType)int_alignmentPosition;
				_preferencesBuilder->TableSection()->SetAlignmentPosition(alignmentPosition);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not the border around the tabular note is drawn with two lines.
	id_name.assign("Drafting_tabnoteSectionUseDoubleWidthBorder");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			bool doubleBorder;
			doubleBorder = _preferencesBuilder->TableSection()->DoubleBorder();
			int int_doubleBorder;
			int_doubleBorder = (int)doubleBorder;
			ist_id_value.assign(convert_to_string(int_doubleBorder));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_doubleBorder = convert_to_int(soll_id_value);
				doubleBorder = false;
				if (int_doubleBorder == 1) {
					doubleBorder = true;
				}
				_preferencesBuilder->TableSection()->SetDoubleBorder(doubleBorder);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the distance between the double border lines.
	if (_nx_dpv->usedUnitValue.compare("1") == 0) {
		id_name.assign("Drafting_tabnoteSectionBorderWidth_MU");
	}
	else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
		id_name.assign("Drafting_tabnoteSectionBorderWidth_EU");
	}
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double borderOffset;
			borderOffset = _preferencesBuilder->TableSection()->BorderOffset();
			ist_id_value.assign(convert_to_string(borderOffset));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				borderOffset = convert_to_double(soll_id_value);
				_preferencesBuilder->TableSection()->SetBorderOffset(borderOffset);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies where to expand (relative to the current section) 
	//when continuing rows to new tabular note sections.
	id_name.assign("Drafting_tabnoteSectionOverflowDirection");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::TableSectionStyleBuilder::ContinuationPropertyType continuationProperty;
			continuationProperty = _preferencesBuilder->TableSection()->ContinuationProperty();
			int int_continuationProperty;
			//Achtung: Rückgabewert falsch
			int_continuationProperty = (int)continuationProperty + 1;
			ist_id_value.assign(convert_to_string(int_continuationProperty));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				//Achtung: Rückgabewert falsch
				int_continuationProperty = convert_to_int(soll_id_value) - 1;
				NXOpen::Annotations::TableSectionStyleBuilder::ContinuationPropertyType continuationProperty;
				continuationProperty = (NXOpen::Annotations::TableSectionStyleBuilder::ContinuationPropertyType)int_continuationProperty;
				_preferencesBuilder->TableSection()->SetContinuationProperty(continuationProperty);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//When continuation is set to Left or Right, this option specifies the distance between the previous section and the new section.
	if (_nx_dpv->usedUnitValue.compare("1") == 0) {
		id_name.assign("Drafting_tabnoteSectionOverflowSpacing_MU");
	}
	else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
		id_name.assign("Drafting_tabnoteSectionOverflowSpacing_EU");
	}
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double spacing;
			spacing = _preferencesBuilder->TableSection()->ContinuationSpacing();
			ist_id_value.assign(convert_to_string(spacing));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				spacing = convert_to_double(soll_id_value);
				_preferencesBuilder->TableSection()->SetContinuationSpacing(spacing);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not to display a continuation note on a tabular note
	//section that has reached a size that requires a new section to be added.
	id_name.assign("Drafting_tabnoteSectionDisplayContinuationNote");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::TableSectionStyleBuilder::DisplayContinuationNoteType displayContinuationNote;
			displayContinuationNote = _preferencesBuilder->TableSection()->DisplayContinuationNote();
			int int_displayContinuationNote;
			int_displayContinuationNote = (int)displayContinuationNote;
			ist_id_value.assign(convert_to_string(int_displayContinuationNote));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_displayContinuationNote = convert_to_int(soll_id_value);
				NXOpen::Annotations::TableSectionStyleBuilder::DisplayContinuationNoteType displayContinuationNote;
				displayContinuationNote = (NXOpen::Annotations::TableSectionStyleBuilder::DisplayContinuationNoteType)int_displayContinuationNote;
				_preferencesBuilder->TableSection()->SetDisplayContinuationNote(displayContinuationNote);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the continuation note.
	id_name.assign("Drafting_tabnoteSectionContinuationNote");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXString continuationNote;
			continuationNote = _preferencesBuilder->TableSection()->ContinuationNote();
			ist_id_value.assign(continuationNote.GetLocaleText());
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				continuationNote = (NXString)soll_id_value;
				_preferencesBuilder->TableSection()->SetContinuationNote(continuationNote);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- STOPP - %s --- \n", routineName.c_str());
}

/*
File - Preferences - Drafting - Table - Parts List -> Repair these preferences.
*/
void repair_DraftingStandard_Table_PartsList_prefs(NXOpen::Drafting::PreferencesBuilder *_preferencesBuilder, en_nx_dpv* _nx_dpv, Session * _theSession, Part* _workPart) {
	routineName.assign("repair_DraftingStandard_Table_PartsList_prefs");
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- START - %s --- \n", routineName.c_str());

	//This option specifies the direction of growth for the parts list.
	id_name.assign("Drafting_plistGrowDirection");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::PartsListBuilder::PartsListGrowDirectionOptions growDirectionsOptions;
			growDirectionsOptions = _preferencesBuilder->PartsList()->GrowDirectionOptions();
			int int_growDirectionsOptions;
			//Achtung: Rückgabe falsch
			int_growDirectionsOptions = (int)growDirectionsOptions + 1;
			ist_id_value.assign(convert_to_string(int_growDirectionsOptions));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				//Achtung: Rückgabe falsch
				int_growDirectionsOptions = convert_to_int(soll_id_value) - 1;
				growDirectionsOptions = (NXOpen::Annotations::PartsListBuilder::PartsListGrowDirectionOptions)int_growDirectionsOptions;
				_preferencesBuilder->PartsList()->SetGrowDirectionOptions(growDirectionsOptions);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not the parts list updates automatically 
	//whenever a change occurs to a referenced object in the model.
	id_name.assign("Drafting_plistAutoUpdate");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			bool automaticUpdate;
			automaticUpdate = _preferencesBuilder->PartsList()->AutomaticUpdate();
			int int_automaticUpdate;
			int_automaticUpdate = (int)automaticUpdate;
			ist_id_value.assign(convert_to_string(int_automaticUpdate));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_automaticUpdate = convert_to_int(soll_id_value);
				automaticUpdate = false;
				if (int_automaticUpdate == 1) {
					automaticUpdate = true;
				}
				_preferencesBuilder->PartsList()->SetAutomaticUpdate(automaticUpdate);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not the parts list sorts automatically during update.
	id_name.assign("Drafting_plistSortOnUpdate");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			bool sortOnUpdate;
			sortOnUpdate = _preferencesBuilder->PartsList()->SortOnUpdate();
			int int_sortOnUpdate;
			int_sortOnUpdate = (int)sortOnUpdate;
			ist_id_value.assign(convert_to_string(int_sortOnUpdate));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_sortOnUpdate = convert_to_int(soll_id_value);
				sortOnUpdate = false;
				if (int_sortOnUpdate == 1) {
					sortOnUpdate = true;
				}
				_preferencesBuilder->PartsList()->SetSortOnUpdate(sortOnUpdate);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not new rows in the parts list are locked automatically on creation.
	id_name.assign("Drafting_plistCreateNewRowsAsLocked");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			bool createNewRowAsLocked;
			createNewRowAsLocked = _preferencesBuilder->PartsList()->CreateNewRowAsLocked();
			int int_createNewRowAsLocked;
			int_createNewRowAsLocked = (int)createNewRowAsLocked;
			ist_id_value.assign(convert_to_string(int_createNewRowAsLocked));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_createNewRowAsLocked = convert_to_int(soll_id_value);
				createNewRowAsLocked = false;
				if (int_createNewRowAsLocked == 1) {
					createNewRowAsLocked = true;
				}
				_preferencesBuilder->PartsList()->SetCreateNewRowAsLocked(createNewRowAsLocked);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not manual rows are allowed to be inserted into a parts list.
	id_name.assign("Drafting_plistAllowManualRows");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			bool allowManualRows;
			allowManualRows = _preferencesBuilder->PartsList()->AllowManualRows();
			int int_allowManualRows;
			int_allowManualRows = (int)allowManualRows;
			ist_id_value.assign(convert_to_string(int_allowManualRows));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_allowManualRows = convert_to_int(soll_id_value);
				allowManualRows = false;
				if (int_allowManualRows == 1) {
					allowManualRows = true;
				}
				_preferencesBuilder->PartsList()->SetAllowManualRows(allowManualRows);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies how to show rows that are locked, but reference components 
	//that have been removed from the assembly or have been manually deleted.
	id_name.assign("Drafting_plistShowLockedDeletedRowsMethod");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::PartsListBuilder::PartsListShowLockedDeletedRows showLockedDeleteRows;
			showLockedDeleteRows = _preferencesBuilder->PartsList()->ShowLockedDeletedRows();
			int int_showLockedDeleteRows;
			//Achtung: Rückgabe falsch
			int_showLockedDeleteRows = (int)showLockedDeleteRows + 1;
			ist_id_value.assign(convert_to_string(int_showLockedDeleteRows));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				//Achtung: Rückgabe falsch
				int_showLockedDeleteRows = convert_to_int(soll_id_value) - 1;
				showLockedDeleteRows = (NXOpen::Annotations::PartsListBuilder::PartsListShowLockedDeletedRows)int_showLockedDeleteRows;
				_preferencesBuilder->PartsList()->SetShowLockedDeletedRows(showLockedDeleteRows);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the type of balloon used to call out members 
	//(components, solid bodies, curves, and points) on the drawing.
	id_name.assign("Drafting_plistCalloutType");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::PartsListBuilder::PartsListSymbolType symbol;
			symbol = _preferencesBuilder->PartsList()->Symbol();
			int int_symbol;
			int_symbol = (int)symbol;
			ist_id_value.assign(convert_to_string(int_symbol));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_symbol = convert_to_int(soll_id_value);
				symbol = (NXOpen::Annotations::PartsListBuilder::PartsListSymbolType)int_symbol;
				_preferencesBuilder->PartsList()->SetSymbol(symbol);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the text string used to represent the first callout in the parts list.
	id_name.assign("Drafting_plistInitialCallout");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXString initialCallout;
			initialCallout = _preferencesBuilder->PartsList()->InitialCallout();
			ist_id_value.assign(initialCallout.GetLocaleText());
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				initialCallout = (NXString)soll_id_value;
				_preferencesBuilder->PartsList()->SetInitialCallout(initialCallout);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the amount to increment the callout string between rows.
	id_name.assign("Drafting_plistCalloutIncrement");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			int increment;
			increment = _preferencesBuilder->PartsList()->Increment();
			ist_id_value.assign(convert_to_string(increment));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				increment = convert_to_int(soll_id_value);
				_preferencesBuilder->PartsList()->SetIncrement(increment);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the characters to skip when creating a new callout value.
	id_name.assign("Drafting_plistLettersToSkip");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXString charsToSkip;
			charsToSkip = _preferencesBuilder->PartsList()->CharToSkip();
			ist_id_value.assign(charsToSkip.GetLocaleText());
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				charsToSkip = (NXString)soll_id_value;
				_preferencesBuilder->PartsList()->SetCharToSkip(charsToSkip);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies if the leader on a vertically stacked group of callouts attaches to the top or bottom of the group.
	id_name.assign("Drafting_pVerticalCalloutLeaderAttachment");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::PartsListBuilder::PartsListVerticalGroupLeaderAttachment position;
			position = _preferencesBuilder->PartsList()->VerticalGroupAttachment();
			int int_position;
			int_position = (int)position;
			ist_id_value.assign(convert_to_string(int_position));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_position = convert_to_int(soll_id_value);
				position = (NXOpen::Annotations::PartsListBuilder::PartsListVerticalGroupLeaderAttachment)int_position;
				_preferencesBuilder->PartsList()->SetVerticalGroupAttachment(position);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies whether or not to highlight manual text with brackets.
	id_name.assign("Drafting_plistHighlightManualText");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			bool highlightManualText;
			highlightManualText = _preferencesBuilder->PartsList()->HighlightManualText();
			int int_highlightManualText;
			int_highlightManualText = (int)highlightManualText;
			ist_id_value.assign(convert_to_string(int_highlightManualText));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_highlightManualText = convert_to_int(soll_id_value);
				highlightManualText = false;
				if (int_highlightManualText == 1) {
					highlightManualText = true;
				}
				_preferencesBuilder->PartsList()->SetHighlightManualText(highlightManualText);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the color of the highlight brackets for manual text.
	id_name.assign("Drafting_plistManualTextHighlightColor");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::NXColor *highlightColor;
			highlightColor = _preferencesBuilder->PartsList()->HighlightColor();
			int highlightColorIndex;
			highlightColorIndex = highlightColor->Handle();
			ist_id_value.assign(convert_to_string(highlightColorIndex));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				highlightColorIndex = convert_to_int(soll_id_value);
				highlightColor = _workPart->Colors()->Find(highlightColorIndex);
				_preferencesBuilder->PartsList()->SetHighlightColor(highlightColor);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- STOPP - %s --- \n", routineName.c_str());
}

/*
File - Preferences - Drafting - Table - Tabular Note -> Repair these preferences.
*/
void repair_DraftingStandard_Table_TabularNote_prefs(NXOpen::Drafting::PreferencesBuilder *_preferencesBuilder, en_nx_dpv* _nx_dpv, Session * _theSession, Part* _workPart) {
	routineName.assign("repair_DraftingStandard_Table_TabularNote_prefs");
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- START - %s --- \n", routineName.c_str());

	//This option determines whether or not to lock the format of tabular notes after they are created.
	id_name.assign("Drafting_tabnoteLockFormat");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			bool lockedTableFormat;
			lockedTableFormat = _preferencesBuilder->TabularNoteStyle()->LockTableFormat();
			ist_id_value.assign(convert_to_string(lockedTableFormat));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				lockedTableFormat = convert_to_bool(soll_id_value);
				_preferencesBuilder->TabularNoteStyle()->SetLockTableFormat(lockedTableFormat);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not to lock the contents of tabular notes after they are created.
	id_name.assign("Drafting_tabnoteLockContents");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			bool lockedTableContents;
			lockedTableContents = _preferencesBuilder->TabularNoteStyle()->LockTableContents();
			ist_id_value.assign(convert_to_string(lockedTableContents));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				lockedTableContents = convert_to_bool(soll_id_value);
				_preferencesBuilder->TabularNoteStyle()->SetLockTableContents(lockedTableContents);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not the tabular note updates automatically 
	//whenever a change occurs to a referenced object in the model.
	id_name.assign("Drafting_tabnoteAutoUpdate");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;	
			bool automaticUpdate;
			automaticUpdate = _preferencesBuilder->TabularNoteStyle()->AutomaticUpdate();
			ist_id_value.assign(convert_to_string(automaticUpdate));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				automaticUpdate = convert_to_bool(soll_id_value);
				_preferencesBuilder->TabularNoteStyle()->SetAutomaticUpdate(automaticUpdate);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not the tabular note updates automatically 
	//whenever a change occurs to a referenced object in the model.
	id_name.assign("Drafting_tabnoteShowLockedDeletedRowsMethod");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::TabularNoteStyleBuilder::ShowLockedDeletedRowMethod showLockedDeletedContent;
			showLockedDeletedContent = _preferencesBuilder->TabularNoteStyle()->ShowLockedDeletedContent();
			int int_showLockedDeletedContent;
			//Achtung: Rückgabe falsch
			int_showLockedDeletedContent = (int)showLockedDeletedContent + 1;
			ist_id_value.assign(convert_to_string(int_showLockedDeletedContent));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				//Achtung: Rückgabe falsch
				int_showLockedDeletedContent = convert_to_int(soll_id_value) - 1;
				NXOpen::Annotations::TabularNoteStyleBuilder::ShowLockedDeletedRowMethod showLockedDeletedContent;
				showLockedDeletedContent = (NXOpen::Annotations::TabularNoteStyleBuilder::ShowLockedDeletedRowMethod)int_showLockedDeletedContent;
				_preferencesBuilder->TabularNoteStyle()->SetShowLockedDeletedContent(showLockedDeletedContent);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- STOPP - %s --- \n", routineName.c_str());
}

/*
File - Preferences - Drafting - Table - Bend Table -> Repair these preferences.
*/
void repair_DraftingStandard_Table_BendTable_prefs(NXOpen::Drafting::PreferencesBuilder *_preferencesBuilder, en_nx_dpv* _nx_dpv, Session * _theSession, Part* _workPart) {
	routineName.assign("repair_DraftingStandard_Table_BendTable_prefs");
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- START - %s --- \n", routineName.c_str());

	//This option determines whether or not the bend table updates automatically 
	//whenever a change occurs to a referenced object in the model.
	id_name.assign("DR_BEND_TABLE_AUTOMATIC_UPDATE");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			bool automaticUpdate;
			automaticUpdate = _preferencesBuilder->BendTable()->AutomaticUpdate();
			ist_id_value.assign(convert_to_string(automaticUpdate));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				automaticUpdate = convert_to_bool(soll_id_value);
				_preferencesBuilder->BendTable()->SetAutomaticUpdate(automaticUpdate);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not to sort the bend tables after they are created.
	id_name.assign("DR_BEND_TABLE_SORT_ON_UPDATE");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			bool sortOnUpdate;
			sortOnUpdate = _preferencesBuilder->BendTable()->SortOnUpdate();
			ist_id_value.assign(convert_to_string(sortOnUpdate));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				sortOnUpdate = convert_to_bool(soll_id_value);
				_preferencesBuilder->BendTable()->SetSortOnUpdate(sortOnUpdate);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This list specifies which bend table columns should be displayed and their order.
	id_name.assign("DR_BEND_TABLE_COLUMNS");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			string input_list;
			input_list.assign(it->second.c_str());
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - %s - input_list = \"%s\" \n", routineName.c_str(), id_name.c_str(), input_list.c_str());

			//Anzahl Inputs ermitteln:
			int anz = 0;
			string toSearch;
			toSearch.assign(":");
			size_t pos = input_list.find(toSearch, 0);
			size_t pos_merker = pos;

			while (pos != std::string::npos) {
				anz++;
				pos = input_list.find(toSearch, pos_merker + 1);
				pos_merker = pos;
			}
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("DR_BEND_TABLE_COLUMNS - anz = %d \n", anz);
			std::vector<NXOpen::Annotations::BendTableSettingsBuilder::ColumnType> columnOrders(anz);
			columnOrders = _preferencesBuilder->BendTable()->GetColumnOrder();
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - %s - columnOrders.size() = %d \n", routineName.c_str(), id_name.c_str(), columnOrders.size());

			string toErase;
			toErase.assign("&quot;");
			pos = std::string::npos;

			while ((pos = input_list.find(toErase)) != std::string::npos)
			{
				input_list.erase(pos, toErase.length());
			}
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - %s - input_list = \"%s\" \n", routineName.c_str(), id_name.c_str(), input_list.c_str());
			string toReplace;
			toReplace.assign("\\");
			pos = std::string::npos;
			while ((pos = input_list.find(toReplace)) != std::string::npos)
			{
				input_list.replace(pos, toReplace.length(), " ");
			}
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s- %s - input_list = \"%s\" \n", routineName.c_str(), id_name.c_str(), input_list.c_str());


			//columnOrders.begin();
			string output_list;
			output_list.assign(input_list);
			//output_list.clear();

			for (int i = 0; i<columnOrders.size(); i++) {
				NXOpen::Annotations::BendTableSettingsBuilder::ColumnType columnOrder;
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("i=%d \n", i);
				columnOrder = columnOrders[i];
				switch (columnOrder) {
					//NXOpen::Annotations::BendTableSettingsBuilder::ColumnTypeBendID 0
				case NXOpen::Annotations::BendTableSettingsBuilder::ColumnTypeBendID:
					//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("ColumnTypeBendID \n");
					//output_list.append("BEND_ID:1 ");
					toReplace.assign("BEND_ID:");
					pos = output_list.find(toReplace);
					//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("ColumnTypeBendID pos done \n");
					output_list.replace(pos, toReplace.size() + 1, toReplace + "1");
					//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("ColumnTypeBendID output_list.replace done \n");
					break;
					//NXOpen::Annotations::BendTableSettingsBuilder::ColumnTypeBendName 1
				case NXOpen::Annotations::BendTableSettingsBuilder::ColumnTypeBendName:
					//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("ColumnTypeBendName \n");
					//output_list.append("BEND_NAME:1 ");
					toReplace.assign("BEND_NAME:");
					pos = output_list.find(toReplace);
					output_list.replace(pos, toReplace.size() + 1, toReplace + "1");
					break;
					//NXOpen::Annotations::BendTableSettingsBuilder::ColumnTypeBendRadius 2
				case NXOpen::Annotations::BendTableSettingsBuilder::ColumnTypeBendRadius:
					//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("ColumnTypeBendRadius \n");
					//output_list.append("BEND_RADIUS:1 ");
					toReplace.assign("BEND_RADIUS:");
					pos = output_list.find(toReplace);
					output_list.replace(pos, toReplace.size() + 1, toReplace + "1");
					break;
					//NXOpen::Annotations::BendTableSettingsBuilder::ColumnTypeBendAngle 3
				case NXOpen::Annotations::BendTableSettingsBuilder::ColumnTypeBendAngle:
					//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("ColumnTypeBendAngle \n");
					//output_list.append("BEND_ANGLE:1 ");
					toReplace.assign("BEND_ANGLE:");
					pos = output_list.find(toReplace);
					output_list.replace(pos, toReplace.size() + 1, toReplace + "1");
					break;
					//NXOpen::Annotations::BendTableSettingsBuilder::ColumnTypeBendDirection 4
				case NXOpen::Annotations::BendTableSettingsBuilder::ColumnTypeBendDirection:
					//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("ColumnTypeBendDirection \n");
					//output_list.append("BEND_DIRECTION:1 ");
					toReplace.assign("BEND_DIRECTION:");
					pos = output_list.find(toReplace);
					output_list.replace(pos, toReplace.size() + 1, toReplace + "1");
					break;
					//NXOpen::Annotations::BendTableSettingsBuilder::ColumnTypeIncludedAngle 5
				case NXOpen::Annotations::BendTableSettingsBuilder::ColumnTypeIncludedAngle:
					//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("ColumnTypeIncludedAngle \n");
					//output_list.append("INCLUDED_ANGLE:1 ");
					toReplace.assign("INCLUDED_ANGLE:");
					pos = output_list.find(toReplace);
					output_list.replace(pos, toReplace.size() + 1, toReplace + "1");
					break;

				default:
					if (columnOrder == NXOpen::Annotations::BendTableSettingsBuilder::ColumnTypeBendID) {
						//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("DEFAULT: ColumnTypeBendID \n");
						//output_list.append("BEND_ID: 0 ");
						toReplace.assign("BEND_ID:");
						pos = output_list.find(toReplace);
						output_list.replace(pos, toReplace.size() + 1, toReplace + "0");
					}
					if (columnOrder == NXOpen::Annotations::BendTableSettingsBuilder::ColumnTypeBendName) {
						//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("DEFAULT: ColumnTypeBendName \n");
						//output_list.append("BEND_NAME: 0 ");
						toReplace.assign("BEND_NAME:");
						pos = output_list.find(toReplace);
						output_list.replace(pos, toReplace.size() + 1, toReplace + "0");
					}
					if (columnOrder == NXOpen::Annotations::BendTableSettingsBuilder::ColumnTypeBendRadius) {
						//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("DEFAULT: ColumnTypeBendRadius \n");
						//output_list.append("BEND_RADIUS: 0 ");
						toReplace.assign("BEND_RADIUS:");
						pos = output_list.find(toReplace);
						output_list.replace(pos, toReplace.size() + 1, toReplace + "0");
					}
					if (columnOrder == NXOpen::Annotations::BendTableSettingsBuilder::ColumnTypeBendAngle) {
						//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("DEFAULT: ColumnTypeBendAngle \n");
						//output_list.append("BEND_ANGLE: 0 ");
						toReplace.assign("BEND_ANGLE:");
						pos = output_list.find(toReplace);
						output_list.replace(pos, toReplace.size() + 1, toReplace + "0");
					}
					if (columnOrder == NXOpen::Annotations::BendTableSettingsBuilder::ColumnTypeBendDirection) {
						//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("DEFAULT: ColumnTypeBendDirection \n");
						//output_list.append("BEND_DIRECTION: 0 ");
						toReplace.assign("BEND_DIRECTION:");
						pos = output_list.find(toReplace);
						output_list.replace(pos, toReplace.size() + 1, toReplace + "0");
					}
					if (columnOrder == NXOpen::Annotations::BendTableSettingsBuilder::ColumnTypeIncludedAngle) {
						//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("DEFAULT: ColumnTypeIncludedAngle \n");
						//output_list.append("INCLUDED_ANGLE: 0 ");
						toReplace.assign("INCLUDED_ANGLE:");
						pos = output_list.find(toReplace);
						output_list.replace(pos, toReplace.size() + 1, toReplace + "0");
					}
					break;
				}
			}
			//output_list.pop_back();
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - %s - output_list = \"%s\" \n", routineName.c_str(), id_name.c_str(), output_list.c_str());


			//output_list.append("""");
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - %s - output_list=%s \n", routineName.c_str(), id_name.c_str(), output_list.c_str());

			string result;
			result = retrieveXmlList(output_list);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - %s - retrieveXml(output_list) = \"%s\" \n", routineName.c_str(), id_name.c_str(), output_list.c_str());
			ist_id_value.assign(result);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - %s - ist_id_value = \"%s\" \n", routineName.c_str(), id_name.c_str(), ist_id_value.c_str());
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				input_list.assign(soll_id_value);

				//Anzahl Inputs ermitteln:
				int anz = 0;
				string toSearch;
				toSearch.assign(":1");
				size_t pos = input_list.find(toSearch, 0);
				size_t pos_merker = pos;

				while (pos != std::string::npos) {
					anz++;
					pos = input_list.find(toSearch, pos_merker + 1);
					pos_merker = pos;
				}

				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - %s - anz = %d \n", routineName.c_str(), id_name.c_str(), anz);
				std::vector<NXOpen::Annotations::BendTableSettingsBuilder::ColumnType> columnOrder(anz);
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("DR_BEND_TABLE_COLUMNS - vector done \n");
				int nr = 0;

				if (input_list.find("BEND_ID:1", 0) != std::string::npos) {
					columnOrder.at(nr) = NXOpen::Annotations::BendTableSettingsBuilder::ColumnTypeBendRadius;
					nr++;
					//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("DR_BEND_TABLE_COLUMNS - BEND_ID done \n");
				}
				if (input_list.find("BEND_NAME:1", 0) != std::string::npos) {
					columnOrder.at(nr) = NXOpen::Annotations::BendTableSettingsBuilder::ColumnTypeBendAngle;
					nr++;
					//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("DR_BEND_TABLE_COLUMNS - BEND_NAME done \n");
				}
				if (input_list.find("BEND_RADIUS:1", 0) != std::string::npos) {
					columnOrder.at(nr) = NXOpen::Annotations::BendTableSettingsBuilder::ColumnTypeBendDirection;
					nr++;
					//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("DR_BEND_TABLE_COLUMNS - BEND_RADIUS done \n");
				}
				if (input_list.find("BEND_ANGLE:1", 0) != std::string::npos) {
					columnOrder.at(nr) = NXOpen::Annotations::BendTableSettingsBuilder::ColumnTypeIncludedAngle;
					nr++;
					//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("DR_BEND_TABLE_COLUMNS - BEND_ANGLE done \n");
				}
				if (input_list.find("BEND_DIRECTION:1", 0) != std::string::npos) {
					columnOrder.at(nr) = NXOpen::Annotations::BendTableSettingsBuilder::ColumnTypeBendID;
					nr++;
					//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("DR_BEND_TABLE_COLUMNS - BEND_DIRECTION done \n");
				}
				if (input_list.find("INCLUDED_ANGLE:1", 0) != std::string::npos) {
					columnOrder.at(nr) = NXOpen::Annotations::BendTableSettingsBuilder::ColumnTypeBendName;
					nr++;
					//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("DR_BEND_TABLE_COLUMNS - INCLUDED_ANGLE done \n");
				}
				_preferencesBuilder->BendTable()->SetColumnOrder(columnOrder);
				_preferencesBuilder->Commit();
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("DR_BEND_TABLE_COLUMNS - SetColumnOrder done \n");

				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("DR_BEND_TABLE_COLUMNS - Commit done \n");

				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the column to be used to sort the bend table.
	id_name.assign("DR_BEND_TABLE_SORT_COLUMN");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::BendTableSettingsBuilder::ColumnType sortColumn;
			sortColumn = _preferencesBuilder->BendTable()->SortColumn();
			int int_sortColumn;
			int_sortColumn = (int)sortColumn;
			ist_id_value.assign(convert_to_string(int_sortColumn));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_sortColumn = convert_to_int(soll_id_value);
				sortColumn = (NXOpen::Annotations::BendTableSettingsBuilder::ColumnType)int_sortColumn;
				_preferencesBuilder->BendTable()->SetSortColumn(sortColumn);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- STOPP - %s --- \n", routineName.c_str());
}

/*
File - Preferences - Drafting - Table - Hole Table - Workflow -> Repair these preferences.
*/
void repair_DraftingStandard_Table_HoleTable_Workflow_prefs(NXOpen::Drafting::PreferencesBuilder *_preferencesBuilder, en_nx_dpv* _nx_dpv, Session * _theSession, Part* _workPart) {
	routineName.assign("repair_DraftingStandard_Table_HoleTable_Workflow_prefs");
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- START - %s --- \n", routineName.c_str());

	//This option determines whether or not to lock the format of hole tables after they are created.
	id_name.assign("DR_HOLEREPORT_LOCK_FORMAT");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			bool lockedTableFormat;
			lockedTableFormat = _preferencesBuilder->HoleTableWorkflow()->LockTableFormat();
			ist_id_value.assign(convert_to_string(lockedTableFormat));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				lockedTableFormat = convert_to_bool(soll_id_value);
				_preferencesBuilder->HoleTableWorkflow()->SetLockTableFormat(lockedTableFormat);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not to lock the contents of hole tables after they are created.
	id_name.assign("DR_HOLEREPORT_LOCK_CONTENTS");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			bool lockedTableContents;
			lockedTableContents = _preferencesBuilder->HoleTableWorkflow()->LockTableContents();
			ist_id_value.assign(convert_to_string(lockedTableContents));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				lockedTableContents = convert_to_bool(soll_id_value);
				_preferencesBuilder->HoleTableWorkflow()->SetLockTableContents(lockedTableContents);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not the hole table updates automatically 
	//whenever a change occurs to a referenced object in the model.
	id_name.assign("DR_HOLEREPORT_AUTO_UPDATE");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			bool automaticUpdate;
			automaticUpdate = _preferencesBuilder->HoleTableWorkflow()->AutomaticUpdate();
			ist_id_value.assign(convert_to_string(automaticUpdate));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				automaticUpdate = convert_to_bool(soll_id_value);
				_preferencesBuilder->HoleTableWorkflow()->SetAutomaticUpdate(automaticUpdate);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies how to show rows that are locked, but have been deleted.
	id_name.assign("DR_HOLEREPORT_LOCKED_DELETED_ROWS_METHOD");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::TabularNoteStyleBuilder::ShowLockedDeletedRowMethod showLockedDeletedContent;
			showLockedDeletedContent = _preferencesBuilder->HoleTableWorkflow()->ShowLockedDeletedContent();
			int int_showLockedDeletedContent;
			//Achtung: Rückgabewert falsch
			int_showLockedDeletedContent = (int)showLockedDeletedContent + 1;
			ist_id_value.assign(convert_to_string(int_showLockedDeletedContent));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				//Achtung: Rückgabewert falsch
				int_showLockedDeletedContent = convert_to_int(soll_id_value) - 1;
				showLockedDeletedContent = (NXOpen::Annotations::TabularNoteStyleBuilder::ShowLockedDeletedRowMethod)int_showLockedDeletedContent;
				_preferencesBuilder->HoleTableWorkflow()->SetShowLockedDeletedContent(showLockedDeletedContent);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- STOPP - %s --- \n", routineName.c_str());
}

/*
File - Preferences - Drafting - Table - Hole Table - Format -> Repair these preferences.
*/
void repair_DraftingStandard_Table_HoleTable_Format_prefs(NXOpen::Drafting::PreferencesBuilder *_preferencesBuilder, en_nx_dpv* _nx_dpv, Session * _theSession, Part* _workPart) {
	routineName.assign("repair_DraftingStandard_Table_HoleTable_Format_prefs");
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- START - %s --- \n", routineName.c_str());

	//This option determines whether or not to display the part and body name in a hole table.
	id_name.assign("DR_HOLEREPORT_DISPLAY_PART_BODY_NAME");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			bool displayPartBodyName;
			displayPartBodyName = _preferencesBuilder->HoleTableFormat()->DisplayPartBodyName();
			ist_id_value.assign(convert_to_string(displayPartBodyName));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				displayPartBodyName = convert_to_bool(soll_id_value);
				_preferencesBuilder->HoleTableFormat()->SetDisplayPartBodyName(displayPartBodyName);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies which columns to display in a hole table.
	id_name.assign("DR_HOLEREPORT_DISPLAY_COLUMNS");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::HoleTableSettingsFormatBuilder::ShowColumnsType showColumns;
			showColumns = _preferencesBuilder->HoleTableFormat()->ShowColumns();
			int int_showColumns;
			int_showColumns = (int)showColumns;
			ist_id_value.assign(convert_to_string(int_showColumns));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_showColumns = convert_to_int(soll_id_value);
				showColumns = (NXOpen::Annotations::HoleTableSettingsFormatBuilder::ShowColumnsType)int_showColumns;
				_preferencesBuilder->HoleTableFormat()->SetShowColumns(showColumns);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies how the hole sizes are presented in the table. The hole sizes may 
	//be displayed in a summary row with the holes of the same size grouped beneath the summary 
	//row or the hole size may be listed in a column with each hole.
	id_name.assign("DR_HOLEREPORT_SIZE_FORMAT");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::HoleTableSettingsFormatBuilder::SizeFormatType sizeFormat;
			sizeFormat = _preferencesBuilder->HoleTableFormat()->SizeFormat();
			int int_sizeFormat;
			int_sizeFormat = (int)sizeFormat;
			ist_id_value.assign(convert_to_string(int_sizeFormat));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_sizeFormat = convert_to_int(soll_id_value);
				sizeFormat = (NXOpen::Annotations::HoleTableSettingsFormatBuilder::SizeFormatType)int_sizeFormat;
				_preferencesBuilder->HoleTableFormat()->SetSizeFormat(sizeFormat);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//When the Size Format option is set to Display in Column, this option specifies 
	//whether the hole size will be displayed in each row or in column cells merged 
	//together for hole sizes of the same size.
	id_name.assign("DR_HOLEREPORT_MERGE_CELLS");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			bool mergeCellsWithSameSize;
			mergeCellsWithSameSize = _preferencesBuilder->HoleTableFormat()->MergeCellsWithSameSize();
			ist_id_value.assign(convert_to_string(mergeCellsWithSameSize));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				mergeCellsWithSameSize = convert_to_bool(soll_id_value);
				_preferencesBuilder->HoleTableFormat()->SetMergeCellsWithSameSize(mergeCellsWithSameSize);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not to display all text in uppercase letters.
	id_name.assign("DR_HOLEREPORT_ALL_CAPS");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			bool displayAllTextInUpperCase;
			displayAllTextInUpperCase = _preferencesBuilder->HoleTableFormat()->DisplayAllTextInUpperCase();
			ist_id_value.assign(convert_to_string(displayAllTextInUpperCase));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				displayAllTextInUpperCase = convert_to_bool(soll_id_value);
				_preferencesBuilder->HoleTableFormat()->SetDisplayAllTextInUpperCase(displayAllTextInUpperCase);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not to report the tap hole size for threaded holes.
	id_name.assign("DR_HOLEREPORT_TAP_HOLE");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			bool reportTapHoleSizeForThreadedHoles;
			reportTapHoleSizeForThreadedHoles = _preferencesBuilder->HoleTableFormat()->ReportTapHoleSizeForThreadedHoles();
			ist_id_value.assign(convert_to_string(reportTapHoleSizeForThreadedHoles));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				reportTapHoleSizeForThreadedHoles = convert_to_bool(soll_id_value);
				_preferencesBuilder->HoleTableFormat()->SetReportTapHoleSizeForThreadedHoles(reportTapHoleSizeForThreadedHoles);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the number of decimal places for numerical values in the hole table.
	if (_nx_dpv->usedUnitValue.compare("1") == 0) {
		id_name.assign("DR_HOLEREPORT_PRECISION_MU");
	}
	else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
		id_name.assign("DR_HOLEREPORT_PRECISION_EU");
	}
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			int decimalPlaces;
			decimalPlaces = _preferencesBuilder->HoleTableFormat()->DecimalPlaces();
			ist_id_value.assign(convert_to_string(decimalPlaces));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				decimalPlaces = convert_to_int(soll_id_value);
				_preferencesBuilder->HoleTableFormat()->SetDecimalPlaces(decimalPlaces);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the number of decimal places for numerical values in the hole table.
	if (_nx_dpv->usedUnitValue.compare("1") == 0) {
		id_name.assign("DR_HOLEREPORT_PRECISION_MU");
	}
	else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
		id_name.assign("DR_HOLEREPORT_PRECISION_EU");
	}
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			int decimalPlaces;
			decimalPlaces = _preferencesBuilder->HoleTableFormat()->DecimalPlaces();
			ist_id_value.assign(convert_to_string(decimalPlaces));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				decimalPlaces = convert_to_int(soll_id_value);
				_preferencesBuilder->HoleTableFormat()->SetDecimalPlaces(decimalPlaces);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies how to show rows that are deleted.
	id_name.assign("DR_HOLEREPORT_DELETED_HOLES_DISPLAY");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::HoleTableSettingsFormatBuilder::DeletedHolesDisplayType deletedHolesDisplay;
			deletedHolesDisplay = _preferencesBuilder->HoleTableFormat()->DeletedHolesDisplay();
			int int_deletedHolesDisplay;
			int_deletedHolesDisplay = (int)deletedHolesDisplay;
			ist_id_value.assign(convert_to_string(int_deletedHolesDisplay));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_deletedHolesDisplay = convert_to_int(soll_id_value);
				deletedHolesDisplay = (NXOpen::Annotations::HoleTableSettingsFormatBuilder::DeletedHolesDisplayType)int_deletedHolesDisplay;
				_preferencesBuilder->HoleTableFormat()->SetDeletedHolesDisplay(deletedHolesDisplay);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies how to report the depth of holes.
	id_name.assign("DR_HOLEREPORT_DEPTH_DATUM");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::HoleTableSettingsFormatBuilder::DepthMeasurementDatumType depthMeasurementDatum;
			depthMeasurementDatum = _preferencesBuilder->HoleTableFormat()->DepthMeasurementDatum();
			int int_depthMeasurementDatum;
			int_depthMeasurementDatum = (int)depthMeasurementDatum;
			ist_id_value.assign(convert_to_string(int_depthMeasurementDatum));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_depthMeasurementDatum = convert_to_int(soll_id_value);
				depthMeasurementDatum = (NXOpen::Annotations::HoleTableSettingsFormatBuilder::DepthMeasurementDatumType)int_depthMeasurementDatum;
				_preferencesBuilder->HoleTableFormat()->SetDepthMeasurementDatum(depthMeasurementDatum);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- STOPP - %s --- \n", routineName.c_str());
}

/*
File - Preferences - Drafting - Table - Hole Table - Content -> Repair these preferences.
*/
void repair_DraftingStandard_Table_HoleTable_Content_prefs(NXOpen::Drafting::PreferencesBuilder *_preferencesBuilder, en_nx_dpv* _nx_dpv, Session * _theSession, Part* _workPart) {
	routineName.assign("repair_DraftingStandard_Table_HoleTable_Content_prefs");
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- START - %s --- \n", routineName.c_str());

	//This list specifies which hole table columns should be displayed and their order.
	id_name.assign("DR_HOLEREPORT_DETAIL");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
	
			string input_list;
			input_list.assign(it->second.c_str());
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - %s - input_list = \"%s\" \n", routineName.c_str(), id_name.c_str(), input_list.c_str());

			//Anzahl Inputs ermitteln:
			int anz = 0;
			string toSearch;
			toSearch.assign(":");
			size_t pos = input_list.find(toSearch, 0);
			size_t pos_merker = pos;

			while (pos != std::string::npos) {
				anz++;
				pos = input_list.find(toSearch, pos_merker + 1);
				pos_merker = pos;
			}
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - %s - anz = %d \n", routineName.c_str(), id_name.c_str(), anz);
			std::vector<NXOpen::Annotations::HoleTableSettingsContentBuilder::Content> contentOrders(anz);
			contentOrders = _preferencesBuilder->HoleTableContent()->GetContentOrder();
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - %s - contentOrders.size() = %d \n", routineName.c_str(), id_name.c_str(), contentOrders.size());

			string toErase;
			toErase.assign("&quot;");
			pos = std::string::npos;

			while ((pos = input_list.find(toErase)) != std::string::npos)
			{
				input_list.erase(pos, toErase.length());
			}
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - %s - input_list = \"%s\" \n", routineName.c_str(), id_name.c_str(), input_list.c_str());
			string toReplace;
			toReplace.assign("\\");
			pos = std::string::npos;
			while ((pos = input_list.find(toReplace)) != std::string::npos)
			{
				input_list.replace(pos, toReplace.length(), " ");
			}
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - %s - input_list = \"%s\" \n", routineName.c_str(), id_name.c_str(), input_list.c_str());

			string output_list;
			output_list.assign(input_list);

			for (int i = 0; i < contentOrders.size(); i++) {
				NXOpen::Annotations::HoleTableSettingsContentBuilder::Content contentorder;
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("i=%d \n", i);
				contentorder = contentOrders[i];
				switch (contentorder) {
					//NXOpen::Annotations::HoleTableSettingsContentBuilder::ContentDiameter 0
				case NXOpen::Annotations::HoleTableSettingsContentBuilder::ContentDiameter:
					//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("ContentDiameter \n");
					//output_list.append("HOLE_DIAMETER:1 ");
					toReplace.assign("HOLE_DIAMETER:");
					pos = output_list.find(toReplace);
					output_list.replace(pos, toReplace.size() + 1, toReplace + "1");
					break;
					//NXOpen::Annotations::HoleTableSettingsContentBuilder::ContentDiameterFit 1
				case NXOpen::Annotations::HoleTableSettingsContentBuilder::ContentDiameterFit:
					//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("ContentDiameterFit \n");
					//output_list.append("HOLE_DIAMETER_FIT:1 ");
					toReplace.assign("HOLE_DIAMETER_FIT:");
					pos = output_list.find(toReplace);
					output_list.replace(pos, toReplace.size() + 1, toReplace + "1");
					break;
					//NXOpen::Annotations::HoleTableSettingsContentBuilder::ContentDepth 2
				case NXOpen::Annotations::HoleTableSettingsContentBuilder::ContentDepth:
					//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("ContentDepth \n");
					//output_list.append("HOLE_DEPTH:1 ");
					toReplace.assign("HOLE_DEPTH:");
					pos = output_list.find(toReplace);
					output_list.replace(pos, toReplace.size() + 1, toReplace + "1");
					break;
					//NXOpen::Annotations::HoleTableSettingsContentBuilder::ContentDepthFit 3
				case NXOpen::Annotations::HoleTableSettingsContentBuilder::ContentDepthFit:
					//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("ContentDepthFit \n");
					//output_list.append("HOLE_DEPTH_FIT:1 ");
					toReplace.assign("HOLE_DEPTH_FIT:");
					pos = output_list.find(toReplace);
					output_list.replace(pos, toReplace.size() + 1, toReplace + "1");
					break;
					//NXOpen::Annotations::HoleTableSettingsContentBuilder::ContentDrillType 4
				case NXOpen::Annotations::HoleTableSettingsContentBuilder::ContentDrillType:
					//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("ContentDrillType \n");
					//output_list.append("HOLE_DRILL_TYPE:1 ");
					toReplace.assign("HOLE_DRILL_TYPE:");
					pos = output_list.find(toReplace);
					output_list.replace(pos, toReplace.size() + 1, toReplace + "1");
					break;
					//NXOpen::Annotations::HoleTableSettingsContentBuilder::ContentDrillDirection 5
				case NXOpen::Annotations::HoleTableSettingsContentBuilder::ContentDrillDirection:
					//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("ContentDrillDirection \n");
					//output_list.append("HOLE_DRILL_DIRECTION:1 ");
					toReplace.assign("HOLE_DRILL_DIRECTION:");
					pos = output_list.find(toReplace);
					output_list.replace(pos, toReplace.size() + 1, toReplace + "1");
					break;

				default:
					if (contentorder == NXOpen::Annotations::HoleTableSettingsContentBuilder::ContentDiameter) {
						//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("DEFAULT: ContentDiameter \n");
						//output_list.append("HOLE_DIAMETER: 0 ");
						toReplace.assign("HOLE_DIAMETER:");
						pos = output_list.find(toReplace);
						output_list.replace(pos, toReplace.size() + 1, toReplace + "0");
					}
					if (contentorder == NXOpen::Annotations::HoleTableSettingsContentBuilder::ContentDiameterFit) {
						//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("DEFAULT: ContentDiameterFit \n");
						//output_list.append("HOLE_DIAMETER_FIT: 0 ");
						toReplace.assign("HOLE_DIAMETER_FIT:");
						pos = output_list.find(toReplace);
						output_list.replace(pos, toReplace.size() + 1, toReplace + "0");
					}
					if (contentorder == NXOpen::Annotations::HoleTableSettingsContentBuilder::ContentDepth) {
						//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("DEFAULT: ContentDepth \n");
						//output_list.append("HOLE_DEPTH: 0 ");
						toReplace.assign("HOLE_DEPTH:");
						pos = output_list.find(toReplace);
						output_list.replace(pos, toReplace.size() + 1, toReplace + "0");
					}
					if (contentorder == NXOpen::Annotations::HoleTableSettingsContentBuilder::ContentDepthFit) {
						//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("DEFAULT: ContentDepthFit \n");
						//output_list.append("HOLE_DEPTH_FIT: 0 ");
						toReplace.assign("HOLE_DEPTH_FIT:");
						pos = output_list.find(toReplace);
						output_list.replace(pos, toReplace.size() + 1, toReplace + "0");
					}
					if (contentorder == NXOpen::Annotations::HoleTableSettingsContentBuilder::ContentDrillType) {
						//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("DEFAULT: ContentDrillType \n");
						//output_list.append("HOLE_DRILL_TYPE: 0 ");
						toReplace.assign("HOLE_DRILL_TYPE:");
						pos = output_list.find(toReplace);
						output_list.replace(pos, toReplace.size() + 1, toReplace + "0");
					}
					if (contentorder == NXOpen::Annotations::HoleTableSettingsContentBuilder::ContentDrillDirection) {
						//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("DEFAULT: ContentDrillDirection \n");
						//output_list.append("HOLE_DRILL_DIRECTION: 0 ");
						toReplace.assign("HOLE_DRILL_DIRECTION:");
						pos = output_list.find(toReplace);
						output_list.replace(pos, toReplace.size() + 1, toReplace + "0");
					}
					break;
				}
			}
			//output_list.pop_back();
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - %s - output_list = \"%s\" \n", routineName.c_str(), id_name.c_str(), output_list.c_str());


			//output_list.append("""");
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - %s - output_list=%s \n", routineName.c_str(), id_name.c_str(), output_list.c_str());
			string result;
			result = retrieveXmlList(output_list);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - %s - retrieveXml(output_list) = \"%s\" \n", routineName.c_str(), id_name.c_str(), output_list.c_str());
			ist_id_value.assign(result);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - %s - ist_id_value = \"%s\" \n", routineName.c_str(), id_name.c_str(), ist_id_value.c_str());
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				input_list.assign(soll_id_value);

				//Anzahl Inputs ermitteln:
				int anz = 0;
				string toSearch;
				toSearch.assign(":1");
				size_t pos = input_list.find(toSearch, 0);
				size_t pos_merker = pos;

				while (pos != std::string::npos) {
					anz++;
					pos = input_list.find(toSearch, pos_merker + 1);
					pos_merker = pos;
				}

				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - %s - anz = %d \n", routineName.c_str(), id_name.c_str(), anz);
				std::vector<NXOpen::Annotations::HoleTableSettingsContentBuilder::Content> contentorder(anz);
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - %s - vector done \n", routineName.c_str(), id_name.c_str());
				int nr = 0;

				if (input_list.find("HOLE_DIAMETER:1", 0) != std::string::npos) {
					contentorder.at(nr) = NXOpen::Annotations::HoleTableSettingsContentBuilder::ContentDiameter;
					nr++;
					//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - %s - BEND_ID done \n", routineName.c_str(), id_name.c_str());
				}
				if (input_list.find("HOLE_DIAMETER_FIT:1", 0) != std::string::npos) {
					contentorder.at(nr) = NXOpen::Annotations::HoleTableSettingsContentBuilder::ContentDiameterFit;
					nr++;
					//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - %s - BEND_NAME done \n", routineName.c_str(), id_name.c_str());
				}
				if (input_list.find("HOLE_DEPTH:1", 0) != std::string::npos) {
					contentorder.at(nr) = NXOpen::Annotations::HoleTableSettingsContentBuilder::ContentDepth;
					nr++;
					//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - %s - BEND_RADIUS done \n", routineName.c_str(), id_name.c_str());
				}
				if (input_list.find("HOLE_DEPTH_FIT:1", 0) != std::string::npos) {
					contentorder.at(nr) = NXOpen::Annotations::HoleTableSettingsContentBuilder::ContentDepthFit;
					nr++;
					//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - %s - BEND_ANGLE done \n", routineName.c_str(), id_name.c_str());
				}
				if (input_list.find("HOLE_DRILL_TYPE:1", 0) != std::string::npos) {
					contentorder.at(nr) = NXOpen::Annotations::HoleTableSettingsContentBuilder::ContentDrillType;
					nr++;
					//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - %s - BEND_DIRECTION done \n", routineName.c_str(), id_name.c_str());
				}
				if (input_list.find("HOLE_DRILL_DIRECTION:1", 0) != std::string::npos) {
					contentorder.at(nr) = NXOpen::Annotations::HoleTableSettingsContentBuilder::ContentDrillDirection;
					nr++;
					//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - %s - INCLUDED_ANGLE done \n", routineName.c_str(), id_name.c_str());
				}
				_preferencesBuilder->HoleTableContent()->SetContentOrder(contentorder);
				_preferencesBuilder->Commit();
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - %s - SetContentOrder done \n", routineName.c_str(), id_name.c_str());

				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - %s - Commit done \n", routineName.c_str(), id_name.c_str());

				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- STOPP - %s --- \n", routineName.c_str());
}

/*
File - Preferences - Drafting - Table - Hole Table - Hole Filters -> Repair these preferences.
*/
void repair_DraftingStandard_Table_HoleTable_HoleFilters_prefs(NXOpen::Drafting::PreferencesBuilder *_preferencesBuilder, en_nx_dpv* _nx_dpv, Session * _theSession, Part* _workPart) {
	routineName.assign("repair_DraftingStandard_Table_HoleTable_HoleFilters_prefs");
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- START - %s --- \n", routineName.c_str());

	//This option determines whether or not to include through holes in the hole table.
	id_name.assign("DR_HOLEREPORT_TYPE1");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			bool throughHoles;
			throughHoles = _preferencesBuilder->HoleTableHoleFilters()->ThroughHoles();
			ist_id_value.assign(convert_to_string(throughHoles));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				throughHoles = convert_to_bool(soll_id_value);
				_preferencesBuilder->HoleTableHoleFilters()->SetThroughHoles(throughHoles);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not to include blind holes in the hole table.
	id_name.assign("DR_HOLEREPORT_TYPE2");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			bool blindHoles;
			blindHoles = _preferencesBuilder->HoleTableHoleFilters()->BlindHoles();
			ist_id_value.assign(convert_to_string(blindHoles));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				blindHoles = convert_to_bool(soll_id_value);
				_preferencesBuilder->HoleTableHoleFilters()->SetBlindHoles(blindHoles);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not to include counterbored holes in the hole table
	id_name.assign("DR_HOLEREPORT_TYPE3");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			bool counterboredHoles;
			counterboredHoles = _preferencesBuilder->HoleTableHoleFilters()->CounterboredHoles();
			ist_id_value.assign(convert_to_string(counterboredHoles));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				counterboredHoles = convert_to_bool(soll_id_value);
				_preferencesBuilder->HoleTableHoleFilters()->SetCounterboredHoles(counterboredHoles);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not to include countersunk holes in the hole table.
	id_name.assign("DR_HOLEREPORT_TYPE4");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			bool countersunkHoles;
			countersunkHoles = _preferencesBuilder->HoleTableHoleFilters()->CountersunkHoles();
			ist_id_value.assign(convert_to_string(countersunkHoles));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				countersunkHoles = convert_to_bool(soll_id_value);
				_preferencesBuilder->HoleTableHoleFilters()->SetCountersunkHoles(countersunkHoles);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not to include threaded holes in the hole table.
	id_name.assign("DR_HOLEREPORT_TYPE5");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			bool threadedHoles;
			threadedHoles = _preferencesBuilder->HoleTableHoleFilters()->ThreadedHoles();
			ist_id_value.assign(convert_to_string(threadedHoles));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				threadedHoles = convert_to_bool(soll_id_value);
				_preferencesBuilder->HoleTableHoleFilters()->SetThreadedHoles(threadedHoles);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not to include combo holes in the hole table.
	id_name.assign("DR_HOLEREPORT_TYPE6");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			bool combinationHoles;
			combinationHoles = _preferencesBuilder->HoleTableHoleFilters()->CombinationHoles();
			ist_id_value.assign(convert_to_string(combinationHoles));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				combinationHoles = convert_to_bool(soll_id_value);
				_preferencesBuilder->HoleTableHoleFilters()->SetCombinationHoles(combinationHoles);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not to include wire EDM start holes in the hole table.
	id_name.assign("DR_HOLEREPORT_TYPE7");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			bool wireEDMStartHoles;
			wireEDMStartHoles = _preferencesBuilder->HoleTableHoleFilters()->WireEDMStartHoles();
			ist_id_value.assign(convert_to_string(wireEDMStartHoles));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				wireEDMStartHoles = convert_to_bool(soll_id_value);
				_preferencesBuilder->HoleTableHoleFilters()->SetWireEDMStartHoles(wireEDMStartHoles);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not to include circles in Modeling sketches in the hole table.
	id_name.assign("DR_HOLEREPORT_TYPE8");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			bool modelingSketchCircles;
			modelingSketchCircles = _preferencesBuilder->HoleTableHoleFilters()->ModelingSketchCircles();
			ist_id_value.assign(convert_to_string(modelingSketchCircles));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				modelingSketchCircles = convert_to_bool(soll_id_value);
				_preferencesBuilder->HoleTableHoleFilters()->SetModelingSketchCircles(modelingSketchCircles);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not to include circles in Drafting sketches in the hole table.
	id_name.assign("DR_HOLEREPORT_TYPE9");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			bool draftingSketchCircles;
			draftingSketchCircles = _preferencesBuilder->HoleTableHoleFilters()->DraftingSketchCircles();
			ist_id_value.assign(convert_to_string(draftingSketchCircles));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				draftingSketchCircles = convert_to_bool(soll_id_value);
				_preferencesBuilder->HoleTableHoleFilters()->SetDraftingSketchCircles(draftingSketchCircles);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies which holes to include in the hole table.
	//One - sided Holes : Only holes visible in the view are included.
	//Two - sided Holes : All holes are included.
	id_name.assign("DR_HOLEREPORT_ONESIDE");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::HoleTableSettingsHoleFiltersBuilder::ScopeType scope;
			scope = _preferencesBuilder->HoleTableHoleFilters()->Scope();
			int int_scope;
			//Achtung: Rückgabewert falsch
			int_scope = (int)scope + 1;
			ist_id_value.assign(convert_to_string(int_scope));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				//Achtung: Rückgabewert falsch
				int_scope = convert_to_int(soll_id_value) - 1;
				NXOpen::Annotations::HoleTableSettingsHoleFiltersBuilder::ScopeType scope;
				scope = (NXOpen::Annotations::HoleTableSettingsHoleFiltersBuilder::ScopeType)int_scope;
				_preferencesBuilder->HoleTableHoleFilters()->SetScope(scope);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the countersink angle a hole must have to be identified as a countersunk hole.
	if (_nx_dpv->usedUnitValue.compare("1") == 0) {
		id_name.assign("DR_HOLEREPORT_COUNTERSINK_ANGLE_MU");
	}
	else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
		id_name.assign("DR_HOLEREPORT_COUNTERSINK_ANGLE_EU");
	}
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double countersinkAngle;
			countersinkAngle = _preferencesBuilder->HoleTableHoleFilters()->CountersinkAngle();
			ist_id_value.assign(convert_to_string(countersinkAngle));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				countersinkAngle = convert_to_int(soll_id_value);
				_preferencesBuilder->HoleTableHoleFilters()->SetCountersinkAngle(countersinkAngle);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not holes that are less than 360 degrees 
	//will be selectable to include in the hole table.
	id_name.assign("DR_HOLEREPORT_INCLUDE_PARTIAL_HOLES");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			bool includePartialHoles;
			includePartialHoles = _preferencesBuilder->HoleTableHoleFilters()->IncludePartialHoles();
			ist_id_value.assign(convert_to_string(includePartialHoles));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				includePartialHoles = convert_to_bool(soll_id_value);
				_preferencesBuilder->HoleTableHoleFilters()->SetIncludePartialHoles(includePartialHoles);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the partial hole angle. Only holes with an angle greater than 
	//or equal to this value can be included in the hole table.
	id_name.assign("DR_HOLEREPORT_PARTIAL_ANGLE");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			double partialHoleAngle;
			partialHoleAngle = _preferencesBuilder->HoleTableHoleFilters()->PartialHoleAngle();
			ist_id_value.assign(convert_to_string(partialHoleAngle));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				partialHoleAngle = convert_to_int(soll_id_value);
				_preferencesBuilder->HoleTableHoleFilters()->SetPartialHoleAngle(partialHoleAngle);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- STOPP - %s --- \n", routineName.c_str());
}

/*
File - Preferences - Drafting - Table - Hole Table - Hole Type Symbols -> Repair these preferences.
*/
void repair_DraftingStandard_Table_HoleTable_HoleTypeSymbols_prefs(NXOpen::Drafting::PreferencesBuilder *_preferencesBuilder, en_nx_dpv* _nx_dpv, Session * _theSession, Part* _workPart) {
	routineName.assign("repair_DraftingStandard_Table_HoleTable_HoleTypeSymbols_prefs");
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- START - %s --- \n", routineName.c_str());
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- STOPP - %s --- \n", routineName.c_str());
}

/*
File - Preferences - Drafting - Table - Hole Table - Label Format -> Repair these preferences.
*/
void repair_DraftingStandard_Table_HoleTable_LabelFormat_prefs(NXOpen::Drafting::PreferencesBuilder *_preferencesBuilder, en_nx_dpv* _nx_dpv, Session * _theSession, Part* _workPart) {
	routineName.assign("repair_DraftingStandard_Table_HoleTable_LabelFormat_prefs");
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- START - %s --- \n", routineName.c_str());

	//This option specifies how to compose the hole label.
	id_name.assign("DR_HOLEREPORT_LABEL");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::HoleTableSettingsLabelBuilder::IndexType indexFormat;
			indexFormat = _preferencesBuilder->HoleTableLabel()->IndexFormat();
			int int_indexFormat;
			int_indexFormat = (int)indexFormat;
			ist_id_value.assign(convert_to_string(int_indexFormat));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_indexFormat = convert_to_int(soll_id_value);
				NXOpen::Annotations::HoleTableSettingsLabelBuilder::IndexType indexFormat;
				indexFormat = (NXOpen::Annotations::HoleTableSettingsLabelBuilder::IndexType)int_indexFormat;
				_preferencesBuilder->HoleTableLabel()->SetIndexFormat(indexFormat);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option determines whether or not hole labels should be displayed with leaders.
	id_name.assign("DR_HOLEREPORT_LABEL_WITH_LEADER");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			bool showLabelWithLeader;
			showLabelWithLeader = _preferencesBuilder->HoleTableLabel()->ShowLabelWithLeader();
			ist_id_value.assign(convert_to_string(showLabelWithLeader));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				showLabelWithLeader = convert_to_bool(soll_id_value);
				_preferencesBuilder->HoleTableLabel()->SetShowLabelWithLeader(showLabelWithLeader);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//This option specifies the location of the ID label relative to the hole.
	id_name.assign("DR_HOLEREPORT_RELATIVE_LOCATION");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXOpen::Annotations::HoleTableSettingsLabelBuilder::RelativeLocationType relativeLocation;
			relativeLocation = _preferencesBuilder->HoleTableLabel()->RelativeLocation();
			int int_relativeLocation;
			int_relativeLocation = (int)relativeLocation;
			ist_id_value.assign(convert_to_string(int_relativeLocation));
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				int_relativeLocation = convert_to_int(soll_id_value);
				relativeLocation = (NXOpen::Annotations::HoleTableSettingsLabelBuilder::RelativeLocationType)int_relativeLocation;
				_preferencesBuilder->HoleTableLabel()->SetRelativeLocation(relativeLocation);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}
	
	//This option specifies the location of the ID label relative to the hole.
	id_name.assign("DR_HOLEREPORT_CHARACTERS_TO_SKIP");
	it = _nx_dpv->soll_dpv_map.find(id_name);
	if (it != _nx_dpv->soll_dpv_map.end()) {
		try {
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("START: %s - %s: \n", routineName.c_str(), id_name.c_str());
			NXString nx_id_name;
			nx_id_name = (NXString)id_name;
			NXString charactersToSkip;
			charactersToSkip = _preferencesBuilder->HoleTableLabel()->CharactersToSkip();
			ist_id_value.assign(charactersToSkip.GetLocaleText());
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ist_id_value = \"%s\" \n", routineName.c_str(), ist_id_value.c_str());
			_nx_dpv->ist_dpv_map.insert({ id_name.c_str(), ist_id_value.c_str() });
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - \"%s\" dpv exists! \n", routineName.c_str(), id_name.c_str());
			soll_id_value.assign(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value = \"%s\" \n", routineName.c_str(), soll_id_value.c_str());
			if (ist_id_value.compare(soll_id_value) != 0) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - soll_id_value != ist_id_vlaue! \n", routineName.c_str());
				charactersToSkip = (NXString)soll_id_value;
				_preferencesBuilder->HoleTableLabel()->SetCharactersToSkip(charactersToSkip);
				_preferencesBuilder->Commit();
				nxLog("%s - \"%s\" changed! \n", routineName.c_str(), id_name.c_str());
			}
		}
		catch (...) {
			nxLog("%s - %s - ERROR \n", routineName.c_str(), id_name.c_str());
		}
	}
	else {
		nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
	}

	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- STOPP - %s --- \n", routineName.c_str());
}

/*
File - Preferences - Drafting - Table - Hole Table - Attributes -> Repair these preferences.
*/
void repair_DraftingStandard_Table_HoleTable_Attributes_prefs(NXOpen::Drafting::PreferencesBuilder *_preferencesBuilder, en_nx_dpv* _nx_dpv, Session * _theSession, Part* _workPart) {
	routineName.assign("repair_DraftingStandard_Table_HoleTable_Attributes_prefs");
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- START - %s --- \n", routineName.c_str());
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- STOPP - %s --- \n", routineName.c_str());
}

/*
File - Preferences - Drafting - PMI - GD&T General - Standard -> Repair these preferences.
*/
void repair_DraftingStandard_PMI_GDTGeneral_Standard_prefs(NXOpen::Drafting::PreferencesBuilder *_preferencesBuilder, en_nx_dpv* _nx_dpv, Session * _theSession, Part* _workPart) {
	routineName.assign("repair_DraftingStandard_PMI_GDTGeneral_Standard_prefs");
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- START - %s --- \n", routineName.c_str());
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- STOPP - %s --- \n", routineName.c_str());
}

/*
File - Preferences - Drafting - PMI - GD&T General - Region -> Repair these preferences.
*/
void repair_DraftingStandard_PMI_GDTGeneral_Region_prefs(NXOpen::Drafting::PreferencesBuilder *_preferencesBuilder, en_nx_dpv* _nx_dpv, Session * _theSession, Part* _workPart) {
	routineName.assign("repair_DraftingStandard_PMI_GDTGeneral_Region_prefs");
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- START - %s --- \n", routineName.c_str());
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- STOPP - %s --- \n", routineName.c_str());
}

/*
VersionUpAllDraftingObjects
*/
void versionUpAllDraftingObjects(Part * _workPart) {
	_workPart->Drafting()->VersionUpAllDraftingObjects();
}

/*
Display view style parameters
*/
void print_display_view_style_params(UF_DRAW_view_prfs_t &_vdp1, UF_DRAW_view_prfs_t &_vdp2) {
	routineName.assign("print_display_view_style_params");
	nxLog("%s - View - hidden_line               : %3d \n", routineName.c_str(), _vdp1.hidden_line);
	nxLog("%s - View - hidden_line_color         : %3d new %3d \n", routineName.c_str(), _vdp1.hidden_line_color, _vdp2.hidden_line_color);
	nxLog("%s - View - hidden_line_font          : %3d \n", routineName.c_str(), _vdp1.hidden_line_font);
	nxLog("%s - View - hidden_line_width         : %3d \n", routineName.c_str(), _vdp1.hidden_line_width);
	nxLog("%s - View - edge_hiding_edge          : %3d \n", routineName.c_str(), _vdp1.edge_hiding_edge);
	nxLog("%s - View - smooth                    : %3d \n", routineName.c_str(), _vdp1.smooth);
	nxLog("%s - View - tolerance                 : %f \n", routineName.c_str(), _vdp1.tolerance);
	nxLog("%s - View - silhouettes               : %3d \n", routineName.c_str(), _vdp1.silhouettes);
	nxLog("%s - View - uvhatch                   : %3d \n", routineName.c_str(), _vdp1.uvhatch);
	nxLog("%s - View - smooth_edge_color         : %3d \n", routineName.c_str(), _vdp1.smooth_edge_color);
	nxLog("%s - View - smooth_edge_font          : %3d \n", routineName.c_str(), _vdp1.smooth_edge_font);
	nxLog("%s - View - smooth_edge_width         : %3d \n", routineName.c_str(), _vdp1.smooth_edge_width);
	nxLog("%s - View - smooth_edge_gap           : %3d \n", routineName.c_str(), _vdp1.smooth_edge_gap);
	nxLog("%s - View - smooth_edge_gap_size      : %f \n", routineName.c_str(), _vdp1.smooth_edge_gap_size);
	nxLog("%s - View - virtual_intersect         : %3d \n", routineName.c_str(), _vdp1.virtual_intersect);
	nxLog("%s - View - virtual_intersect_color   : %3d \n", routineName.c_str(), _vdp1.virtual_intersect_color);
	nxLog("%s - View - virtual_intersect_font    : %3d \n", routineName.c_str(), _vdp1.virtual_intersect_font);
	nxLog("%s - View - virtual_intersect_width   : %3d \n", routineName.c_str(), _vdp1.virtual_intersect_width);
	nxLog("%s - View - virtual_intersect_gap     : %3d \n", routineName.c_str(), _vdp1.virtual_intersect_gap);
	nxLog("%s - View - virtual_intersect_gap_size: %f \n", routineName.c_str(), _vdp1.virtual_intersect_gap_size);
	nxLog("%s - View - extracted_edges           : %3d \n", routineName.c_str(), _vdp1.extracted_edges);
	nxLog("%s - View - visible_line_color        : %3d new %3d \n", routineName.c_str(), _vdp1.visible_line_color, _vdp2.visible_line_color);
	nxLog("%s - View - visible_line_font         : %3d \n", routineName.c_str(), _vdp1.visible_line_font);
	nxLog("%s - View - visible_line_width        : %3d \n", routineName.c_str(), _vdp1.visible_line_width);
	nxLog("%s - View - interfering_solids        : %3d \n", routineName.c_str(), _vdp1.interfering_solids);
	nxLog("%s - View - referenced_edges_only     : %3d \n", routineName.c_str(), _vdp1.referenced_edges_only);
	nxLog("%s - View - edges_hidden_by_own_solid : %3d \n", routineName.c_str(), _vdp1.edges_hidden_by_own_solid);
	nxLog("%s - View - simplify_small_features   : %3d \n", routineName.c_str(), _vdp1.simplify_small_features);
	nxLog("%s - View - small_feature_tolerance   : %3d \n", routineName.c_str(), _vdp1.small_feature_tolerance);
	nxLog("%s - View - traceline_visible_color   : %3d \n", routineName.c_str(), _vdp1.traceline_visible_color);
	nxLog("%s - View - traceline_visible_font    : %3d \n", routineName.c_str(), _vdp1.traceline_visible_font);
	nxLog("%s - View - traceline_visible_width   : %3d \n", routineName.c_str(), _vdp1.traceline_visible_width);
	nxLog("%s - View - traceline_hidden_color    : %3d \n", routineName.c_str(), _vdp1.traceline_hidden_color);
	nxLog("%s - View - traceline_hidden_font     : %3d \n", routineName.c_str(), _vdp1.traceline_hidden_font);
	nxLog("%s - View - traceline_hidden_width    : %3d \n", routineName.c_str(), _vdp1.traceline_hidden_width);
	nxLog("%s - View - traceline_gap             : %3d \n", routineName.c_str(), _vdp1.traceline_gap);
	nxLog("%s - View - traceline_gap_size        : %f \n", routineName.c_str(), _vdp1.traceline_gap_size);
}

/*
File - Preferences - Drafting - Dimension -> Repair existing dimensions.
*/
void repair_existing_dimension_styles(en_nx_dpv* _nx_dpv, Session * _theSession, Part* _workPart) {
	routineName.assign("repair_existing_dimension_styles");
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- START - %s --- \n", routineName.c_str());

	try {
		Annotations::DimensionCollection *theDimensionCollection = _workPart->Dimensions();
		nxLog("Loop 1\n");
		for (NXOpen::Annotations::DimensionCollection::iterator it_dim = theDimensionCollection->begin(); it_dim != theDimensionCollection->end(); it_dim++) {
			Annotations::Dimension *dimP = (*it_dim);
			NXOpen::Annotations::EditSettingsBuilder *editSettingsBuilder;
			std::vector<NXOpen::DisplayableObject *> obj(1);
			obj[0] = dynamic_cast<NXOpen::Annotations::Dimension *> (dimP);
			editSettingsBuilder = _workPart->SettingsManager()->CreateAnnotationEditSettingsBuilder(obj);

			int status;
			status = UF_OBJ_ask_status(dimP->Tag());
			NXOpen::NXColor *color;

			if ((*it_dim) != NULL && status == UF_OBJ_ALIVE) {
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - dim - Tag = %d \n", routineName.c_str(), (int)dimP->Tag());
				int type;
				int subtype;
				UF_OBJ_ask_type_and_subtype(dimP->Tag(), &type, &subtype);
				std::vector<NXString>mainTextLines(1);
				std::vector<NXString>dualTextLines(1);
				dimP->GetDimensionText(mainTextLines, dualTextLines);
				NXOpen::Point3d pt;
				dimP->GetAssociativeOrigin(&pt);

				Annotations::DimensionPreferences *dimensionPreferences = dimP->GetDimensionPreferences();

				dimensionPreferences->SetDisplayLineBetweenArrows(true); // Kann nicht zugeordnet werden.

				if (_nx_dpv->usedUnitValue.compare("1") == 0) {
					id_name.assign("Drafting_arrowSize_MU");
				}
				else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
					id_name.assign("Drafting_arrowSize_EU");
				}
				it = _nx_dpv->soll_dpv_map.find(id_name);
				if (it != _nx_dpv->soll_dpv_map.end()) {
					double arrowheadLength;
					arrowheadLength = convert_to_double(it->second);
					editSettingsBuilder->AnnotationStyle()->LineArrowStyle()->SetArrowheadLength(arrowheadLength);
				}
				else {
					nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
				}

				if (_nx_dpv->usedUnitValue.compare("1") == 0) {
					id_name.assign("Drafting_dotDiameter_MU");
				}
				else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
					id_name.assign("Drafting_dotDiameter_EU");
				}
				it = _nx_dpv->soll_dpv_map.find(id_name);
				double dotArrowheadDiameter;
				dotArrowheadDiameter = convert_to_double(it->second);
				editSettingsBuilder->AnnotationStyle()->LineArrowStyle()->SetDotArrowheadDiameter(dotArrowheadDiameter);

				id_name.assign("Drafting_draftTextColor");
				it = _nx_dpv->soll_dpv_map.find(id_name);
				int generalTextColorIndex;
				generalTextColorIndex = convert_to_int(it->second);
				color = _workPart->Colors()->Find(generalTextColorIndex);
				editSettingsBuilder->AnnotationStyle()->LetteringStyle()->SetDimensionTextColor(color);
				//dimP->SetColor(generalTextColorIndex);

				//NX-909
				//id_name.assign("Drafting_inspectionDisplayType");
				//it = _nx_dpv->soll_dpv_map.find(id_name);
				//int int_inspectionDimension;
				//int_inspectionDimension = convert_to_int(it->second);
				//if (int_inspectionDimension == 1) {
				//	dimP->SetInspectionDimensionFlag(true);
				//}
				//else {
				//	dimP->SetInspectionDimensionFlag(false);
				//}

				//dimP->SetOriginCentered(true);
				// Keine Zuordnung zu dpv bekannt!!!
				dimP->SetLayer(101);

				//id_name.assign("Drafting_leaderOrientation");
				//it = _nx_dpv->soll_dpv_map.find(id_name);
				//int int_leaderOrientation;
				//NXOpen::Annotations::LeaderOrientation leaderOrientation;
				//int_leaderOrientation = convert_to_int(it->second);
				//if (int_leaderOrientation == 1) {
				//	leaderOrientation = NXOpen::Annotations::LeaderOrientationFromLeft;
				//}
				//else if (int_leaderOrientation == 2) {
				//	leaderOrientation = NXOpen::Annotations::LeaderOrientationFromRight;
				//}
				//else if (int_leaderOrientation == 3) {
				//	leaderOrientation = NXOpen::Annotations::LeaderOrientationFromTop;
				//}
				//else if (int_leaderOrientation == 4) {
				//	leaderOrientation = NXOpen::Annotations::LeaderOrientationFromBottom;
				//}
				//else if (int_leaderOrientation == 5) {
				//	leaderOrientation = NXOpen::Annotations::LeaderOrientationInferred;
				//}
				//dimP->SetLeaderOrientation(leaderOrientation);


				id_name.assign("Drafting_limitsAndFitsTypeANSI");
				it = _nx_dpv->soll_dpv_map.find(id_name);
				int int_fitHoleType;
				int_fitHoleType = convert_to_int(it->second);
				NXOpen::Annotations::FitAnsiHoleType fitHoleType;
				if (int_fitHoleType == 0) {
					fitHoleType = NXOpen::Annotations::FitAnsiHoleTypeHole;
				}
				else if (int_fitHoleType == 1) {
					fitHoleType = NXOpen::Annotations::FitAnsiHoleTypeShaft;
				}
				else if (int_fitHoleType == 2) {
					fitHoleType = NXOpen::Annotations::FitAnsiHoleTypeFit;
				}
				dimP->SetLimitFitAnsiHoleType(fitHoleType);

				id_name.assign("Drafting_limitsAndFitsDisplay");
				it = _nx_dpv->soll_dpv_map.find(id_name);
				int int_fitDisplayStyle;
				int_fitDisplayStyle = convert_to_int(it->second);
				NXOpen::Annotations::FitDisplayStyle fitDisplayStyle;
				if (int_fitDisplayStyle == 0) {
					fitDisplayStyle = NXOpen::Annotations::FitDisplayStyleFitSymbols;
				}
				else if (int_fitDisplayStyle == 1) {
					fitDisplayStyle = NXOpen::Annotations::FitDisplayStyleFitSymbolsAndLimits;
				}
				else if (int_fitDisplayStyle == 2) {
					fitDisplayStyle = NXOpen::Annotations::FitDisplayStyleFitSymbolsAndTolerances;
				}
				else if (int_fitDisplayStyle == 3) {
					fitDisplayStyle = NXOpen::Annotations::FitDisplayStyleTolerancesOnly;
				}
				dimP->SetLimitFitDisplayStyle(fitDisplayStyle);

				id_name.assign("Drafting_toleranceGrade");
				it = _nx_dpv->soll_dpv_map.find(id_name);
				int fitGrade;
				fitGrade = convert_to_int(it->second);
				dimP->SetLimitFitGrade(fitGrade);

				id_name.assign("Drafting_extensionLine1Font");
				it = _nx_dpv->soll_dpv_map.find(id_name);
				int int_firstExtensionLineFont;
				int_firstExtensionLineFont = convert_to_int(it->second);
				NXOpen::DisplayableObject::ObjectFont firstExtensionLineFont;
				if (int_firstExtensionLineFont == 1) {
					firstExtensionLineFont = NXOpen::DisplayableObject::ObjectFontSolid;
				}
				else if (int_firstExtensionLineFont == 2) {
					firstExtensionLineFont = NXOpen::DisplayableObject::ObjectFontDashed;
				}
				else if (int_firstExtensionLineFont == 3) {
					firstExtensionLineFont = NXOpen::DisplayableObject::ObjectFontPhantom;
				}
				else if (int_firstExtensionLineFont == 4) {
					firstExtensionLineFont = NXOpen::DisplayableObject::ObjectFontCenterline;
				}
				else if (int_firstExtensionLineFont == 5) {
					firstExtensionLineFont = NXOpen::DisplayableObject::ObjectFontDotted;
				}
				else if (int_firstExtensionLineFont == 6) {
					firstExtensionLineFont = NXOpen::DisplayableObject::ObjectFontLongDashed;
				}
				else if (int_firstExtensionLineFont == 7) {
					firstExtensionLineFont = NXOpen::DisplayableObject::ObjectFontDottedDashed;
				}
				dimP->SetLineFont(firstExtensionLineFont);

				id_name.assign("PV_ViewingDirectionReferenceArrowLineWidth");
				it = _nx_dpv->soll_dpv_map.find(id_name);
				int int_lineColorFontWidth;
				int_lineColorFontWidth = convert_to_int(it->second);
				NXOpen::DisplayableObject::ObjectWidth lineColorFontWidth;
				if (int_lineColorFontWidth == 0) {
					lineColorFontWidth = NXOpen::DisplayableObject::ObjectWidthNormal;
				}
				else if (int_lineColorFontWidth == 1) {
					lineColorFontWidth = NXOpen::DisplayableObject::ObjectWidthThick;
				}
				else if (int_lineColorFontWidth == 2) {
					lineColorFontWidth = NXOpen::DisplayableObject::ObjectWidthThin;
				}
				else if (int_lineColorFontWidth == 5) {
					lineColorFontWidth = NXOpen::DisplayableObject::ObjectWidthOne;
				}
				else if (int_lineColorFontWidth == 6) {
					lineColorFontWidth = NXOpen::DisplayableObject::ObjectWidthTwo;
				}
				else if (int_lineColorFontWidth == 7) {
					lineColorFontWidth = NXOpen::DisplayableObject::ObjectWidthThree;
				}
				else if (int_lineColorFontWidth == 8) {
					lineColorFontWidth = NXOpen::DisplayableObject::ObjectWidthFour;
				}
				else if (int_lineColorFontWidth == 9) {
					lineColorFontWidth = NXOpen::DisplayableObject::ObjectWidthFive;
				}
				else if (int_lineColorFontWidth == 10) {
					lineColorFontWidth = NXOpen::DisplayableObject::ObjectWidthSix;
				}
				else if (int_lineColorFontWidth == 11) {
					lineColorFontWidth = NXOpen::DisplayableObject::ObjectWidthSeven;
				}
				else if (int_lineColorFontWidth == 12) {
					lineColorFontWidth = NXOpen::DisplayableObject::ObjectWidthEight;
				}
				else if (int_lineColorFontWidth == 13) {
					lineColorFontWidth = NXOpen::DisplayableObject::ObjectWidthNine;
				}
				dimP->SetLineWidth(lineColorFontWidth);
				//editSettingsBuilder->AnnotationStyle()->LetteringStyle()->SetDimensionTextLineWidth(lineColorFontWidth);

				//id_name.assign("Drafting_toleranceLowerValue_SI");
				//it = _nx_dpv->soll_dpv_map.find(id_name);
				//double lowerToleranceMetric;
				//lowerToleranceMetric = convert_to_double(it->second);
				//dimP->SetLowerMetricToleranceValue(lowerToleranceMetric);
				//
				//id_name.assign("Drafting_toleranceLowerValue_IN");
				//it = _nx_dpv->soll_dpv_map.find(id_name);
				//double lowerToleranceEnglish;
				//lowerToleranceEnglish = convert_to_double(it->second);
				//dimP->SetLowerToleranceValue(lowerToleranceEnglish);

				//if (_nx_dpv->usedUnitValue.compare("1") == 0) {
				//	id_name.assign("Drafting_dimensionDecimalPlaces_MU");
				//}
				//else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
				//	id_name.assign("Drafting_dimensionDecimalPlaces_EU");
				//}
				//it = _nx_dpv->soll_dpv_map.find(id_name);
				//int dimensionValuePrecision;
				//dimensionValuePrecision = convert_to_int(it->second);
				//dimP->SetMetricNominalDecimalPlaces(dimensionValuePrecision);

				//if (_nx_dpv->usedUnitValue.compare("1") == 0) {
				//	id_name.assign("Drafting_toleranceDecimalPlaces_MU");
				//}
				//else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
				//	id_name.assign("Drafting_toleranceDecimalPlaces_EU");
				//}
				//it = _nx_dpv->soll_dpv_map.find(id_name);
				//int toleranceValuePrecision;
				//toleranceValuePrecision = convert_to_int(it->second);
				//dimP->SetMetricToleranceDecimalPlaces(toleranceValuePrecision);

				//if (_nx_dpv->usedUnitValue.compare("1") == 0) {
				//	id_name.assign("Drafting_dimensionDecimalPlaces_MU");
				//}
				//else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
				//	id_name.assign("Drafting_dimensionDecimalPlaces_EU");
				//}
				//it = _nx_dpv->soll_dpv_map.find(id_name);
				//dimensionValuePrecision = convert_to_int(it->second);
				//dimP->SetNominalDecimalPlaces(dimensionValuePrecision);

				// NX-909
				//id_name.assign("Drafting_showReferenceDimension");
				//it = _nx_dpv->soll_dpv_map.find(id_name);
				//bool referenceDimension;
				//referenceDimension = convert_to_bool(it->second.c_str());
				//dimP->SetReferenceDimensionFlag(referenceDimension);

				//if (_nx_dpv->usedUnitValue.compare("1") == 0) {
				//	id_name.assign("Drafting_toleranceDecimalPlaces_MU");
				//}
				//else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
				//	id_name.assign("Drafting_toleranceDecimalPlaces_EU");
				//}
				//it = _nx_dpv->soll_dpv_map.find(id_name);
				//toleranceValuePrecision = convert_to_int(it->second);
				//dimP->SetToleranceDecimalPlaces(toleranceValuePrecision);

				//id_name.assign("Drafting_toleranceType");
				//it = _nx_dpv->soll_dpv_map.find(id_name);
				//int int_dimToleranceType;
				//int_dimToleranceType = convert_to_int(it->second);
				//NXOpen::Annotations::ToleranceType dimToleranceType;
				//if (int_dimToleranceType == 1) {
				//	dimToleranceType = NXOpen::Annotations::ToleranceTypeNone;
				//}
				//else if (int_dimToleranceType == 2) {
				//	dimToleranceType = NXOpen::Annotations::ToleranceTypeLimitOneLine;
				//}
				//else if (int_dimToleranceType == 3) {
				//	dimToleranceType = NXOpen::Annotations::ToleranceTypeLimitTwoLines;
				//}
				//else if (int_dimToleranceType == 4) {
				//	dimToleranceType = NXOpen::Annotations::ToleranceTypeBilateralOneLine;
				//}
				//else if (int_dimToleranceType == 5) {
				//	dimToleranceType = NXOpen::Annotations::ToleranceTypeBilateralTwoLines;
				//}
				//else if (int_dimToleranceType == 6) {
				//	dimToleranceType = NXOpen::Annotations::ToleranceTypeUnilateralAbove;
				//}
				//else if (int_dimToleranceType == 7) {
				//	dimToleranceType = NXOpen::Annotations::ToleranceTypeUnilateralBelow;
				//}
				//else if (int_dimToleranceType == 8) {
				//	dimToleranceType = NXOpen::Annotations::ToleranceTypeBasic;
				//}
				//else if (int_dimToleranceType == 9) {
				//	dimToleranceType = NXOpen::Annotations::ToleranceTypeReference;
				//}
				//else if (int_dimToleranceType == 10) {
				//	dimToleranceType = NXOpen::Annotations::ToleranceTypeLimitLargerFirst;
				//}
				//else if (int_dimToleranceType == 11) {
				//	dimToleranceType = NXOpen::Annotations::ToleranceTypeLimitLargerBelow;
				//}
				//else if (int_dimToleranceType == 14) {
				//	dimToleranceType = NXOpen::Annotations::ToleranceTypeLimitsAndFits;
				//}
				//else if (int_dimToleranceType == 13) {
				//	dimToleranceType = NXOpen::Annotations::ToleranceTypeNotToScale;
				//}
				//else if (int_dimToleranceType == 12) {
				//	dimToleranceType = NXOpen::Annotations::ToleranceTypeDiameterReference;
				//}
				//else if (int_dimToleranceType == 15) {
				//	dimToleranceType = NXOpen::Annotations::ToleranceTypeBasicNotToScale;
				//}
				//dimP->SetToleranceType(dimToleranceType);

				//id_name.assign("Drafting_toleranceUpperValue_SI");
				//it = _nx_dpv->soll_dpv_map.find(id_name);
				//double upperToleranceMetric;
				//upperToleranceMetric = convert_to_double(it->second);
				//dimP->SetUpperMetricToleranceValue(upperToleranceMetric);
				//
				//id_name.assign("Drafting_toleranceUpperValue_IN");
				//it = _nx_dpv->soll_dpv_map.find(id_name);
				//double upperToleranceEnglish;
				//upperToleranceEnglish = convert_to_double(it->second);
				//dimP->SetUpperToleranceValue(upperToleranceEnglish);


				Annotations::ChamferDimensionPreferences *chamferDimPreferences = dimensionPreferences->GetChamferDimensionPreferences();
				Annotations::DiameterRadiusPreferences *diameterRadiusPreferences = dimensionPreferences->GetDiameterRadiusPreferences();
				Annotations::UnitsFormatPreferences *unitFormatsPreferences = dimensionPreferences->GetUnitsFormatPreferences();

				//dimensionPreferences->SetArrowDisplay(NXOpen::Annotations::ArrowDisplayTwo); // NX-909 Einseitige Pfeile muessen erhalten bleiben!
				//if (_nx_dpv->usedUnitValue.compare("1") == 0) {
				//	id_name.assign("Drafting_baselineDimensionOffset_MU");
				//}
				//else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
				//	id_name.assign("Drafting_baselineDimensionOffset_EU");
				//}
				//it = _nx_dpv->soll_dpv_map.find(id_name);
				//double baselineOffset;
				//baselineOffset = convert_to_double(it->second);
				//dimensionPreferences->SetBaselineOffset(baselineOffset); // OK - 8.0 - Drafting_baselineDimensionOffset_MU
				//
				//if (_nx_dpv->usedUnitValue.compare("1") == 0) {
				//	id_name.assign("Drafting_chainDimensionOffset_MU");
				//}
				//else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
				//	id_name.assign("Drafting_chainDimensionOffset_EU");
				//}
				//it = _nx_dpv->soll_dpv_map.find(id_name);
				//double chainOffset;
				//chainOffset = convert_to_double(it->second);
				//dimensionPreferences->SetChainOffset(chainOffset); // OK - 0.0 - Drafting_chainDimensionOffset_MU

				//dimensionPreferences->SetDisplayLineBetweenArrows(true); // Kann nicht zugeordnet werden.

				id_name.assign("Drafting_dualFractionDenominator");
				it = _nx_dpv->soll_dpv_map.find(id_name);
				int int_dualDimensionFractionDenominator;
				int_dualDimensionFractionDenominator = convert_to_int(it->second);
				NXOpen::Annotations::FractionDenominatorFormat dualDimensionFractionDenominator;
				if (int_dualDimensionFractionDenominator == 1) {
					dualDimensionFractionDenominator = NXOpen::Annotations::FractionDenominatorFormatOne;
				}
				else if (int_dualDimensionFractionDenominator == 2) {
					dualDimensionFractionDenominator = NXOpen::Annotations::FractionDenominatorFormatTwo;
				}
				else if (int_dualDimensionFractionDenominator == 3) {
					dualDimensionFractionDenominator = NXOpen::Annotations::FractionDenominatorFormatFour;
				}
				else if (int_dualDimensionFractionDenominator == 4) {
					dualDimensionFractionDenominator = NXOpen::Annotations::FractionDenominatorFormatEight;
				}
				else if (int_dualDimensionFractionDenominator == 5) {
					dualDimensionFractionDenominator = NXOpen::Annotations::FractionDenominatorFormatSixteen;
				}
				else if (int_dualDimensionFractionDenominator == 6) {
					dualDimensionFractionDenominator = NXOpen::Annotations::FractionDenominatorFormatThirtyTwo;
				}
				else if (int_dualDimensionFractionDenominator == 7) {
					dualDimensionFractionDenominator = NXOpen::Annotations::FractionDenominatorFormatSixtyFour;
				}
				else if (int_dualDimensionFractionDenominator == 8) {
					dualDimensionFractionDenominator = NXOpen::Annotations::FractionDenominatorFormatLast;
				}
				dimensionPreferences->SetDualDimensionFractionDenominator(dualDimensionFractionDenominator);

				//Drafting_showExtensionLinesSideOne oder Drafting_showExtensionLinesSideTwo
				//NX-912 ... bei einseitigen Bemassungen darf dies nicht passieren!!!
				//dimensionPreferences->SetExtensionLineDisplay(NXOpen::Annotations::ExtensionLineDisplayTwo);

				id_name.assign("Drafting_toleranceDeviation");
				it = _nx_dpv->soll_dpv_map.find(id_name);
				//NXOpen::NXString fitDeviation;
				//fitDeviation = (NXString)it->second.c_str();
				dimensionPreferences->SetLimitFitDeviation(it->second.c_str());

				//NX-909: Diese dürfen nicht verändert werden.
				//id_name.assign("Drafting_PrefixSuffixReference");
				//it = _nx_dpv->soll_dpv_map.find(id_name);
				//int int_prefixSuffixReference;
				//int_prefixSuffixReference = convert_to_int(it->second);
				//bool prefixSuffixReference = false;
				//if (int_prefixSuffixReference == 1) {
				//	prefixSuffixReference = true;
				//}
				//dimensionPreferences->SetPrefixSuffixReference(prefixSuffixReference);

				id_name.assign("Drafting_fractionDenominator");
				it = _nx_dpv->soll_dpv_map.find(id_name);
				int int_primaryDimensionFractionDenominator;
				int_primaryDimensionFractionDenominator = convert_to_int(it->second);
				dimensionPreferences->SetPrimaryDimensionFractionDenominator((NXOpen::Annotations::FractionDenominatorFormat) int_primaryDimensionFractionDenominator);

				//dimensionPreferences->SetReverseArrowDirection(false); // Zuordnung nicht moeglich

				//id_name.assign("Drafting_textAngle");
				//it = _nx_dpv->soll_dpv_map.find(id_name);
				//double textAngle;
				//textAngle = convert_to_double(it->second);
				//dimensionPreferences->SetTextOrienationAngle(textAngle);

				//id_name.assign("Drafting_textOrientation_MU");
				//it = _nx_dpv->soll_dpv_map.find(id_name);
				//int int_textOrientation;
				//int_textOrientation = convert_to_int(it->second);
				//dimensionPreferences->SetTextOrientation((NXOpen::Annotations::TextOrientation)int_textOrientation);

				//id_name.assign("Drafting_trimDimensionLine");
				//it = _nx_dpv->soll_dpv_map.find(id_name);
				//int int_trimDimLine;
				//int_trimDimLine = convert_to_int(it->second);
				//NXOpen::Annotations::TrimDimensionLineStyle trimDimLine;
				//if (int_trimDimLine == 0) {
				//	trimDimLine = NXOpen::Annotations::TrimDimensionLineStyleDoNotTrim;
				//}
				//else if (int_trimDimLine == 1) {
				//	trimDimLine = NXOpen::Annotations::TrimDimensionLineStyleTrim;
				//}
				//dimensionPreferences->SetTrimDimensionLineStyle(trimDimLine);

				id_name.assign("Drafting_TrueLengthText");
				it = _nx_dpv->soll_dpv_map.find(id_name);
				dimensionPreferences->SetTrueLengthText(it->second.c_str());

				//id_name.assign("Drafting_TrueLengthTextPosition");
				//it = _nx_dpv->soll_dpv_map.find(id_name);
				//int int_trueLengthTextPosition;
				//int_trueLengthTextPosition = convert_to_int(it->second);
				//dimensionPreferences->SetTrueLengthTextPosition((NXOpen::Annotations::TrueLengthTextPosition)int_trueLengthTextPosition);

				//id_name.assign("Drafting_zeroToleranceDisplayStyle");
				//it = _nx_dpv->soll_dpv_map.find(id_name);
				//int int_dimZeroToleranceDisplayStyle;
				//int_dimZeroToleranceDisplayStyle = convert_to_int(it->second);
				//dimensionPreferences->SetZeroToleranceDisplayStyle((NXOpen::Annotations::ZeroToleranceDisplayStyle)int_dimZeroToleranceDisplayStyle);

				if (subtype == UF_dim_chamfer_subtype) {
					//NX-933 
					id_name.assign("Drafting_chamferDimensionSymbol");
					it = _nx_dpv->soll_dpv_map.find(id_name);
					int int_chamferSymbolType;
					int_chamferSymbolType = convert_to_int(soll_id_value);
					NXOpen::Annotations::ChamferSymbolPlacement chamferSymbolType;
					if (int_chamferSymbolType == 1) {
						chamferSymbolType = NXOpen::Annotations::ChamferSymbolPlacementNone;
					}
					else if (int_chamferSymbolType == 2) {
						chamferSymbolType = NXOpen::Annotations::ChamferSymbolPlacementPrefix;
					}
					else if (int_chamferSymbolType == 3) {
						chamferSymbolType = NXOpen::Annotations::ChamferSymbolPlacementSuffix;
					}
					else if (int_chamferSymbolType == -1) {
						chamferSymbolType = NXOpen::Annotations::ChamferSymbolPlacementLast;
					}
					//if (int_chamferSymbolType != -1) {
					//	editSettingsBuilder->AnnotationStyle()->DimensionStyle()->SetChamferSymbolType(chamferSymbolType);
					//}
					//else {
					//	editSettingsBuilder->AnnotationStyle()->DimensionStyle()->SetChamferSymbolType(NXOpen::Annotations::ChamferSymbolPlacementNone);
					//}
					
					id_name.assign("Drafting_chamferDimensionSpaceFactor");
					it = _nx_dpv->soll_dpv_map.find(id_name);
					double chamferSpaceFactor;
					chamferSpaceFactor = convert_to_double(it->second);
					editSettingsBuilder->AnnotationStyle()->DimensionStyle()->SetChamferSpaceFactor(chamferSpaceFactor);

					id_name.assign("Drafting_chamferDimensionForm");
					it = _nx_dpv->soll_dpv_map.find(id_name);
					int int_chamferForm;
					int_chamferForm = convert_to_int(it->second);
					NXOpen::Annotations::ChamferForm chamferForm;
					if (int_chamferForm == 1) {
						chamferForm = NXOpen::Annotations::ChamferFormSymbol;
					}
					else if (int_chamferForm == 2) {
						chamferForm = NXOpen::Annotations::ChamferFormSize;
					}
					else if (int_chamferForm == 3) {
						chamferForm = NXOpen::Annotations::ChamferFormSizeAngle;
					}
					else if (int_chamferForm == 4) {
						chamferForm = NXOpen::Annotations::ChamferFormAngleSize;
					}
					else if (int_chamferForm == -1) {
						chamferForm = NXOpen::Annotations::ChamferFormLast;
					}
					if (int_chamferForm != -1) {
						editSettingsBuilder->AnnotationStyle()->DimensionStyle()->SetChamferForm(chamferForm);
					}
					else {
						editSettingsBuilder->AnnotationStyle()->DimensionStyle()->SetChamferForm(NXOpen::Annotations::ChamferFormSizeAngle);
					}
					
					id_name.assign("Drafting_chamferDimensionLeader");
					it = _nx_dpv->soll_dpv_map.find(id_name);
					int int_chamferLeaderType;
					NXOpen::Annotations::ChamferLeaderPlacement chamferLeaderType;
					int_chamferLeaderType = convert_to_int(it->second);
					if (int_chamferLeaderType == 1) {
						chamferLeaderType = NXOpen::Annotations::ChamferLeaderPlacementPerpendicular;
					}
					else if (int_chamferLeaderType == 2) {
						chamferLeaderType = NXOpen::Annotations::ChamferLeaderPlacementParallel;
					}
					else if (int_chamferLeaderType == 3) {
						chamferLeaderType = NXOpen::Annotations::ChamferLeaderPlacementLinear;
					}
					else if (int_chamferLeaderType == -1) {
						chamferLeaderType = NXOpen::Annotations::ChamferLeaderPlacementLast;
					}
					if (int_chamferLeaderType != -1) {
						editSettingsBuilder->AnnotationStyle()->DimensionStyle()->SetChamferLeaderType(chamferLeaderType);
					}
					else {
						editSettingsBuilder->AnnotationStyle()->DimensionStyle()->SetChamferLeaderType(NXOpen::Annotations::ChamferLeaderPlacementLinear);
					}
					
					id_name.assign("Drafting_chamferDimensionSeperator");
					it = _nx_dpv->soll_dpv_map.find(id_name);
					int int_chamferSeparator;
					NXOpen::Annotations::ChamferSeparatorType chamferSeparator;
					int_chamferSeparator = convert_to_int(it->second);

					if (int_chamferSeparator == 0) {
						chamferSeparator = NXOpen::Annotations::ChamferSeparatorTypeUppercaseX;
					}
					else if (int_chamferSeparator == 1) {
						chamferSeparator = NXOpen::Annotations::ChamferSeparatorTypeLowercaseX;
					}
					editSettingsBuilder->AnnotationStyle()->DimensionStyle()->SetChamferSeparator(chamferSeparator);

					id_name.assign("Drafting_chamferDimensionSymbolName");
					it = _nx_dpv->soll_dpv_map.find(id_name);
					editSettingsBuilder->AnnotationStyle()->DimensionStyle()->SetChamferSymbolName(it->second.c_str());

					id_name.assign("Drafting_chamferDimensionStub");
					it = _nx_dpv->soll_dpv_map.find(id_name);
					int int_chamferStubType;
					int_chamferStubType = convert_to_int(it->second);
					NXOpen::Annotations::ChamferStubType chamferStubType;
					if (int_chamferStubType == 1) {
						chamferStubType = NXOpen::Annotations::ChamferStubTypeNoneTextAboveLeader;
					}
					else if (int_chamferStubType == 2) {
						chamferStubType = NXOpen::Annotations::ChamferStubTypeNoneTextAfterLeader;
					}
					else if (int_chamferStubType == 3) {
						chamferStubType = NXOpen::Annotations::ChamferStubTypeTextAbove;
					}
					else if (int_chamferStubType == 4) {
						chamferStubType = NXOpen::Annotations::ChamferStubTypeTextAfter;
					}
					else if (int_chamferStubType == -1) {
						chamferStubType = NXOpen::Annotations::ChamferStubTypeLast;
					}
					if (int_chamferStubType != -1) {
						editSettingsBuilder->AnnotationStyle()->DimensionStyle()->SetChamferStubType(chamferStubType);
					}
					else {
						editSettingsBuilder->AnnotationStyle()->DimensionStyle()->SetChamferStubType(NXOpen::Annotations::ChamferStubTypeTextAfter);
					}
				}

				if (subtype == UF_dim_diameter_subtype) {
					// kann nicht zugeordnet werden.
					diameterRadiusPreferences->SetDiameterSymbol(NXOpen::Annotations::DiameterSymbolStandard);

					id_name.assign("Drafting_GeneralHole_Diameter_Prefix");
					it = _nx_dpv->soll_dpv_map.find(id_name);
					diameterRadiusPreferences->SetDiameterSymbolText(it->second.c_str());
				}

				if (subtype == UF_dim_radius_subtype || subtype == UF_dim_diameter_subtype) {
					id_name.assign("Drafting_diaRadSymAndDimTextDistance");
					it = _nx_dpv->soll_dpv_map.find(id_name);
					double symbolToDimensionTextDistance;
					symbolToDimensionTextDistance = convert_to_double(it->second);
					diameterRadiusPreferences->SetDistanceBetweenSymbolAndDimensionText(symbolToDimensionTextDistance);
				}

				// kann nicht zugeordnet werden
				diameterRadiusPreferences->SetFoldedRadiusAngle(0.0);

				//NXOpen::Annotations::DimensionPreferences::TextPosition
				id_name.assign("Drafting_DimensionTextPosition");
				it = _nx_dpv->soll_dpv_map.find(id_name);
				int int_textPosition;
				int_textPosition = convert_to_int(it->second);
				dimensionPreferences->SetTextPosition((NXOpen::Annotations::TextPosition) int_textPosition);

				// kann nicht zugeordnet werden
				diameterRadiusPreferences->SetRadiusSymbol(NXOpen::Annotations::RadiusSymbolR);

				// kann nicht zugeordnet werden
				diameterRadiusPreferences->SetRadiusSymbolText("R");

				if (subtype == UF_dim_radius_subtype || subtype == UF_dim_diameter_subtype) {
					id_name.assign("Drafting_diaRadPlacementSite");
					it = _nx_dpv->soll_dpv_map.find(id_name);
					int int_diameterRadiusPlacement;
					int_diameterRadiusPlacement = convert_to_int(it->second);
					NXOpen::Annotations::DiameterRadiusSymbolPlacement diameterRadiusPlacement;
					if (int_diameterRadiusPlacement == 5) {
						diameterRadiusPlacement = NXOpen::Annotations::DiameterRadiusSymbolPlacementOmit;
					}
					else if (int_diameterRadiusPlacement == 4) {
						diameterRadiusPlacement = NXOpen::Annotations::DiameterRadiusSymbolPlacementBefore;
					}
					else if (int_diameterRadiusPlacement == 2) {
						diameterRadiusPlacement = NXOpen::Annotations::DiameterRadiusSymbolPlacementAfter;
					}
					else if (int_diameterRadiusPlacement == 3) {
						diameterRadiusPlacement = NXOpen::Annotations::DiameterRadiusSymbolPlacementAbove;
					}
					else if (int_diameterRadiusPlacement == 1) {
						diameterRadiusPlacement = NXOpen::Annotations::DiameterRadiusSymbolPlacementBelow;
					}
					diameterRadiusPreferences->SetSymbolPlacement(diameterRadiusPlacement);
					editSettingsBuilder->AnnotationStyle()->RadialStyle()->SetDiameterRadiusPlacement(diameterRadiusPlacement);
				}

				id_name.assign("Drafting_angularUnits");
				it = _nx_dpv->soll_dpv_map.find(id_name);
				int int_dimensionAngularFormat;
				int_dimensionAngularFormat = convert_to_int(it->second.c_str()) - 1;
				unitFormatsPreferences->SetAngularDimensionFormat((NXOpen::Annotations::AngularDimensionFormat) int_dimensionAngularFormat);

				// kann nicht zugeordnet werden
				unitFormatsPreferences->SetAngularToleranceFormat(NXOpen::Annotations::AngularDimensionFormatFractionalDegrees);

				id_name.assign("Drafting_dimToleranceConversion");
				it = _nx_dpv->soll_dpv_map.find(id_name);
				int int_convertPrimaryTolerance;
				int_convertPrimaryTolerance = convert_to_int(it->second);
				bool convertPrimaryTolerance = false;
				if (int_convertPrimaryTolerance == 1) {
					convertPrimaryTolerance = true;
				}
				unitFormatsPreferences->SetConvertPrimaryToleranceToDualDimensionUnit(convertPrimaryTolerance);

				if (_nx_dpv->usedUnitValue.compare("1") == 0) {
					id_name.assign("Drafting_decimalPoint_MU");
				}
				else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
					id_name.assign("Drafting_decimalPoint_EU");
				}
				it = _nx_dpv->soll_dpv_map.find(id_name);
				int int_decimalPointCharacter;
				int_decimalPointCharacter = convert_to_int(it->second);
				unitFormatsPreferences->SetDecimalPointCharacter((NXOpen::Annotations::DecimalPointCharacter)int_decimalPointCharacter);

				if (_nx_dpv->usedUnitValue.compare("1") == 0) {
					id_name.assign("Drafting_dimLeadingZeros_MU");
				}
				else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
					id_name.assign("Drafting_dimLeadingZeros_EU");
				}
				it = _nx_dpv->soll_dpv_map.find(id_name);
				int int_displayLeadingDimensionZeros;;
				int_displayLeadingDimensionZeros = convert_to_int(it->second);
				bool displayLeadingDimensionZeros = false;
				if (int_displayLeadingDimensionZeros == 1) {
					displayLeadingDimensionZeros = true;
				}
				unitFormatsPreferences->SetDimensionLeadingZero(displayLeadingDimensionZeros);

				if (_nx_dpv->usedUnitValue.compare("1") == 0) {
					id_name.assign("Drafting_dimTrailingZeros_MU");
				}
				else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
					id_name.assign("Drafting_dimTrailingZeros_EU");
				}
				it = _nx_dpv->soll_dpv_map.find(id_name);
				int int_displayTrailingZeros;
				int_displayTrailingZeros = convert_to_int(it->second);
				bool displayTrailingZeros = false;
				if (int_displayTrailingZeros == 1) {
					displayTrailingZeros = true;
				}
				unitFormatsPreferences->SetDisplayTrailingZeros(displayTrailingZeros);

				id_name.assign("Drafting_showDualDimension");
				it = _nx_dpv->soll_dpv_map.find(id_name);
				bool bool_dualDimensionFormat;
				bool_dualDimensionFormat = convert_to_bool(it->second.c_str());
				if (bool_dualDimensionFormat == false) {
					unitFormatsPreferences->SetDualDimensionPlacement(NXOpen::Annotations::DualDimensionPlacementNone);
				}
				if (bool_dualDimensionFormat == true) {
					unitFormatsPreferences->SetDualDimensionPlacement(NXOpen::Annotations::DualDimensionPlacementAfter);
				}

				id_name.assign("Drafting_dualDimensionsFractions");
				it = _nx_dpv->soll_dpv_map.find(id_name);
				int int_dualFractionType;
				int_dualFractionType = convert_to_int(it->second.c_str()) - 1;
				unitFormatsPreferences->SetDualDimensionTextFormat((NXOpen::Annotations::DimensionTextFormat)int_dualFractionType);

				if (_nx_dpv->usedUnitValue.compare("1") == 0) {
					id_name.assign("Drafting_dualDimensionsUnits_MU");
				}
				else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
					id_name.assign("Drafting_dualDimensionsUnits_EU");
				}
				it = _nx_dpv->soll_dpv_map.find(id_name);
				int int_dualDimensionUnits;
				int_dualDimensionUnits = convert_to_int(it->second.c_str()) - 1;
				unitFormatsPreferences->SetDualDimensionUnit((NXOpen::Annotations::DimensionUnit)int_dualDimensionUnits);

				// kann nicht zugeordnet werden
				//unitFormatsPreferences->SetFractionalDisplay(true);

				// kann nicht zugeordnet werden
				unitFormatsPreferences->SetNumeratorDegrees(0);

				// kann nicht zugeordnet werden
				unitFormatsPreferences->SetNumeratorFraction(0.0);

				// kann nicht zugeordnet werden
				unitFormatsPreferences->SetNumeratorMinutes(0);

				// kann nicht zugeordnet werden
				unitFormatsPreferences->SetNumeratorSeconds(0);

				//Drafting_fractionType
				// kann nicht zugeordnet werden
				unitFormatsPreferences->SetPrimaryDimensionTextFormat(NXOpen::Annotations::DimensionTextFormatDecimal);

				dimP->SetDimensionPreferences(dimensionPreferences);

				if (_nx_dpv->usedUnitValue.compare("1") == 0) {
					id_name.assign("Drafting_linearUnits_MU");
				}
				else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
					id_name.assign("Drafting_linearUnits_EU");
				}
				it = _nx_dpv->soll_dpv_map.find(id_name);
				int int_dimensionLinearUnits;
				int_dimensionLinearUnits = convert_to_int(it->second);
				unitFormatsPreferences->SetPrimaryDimensionUnit((NXOpen::Annotations::DimensionUnit)int_dimensionLinearUnits);

				id_name.assign("Drafting_angularSuppressZeros");
				it = _nx_dpv->soll_dpv_map.find(id_name);
				int int_angularSuppressZeros;
				int_angularSuppressZeros = convert_to_int(it->second);
				unitFormatsPreferences->SetSuppressAngularZerosOption((NXOpen::Annotations::AngularSuppressZeros)int_angularSuppressZeros);

				if (_nx_dpv->usedUnitValue.compare("1") == 0) {
					id_name.assign("Drafting_tolLeadingZeros_MU");
				}
				else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
					id_name.assign("Drafting_tolLeadingZeros_EU");
				}
				it = _nx_dpv->soll_dpv_map.find(id_name);
				int int_DisplayLeadingToleranceZeros;
				int_DisplayLeadingToleranceZeros = convert_to_int(it->second);
				bool DisplayLeadingToleranceZeros = false;
				if (int_DisplayLeadingToleranceZeros == 1) {
					DisplayLeadingToleranceZeros = true;
				}
				unitFormatsPreferences->SetToleranceLeadingZero(DisplayLeadingToleranceZeros);

				id_name.assign("Drafting_tolerancePlacementSite");
				it = _nx_dpv->soll_dpv_map.find(id_name);
				int int_dimensionTolerancePlacement;
				int_dimensionTolerancePlacement = convert_to_int(it->second);
				NXOpen::Annotations::TolerancePlacement dimensionTolerancePlacement;
				if (int_dimensionTolerancePlacement == 1) {
					dimensionTolerancePlacement = NXOpen::Annotations::TolerancePlacementBelow;
				}
				else if (int_dimensionTolerancePlacement == 2) {
					dimensionTolerancePlacement = NXOpen::Annotations::TolerancePlacementAfter;
				}
				else if (int_dimensionTolerancePlacement == 3) {
					dimensionTolerancePlacement = NXOpen::Annotations::TolerancePlacementAbove;
				}
				else if (int_dimensionTolerancePlacement == -1) {
					dimensionTolerancePlacement = NXOpen::Annotations::TolerancePlacementLast;
				}
				if (int_dimensionTolerancePlacement != -1) {
					unitFormatsPreferences->SetTolerancePlacement(dimensionTolerancePlacement);
				}
				else {
					unitFormatsPreferences->SetTolerancePlacement(NXOpen::Annotations::TolerancePlacementAfter);
				}
				
				dimP->SetDimensionPreferences(dimensionPreferences);
				//dimP->Unhighlight();
			}

			try {
				editSettingsBuilder->Commit();
			}
			catch (...) {
				nxLog("%s - Inside the dimension \"%s\"(tag=%d) an error occured! \n", routineName.c_str(), dimP->JournalIdentifier().GetLocaleText(), (int) dimP->Tag());
			}
			editSettingsBuilder->Destroy();
		}
		nxLog("Loop 2\n");

		for (NXOpen::Annotations::DimensionCollection::iterator it_dim = theDimensionCollection->begin(); it_dim != theDimensionCollection->end(); it_dim++) {
			Annotations::Dimension *dimP = (*it_dim);
			//Annotations::LineAndArrowPreferences *lineAndArrowPreferences = dimP->GetLineAndArrowPreferences();
			NXOpen::Annotations::EditSettingsBuilder *editSettingsBuilder;
			std::vector<NXOpen::DisplayableObject *> objects(1);
			objects[0] = dimP;
			editSettingsBuilder = _workPart->SettingsManager()->CreateAnnotationEditSettingsBuilder(objects);
			NXOpen::NXColor* color;
			int type;
			int subtype;
			UF_OBJ_ask_type_and_subtype(dimP->Tag(), &type, &subtype);

			id_name.assign("Drafting_arrowhead1Type");
			it = _nx_dpv->soll_dpv_map.find(id_name);
			if (it != _nx_dpv->soll_dpv_map.end()) {
				int int_firstArrowType;
				NXOpen::Annotations::ArrowheadType firstArrowType;
				int_firstArrowType = convert_to_int(it->second);
				if (int_firstArrowType == -2) {
					firstArrowType = NXOpen::Annotations::ArrowheadTypeFilledDatumArrow;
				}
				else if (int_firstArrowType == -1) {
					firstArrowType = NXOpen::Annotations::ArrowheadTypeFilledDot;
				}
				else if (int_firstArrowType == 0) {
					firstArrowType = NXOpen::Annotations::ArrowheadTypeFilledArrow;
				}
				else if (int_firstArrowType == 1) {
					firstArrowType = NXOpen::Annotations::ArrowheadTypeClosedArrow;
				}
				else if (int_firstArrowType == 2) {
					firstArrowType = NXOpen::Annotations::ArrowheadTypeOpenArrow;
				}
				else if (int_firstArrowType == 3) {
					firstArrowType = NXOpen::Annotations::ArrowheadTypeCrossArrow;
				}
				else if (int_firstArrowType == 4) {
					firstArrowType = NXOpen::Annotations::ArrowheadTypeDotArrow;
				}
				else if (int_firstArrowType == 5) {
					firstArrowType = NXOpen::Annotations::ArrowheadTypeOriginSymbolArrow;
				}
				else if (int_firstArrowType == 6) {
					firstArrowType = NXOpen::Annotations::ArrowheadTypeNoArrow;
				}
				else if (int_firstArrowType == 7) {
					firstArrowType = NXOpen::Annotations::ArrowheadTypeUnfilledDatumArrow;
				}
				else if (int_firstArrowType == 8) {
					firstArrowType = NXOpen::Annotations::ArrowheadTypeClosedSolidArrow;
				}
				else if (int_firstArrowType == 9) {
					firstArrowType = NXOpen::Annotations::ArrowheadTypeClosedDoubleArrow;
				}
				else if (int_firstArrowType == 10) {
					firstArrowType = NXOpen::Annotations::ArrowheadTypeClosedDoubleSolidArrow;
				}
				else if (int_firstArrowType == 11) {
					firstArrowType = NXOpen::Annotations::ArrowheadTypeOpenDoubleArrow;
				}
				else if (int_firstArrowType == 12) {
					firstArrowType = NXOpen::Annotations::ArrowheadTypeIntegralArrow;
				}
				else if (int_firstArrowType == 13) {
					firstArrowType = NXOpen::Annotations::ArrowheadTypeBoxArrow;
				}
				else if (int_firstArrowType == 14) {
					firstArrowType = NXOpen::Annotations::ArrowheadTypeFilledBox;
				}
				else if (int_firstArrowType == 15) {
					firstArrowType = NXOpen::Annotations::ArrowheadTypeFilledDoubleArrow;
				}
				else if (int_firstArrowType == 16) {
					firstArrowType = NXOpen::Annotations::ArrowheadTypeTopOpenArrow;
				}
				else if (int_firstArrowType == 17) {
					firstArrowType = NXOpen::Annotations::ArrowheadTypeBottomOpenArrow;
				}
				else if (int_firstArrowType == 18) {
					firstArrowType = NXOpen::Annotations::ArrowheadTypeTopFilledArrow;
				}
				else if (int_firstArrowType == 19) {
					firstArrowType = NXOpen::Annotations::ArrowheadTypeBottomFilledArrow;
				}
				if (dimP->GetLineAndArrowPreferences()->FirstArrowType() != NXOpen::Annotations::ArrowheadTypeNoArrow) {
					editSettingsBuilder->AnnotationStyle()->LineArrowStyle()->SetFirstArrowType(firstArrowType);
				}
				//editSettingsBuilder->AnnotationStyle()->LineArrowStyle()->SetFirstArrowType(firstArrowType);
				//lineAndArrowPreferences->SetFirstArrowType(firstArrowType);
			}
			else {
				nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
			}

			id_name.assign("Drafting_arrowhead2Type");
			it = _nx_dpv->soll_dpv_map.find(id_name);
			if (it != _nx_dpv->soll_dpv_map.end()) {
				int int_secondArrowType = convert_to_int(it->second);
				NXOpen::Annotations::ArrowheadType secondArrowType;
				if (int_secondArrowType == -2) {
					secondArrowType = NXOpen::Annotations::ArrowheadTypeFilledDatumArrow;
				}
				else if (int_secondArrowType == -1) {
					secondArrowType = NXOpen::Annotations::ArrowheadTypeFilledDot;
				}
				else if (int_secondArrowType == 0) {
					secondArrowType = NXOpen::Annotations::ArrowheadTypeFilledArrow;
				}
				else if (int_secondArrowType == 1) {
					secondArrowType = NXOpen::Annotations::ArrowheadTypeClosedArrow;
				}
				else if (int_secondArrowType == 2) {
					secondArrowType = NXOpen::Annotations::ArrowheadTypeOpenArrow;
				}
				else if (int_secondArrowType == 3) {
					secondArrowType = NXOpen::Annotations::ArrowheadTypeCrossArrow;
				}
				else if (int_secondArrowType == 4) {
					secondArrowType = NXOpen::Annotations::ArrowheadTypeDotArrow;
				}
				else if (int_secondArrowType == 5) {
					secondArrowType = NXOpen::Annotations::ArrowheadTypeOriginSymbolArrow;
				}
				else if (int_secondArrowType == 6) {
					secondArrowType = NXOpen::Annotations::ArrowheadTypeNoArrow;
				}
				else if (int_secondArrowType == 7) {
					secondArrowType = NXOpen::Annotations::ArrowheadTypeUnfilledDatumArrow;
				}
				else if (int_secondArrowType == 8) {
					secondArrowType = NXOpen::Annotations::ArrowheadTypeClosedSolidArrow;
				}
				else if (int_secondArrowType == 9) {
					secondArrowType = NXOpen::Annotations::ArrowheadTypeClosedDoubleArrow;
				}
				else if (int_secondArrowType == 10) {
					secondArrowType = NXOpen::Annotations::ArrowheadTypeClosedDoubleSolidArrow;
				}
				else if (int_secondArrowType == 11) {
					secondArrowType = NXOpen::Annotations::ArrowheadTypeOpenDoubleArrow;
				}
				else if (int_secondArrowType == 12) {
					secondArrowType = NXOpen::Annotations::ArrowheadTypeIntegralArrow;
				}
				else if (int_secondArrowType == 13) {
					secondArrowType = NXOpen::Annotations::ArrowheadTypeBoxArrow;
				}
				else if (int_secondArrowType == 14) {
					secondArrowType = NXOpen::Annotations::ArrowheadTypeFilledBox;
				}
				else if (int_secondArrowType == 15) {
					secondArrowType = NXOpen::Annotations::ArrowheadTypeFilledDoubleArrow;
				}
				else if (int_secondArrowType == 16) {
					secondArrowType = NXOpen::Annotations::ArrowheadTypeTopOpenArrow;
				}
				else if (int_secondArrowType == 17) {
					secondArrowType = NXOpen::Annotations::ArrowheadTypeBottomOpenArrow;
				}
				else if (int_secondArrowType == 18) {
					secondArrowType = NXOpen::Annotations::ArrowheadTypeTopFilledArrow;
				}
				else if (int_secondArrowType == 19) {
					secondArrowType = NXOpen::Annotations::ArrowheadTypeBottomFilledArrow;
				}
				if (dimP->GetLineAndArrowPreferences()->SecondArrowType() != NXOpen::Annotations::ArrowheadTypeNoArrow) {
					editSettingsBuilder->AnnotationStyle()->LineArrowStyle()->SetSecondArrowType(secondArrowType);
				}
				//lineAndArrowPreferences->SetSecondArrowType(secondArrowType);
			}
			else {
				nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
			}
			if (_nx_dpv->usedUnitValue.compare("1") == 0) {
				id_name.assign("Drafting_stubbSize_MU");
			}
			else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
				id_name.assign("Drafting_stubbSize_EU");
			}
			it = _nx_dpv->soll_dpv_map.find(id_name);
			if (it != _nx_dpv->soll_dpv_map.end()) {
				double stubLength;
				stubLength = convert_to_double(it->second);
				editSettingsBuilder->AnnotationStyle()->LineArrowStyle()->SetStubLength(stubLength);
			}
			else {
				nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
			}

			if (_nx_dpv->usedUnitValue.compare("1") == 0) {
				id_name.assign("Drafting_textLine_MU");
			}
			else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
				id_name.assign("Drafting_textLine_EU");
			}
			it = _nx_dpv->soll_dpv_map.find(id_name);
			if (it != _nx_dpv->soll_dpv_map.end()) {
				double textToLineDistance;
				textToLineDistance = convert_to_double(it->second);
				editSettingsBuilder->AnnotationStyle()->LineArrowStyle()->SetTextToLineDistance(textToLineDistance);
			}
			else {
				nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
			}

			if (_nx_dpv->usedUnitValue.compare("1") == 0) {
				id_name.assign("Drafting_pointLine1_MU");
			}
			else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
				id_name.assign("Drafting_pointLine1_EU");
			}
			it = _nx_dpv->soll_dpv_map.find(id_name);
			if (it != _nx_dpv->soll_dpv_map.end()) {
				double firstPosToExtensionLineDistance;
				firstPosToExtensionLineDistance = convert_to_double(it->second);
				//lineAndArrowPreferences->SetFirstPosToExtLineDist(firstPosToExtensionLineDistance);
				editSettingsBuilder->AnnotationStyle()->LineArrowStyle()->SetFirstPosToExtensionLineDistance(firstPosToExtensionLineDistance);
			}
			else {
				nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
			}

			if (_nx_dpv->usedUnitValue.compare("1") == 0) {
				id_name.assign("Drafting_pointLine2_MU");
			}
			else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
				id_name.assign("Drafting_pointLine2_EU");
			}
			it = _nx_dpv->soll_dpv_map.find(id_name);
			if (it != _nx_dpv->soll_dpv_map.end()) {
				double secondPosToExtensionLineDistance;
				secondPosToExtensionLineDistance = convert_to_double(it->second);
				//lineAndArrowPreferences->SetSecondPosToExtLineDist(secondPosToExtensionLineDistance);
				editSettingsBuilder->AnnotationStyle()->LineArrowStyle()->SetSecondPosToExtensionLineDistance(secondPosToExtensionLineDistance);
			}
			else {
				nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
			}

			if (_nx_dpv->usedUnitValue.compare("1") == 0) {
				id_name.assign("Drafting_datumExtLine_MU");
			}
			else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
				id_name.assign("Drafting_datumExtLine_EU");
			}
			it = _nx_dpv->soll_dpv_map.find(id_name);
			double datumLengthPastArrow;
			datumLengthPastArrow = convert_to_double(it->second);
			//lineAndArrowPreferences->SetDatumLengthPastArrow(datumLengthPastArrow);
			editSettingsBuilder->AnnotationStyle()->LineArrowStyle()->SetDatumLengthPastArrow(datumLengthPastArrow);

			if (_nx_dpv->usedUnitValue.compare("1") == 0) {
				id_name.assign("Drafting_extensionLine1Color_MU");
			}
			else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
				id_name.assign("Drafting_extensionLine1Color_EU");
			}
			it = _nx_dpv->soll_dpv_map.find(id_name);
			if (it != _nx_dpv->soll_dpv_map.end()) {
				int firstExtensionLineColorIndex;
				firstExtensionLineColorIndex = convert_to_int(it->second);
				color = _workPart->Colors()->Find(firstExtensionLineColorIndex);
				editSettingsBuilder->AnnotationStyle()->LineArrowStyle()->SetFirstExtensionLineColor(color);
			}
			else {
				nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
			}

			id_name.assign("Drafting_extensionLine1Font");
			it = _nx_dpv->soll_dpv_map.find(id_name);
			if (it != _nx_dpv->soll_dpv_map.end()) {
				int int_firstExtensionLineFont = convert_to_int(it->second);
				NXOpen::DisplayableObject::ObjectFont firstExtensionLineFont;
				if (int_firstExtensionLineFont == 1) {
					firstExtensionLineFont = NXOpen::DisplayableObject::ObjectFontSolid;
				}
				else if (int_firstExtensionLineFont == 2) {
					firstExtensionLineFont = NXOpen::DisplayableObject::ObjectFontDashed;
				}
				else if (int_firstExtensionLineFont == 3) {
					firstExtensionLineFont = NXOpen::DisplayableObject::ObjectFontPhantom;
				}
				else if (int_firstExtensionLineFont == 4) {
					firstExtensionLineFont = NXOpen::DisplayableObject::ObjectFontCenterline;
				}
				else if (int_firstExtensionLineFont == 5) {
					firstExtensionLineFont = NXOpen::DisplayableObject::ObjectFontDotted;
				}
				else if (int_firstExtensionLineFont == 6) {
					firstExtensionLineFont = NXOpen::DisplayableObject::ObjectFontLongDashed;
				}
				else if (int_firstExtensionLineFont == 7) {
					firstExtensionLineFont = NXOpen::DisplayableObject::ObjectFontDottedDashed;
				}
				editSettingsBuilder->AnnotationStyle()->LineArrowStyle()->SetFirstExtensionLineFont(firstExtensionLineFont);
			}
			else {
				nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
			}

			id_name.assign("Drafting_extensionLine1Width");
			it = _nx_dpv->soll_dpv_map.find(id_name);
			if (it != _nx_dpv->soll_dpv_map.end()) {
				int int_firstExtensionLineWidth = convert_to_int(it->second);
				NXOpen::Annotations::LineWidth firstExtensionLineWidth;
				//string id_name_tmp;
				//std::map<const std::string, std::string>::iterator it_tmp;
				if (int_firstExtensionLineWidth == 1) {
					firstExtensionLineWidth = NXOpen::Annotations::LineWidthNormal;
					//id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
					//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					//firstExtensionLineWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
				}
				else if (int_firstExtensionLineWidth == 2) {
					firstExtensionLineWidth = NXOpen::Annotations::LineWidthThick;
					//id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
					//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					//firstExtensionLineWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
				}
				else if (int_firstExtensionLineWidth == 3) {
					firstExtensionLineWidth = NXOpen::Annotations::LineWidthThin;
					//id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
					//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					//firstExtensionLineWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
				}
				else if (int_firstExtensionLineWidth == 6) {
					firstExtensionLineWidth = NXOpen::Annotations::LineWidthOne;
				}
				else if (int_firstExtensionLineWidth == 7) {
					firstExtensionLineWidth = NXOpen::Annotations::LineWidthTwo;
				}
				else if (int_firstExtensionLineWidth == 8) {
					firstExtensionLineWidth = NXOpen::Annotations::LineWidthThree;
				}
				else if (int_firstExtensionLineWidth == 9) {
					firstExtensionLineWidth = NXOpen::Annotations::LineWidthFour;
				}
				else if (int_firstExtensionLineWidth == 10) {
					firstExtensionLineWidth = NXOpen::Annotations::LineWidthFive;
				}
				else if (int_firstExtensionLineWidth == 11) {
					firstExtensionLineWidth = NXOpen::Annotations::LineWidthSix;
				}
				else if (int_firstExtensionLineWidth == 12) {
					firstExtensionLineWidth = NXOpen::Annotations::LineWidthSeven;
				}
				else if (int_firstExtensionLineWidth == 13) {
					firstExtensionLineWidth = NXOpen::Annotations::LineWidthEight;
				}
				else if (int_firstExtensionLineWidth == 14) {
					firstExtensionLineWidth = NXOpen::Annotations::LineWidthNine;
				}
				editSettingsBuilder->AnnotationStyle()->LineArrowStyle()->SetFirstExtensionLineWidth(firstExtensionLineWidth);
				//Annotations::LineCfw firstExtensionLineCfw1(firstExtensionLineColorIndex, firstExtensionLineFont, firstExtensionLineWidth);
				//lineAndArrowPreferences->SetFirstExtensionLineCfw(firstExtensionLineCfw1);
			}
			else {
				nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
			}

			if (_nx_dpv->usedUnitValue.compare("1") == 0) {
				id_name.assign("Drafting_arrowHead1Color_MU");
			}
			else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
				id_name.assign("Drafting_arrowHead1Color_EU");
			}
			it = _nx_dpv->soll_dpv_map.find(id_name);
			if (it != _nx_dpv->soll_dpv_map.end()) {
				int firstArrowheadColorIndex;
				firstArrowheadColorIndex = convert_to_int(it->second);
				color = _workPart->Colors()->Find(firstArrowheadColorIndex);
				editSettingsBuilder->AnnotationStyle()->LineArrowStyle()->SetFirstArrowheadColor(color);
			}
			else {
				nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
			}

			id_name.assign("Drafting_arrowHead1Font");
			it = _nx_dpv->soll_dpv_map.find(id_name);
			if (it != _nx_dpv->soll_dpv_map.end()) {
				NXOpen::DisplayableObject::ObjectFont firstExtensionLineFont;
				int int_firstExtensionLineFont = convert_to_int(it->second);
				if (int_firstExtensionLineFont == 1) {
					firstExtensionLineFont = NXOpen::DisplayableObject::ObjectFontSolid;
				}
				else if (int_firstExtensionLineFont == 2) {
					firstExtensionLineFont = NXOpen::DisplayableObject::ObjectFontDashed;
				}
				else if (int_firstExtensionLineFont == 3) {
					firstExtensionLineFont = NXOpen::DisplayableObject::ObjectFontPhantom;
				}
				else if (int_firstExtensionLineFont == 4) {
					firstExtensionLineFont = NXOpen::DisplayableObject::ObjectFontCenterline;
				}
				else if (int_firstExtensionLineFont == 5) {
					firstExtensionLineFont = NXOpen::DisplayableObject::ObjectFontDotted;
				}
				else if (int_firstExtensionLineFont == 6) {
					firstExtensionLineFont = NXOpen::DisplayableObject::ObjectFontLongDashed;
				}
				else if (int_firstExtensionLineFont == 7) {
					firstExtensionLineFont = NXOpen::DisplayableObject::ObjectFontDottedDashed;
				}
				editSettingsBuilder->AnnotationStyle()->LineArrowStyle()->SetFirstArrowheadFont(firstExtensionLineFont);
			}
			else {
				nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
			}

			id_name.assign("Drafting_arrowHead1Width");
			it = _nx_dpv->soll_dpv_map.find(id_name);
			if (it != _nx_dpv->soll_dpv_map.end()) {
				int int_firstArrowheadWidth;
				int_firstArrowheadWidth = convert_to_int(it->second);
				NXOpen::Annotations::LineWidth firstArrowheadWidth;
				if (int_firstArrowheadWidth == 1) {
					firstArrowheadWidth = NXOpen::Annotations::LineWidthNormal;
					//id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
					//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					//firstArrowheadWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
				}
				else if (int_firstArrowheadWidth == 2) {
					firstArrowheadWidth = NXOpen::Annotations::LineWidthThick;
					//id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
					//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					//firstArrowheadWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
				}
				else if (int_firstArrowheadWidth == 3) {
					firstArrowheadWidth = NXOpen::Annotations::LineWidthThin;
					//id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
					//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					//firstArrowheadWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
				}
				else if (int_firstArrowheadWidth == 6) {
					firstArrowheadWidth = NXOpen::Annotations::LineWidthOne;
				}
				else if (int_firstArrowheadWidth == 7) {
					firstArrowheadWidth = NXOpen::Annotations::LineWidthTwo;
				}
				else if (int_firstArrowheadWidth == 8) {
					firstArrowheadWidth = NXOpen::Annotations::LineWidthThree;
				}
				else if (int_firstArrowheadWidth == 9) {
					firstArrowheadWidth = NXOpen::Annotations::LineWidthFour;
				}
				else if (int_firstArrowheadWidth == 10) {
					firstArrowheadWidth = NXOpen::Annotations::LineWidthFive;
				}
				else if (int_firstArrowheadWidth == 11) {
					firstArrowheadWidth = NXOpen::Annotations::LineWidthSix;
				}
				else if (int_firstArrowheadWidth == 12) {
					firstArrowheadWidth = NXOpen::Annotations::LineWidthSeven;
				}
				else if (int_firstArrowheadWidth == 13) {
					firstArrowheadWidth = NXOpen::Annotations::LineWidthEight;
				}
				else if (int_firstArrowheadWidth == 14) {
					firstArrowheadWidth = NXOpen::Annotations::LineWidthNine;
				}
				//Annotations::LineCfw firstArrowheadCfw1(firstArrowheadColorIndex, firstExtensionLineFont, firstArrowheadWidth);
				//lineAndArrowPreferences->SetFirstArrowheadCfw(firstArrowheadCfw1);
				editSettingsBuilder->AnnotationStyle()->LineArrowStyle()->SetFirstArrowheadWidth(firstArrowheadWidth);
			}
			else {
				nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
			}

			if (_nx_dpv->usedUnitValue.compare("1") == 0) {
				id_name.assign("Drafting_arrowLine1Color_MU");
			}
			else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
				id_name.assign("Drafting_arrowLine1Color_EU");
			}
			it = _nx_dpv->soll_dpv_map.find(id_name);
			if (it != _nx_dpv->soll_dpv_map.end()) {
				int tmp;
				tmp = convert_to_int(it->second);
				color = _workPart->Colors()->Find(tmp);
				editSettingsBuilder->AnnotationStyle()->LineArrowStyle()->SetFirstArrowLineColor(color);
			}
			else {
				nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
			}

			id_name.assign("Drafting_arrowLine1Font");
			it = _nx_dpv->soll_dpv_map.find(id_name);
			if (it != _nx_dpv->soll_dpv_map.end()) {
				int int_firstArrowLineFont;
				int_firstArrowLineFont = convert_to_int(it->second);
				NXOpen::DisplayableObject::ObjectFont firstArrowLineFont;
				if (int_firstArrowLineFont == 1) {
					firstArrowLineFont = NXOpen::DisplayableObject::ObjectFontSolid;
				}
				else if (int_firstArrowLineFont == 2) {
					firstArrowLineFont = NXOpen::DisplayableObject::ObjectFontDashed;
				}
				else if (int_firstArrowLineFont == 3) {
					firstArrowLineFont = NXOpen::DisplayableObject::ObjectFontPhantom;
				}
				else if (int_firstArrowLineFont == 4) {
					firstArrowLineFont = NXOpen::DisplayableObject::ObjectFontCenterline;
				}
				else if (int_firstArrowLineFont == 5) {
					firstArrowLineFont = NXOpen::DisplayableObject::ObjectFontDotted;
				}
				else if (int_firstArrowLineFont == 6) {
					firstArrowLineFont = NXOpen::DisplayableObject::ObjectFontLongDashed;
				}
				else if (int_firstArrowLineFont == 7) {
					firstArrowLineFont = NXOpen::DisplayableObject::ObjectFontDottedDashed;
				}
				editSettingsBuilder->AnnotationStyle()->LineArrowStyle()->SetFirstArrowLineFont(firstArrowLineFont);
			}
			else {
				nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
			}

			id_name.assign("Drafting_arrowLine1Width");
			it = _nx_dpv->soll_dpv_map.find(id_name);
			if (it != _nx_dpv->soll_dpv_map.end()) {
				int int_firstArrowLineWidth;
				int_firstArrowLineWidth = convert_to_int(it->second);
				NXOpen::Annotations::LineWidth firstArrowLineWidth;
				if (int_firstArrowLineWidth == 1) {
					firstArrowLineWidth = NXOpen::Annotations::LineWidthNormal;
					//id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
					//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					//firstArrowLineWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
				}
				else if (int_firstArrowLineWidth == 2) {
					firstArrowLineWidth = NXOpen::Annotations::LineWidthThick;
					//id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
					//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					//firstArrowLineWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
				}
				else if (int_firstArrowLineWidth == 3) {
					firstArrowLineWidth = NXOpen::Annotations::LineWidthThin;
					//id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
					//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					//firstArrowLineWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
				}
				else if (int_firstArrowLineWidth == 6) {
					firstArrowLineWidth = NXOpen::Annotations::LineWidthOne;
				}
				else if (int_firstArrowLineWidth == 7) {
					firstArrowLineWidth = NXOpen::Annotations::LineWidthTwo;
				}
				else if (int_firstArrowLineWidth == 8) {
					firstArrowLineWidth = NXOpen::Annotations::LineWidthThree;
				}
				else if (int_firstArrowLineWidth == 9) {
					firstArrowLineWidth = NXOpen::Annotations::LineWidthFour;
				}
				else if (int_firstArrowLineWidth == 10) {
					firstArrowLineWidth = NXOpen::Annotations::LineWidthFive;
				}
				else if (int_firstArrowLineWidth == 11) {
					firstArrowLineWidth = NXOpen::Annotations::LineWidthSix;
				}
				else if (int_firstArrowLineWidth == 12) {
					firstArrowLineWidth = NXOpen::Annotations::LineWidthSeven;
				}
				else if (int_firstArrowLineWidth == 13) {
					firstArrowLineWidth = NXOpen::Annotations::LineWidthEight;
				}
				else if (int_firstArrowLineWidth == 14) {
					firstArrowLineWidth = NXOpen::Annotations::LineWidthNine;
				}
				//Annotations::LineCfw firstArrowLineCfw1(firstArrowLineColorIndex, firstArrowLineFont, firstArrowLineWidth);
				//lineAndArrowPreferences->SetFirstArrowLineCfw(firstArrowLineCfw1);
				editSettingsBuilder->AnnotationStyle()->LineArrowStyle()->SetFirstArrowLineWidth(firstArrowLineWidth);
			}
			else {
				nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
			}

			if (_nx_dpv->usedUnitValue.compare("1") == 0) {
				id_name.assign("Drafting_extensionLine2Color_MU");
			}
			else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
				id_name.assign("Drafting_extensionLine2Color_EU");
			}
			it = _nx_dpv->soll_dpv_map.find(id_name);
			if (it != _nx_dpv->soll_dpv_map.end()) {
				int secondExtensionLineColorIndex;
				secondExtensionLineColorIndex = convert_to_int(it->second);
				color = _workPart->Colors()->Find(secondExtensionLineColorIndex);
				editSettingsBuilder->AnnotationStyle()->LineArrowStyle()->SetSecondExtensionLineColor(color);
			}
			else {
				nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
			}

			id_name.assign("Drafting_extensionLine2Font");
			it = _nx_dpv->soll_dpv_map.find(id_name);
			if (it != _nx_dpv->soll_dpv_map.end()) {
				int int_secondExtensionLineFont;
				int_secondExtensionLineFont = convert_to_int(it->second);
				NXOpen::DisplayableObject::ObjectFont secondExtensionLineFont;
				if (int_secondExtensionLineFont == 1) {
					secondExtensionLineFont = NXOpen::DisplayableObject::ObjectFontSolid;
				}
				else if (int_secondExtensionLineFont == 2) {
					secondExtensionLineFont = NXOpen::DisplayableObject::ObjectFontDashed;
				}
				else if (int_secondExtensionLineFont == 3) {
					secondExtensionLineFont = NXOpen::DisplayableObject::ObjectFontPhantom;
				}
				else if (int_secondExtensionLineFont == 4) {
					secondExtensionLineFont = NXOpen::DisplayableObject::ObjectFontCenterline;
				}
				else if (int_secondExtensionLineFont == 5) {
					secondExtensionLineFont = NXOpen::DisplayableObject::ObjectFontDotted;
				}
				else if (int_secondExtensionLineFont == 6) {
					secondExtensionLineFont = NXOpen::DisplayableObject::ObjectFontLongDashed;
				}
				else if (int_secondExtensionLineFont == 7) {
					secondExtensionLineFont = NXOpen::DisplayableObject::ObjectFontDottedDashed;
				}
				editSettingsBuilder->AnnotationStyle()->LineArrowStyle()->SetSecondExtensionLineFont(secondExtensionLineFont);
			}
			else {
				nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
			}

			id_name.assign("Drafting_extensionLine2Width");
			it = _nx_dpv->soll_dpv_map.find(id_name);
			if (it != _nx_dpv->soll_dpv_map.end()) {
				int int_secondExtensionLineWidth;
				int_secondExtensionLineWidth = convert_to_int(it->second);
				NXOpen::Annotations::LineWidth secondExtensionLineWidth;
				if (int_secondExtensionLineWidth == 1) {
					secondExtensionLineWidth = NXOpen::Annotations::LineWidthNormal;
					//id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
					//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					//secondExtensionLineWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
				}
				else if (int_secondExtensionLineWidth == 2) {
					secondExtensionLineWidth = NXOpen::Annotations::LineWidthThick;
					//id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
					//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					//secondExtensionLineWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
				}
				else if (int_secondExtensionLineWidth == 3) {
					secondExtensionLineWidth = NXOpen::Annotations::LineWidthThin;
					//id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
					//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					//secondExtensionLineWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
				}
				else if (int_secondExtensionLineWidth == 6) {
					secondExtensionLineWidth = NXOpen::Annotations::LineWidthOne;
				}
				else if (int_secondExtensionLineWidth == 7) {
					secondExtensionLineWidth = NXOpen::Annotations::LineWidthTwo;
				}
				else if (int_secondExtensionLineWidth == 8) {
					secondExtensionLineWidth = NXOpen::Annotations::LineWidthThree;
				}
				else if (int_secondExtensionLineWidth == 9) {
					secondExtensionLineWidth = NXOpen::Annotations::LineWidthFour;
				}
				else if (int_secondExtensionLineWidth == 10) {
					secondExtensionLineWidth = NXOpen::Annotations::LineWidthFive;
				}
				else if (int_secondExtensionLineWidth == 11) {
					secondExtensionLineWidth = NXOpen::Annotations::LineWidthSix;
				}
				else if (int_secondExtensionLineWidth == 12) {
					secondExtensionLineWidth = NXOpen::Annotations::LineWidthSeven;
				}
				else if (int_secondExtensionLineWidth == 13) {
					secondExtensionLineWidth = NXOpen::Annotations::LineWidthEight;
				}
				else if (int_secondExtensionLineWidth == 14) {
					secondExtensionLineWidth = NXOpen::Annotations::LineWidthNine;
				}
				//Annotations::LineCfw secondExtensionLineCfw1(secondExtensionLineColorIndex, secondExtensionLineFont, secondExtensionLineWidth);
				//lineAndArrowPreferences->SetSecondExtensionLineCfw(secondExtensionLineCfw1);
				editSettingsBuilder->AnnotationStyle()->LineArrowStyle()->SetSecondExtensionLineWidth(secondExtensionLineWidth);
			}
			else {
				nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
			}

			if (_nx_dpv->usedUnitValue.compare("1") == 0) {
				id_name.assign("Drafting_arrowHead2Color_MU");
			}
			else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
				id_name.assign("Drafting_arrowHead2Color_EU");
			}
			it = _nx_dpv->soll_dpv_map.find(id_name);
			if (it != _nx_dpv->soll_dpv_map.end()) {
				int secondArrowheadColorIndex;
				secondArrowheadColorIndex = convert_to_int(it->second);
				color = _workPart->Colors()->Find(secondArrowheadColorIndex);
				editSettingsBuilder->AnnotationStyle()->LineArrowStyle()->SetSecondArrowheadColor(color);
			}
			else {
				nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
			}

			id_name.assign("Drafting_arrowHead2Font");
			it = _nx_dpv->soll_dpv_map.find(id_name);
			if (it != _nx_dpv->soll_dpv_map.end()) {
				int int_secondArrowHeadFont;
				int_secondArrowHeadFont = convert_to_int(it->second);
				NXOpen::DisplayableObject::ObjectFont secondArrowHeadFont;
				if (int_secondArrowHeadFont == 1) {
					secondArrowHeadFont = NXOpen::DisplayableObject::ObjectFontSolid;
				}
				else if (int_secondArrowHeadFont == 2) {
					secondArrowHeadFont = NXOpen::DisplayableObject::ObjectFontDashed;
				}
				else if (int_secondArrowHeadFont == 3) {
					secondArrowHeadFont = NXOpen::DisplayableObject::ObjectFontPhantom;
				}
				else if (int_secondArrowHeadFont == 4) {
					secondArrowHeadFont = NXOpen::DisplayableObject::ObjectFontCenterline;
				}
				else if (int_secondArrowHeadFont == 5) {
					secondArrowHeadFont = NXOpen::DisplayableObject::ObjectFontDotted;
				}
				else if (int_secondArrowHeadFont == 6) {
					secondArrowHeadFont = NXOpen::DisplayableObject::ObjectFontLongDashed;
				}
				else if (int_secondArrowHeadFont == 7) {
					secondArrowHeadFont = NXOpen::DisplayableObject::ObjectFontDottedDashed;
				}
				editSettingsBuilder->AnnotationStyle()->LineArrowStyle()->SetSecondArrowheadFont(secondArrowHeadFont);
			}
			else {
				nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
			}

			id_name.assign("Drafting_arrowHead2Width");
			it = _nx_dpv->soll_dpv_map.find(id_name);
			if (it != _nx_dpv->soll_dpv_map.end()) {
					int int_secondArrowheadWidth;
				int_secondArrowheadWidth = convert_to_int(it->second);
				NXOpen::Annotations::LineWidth secondArrowheadWidth;
				if (int_secondArrowheadWidth == 1) {
					secondArrowheadWidth = NXOpen::Annotations::LineWidthNormal;
					//id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
					//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					//secondArrowheadWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
				}
				else if (int_secondArrowheadWidth == 2) {
					secondArrowheadWidth = NXOpen::Annotations::LineWidthThick;
					//id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
					//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					//secondArrowheadWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
				}
				else if (int_secondArrowheadWidth == 3) {
					secondArrowheadWidth = NXOpen::Annotations::LineWidthThin;
					//id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
					//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					//secondArrowheadWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
				}
				else if (int_secondArrowheadWidth == 6) {
					secondArrowheadWidth = NXOpen::Annotations::LineWidthOne;
				}
				else if (int_secondArrowheadWidth == 7) {
					secondArrowheadWidth = NXOpen::Annotations::LineWidthTwo;
				}
				else if (int_secondArrowheadWidth == 8) {
					secondArrowheadWidth = NXOpen::Annotations::LineWidthThree;
				}
				else if (int_secondArrowheadWidth == 9) {
					secondArrowheadWidth = NXOpen::Annotations::LineWidthFour;
				}
				else if (int_secondArrowheadWidth == 10) {
					secondArrowheadWidth = NXOpen::Annotations::LineWidthFive;
				}
				else if (int_secondArrowheadWidth == 11) {
					secondArrowheadWidth = NXOpen::Annotations::LineWidthSix;
				}
				else if (int_secondArrowheadWidth == 12) {
					secondArrowheadWidth = NXOpen::Annotations::LineWidthSeven;
				}
				else if (int_secondArrowheadWidth == 13) {
					secondArrowheadWidth = NXOpen::Annotations::LineWidthEight;
				}
				else if (int_secondArrowheadWidth == 14) {
					secondArrowheadWidth = NXOpen::Annotations::LineWidthNine;
				}
				//Annotations::LineCfw secondArrowheadCfw1(secondArrowheadColorIndex, secondArrowHeadFont, secondArrowheadWidth);
				//lineAndArrowPreferences->SetSecondArrowheadCfw(secondArrowheadCfw1);
				editSettingsBuilder->AnnotationStyle()->LineArrowStyle()->SetSecondArrowheadWidth(secondArrowheadWidth);
			}
			else {
				nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
			}

			if (_nx_dpv->usedUnitValue.compare("1") == 0) {
				id_name.assign("Drafting_arrowLine2Color_MU");
			}
			else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
				id_name.assign("Drafting_arrowLine2Color_EU");
			}
			it = _nx_dpv->soll_dpv_map.find(id_name);
			if (it != _nx_dpv->soll_dpv_map.end()) {
					int secondArrowLineColorIndex;
				secondArrowLineColorIndex = convert_to_int(it->second);
				color = _workPart->Colors()->Find(secondArrowLineColorIndex);
				editSettingsBuilder->AnnotationStyle()->LineArrowStyle()->SetSecondArrowLineColor(color);
			}
			else {
				nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
			}

			id_name.assign("Drafting_arrowLine2Font");
			it = _nx_dpv->soll_dpv_map.find(id_name);
			if (it != _nx_dpv->soll_dpv_map.end()) {
					int int_secondArrowLineFont;
				int_secondArrowLineFont = convert_to_int(it->second);
				NXOpen::DisplayableObject::ObjectFont secondArrowLineFont;
				if (int_secondArrowLineFont == 1) {
					secondArrowLineFont = NXOpen::DisplayableObject::ObjectFontSolid;
				}
				else if (int_secondArrowLineFont == 2) {
					secondArrowLineFont = NXOpen::DisplayableObject::ObjectFontDashed;
				}
				else if (int_secondArrowLineFont == 3) {
					secondArrowLineFont = NXOpen::DisplayableObject::ObjectFontPhantom;
				}
				else if (int_secondArrowLineFont == 4) {
					secondArrowLineFont = NXOpen::DisplayableObject::ObjectFontCenterline;
				}
				else if (int_secondArrowLineFont == 5) {
					secondArrowLineFont = NXOpen::DisplayableObject::ObjectFontDotted;
				}
				else if (int_secondArrowLineFont == 6) {
					secondArrowLineFont = NXOpen::DisplayableObject::ObjectFontLongDashed;
				}
				else if (int_secondArrowLineFont == 7) {
					secondArrowLineFont = NXOpen::DisplayableObject::ObjectFontDottedDashed;
				}
				editSettingsBuilder->AnnotationStyle()->LineArrowStyle()->SetSecondArrowLineFont(secondArrowLineFont);
			}
			else {
				nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
			}

			id_name.assign("Drafting_arrowLine2Width");
			it = _nx_dpv->soll_dpv_map.find(id_name);
			if (it != _nx_dpv->soll_dpv_map.end()) {
					int int_secondArrowLineWidth;
				int_secondArrowLineWidth = convert_to_int(it->second);
				NXOpen::Annotations::LineWidth secondArrowLineWidth;
				if (int_secondArrowLineWidth == 1) {
					secondArrowLineWidth = NXOpen::Annotations::LineWidthNormal;
					//id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
					//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					//secondArrowLineWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
				}
				else if (int_secondArrowLineWidth == 2) {
					secondArrowLineWidth = NXOpen::Annotations::LineWidthThick;
					//id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
					//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					//secondArrowLineWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
				}
				else if (int_secondArrowLineWidth == 3) {
					secondArrowLineWidth = NXOpen::Annotations::LineWidthThin;
					//id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
					//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					//secondArrowLineWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
				}
				else if (int_secondArrowLineWidth == 6) {
					secondArrowLineWidth = NXOpen::Annotations::LineWidthOne;
				}
				else if (int_secondArrowLineWidth == 7) {
					secondArrowLineWidth = NXOpen::Annotations::LineWidthTwo;
				}
				else if (int_secondArrowLineWidth == 8) {
					secondArrowLineWidth = NXOpen::Annotations::LineWidthThree;
				}
				else if (int_secondArrowLineWidth == 9) {
					secondArrowLineWidth = NXOpen::Annotations::LineWidthFour;
				}
				else if (int_secondArrowLineWidth == 10) {
					secondArrowLineWidth = NXOpen::Annotations::LineWidthFive;
				}
				else if (int_secondArrowLineWidth == 11) {
					secondArrowLineWidth = NXOpen::Annotations::LineWidthSix;
				}
				else if (int_secondArrowLineWidth == 12) {
					secondArrowLineWidth = NXOpen::Annotations::LineWidthSeven;
				}
				else if (int_secondArrowLineWidth == 13) {
					secondArrowLineWidth = NXOpen::Annotations::LineWidthEight;
				}
				else if (int_secondArrowLineWidth == 14) {
					secondArrowLineWidth = NXOpen::Annotations::LineWidthNine;
				}
				//Annotations::LineCfw secondArrowLineCfw1(secondArrowLineColorIndex, secondArrowLineFont, secondArrowLineWidth);
				//lineAndArrowPreferences->SetSecondArrowLineCfw(secondArrowLineCfw1);
				editSettingsBuilder->AnnotationStyle()->LineArrowStyle()->SetSecondArrowLineWidth(secondArrowLineWidth);
			}
			else {
				nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
			}

			try {
				editSettingsBuilder->Commit();
			}
			catch (...) {
				nxLog("%s - Inside the dimension \"%s\"(tag=%d) an error occured! \n", routineName.c_str(), dimP->JournalIdentifier().GetLocaleText(), (int) dimP->Tag());
			}
			editSettingsBuilder->Destroy();
		}
	}
	catch (...) {
		nxLog("%s - ERROR - STOPP \n", routineName.c_str());
	}
	nxLog("--- STOPP - %s --- \n", routineName.c_str());
}

/*
File - Preferences - Drafting - Symbol -> Repair existing symbols.
*/
void repair_existing_symbol_styles(en_nx_dpv* _nx_dpv, Session * _theSession, Part* _workPart) {
	routineName.assign("repair_existing_symbol_styles");
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- START - %s --- \n", routineName.c_str());

	try {
		Annotations::IdSymbolCollection *theIdSymbolCollection = _workPart->Annotations()->IdSymbols();
		for (NXOpen::Annotations::IdSymbolCollection::iterator it_idSymbol = theIdSymbolCollection->begin(); it_idSymbol != theIdSymbolCollection->end(); it_idSymbol++) {
			Annotations::IdSymbol *symP = (*it_idSymbol);

			Annotations::SymbolPreferences *symbolPreferences = symP->GetSymbolPreferences();
			Annotations::LetteringPreferences *letteringPreferences = symP->GetLetteringPreferences();
			Annotations::LineAndArrowPreferences *lineAndArrowPreferences = symP->GetLineAndArrowPreferences();

			if (_nx_dpv->usedUnitValue.compare("1") == 0) {
				id_name.assign("Drafting_idSymbolSize_MU");
			}
			else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
				id_name.assign("Drafting_idSymbolSize_EU");
			}
			it = _nx_dpv->soll_dpv_map.find(id_name);
			double idSymbolSize;
			idSymbolSize = convert_to_double(it->second);
			symbolPreferences->SetIdSymbolSize(idSymbolSize);

			Annotations::LineCfw idSymbolCfw = symbolPreferences->GetIdSymbolCfw();
			if (_nx_dpv->usedUnitValue.compare("1") == 0) {
				id_name.assign("Drafting_idSymbolColor_MU");
			}
			else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
				id_name.assign("Drafting_idSymbolColor_EU");
			}
			it = _nx_dpv->soll_dpv_map.find(id_name);
			int idSymbolColorIndex;
			idSymbolColorIndex = convert_to_int(it->second);
			idSymbolCfw.Color = idSymbolColorIndex;

			id_name.assign("Drafting_idSymbolFont");
			it = _nx_dpv->soll_dpv_map.find(id_name);
			int int_idSymbolFont;
			int_idSymbolFont = convert_to_int(it->second);
			idSymbolCfw.Font = (DisplayableObject::ObjectFont) int_idSymbolFont;

			id_name.assign("Drafting_idSymbolWidth");
			it = _nx_dpv->soll_dpv_map.find(id_name);
			int int_idSymbolWidth;
			int_idSymbolWidth = convert_to_int(it->second);
			NXOpen::Annotations::LineWidth idSymbolWidth;
			//std::map<const std::string, std::string>::iterator it_tmp;
			//string id_name_tmp;
			if (int_idSymbolWidth == 1) {
				idSymbolWidth = NXOpen::Annotations::LineWidthNormal;
				//id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
				//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				//idSymbolWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
			}
			else if (int_idSymbolWidth == 2) {
				idSymbolWidth = NXOpen::Annotations::LineWidthThick;
				//id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
				//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				//idSymbolWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
			}
			else if (int_idSymbolWidth == 3) {
				idSymbolWidth = NXOpen::Annotations::LineWidthThin;
				//id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
				//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				//idSymbolWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
			}
			else if (int_idSymbolWidth == 6) {
				idSymbolWidth = NXOpen::Annotations::LineWidthOne;
			}
			else if (int_idSymbolWidth == 7) {
				idSymbolWidth = NXOpen::Annotations::LineWidthTwo;
			}
			else if (int_idSymbolWidth == 8) {
				idSymbolWidth = NXOpen::Annotations::LineWidthThree;
			}
			else if (int_idSymbolWidth == 9) {
				idSymbolWidth = NXOpen::Annotations::LineWidthFour;
			}
			else if (int_idSymbolWidth == 10) {
				idSymbolWidth = NXOpen::Annotations::LineWidthFive;
			}
			else if (int_idSymbolWidth == 11) {
				idSymbolWidth = NXOpen::Annotations::LineWidthSix;
			}
			else if (int_idSymbolWidth == 12) {
				idSymbolWidth = NXOpen::Annotations::LineWidthSeven;
			}
			else if (int_idSymbolWidth == 13) {
				idSymbolWidth = NXOpen::Annotations::LineWidthEight;
			}
			else if (int_idSymbolWidth == 14) {
				idSymbolWidth = NXOpen::Annotations::LineWidthNine;
			}
			idSymbolCfw.Width = idSymbolWidth;

			symbolPreferences->SetIdSymbolCfw(idSymbolCfw);

			Annotations::Lettering idSymLetteringGeneralText = letteringPreferences->GetGeneralText();

			if (_nx_dpv->usedUnitValue.compare("1") == 0) {
				id_name.assign("Axs_sxletterCharSize_MU");
			}
			else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
				id_name.assign("Axs_sxletterCharSize_EU");
			}
			it = _nx_dpv->soll_dpv_map.find(id_name);
			double generalTextSize = 0.0;
			generalTextSize = convert_to_double(it->second);
			//generalTextSize = generalTextSize * 10;
			//generalTextSize = generalTextSize / 7;
			//idSymLetteringGeneralText.Size = (generalTextSize * 10) / 7;
			//idSymLetteringGeneralText.Size = 5.0;
			idSymLetteringGeneralText.Size = generalTextSize;

			id_name.assign("Drafting_draftTextColor");
			it = _nx_dpv->soll_dpv_map.find(id_name);
			int generalTextColorIndex;
			generalTextColorIndex = convert_to_int(it->second);
			idSymLetteringGeneralText.Cfw.Color = generalTextColorIndex;

			id_name.assign("Drafting_draftTextFont");
			it = _nx_dpv->soll_dpv_map.find(id_name);
			NXString generalTextFontName;
			generalTextFontName = (NXString)it->second.c_str();
			int generalTextFontIndex;
			generalTextFontIndex = _workPart->Fonts()->AddFont(generalTextFontName);
			idSymLetteringGeneralText.Cfw.Font = int_idSymbolFont; // Drafting_idSymbolFont

			id_name.assign("Drafting_draftTextWidth");
			it = _nx_dpv->soll_dpv_map.find(id_name);
			int int_generalTextLineWidth;
			int_generalTextLineWidth = convert_to_int(it->second);
			NXOpen::Annotations::LineWidth generalTextLineWidth;
			//NXOpen::Annotations::LineWidth generalTextLineWidth;
			if (int_generalTextLineWidth == 1) {
				generalTextLineWidth = NXOpen::Annotations::LineWidthNormal;
				//id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
				//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				//generalTextLineWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
			}
			else if (int_generalTextLineWidth == 2) {
				generalTextLineWidth = NXOpen::Annotations::LineWidthThick;
				//id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
				//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				//generalTextLineWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
			}
			else if (int_generalTextLineWidth == 3) {
				generalTextLineWidth = NXOpen::Annotations::LineWidthThin;
				//id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
				//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				//generalTextLineWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
			}
			else if (int_generalTextLineWidth == 6) {
				generalTextLineWidth = NXOpen::Annotations::LineWidthOne;
			}
			else if (int_generalTextLineWidth == 7) {
				generalTextLineWidth = NXOpen::Annotations::LineWidthTwo;
			}
			else if (int_generalTextLineWidth == 8) {
				generalTextLineWidth = NXOpen::Annotations::LineWidthThree;
			}
			else if (int_generalTextLineWidth == 9) {
				generalTextLineWidth = NXOpen::Annotations::LineWidthFour;
			}
			else if (int_generalTextLineWidth == 10) {
				generalTextLineWidth = NXOpen::Annotations::LineWidthFive;
			}
			else if (int_generalTextLineWidth == 11) {
				generalTextLineWidth = NXOpen::Annotations::LineWidthSix;
			}
			else if (int_generalTextLineWidth == 12) {
				generalTextLineWidth = NXOpen::Annotations::LineWidthSeven;
			}
			else if (int_generalTextLineWidth == 13) {
				generalTextLineWidth = NXOpen::Annotations::LineWidthEight;
			}
			else if (int_generalTextLineWidth == 14) {
				generalTextLineWidth = NXOpen::Annotations::LineWidthNine;
			}
			//idSymLetteringGeneralText.Cfw.Width = generalTextLineWidth;
			idSymLetteringGeneralText.Cfw.Width = NXOpen::Annotations::LineWidthNormal;
			
			letteringPreferences->SetGeneralText(idSymLetteringGeneralText);

			if (_nx_dpv->usedUnitValue.compare("1") == 0) {
				id_name.assign("Drafting_arrowSize_MU");
			}
			else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
				id_name.assign("Drafting_arrowSize_EU");
			}
			it = _nx_dpv->soll_dpv_map.find(id_name);
			double arrowheadLength;
			arrowheadLength = convert_to_double(it->second);
			lineAndArrowPreferences->SetArrowheadLength(arrowheadLength);

			//id_name.assign("Drafting_includedAngle");
			//it = _nx_dpv->soll_dpv_map.find(id_name);
			//double arrowheadIncludedAngle;
			//arrowheadIncludedAngle = convert_to_double(it->second);
			//lineAndArrowPreferences->SetArrowheadIncludedAngle(arrowheadIncludedAngle);

			if (_nx_dpv->usedUnitValue.compare("1") == 0) {
				id_name.assign("Drafting_dotDiameter_MU");
			}
			else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
				id_name.assign("Drafting_dotDiameter_EU");
			}
			it = _nx_dpv->soll_dpv_map.find(id_name);
			double dotArrowheadDiameter;
			dotArrowheadDiameter = convert_to_double(it->second);
			lineAndArrowPreferences->SetDotArrowheadDiameter(dotArrowheadDiameter);

			if (_nx_dpv->usedUnitValue.compare("1") == 0) {
				id_name.assign("Drafting_stubbSize_MU");
			}
			else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
				id_name.assign("Drafting_stubbSize_EU");
			}
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - id_name = %s \n", routineName.c_str(), id_name.c_str());
			it = _nx_dpv->soll_dpv_map.find(id_name);
			double stubLength;
			stubLength = convert_to_double(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - stubLength = %f \n", routineName.c_str(), stubLength);
			lineAndArrowPreferences->SetStubLength(stubLength);

			if (_nx_dpv->usedUnitValue.compare("1") == 0) {
				id_name.assign("Drafting_textLine_MU");
			}
			else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
				id_name.assign("Drafting_textLine_EU");
			}
			it = _nx_dpv->soll_dpv_map.find(id_name);
			double textToLineDistance;;
			textToLineDistance = convert_to_double(it->second);
			lineAndArrowPreferences->SetTextToLineDistance(textToLineDistance);

			if (_nx_dpv->usedUnitValue.compare("1") == 0) {
				id_name.assign("Drafting_pointLine1_MU");
			}
			else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
				id_name.assign("Drafting_pointLine1_EU");
			}
			it = _nx_dpv->soll_dpv_map.find(id_name);
			double firstPosToExtensionLineDistance;
			firstPosToExtensionLineDistance = convert_to_double(it->second);
			lineAndArrowPreferences->SetFirstPosToExtLineDist(firstPosToExtensionLineDistance);

			if (_nx_dpv->usedUnitValue.compare("1") == 0) {
				id_name.assign("Drafting_pointLine2_MU");
			}
			else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
				id_name.assign("Drafting_pointLine2_EU");
			}
			it = _nx_dpv->soll_dpv_map.find(id_name);
			double secondPosToExtensionLineDistance;
			secondPosToExtensionLineDistance = convert_to_double(it->second);
			lineAndArrowPreferences->SetSecondPosToExtLineDist(secondPosToExtensionLineDistance);

			if (_nx_dpv->usedUnitValue.compare("1") == 0) {
				id_name.assign("Drafting_datumExtLine_MU");
			}
			else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
				id_name.assign("Drafting_datumExtLine_EU");
			}
			it = _nx_dpv->soll_dpv_map.find(id_name);
			double datumLengthPastArrow;
			datumLengthPastArrow = convert_to_double(it->second);
			lineAndArrowPreferences->SetDatumLengthPastArrow(datumLengthPastArrow);

			Annotations::LineCfw firstExtensionLineCfw = lineAndArrowPreferences->GetFirstExtensionLineCfw();
			Annotations::LineCfw firstArrowheadCfw = lineAndArrowPreferences->GetFirstArrowheadCfw();
			Annotations::LineCfw firstArrowLineCfw = lineAndArrowPreferences->GetFirstArrowLineCfw();
			Annotations::LineCfw secondExtensionLineCfw = lineAndArrowPreferences->GetSecondExtensionLineCfw();
			Annotations::LineCfw secondArrowheadCfw = lineAndArrowPreferences->GetSecondArrowheadCfw();
			Annotations::LineCfw secondArrowLineCfw = lineAndArrowPreferences->GetSecondArrowLineCfw();

			if (_nx_dpv->usedUnitValue.compare("1") == 0) {
				id_name.assign("Drafting_extensionLine1Color_MU");
			}
			else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
				id_name.assign("Drafting_extensionLine1Color_EU");
			}
			it = _nx_dpv->soll_dpv_map.find(id_name);
			int firstExtensionLineColorIndex;
			firstExtensionLineColorIndex = convert_to_int(it->second);
			NXOpen::NXColor *firstExtensionLineColor;
			firstExtensionLineColor = _workPart->Colors()->Find(firstExtensionLineColorIndex);
			id_name.assign("Drafting_extensionLine1Font");
			it = _nx_dpv->soll_dpv_map.find(id_name);
			int int_firstExtensionLineFont;
			int_firstExtensionLineFont = convert_to_int(it->second);
			NXOpen::DisplayableObject::ObjectFont firstExtensionLineFont;
			if (int_firstExtensionLineFont == 1) {
				firstExtensionLineFont = NXOpen::DisplayableObject::ObjectFontSolid;
			}
			else if (int_firstExtensionLineFont == 2) {
				firstExtensionLineFont = NXOpen::DisplayableObject::ObjectFontDashed;
			}
			else if (int_firstExtensionLineFont == 3) {
				firstExtensionLineFont = NXOpen::DisplayableObject::ObjectFontPhantom;
			}
			else if (int_firstExtensionLineFont == 4) {
				firstExtensionLineFont = NXOpen::DisplayableObject::ObjectFontCenterline;
			}
			else if (int_firstExtensionLineFont == 5) {
				firstExtensionLineFont = NXOpen::DisplayableObject::ObjectFontDotted;
			}
			else if (int_firstExtensionLineFont == 6) {
				firstExtensionLineFont = NXOpen::DisplayableObject::ObjectFontLongDashed;
			}
			else if (int_firstExtensionLineFont == 7) {
				firstExtensionLineFont = NXOpen::DisplayableObject::ObjectFontDottedDashed;
			}
			id_name.assign("Drafting_extensionLine1Width");
			it = _nx_dpv->soll_dpv_map.find(id_name);
			int int_firstExtensionLineWidth;
			int_firstExtensionLineWidth = convert_to_int(it->second);
			NXOpen::Annotations::LineWidth firstExtensionLineWidth;
			if (int_firstExtensionLineWidth == 1) {
				firstExtensionLineWidth = NXOpen::Annotations::LineWidthNormal;
				//id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
				//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				//firstExtensionLineWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
			}
			else if (int_firstExtensionLineWidth == 2) {
				firstExtensionLineWidth = NXOpen::Annotations::LineWidthThick;
				//id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
				//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				//firstExtensionLineWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
			}
			else if (int_firstExtensionLineWidth == 3) {
				firstExtensionLineWidth = NXOpen::Annotations::LineWidthThin;
				//id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
				//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				//firstExtensionLineWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
			}
			else if (int_firstExtensionLineWidth == 6) {
				firstExtensionLineWidth = NXOpen::Annotations::LineWidthOne;
			}
			else if (int_firstExtensionLineWidth == 7) {
				firstExtensionLineWidth = NXOpen::Annotations::LineWidthTwo;
			}
			else if (int_firstExtensionLineWidth == 8) {
				firstExtensionLineWidth = NXOpen::Annotations::LineWidthThree;
			}
			else if (int_firstExtensionLineWidth == 9) {
				firstExtensionLineWidth = NXOpen::Annotations::LineWidthFour;
			}
			else if (int_firstExtensionLineWidth == 10) {
				firstExtensionLineWidth = NXOpen::Annotations::LineWidthFive;
			}
			else if (int_firstExtensionLineWidth == 11) {
				firstExtensionLineWidth = NXOpen::Annotations::LineWidthSix;
			}
			else if (int_firstExtensionLineWidth == 12) {
				firstExtensionLineWidth = NXOpen::Annotations::LineWidthSeven;
			}
			else if (int_firstExtensionLineWidth == 13) {
				firstExtensionLineWidth = NXOpen::Annotations::LineWidthEight;
			}
			else if (int_firstExtensionLineWidth == 14) {
				firstExtensionLineWidth = NXOpen::Annotations::LineWidthNine;
			}
			firstExtensionLineCfw.Color = firstExtensionLineColorIndex;
			firstExtensionLineCfw.Font = firstExtensionLineFont;
			firstExtensionLineCfw.Width = firstExtensionLineWidth;
			lineAndArrowPreferences->SetFirstExtensionLineCfw(firstExtensionLineCfw);

			if (_nx_dpv->usedUnitValue.compare("1") == 0) {
				id_name.assign("Drafting_arrowHead1Color_MU");
			}
			else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
				id_name.assign("Drafting_arrowHead1Color_EU");
			}
			it = _nx_dpv->soll_dpv_map.find(id_name);
			int firstArrowheadColorIndex;
			firstArrowheadColorIndex = convert_to_int(it->second);
			id_name.assign("Drafting_arrowHead1Font");
			it = _nx_dpv->soll_dpv_map.find(id_name);
			int_firstExtensionLineFont = convert_to_int(it->second);
			if (int_firstExtensionLineFont == 1) {
				firstExtensionLineFont = NXOpen::DisplayableObject::ObjectFontSolid;
			}
			else if (int_firstExtensionLineFont == 2) {
				firstExtensionLineFont = NXOpen::DisplayableObject::ObjectFontDashed;
			}
			else if (int_firstExtensionLineFont == 3) {
				firstExtensionLineFont = NXOpen::DisplayableObject::ObjectFontPhantom;
			}
			else if (int_firstExtensionLineFont == 4) {
				firstExtensionLineFont = NXOpen::DisplayableObject::ObjectFontCenterline;
			}
			else if (int_firstExtensionLineFont == 5) {
				firstExtensionLineFont = NXOpen::DisplayableObject::ObjectFontDotted;
			}
			else if (int_firstExtensionLineFont == 6) {
				firstExtensionLineFont = NXOpen::DisplayableObject::ObjectFontLongDashed;
			}
			else if (int_firstExtensionLineFont == 7) {
				firstExtensionLineFont = NXOpen::DisplayableObject::ObjectFontDottedDashed;
			}
			id_name.assign("Drafting_arrowHead1Width");
			it = _nx_dpv->soll_dpv_map.find(id_name);
			int int_firstArrowheadWidth;
			int_firstArrowheadWidth = convert_to_int(it->second);
			NXOpen::Annotations::LineWidth firstArrowheadWidth;
			if (int_firstArrowheadWidth == 1) {
				firstArrowheadWidth = NXOpen::Annotations::LineWidthNormal;
				//id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
				//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				//firstArrowheadWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
			}
			else if (int_firstArrowheadWidth == 2) {
				firstArrowheadWidth = NXOpen::Annotations::LineWidthThick;
				//id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
				//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				//firstArrowheadWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
			}
			else if (int_firstArrowheadWidth == 3) {
				firstArrowheadWidth = NXOpen::Annotations::LineWidthThin;
				//id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
				//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				//firstArrowheadWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
			}
			else if (int_firstArrowheadWidth == 6) {
				firstArrowheadWidth = NXOpen::Annotations::LineWidthOne;
			}
			else if (int_firstArrowheadWidth == 7) {
				firstArrowheadWidth = NXOpen::Annotations::LineWidthTwo;
			}
			else if (int_firstArrowheadWidth == 8) {
				firstArrowheadWidth = NXOpen::Annotations::LineWidthThree;
			}
			else if (int_firstArrowheadWidth == 9) {
				firstArrowheadWidth = NXOpen::Annotations::LineWidthFour;
			}
			else if (int_firstArrowheadWidth == 10) {
				firstArrowheadWidth = NXOpen::Annotations::LineWidthFive;
			}
			else if (int_firstArrowheadWidth == 11) {
				firstArrowheadWidth = NXOpen::Annotations::LineWidthSix;
			}
			else if (int_firstArrowheadWidth == 12) {
				firstArrowheadWidth = NXOpen::Annotations::LineWidthSeven;
			}
			else if (int_firstArrowheadWidth == 13) {
				firstArrowheadWidth = NXOpen::Annotations::LineWidthEight;
			}
			else if (int_firstArrowheadWidth == 14) {
				firstArrowheadWidth = NXOpen::Annotations::LineWidthNine;
			}
			firstArrowheadCfw.Color = firstArrowheadColorIndex;
			firstArrowheadCfw.Font = firstExtensionLineFont;
			firstArrowheadCfw.Width = firstArrowheadWidth;
			lineAndArrowPreferences->SetFirstArrowheadCfw(firstArrowheadCfw);

			if (_nx_dpv->usedUnitValue.compare("1") == 0) {
				id_name.assign("Drafting_arrowLine1Color_MU");
			}
			else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
				id_name.assign("Drafting_arrowLine1Color_EU");
			}
			it = _nx_dpv->soll_dpv_map.find(id_name);
			int firstArrowLineColorIndex;
			firstArrowLineColorIndex = convert_to_int(it->second);
			id_name.assign("Drafting_arrowLine1Font");
			it = _nx_dpv->soll_dpv_map.find(id_name);
			int int_firstArrowLineFont;
			int_firstArrowLineFont = convert_to_int(it->second);
			NXOpen::DisplayableObject::ObjectFont firstArrowLineFont;
			if (int_firstArrowLineFont == 1) {
				firstArrowLineFont = NXOpen::DisplayableObject::ObjectFontSolid;
			}
			else if (int_firstArrowLineFont == 2) {
				firstArrowLineFont = NXOpen::DisplayableObject::ObjectFontDashed;
			}
			else if (int_firstArrowLineFont == 3) {
				firstArrowLineFont = NXOpen::DisplayableObject::ObjectFontPhantom;
			}
			else if (int_firstArrowLineFont == 4) {
				firstArrowLineFont = NXOpen::DisplayableObject::ObjectFontCenterline;
			}
			else if (int_firstArrowLineFont == 5) {
				firstArrowLineFont = NXOpen::DisplayableObject::ObjectFontDotted;
			}
			else if (int_firstArrowLineFont == 6) {
				firstArrowLineFont = NXOpen::DisplayableObject::ObjectFontLongDashed;
			}
			else if (int_firstArrowLineFont == 7) {
				firstArrowLineFont = NXOpen::DisplayableObject::ObjectFontDottedDashed;
			}
			id_name.assign("Drafting_arrowLine1Width");
			it = _nx_dpv->soll_dpv_map.find(id_name);
			int int_firstArrowLineWidth;
			int_firstArrowLineWidth = convert_to_int(it->second);
			NXOpen::Annotations::LineWidth firstArrowLineWidth;
			if (int_firstArrowLineWidth == 1) {
				firstArrowLineWidth = NXOpen::Annotations::LineWidthNormal;
				//id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
				//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				//firstArrowLineWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
			}
			else if (int_firstArrowLineWidth == 2) {
				firstArrowLineWidth = NXOpen::Annotations::LineWidthThick;
				//id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
				//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				//firstArrowLineWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
			}
			else if (int_firstArrowLineWidth == 3) {
				firstArrowLineWidth = NXOpen::Annotations::LineWidthThin;
				//id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
				//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				//firstArrowLineWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
			}
			else if (int_firstArrowLineWidth == 6) {
				firstArrowLineWidth = NXOpen::Annotations::LineWidthOne;
			}
			else if (int_firstArrowLineWidth == 7) {
				firstArrowLineWidth = NXOpen::Annotations::LineWidthTwo;
			}
			else if (int_firstArrowLineWidth == 8) {
				firstArrowLineWidth = NXOpen::Annotations::LineWidthThree;
			}
			else if (int_firstArrowLineWidth == 9) {
				firstArrowLineWidth = NXOpen::Annotations::LineWidthFour;
			}
			else if (int_firstArrowLineWidth == 10) {
				firstArrowLineWidth = NXOpen::Annotations::LineWidthFive;
			}
			else if (int_firstArrowLineWidth == 11) {
				firstArrowLineWidth = NXOpen::Annotations::LineWidthSix;
			}
			else if (int_firstArrowLineWidth == 12) {
				firstArrowLineWidth = NXOpen::Annotations::LineWidthSeven;
			}
			else if (int_firstArrowLineWidth == 13) {
				firstArrowLineWidth = NXOpen::Annotations::LineWidthEight;
			}
			else if (int_firstArrowLineWidth == 14) {
				firstArrowLineWidth = NXOpen::Annotations::LineWidthNine;
			}
			firstArrowLineCfw.Color = firstArrowLineColorIndex;
			firstArrowLineCfw.Font = firstArrowLineFont;
			firstArrowLineCfw.Width = firstArrowLineWidth;
			lineAndArrowPreferences->SetFirstArrowLineCfw(firstArrowLineCfw);

			if (_nx_dpv->usedUnitValue.compare("1") == 0) {
				id_name.assign("Drafting_extensionLine2Color_MU");
			}
			else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
				id_name.assign("Drafting_extensionLine2Color_EU");
			}
			it = _nx_dpv->soll_dpv_map.find(id_name);
			int secondExtensionLineColorIndex;
			secondExtensionLineColorIndex = convert_to_int(it->second);
			id_name.assign("Drafting_extensionLine2Font");
			it = _nx_dpv->soll_dpv_map.find(id_name);
			int int_secondExtensionLineFont;
			int_secondExtensionLineFont = convert_to_int(it->second);
			NXOpen::DisplayableObject::ObjectFont secondExtensionLineFont;
			if (int_secondExtensionLineFont == 1) {
				secondExtensionLineFont = NXOpen::DisplayableObject::ObjectFontSolid;
			}
			else if (int_secondExtensionLineFont == 2) {
				secondExtensionLineFont = NXOpen::DisplayableObject::ObjectFontDashed;
			}
			else if (int_secondExtensionLineFont == 3) {
				secondExtensionLineFont = NXOpen::DisplayableObject::ObjectFontPhantom;
			}
			else if (int_secondExtensionLineFont == 4) {
				secondExtensionLineFont = NXOpen::DisplayableObject::ObjectFontCenterline;
			}
			else if (int_secondExtensionLineFont == 5) {
				secondExtensionLineFont = NXOpen::DisplayableObject::ObjectFontDotted;
			}
			else if (int_secondExtensionLineFont == 6) {
				secondExtensionLineFont = NXOpen::DisplayableObject::ObjectFontLongDashed;
			}
			else if (int_secondExtensionLineFont == 7) {
				secondExtensionLineFont = NXOpen::DisplayableObject::ObjectFontDottedDashed;
			}
			id_name.assign("Drafting_extensionLine2Width");
			it = _nx_dpv->soll_dpv_map.find(id_name);
			int int_secondExtensionLineWidth;
			int_secondExtensionLineWidth = convert_to_int(it->second);
			NXOpen::Annotations::LineWidth secondExtensionLineWidth;
			if (int_secondExtensionLineWidth == 1) {
				secondExtensionLineWidth = NXOpen::Annotations::LineWidthNormal;
				//id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
				//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				//secondExtensionLineWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
			}
			else if (int_secondExtensionLineWidth == 2) {
				secondExtensionLineWidth = NXOpen::Annotations::LineWidthThick;
				//id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
				//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				//secondExtensionLineWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
			}
			else if (int_secondExtensionLineWidth == 3) {
				secondExtensionLineWidth = NXOpen::Annotations::LineWidthThin;
				//id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
				//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				//secondExtensionLineWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
			}
			else if (int_secondExtensionLineWidth == 6) {
				secondExtensionLineWidth = NXOpen::Annotations::LineWidthOne;
			}
			else if (int_secondExtensionLineWidth == 7) {
				secondExtensionLineWidth = NXOpen::Annotations::LineWidthTwo;
			}
			else if (int_secondExtensionLineWidth == 8) {
				secondExtensionLineWidth = NXOpen::Annotations::LineWidthThree;
			}
			else if (int_secondExtensionLineWidth == 9) {
				secondExtensionLineWidth = NXOpen::Annotations::LineWidthFour;
			}
			else if (int_secondExtensionLineWidth == 10) {
				secondExtensionLineWidth = NXOpen::Annotations::LineWidthFive;
			}
			else if (int_secondExtensionLineWidth == 11) {
				secondExtensionLineWidth = NXOpen::Annotations::LineWidthSix;
			}
			else if (int_secondExtensionLineWidth == 12) {
				secondExtensionLineWidth = NXOpen::Annotations::LineWidthSeven;
			}
			else if (int_secondExtensionLineWidth == 13) {
				secondExtensionLineWidth = NXOpen::Annotations::LineWidthEight;
			}
			else if (int_secondExtensionLineWidth == 14) {
				secondExtensionLineWidth = NXOpen::Annotations::LineWidthNine;
			}
			secondExtensionLineCfw.Color = secondExtensionLineColorIndex;
			secondExtensionLineCfw.Font = secondExtensionLineFont;
			secondExtensionLineCfw.Width = secondExtensionLineWidth;
			lineAndArrowPreferences->SetSecondExtensionLineCfw(secondExtensionLineCfw);

			if (_nx_dpv->usedUnitValue.compare("1") == 0) {
				id_name.assign("Drafting_arrowHead2Color_MU");
			}
			else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
				id_name.assign("Drafting_arrowHead2Color_EU");
			}
			it = _nx_dpv->soll_dpv_map.find(id_name);
			int secondArrowheadColorIndex;
			secondArrowheadColorIndex = convert_to_int(it->second);
			id_name.assign("Drafting_arrowHead2Font");
			it = _nx_dpv->soll_dpv_map.find(id_name);
			int int_secondArrowHeadFont;
			int_secondArrowHeadFont = convert_to_int(it->second);
			NXOpen::DisplayableObject::ObjectFont secondArrowHeadFont;
			if (int_secondArrowHeadFont == 1) {
				secondArrowHeadFont = NXOpen::DisplayableObject::ObjectFontSolid;
			}
			else if (int_secondArrowHeadFont == 2) {
				secondArrowHeadFont = NXOpen::DisplayableObject::ObjectFontDashed;
			}
			else if (int_secondArrowHeadFont == 3) {
				secondArrowHeadFont = NXOpen::DisplayableObject::ObjectFontPhantom;
			}
			else if (int_secondArrowHeadFont == 4) {
				secondArrowHeadFont = NXOpen::DisplayableObject::ObjectFontCenterline;
			}
			else if (int_secondArrowHeadFont == 5) {
				secondArrowHeadFont = NXOpen::DisplayableObject::ObjectFontDotted;
			}
			else if (int_secondArrowHeadFont == 6) {
				secondArrowHeadFont = NXOpen::DisplayableObject::ObjectFontLongDashed;
			}
			else if (int_secondArrowHeadFont == 7) {
				secondArrowHeadFont = NXOpen::DisplayableObject::ObjectFontDottedDashed;
			}
			id_name.assign("Drafting_arrowHead2Width");
			it = _nx_dpv->soll_dpv_map.find(id_name);
			int int_secondArrowheadWidth;
			int_secondArrowheadWidth = convert_to_int(it->second);
			NXOpen::Annotations::LineWidth secondArrowheadWidth;
			if (int_secondArrowheadWidth == 1) {
				secondArrowheadWidth = NXOpen::Annotations::LineWidthNormal;
				//id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
				//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				//secondArrowheadWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
			}
			else if (int_secondArrowheadWidth == 2) {
				secondArrowheadWidth = NXOpen::Annotations::LineWidthThick;
				//id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
				//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				//secondArrowheadWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
			}
			else if (int_secondArrowheadWidth == 3) {
				secondArrowheadWidth = NXOpen::Annotations::LineWidthThin;
				//id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
				//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				//secondArrowheadWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
			}
			else if (int_secondArrowheadWidth == 6) {
				secondArrowheadWidth = NXOpen::Annotations::LineWidthOne;
			}
			else if (int_secondArrowheadWidth == 7) {
				secondArrowheadWidth = NXOpen::Annotations::LineWidthTwo;
			}
			else if (int_secondArrowheadWidth == 8) {
				secondArrowheadWidth = NXOpen::Annotations::LineWidthThree;
			}
			else if (int_secondArrowheadWidth == 9) {
				secondArrowheadWidth = NXOpen::Annotations::LineWidthFour;
			}
			else if (int_secondArrowheadWidth == 10) {
				secondArrowheadWidth = NXOpen::Annotations::LineWidthFive;
			}
			else if (int_secondArrowheadWidth == 11) {
				secondArrowheadWidth = NXOpen::Annotations::LineWidthSix;
			}
			else if (int_secondArrowheadWidth == 12) {
				secondArrowheadWidth = NXOpen::Annotations::LineWidthSeven;
			}
			else if (int_secondArrowheadWidth == 13) {
				secondArrowheadWidth = NXOpen::Annotations::LineWidthEight;
			}
			else if (int_secondArrowheadWidth == 14) {
				secondArrowheadWidth = NXOpen::Annotations::LineWidthNine;
			}
			secondArrowheadCfw.Color = secondArrowheadColorIndex;
			secondArrowheadCfw.Font = secondArrowHeadFont;
			secondArrowheadCfw.Width = secondArrowheadWidth;
			lineAndArrowPreferences->SetSecondArrowheadCfw(secondArrowheadCfw);

			if (_nx_dpv->usedUnitValue.compare("1") == 0) {
				id_name.assign("Drafting_arrowLine2Color_MU");
			}
			else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
				id_name.assign("Drafting_arrowLine2Color_EU");
			}
			it = _nx_dpv->soll_dpv_map.find(id_name);
			int secondArrowLineColorIndex;
			secondArrowLineColorIndex = convert_to_int(it->second);
			id_name.assign("Drafting_arrowLine2Font");
			it = _nx_dpv->soll_dpv_map.find(id_name);
			int int_secondArrowLineFont;
			int_secondArrowLineFont = convert_to_int(it->second);
			NXOpen::DisplayableObject::ObjectFont secondArrowLineFont;
			if (int_secondArrowLineFont == 1) {
				secondArrowLineFont = NXOpen::DisplayableObject::ObjectFontSolid;
			}
			else if (int_secondArrowLineFont == 2) {
				secondArrowLineFont = NXOpen::DisplayableObject::ObjectFontDashed;
			}
			else if (int_secondArrowLineFont == 3) {
				secondArrowLineFont = NXOpen::DisplayableObject::ObjectFontPhantom;
			}
			else if (int_secondArrowLineFont == 4) {
				secondArrowLineFont = NXOpen::DisplayableObject::ObjectFontCenterline;
			}
			else if (int_secondArrowLineFont == 5) {
				secondArrowLineFont = NXOpen::DisplayableObject::ObjectFontDotted;
			}
			else if (int_secondArrowLineFont == 6) {
				secondArrowLineFont = NXOpen::DisplayableObject::ObjectFontLongDashed;
			}
			else if (int_secondArrowLineFont == 7) {
				secondArrowLineFont = NXOpen::DisplayableObject::ObjectFontDottedDashed;
			}
			id_name.assign("Drafting_arrowLine2Width");
			it = _nx_dpv->soll_dpv_map.find(id_name);
			int int_secondArrowLineWidth;
			int_secondArrowLineWidth = convert_to_int(it->second);
			NXOpen::Annotations::LineWidth secondArrowLineWidth;
			if (int_secondArrowLineWidth == 1) {
				secondArrowLineWidth = NXOpen::Annotations::LineWidthNormal;
				//id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
				//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				//secondArrowLineWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
			}
			else if (int_secondArrowLineWidth == 2) {
				secondArrowLineWidth = NXOpen::Annotations::LineWidthThick;
				//id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
				//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				//secondArrowLineWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
			}
			else if (int_secondArrowLineWidth == 3) {
				secondArrowLineWidth = NXOpen::Annotations::LineWidthThin;
				//id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
				//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				//secondArrowLineWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
			}
			else if (int_secondArrowLineWidth == 6) {
				secondArrowLineWidth = NXOpen::Annotations::LineWidthOne;
			}
			else if (int_secondArrowLineWidth == 7) {
				secondArrowLineWidth = NXOpen::Annotations::LineWidthTwo;
			}
			else if (int_secondArrowLineWidth == 8) {
				secondArrowLineWidth = NXOpen::Annotations::LineWidthThree;
			}
			else if (int_secondArrowLineWidth == 9) {
				secondArrowLineWidth = NXOpen::Annotations::LineWidthFour;
			}
			else if (int_secondArrowLineWidth == 10) {
				secondArrowLineWidth = NXOpen::Annotations::LineWidthFive;
			}
			else if (int_secondArrowLineWidth == 11) {
				secondArrowLineWidth = NXOpen::Annotations::LineWidthSix;
			}
			else if (int_secondArrowLineWidth == 12) {
				secondArrowLineWidth = NXOpen::Annotations::LineWidthSeven;
			}
			else if (int_secondArrowLineWidth == 13) {
				secondArrowLineWidth = NXOpen::Annotations::LineWidthEight;
			}
			else if (int_secondArrowLineWidth == 14) {
				secondArrowLineWidth = NXOpen::Annotations::LineWidthNine;
			}
			secondArrowLineCfw.Color = secondArrowLineColorIndex;
			secondArrowLineCfw.Font = secondArrowLineFont;
			secondArrowLineCfw.Width = secondArrowLineWidth;
			lineAndArrowPreferences->SetSecondArrowLineCfw(secondArrowLineCfw);

			symP->SetLetteringPreferences(letteringPreferences);
			symP->SetLineAndArrowPreferences(lineAndArrowPreferences);
			symP->SetSymbolPreferences(symbolPreferences);
		}
	}
	catch (...) {
		nxLog("%s - ERROR - STOPP \n", routineName.c_str());
	}
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- STOPP - %s --- \n", routineName.c_str());
}

/*
File - Preferences - Drafting - Dimension - Text -> Repair existing texts.
*/
void repair_existing_text_styles(en_nx_dpv* _nx_dpv, Session * _theSession, Part* _workPart) {
	routineName.assign("repair_existing_text_styles");
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- START - %s --- \n", routineName.c_str());

	try {
		Annotations::LabelCollection *labelCollection = _workPart->Labels();
		Annotations::NoteCollection *noteCollection = _workPart->Notes();

		for (NXOpen::Annotations::LabelCollection::iterator it_label = labelCollection->begin(); it_label != labelCollection->end(); it_label++) {
			Annotations::Label *labelP = (*it_label);

			Annotations::LineAndArrowPreferences *lineAndArrowPreferences = labelP->GetLineAndArrowPreferences();
			Annotations::LetteringPreferences *letteringPreferences = labelP->GetLetteringPreferences();

			Annotations::Lettering labelLetteringGeneralText = letteringPreferences->GetGeneralText();

			if (_nx_dpv->usedUnitValue.compare("1") == 0) {
				id_name.assign("Drafting_draftTextCharSize_MU");
			}
			else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
				id_name.assign("Drafting_draftTextCharSize_EU");
			}
			it = _nx_dpv->soll_dpv_map.find(id_name);
			double generalTextSize = 0.0;
			generalTextSize = convert_to_double(it->second);
			id_name.assign("Drafting_draftTextColor");
			it = _nx_dpv->soll_dpv_map.find(id_name);
			int generalTextColorIndex;
			generalTextColorIndex = convert_to_int(it->second);
			id_name.assign("Drafting_draftTextFont");
			it = _nx_dpv->soll_dpv_map.find(id_name);
			NXString generalTextFontName;
			generalTextFontName = (NXString)it->second.c_str();
			int generalTextFontIndex;
			generalTextFontIndex = _workPart->Fonts()->AddFont(generalTextFontName);
			id_name.assign("Drafting_draftTextWidth");
			it = _nx_dpv->soll_dpv_map.find(id_name);
			int int_generalTextLineWidth;
			int_generalTextLineWidth = convert_to_int(it->second);
			NXOpen::Annotations::LineWidth generalTextLineWidth;
			string id_name_tmp;
			std::map<const std::string, std::string>::iterator it_tmp;
			if (int_generalTextLineWidth == 1) {
				generalTextLineWidth = NXOpen::Annotations::LineWidthNormal;
				//id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
				//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				//generalTextLineWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
			}
			else if (int_generalTextLineWidth == 2) {
				generalTextLineWidth = NXOpen::Annotations::LineWidthThick;
				//id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
				//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				//generalTextLineWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
			}
			else if (int_generalTextLineWidth == 3) {
				generalTextLineWidth = NXOpen::Annotations::LineWidthThin;
				//id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
				//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				//generalTextLineWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
			}
			else if (int_generalTextLineWidth == 6) {
				generalTextLineWidth = NXOpen::Annotations::LineWidthOne;
			}
			else if (int_generalTextLineWidth == 7) {
				generalTextLineWidth = NXOpen::Annotations::LineWidthTwo;
			}
			else if (int_generalTextLineWidth == 8) {
				generalTextLineWidth = NXOpen::Annotations::LineWidthThree;
			}
			else if (int_generalTextLineWidth == 9) {
				generalTextLineWidth = NXOpen::Annotations::LineWidthFour;
			}
			else if (int_generalTextLineWidth == 10) {
				generalTextLineWidth = NXOpen::Annotations::LineWidthFive;
			}
			else if (int_generalTextLineWidth == 11) {
				generalTextLineWidth = NXOpen::Annotations::LineWidthSix;
			}
			else if (int_generalTextLineWidth == 12) {
				generalTextLineWidth = NXOpen::Annotations::LineWidthSeven;
			}
			else if (int_generalTextLineWidth == 13) {
				generalTextLineWidth = NXOpen::Annotations::LineWidthEight;
			}
			else if (int_generalTextLineWidth == 14) {
				generalTextLineWidth = NXOpen::Annotations::LineWidthNine;
			}
			labelLetteringGeneralText.Size = generalTextSize;
			labelLetteringGeneralText.Cfw.Color = generalTextColorIndex;
			labelLetteringGeneralText.Cfw.Font = generalTextFontIndex;
			labelLetteringGeneralText.Cfw.Width = generalTextLineWidth;
			letteringPreferences->SetGeneralText(labelLetteringGeneralText);

			if (_nx_dpv->usedUnitValue.compare("1") == 0) {
				id_name.assign("Drafting_arrowSize_MU");
			}
			else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
				id_name.assign("Drafting_arrowSize_EU");
			}
			it = _nx_dpv->soll_dpv_map.find(id_name);
			double arrowheadLength;
			arrowheadLength = convert_to_double(it->second);
			lineAndArrowPreferences->SetArrowheadLength(arrowheadLength);

			//id_name.assign("Drafting_includedAngle");
			//it = _nx_dpv->soll_dpv_map.find(id_name);
			//double arrowheadIncludedAngle;
			//arrowheadIncludedAngle = convert_to_double(it->second);
			//lineAndArrowPreferences->SetArrowheadIncludedAngle(arrowheadIncludedAngle); // Drafting_includedAngle

			if (_nx_dpv->usedUnitValue.compare("1") == 0) {
				id_name.assign("Drafting_dotDiameter_MU");
			}
			else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
				id_name.assign("Drafting_dotDiameter_EU");
			}
			it = _nx_dpv->soll_dpv_map.find(id_name);
			double dotArrowheadDiameter;
			dotArrowheadDiameter = convert_to_double(it->second);
			lineAndArrowPreferences->SetDotArrowheadDiameter(dotArrowheadDiameter);

			if (_nx_dpv->usedUnitValue.compare("1") == 0) {
				id_name.assign("Drafting_stubbSize_MU");
			}
			else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
				id_name.assign("Drafting_stubbSize_EU");
			}
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - id_name = %s \n", routineName.c_str(), id_name.c_str());
			it = _nx_dpv->soll_dpv_map.find(id_name);
			double stubLength;
			stubLength = convert_to_double(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - stubLength = %f \n", routineName.c_str(), stubLength);
			lineAndArrowPreferences->SetStubLength(stubLength);

			if (_nx_dpv->usedUnitValue.compare("1") == 0) {
				id_name.assign("Drafting_textLine_MU");
			}
			else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
				id_name.assign("Drafting_textLine_EU");
			}
			it = _nx_dpv->soll_dpv_map.find(id_name);
			double textToLineDistance;
			textToLineDistance = convert_to_double(it->second);
			lineAndArrowPreferences->SetTextToLineDistance(textToLineDistance);

			if (_nx_dpv->usedUnitValue.compare("1") == 0) {
				id_name.assign("Drafting_pointLine1_MU");
			}
			else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
				id_name.assign("Drafting_pointLine1_EU");
			}
			it = _nx_dpv->soll_dpv_map.find(id_name);
			double firstPosToExtensionLineDistance;
			firstPosToExtensionLineDistance = convert_to_double(it->second);
			lineAndArrowPreferences->SetFirstPosToExtLineDist(firstPosToExtensionLineDistance);

			if (_nx_dpv->usedUnitValue.compare("1") == 0) {
				id_name.assign("Drafting_pointLine2_MU");
			}
			else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
				id_name.assign("Drafting_pointLine2_EU");
			}
			it = _nx_dpv->soll_dpv_map.find(id_name);
			double secondPosToExtensionLineDistance;
			secondPosToExtensionLineDistance = convert_to_double(it->second);
			lineAndArrowPreferences->SetSecondPosToExtLineDist(secondPosToExtensionLineDistance);

			if (_nx_dpv->usedUnitValue.compare("1") == 0) {
				id_name.assign("Drafting_datumExtLine_MU");
			}
			else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
				id_name.assign("Drafting_datumExtLine_EU");
			}
			it = _nx_dpv->soll_dpv_map.find(id_name);
			double datumLengthPastArrow;
			datumLengthPastArrow = convert_to_double(it->second);
			lineAndArrowPreferences->SetDatumLengthPastArrow(datumLengthPastArrow);

			Annotations::LineCfw firstExtensionLineCfw = lineAndArrowPreferences->GetFirstExtensionLineCfw();
			Annotations::LineCfw firstArrowheadCfw = lineAndArrowPreferences->GetFirstArrowheadCfw();
			Annotations::LineCfw firstArrowLineCfw = lineAndArrowPreferences->GetFirstArrowLineCfw();
			Annotations::LineCfw secondExtensionLineCfw = lineAndArrowPreferences->GetSecondExtensionLineCfw();
			Annotations::LineCfw secondArrowheadCfw = lineAndArrowPreferences->GetSecondArrowheadCfw();
			Annotations::LineCfw secondArrowLineCfw = lineAndArrowPreferences->GetSecondArrowLineCfw();

			if (_nx_dpv->usedUnitValue.compare("1") == 0) {
				id_name.assign("Drafting_extensionLine1Color_MU");
			}
			else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
				id_name.assign("Drafting_extensionLine1Color_EU");
			}
			it = _nx_dpv->soll_dpv_map.find(id_name);
			int firstExtensionLineColorIndex;
			firstExtensionLineColorIndex = convert_to_int(it->second);
			id_name.assign("Drafting_extensionLine1Font");
			it = _nx_dpv->soll_dpv_map.find(id_name);
			int int_firstExtensionLineFont;
			int_firstExtensionLineFont = convert_to_int(it->second);
			NXOpen::DisplayableObject::ObjectFont firstExtensionLineFont;
			if (int_firstExtensionLineFont == 1) {
				firstExtensionLineFont = NXOpen::DisplayableObject::ObjectFontSolid;
			}
			else if (int_firstExtensionLineFont == 2) {
				firstExtensionLineFont = NXOpen::DisplayableObject::ObjectFontDashed;
			}
			else if (int_firstExtensionLineFont == 3) {
				firstExtensionLineFont = NXOpen::DisplayableObject::ObjectFontPhantom;
			}
			else if (int_firstExtensionLineFont == 4) {
				firstExtensionLineFont = NXOpen::DisplayableObject::ObjectFontCenterline;
			}
			else if (int_firstExtensionLineFont == 5) {
				firstExtensionLineFont = NXOpen::DisplayableObject::ObjectFontDotted;
			}
			else if (int_firstExtensionLineFont == 6) {
				firstExtensionLineFont = NXOpen::DisplayableObject::ObjectFontLongDashed;
			}
			else if (int_firstExtensionLineFont == 7) {
				firstExtensionLineFont = NXOpen::DisplayableObject::ObjectFontDottedDashed;
			}
			id_name.assign("Drafting_extensionLine1Width");
			it = _nx_dpv->soll_dpv_map.find(id_name);
			int int_firstExtensionLineWidth;
			int_firstExtensionLineWidth = convert_to_int(it->second);
			NXOpen::Annotations::LineWidth firstExtensionLineWidth;
			if (int_firstExtensionLineWidth == 1) {
				firstExtensionLineWidth = NXOpen::Annotations::LineWidthNormal;
				//id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
				//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				//firstExtensionLineWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
			}
			else if (int_firstExtensionLineWidth == 2) {
				firstExtensionLineWidth = NXOpen::Annotations::LineWidthThick;
				//id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
				//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				//firstExtensionLineWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
			}
			else if (int_firstExtensionLineWidth == 3) {
				firstExtensionLineWidth = NXOpen::Annotations::LineWidthThin;
				//id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
				//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				//firstExtensionLineWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
			}
			else if (int_firstExtensionLineWidth == 6) {
				firstExtensionLineWidth = NXOpen::Annotations::LineWidthOne;
			}
			else if (int_firstExtensionLineWidth == 7) {
				firstExtensionLineWidth = NXOpen::Annotations::LineWidthTwo;
			}
			else if (int_firstExtensionLineWidth == 8) {
				firstExtensionLineWidth = NXOpen::Annotations::LineWidthThree;
			}
			else if (int_firstExtensionLineWidth == 9) {
				firstExtensionLineWidth = NXOpen::Annotations::LineWidthFour;
			}
			else if (int_firstExtensionLineWidth == 10) {
				firstExtensionLineWidth = NXOpen::Annotations::LineWidthFive;
			}
			else if (int_firstExtensionLineWidth == 11) {
				firstExtensionLineWidth = NXOpen::Annotations::LineWidthSix;
			}
			else if (int_firstExtensionLineWidth == 12) {
				firstExtensionLineWidth = NXOpen::Annotations::LineWidthSeven;
			}
			else if (int_firstExtensionLineWidth == 13) {
				firstExtensionLineWidth = NXOpen::Annotations::LineWidthEight;
			}
			else if (int_firstExtensionLineWidth == 14) {
				firstExtensionLineWidth = NXOpen::Annotations::LineWidthNine;
			}
			firstExtensionLineCfw.Color = firstExtensionLineColorIndex;
			firstExtensionLineCfw.Font = firstExtensionLineFont;
			firstExtensionLineCfw.Width = firstExtensionLineWidth;
			lineAndArrowPreferences->SetFirstExtensionLineCfw(firstExtensionLineCfw);

			if (_nx_dpv->usedUnitValue.compare("1") == 0) {
				id_name.assign("Drafting_arrowHead1Color_MU");
			}
			else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
				id_name.assign("Drafting_arrowHead1Color_EU");
			}
			it = _nx_dpv->soll_dpv_map.find(id_name);
			int firstArrowheadColorIndex;
			firstArrowheadColorIndex = convert_to_int(it->second);
			id_name.assign("Drafting_arrowHead1Font");
			it = _nx_dpv->soll_dpv_map.find(id_name);
			int_firstExtensionLineFont = convert_to_int(it->second);
			if (int_firstExtensionLineFont == 1) {
				firstExtensionLineFont = NXOpen::DisplayableObject::ObjectFontSolid;
			}
			else if (int_firstExtensionLineFont == 2) {
				firstExtensionLineFont = NXOpen::DisplayableObject::ObjectFontDashed;
			}
			else if (int_firstExtensionLineFont == 3) {
				firstExtensionLineFont = NXOpen::DisplayableObject::ObjectFontPhantom;
			}
			else if (int_firstExtensionLineFont == 4) {
				firstExtensionLineFont = NXOpen::DisplayableObject::ObjectFontCenterline;
			}
			else if (int_firstExtensionLineFont == 5) {
				firstExtensionLineFont = NXOpen::DisplayableObject::ObjectFontDotted;
			}
			else if (int_firstExtensionLineFont == 6) {
				firstExtensionLineFont = NXOpen::DisplayableObject::ObjectFontLongDashed;
			}
			else if (int_firstExtensionLineFont == 7) {
				firstExtensionLineFont = NXOpen::DisplayableObject::ObjectFontDottedDashed;
			}
			id_name.assign("Drafting_arrowHead1Width");
			it = _nx_dpv->soll_dpv_map.find(id_name);
			int int_firstArrowheadWidth;
			int_firstArrowheadWidth = convert_to_int(it->second);
			NXOpen::Annotations::LineWidth firstArrowheadWidth;
			if (int_firstArrowheadWidth == 1) {
				firstArrowheadWidth = NXOpen::Annotations::LineWidthNormal;
				//id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
				//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				//firstArrowheadWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
			}
			else if (int_firstArrowheadWidth == 2) {
				firstArrowheadWidth = NXOpen::Annotations::LineWidthThick;
				//id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
				//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				//firstArrowheadWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
			}
			else if (int_firstArrowheadWidth == 3) {
				firstArrowheadWidth = NXOpen::Annotations::LineWidthThin;
				//id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
				//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				//firstArrowheadWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
			}
			else if (int_firstArrowheadWidth == 6) {
				firstArrowheadWidth = NXOpen::Annotations::LineWidthOne;
			}
			else if (int_firstArrowheadWidth == 7) {
				firstArrowheadWidth = NXOpen::Annotations::LineWidthTwo;
			}
			else if (int_firstArrowheadWidth == 8) {
				firstArrowheadWidth = NXOpen::Annotations::LineWidthThree;
			}
			else if (int_firstArrowheadWidth == 9) {
				firstArrowheadWidth = NXOpen::Annotations::LineWidthFour;
			}
			else if (int_firstArrowheadWidth == 10) {
				firstArrowheadWidth = NXOpen::Annotations::LineWidthFive;
			}
			else if (int_firstArrowheadWidth == 11) {
				firstArrowheadWidth = NXOpen::Annotations::LineWidthSix;
			}
			else if (int_firstArrowheadWidth == 12) {
				firstArrowheadWidth = NXOpen::Annotations::LineWidthSeven;
			}
			else if (int_firstArrowheadWidth == 13) {
				firstArrowheadWidth = NXOpen::Annotations::LineWidthEight;
			}
			else if (int_firstArrowheadWidth == 14) {
				firstArrowheadWidth = NXOpen::Annotations::LineWidthNine;
			}
			firstArrowheadCfw.Color = firstExtensionLineColorIndex;
			firstArrowheadCfw.Font = firstExtensionLineFont;
			firstArrowheadCfw.Width = firstArrowheadWidth;
			lineAndArrowPreferences->SetFirstArrowheadCfw(firstArrowheadCfw);

			if (_nx_dpv->usedUnitValue.compare("1") == 0) {
				id_name.assign("Drafting_arrowLine1Color_MU");
			}
			else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
				id_name.assign("Drafting_arrowLine1Color_EU");
			}
			it = _nx_dpv->soll_dpv_map.find(id_name);
			int firstArrowLineColorIndex;
			firstArrowLineColorIndex = convert_to_int(it->second);
			id_name.assign("Drafting_arrowLine1Font");
			it = _nx_dpv->soll_dpv_map.find(id_name);
			int int_firstArrowLineFont;
			int_firstArrowLineFont = convert_to_int(it->second);
			NXOpen::DisplayableObject::ObjectFont firstArrowLineFont;
			if (int_firstArrowLineFont == 1) {
				firstArrowLineFont = NXOpen::DisplayableObject::ObjectFontSolid;
			}
			else if (int_firstArrowLineFont == 2) {
				firstArrowLineFont = NXOpen::DisplayableObject::ObjectFontDashed;
			}
			else if (int_firstArrowLineFont == 3) {
				firstArrowLineFont = NXOpen::DisplayableObject::ObjectFontPhantom;
			}
			else if (int_firstArrowLineFont == 4) {
				firstArrowLineFont = NXOpen::DisplayableObject::ObjectFontCenterline;
			}
			else if (int_firstArrowLineFont == 5) {
				firstArrowLineFont = NXOpen::DisplayableObject::ObjectFontDotted;
			}
			else if (int_firstArrowLineFont == 6) {
				firstArrowLineFont = NXOpen::DisplayableObject::ObjectFontLongDashed;
			}
			else if (int_firstArrowLineFont == 7) {
				firstArrowLineFont = NXOpen::DisplayableObject::ObjectFontDottedDashed;
			}
			id_name.assign("Drafting_arrowLine1Width");
			it = _nx_dpv->soll_dpv_map.find(id_name);
			int int_firstArrowLineWidth;
			int_firstArrowLineWidth = convert_to_int(it->second);
			NXOpen::Annotations::LineWidth firstArrowLineWidth;
			if (int_firstArrowLineWidth == 1) {
				firstArrowLineWidth = NXOpen::Annotations::LineWidthNormal;
				//id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
				//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				//firstArrowLineWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
			}
			else if (int_firstArrowLineWidth == 2) {
				firstArrowLineWidth = NXOpen::Annotations::LineWidthThick;
				//id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
				//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				//firstArrowLineWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
			}
			else if (int_firstArrowLineWidth == 3) {
				firstArrowLineWidth = NXOpen::Annotations::LineWidthThin;
				//id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
				//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				//firstArrowLineWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
			}
			else if (int_firstArrowLineWidth == 6) {
				firstArrowLineWidth = NXOpen::Annotations::LineWidthOne;
			}
			else if (int_firstArrowLineWidth == 7) {
				firstArrowLineWidth = NXOpen::Annotations::LineWidthTwo;
			}
			else if (int_firstArrowLineWidth == 8) {
				firstArrowLineWidth = NXOpen::Annotations::LineWidthThree;
			}
			else if (int_firstArrowLineWidth == 9) {
				firstArrowLineWidth = NXOpen::Annotations::LineWidthFour;
			}
			else if (int_firstArrowLineWidth == 10) {
				firstArrowLineWidth = NXOpen::Annotations::LineWidthFive;
			}
			else if (int_firstArrowLineWidth == 11) {
				firstArrowLineWidth = NXOpen::Annotations::LineWidthSix;
			}
			else if (int_firstArrowLineWidth == 12) {
				firstArrowLineWidth = NXOpen::Annotations::LineWidthSeven;
			}
			else if (int_firstArrowLineWidth == 13) {
				firstArrowLineWidth = NXOpen::Annotations::LineWidthEight;
			}
			else if (int_firstArrowLineWidth == 14) {
				firstArrowLineWidth = NXOpen::Annotations::LineWidthNine;
			}
			firstArrowLineCfw.Color = firstArrowLineColorIndex;
			firstArrowLineCfw.Font = firstArrowLineFont;
			firstArrowLineCfw.Width = firstArrowLineWidth;
			lineAndArrowPreferences->SetFirstArrowLineCfw(firstArrowLineCfw);

			if (_nx_dpv->usedUnitValue.compare("1") == 0) {
				id_name.assign("Drafting_extensionLine2Color_MU");
			}
			else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
				id_name.assign("Drafting_extensionLine2Color_EU");
			}
			it = _nx_dpv->soll_dpv_map.find(id_name);
			int secondExtensionLineColorIndex;
			secondExtensionLineColorIndex = convert_to_int(it->second);
			id_name.assign("Drafting_extensionLine2Font");
			it = _nx_dpv->soll_dpv_map.find(id_name);
			int int_secondExtensionLineFont;
			int_secondExtensionLineFont = convert_to_int(it->second);
			NXOpen::DisplayableObject::ObjectFont secondExtensionLineFont;
			if (int_secondExtensionLineFont == 1) {
				secondExtensionLineFont = NXOpen::DisplayableObject::ObjectFontSolid;
			}
			else if (int_secondExtensionLineFont == 2) {
				secondExtensionLineFont = NXOpen::DisplayableObject::ObjectFontDashed;
			}
			else if (int_secondExtensionLineFont == 3) {
				secondExtensionLineFont = NXOpen::DisplayableObject::ObjectFontPhantom;
			}
			else if (int_secondExtensionLineFont == 4) {
				secondExtensionLineFont = NXOpen::DisplayableObject::ObjectFontCenterline;
			}
			else if (int_secondExtensionLineFont == 5) {
				secondExtensionLineFont = NXOpen::DisplayableObject::ObjectFontDotted;
			}
			else if (int_secondExtensionLineFont == 6) {
				secondExtensionLineFont = NXOpen::DisplayableObject::ObjectFontLongDashed;
			}
			else if (int_secondExtensionLineFont == 7) {
				secondExtensionLineFont = NXOpen::DisplayableObject::ObjectFontDottedDashed;
			}
			id_name.assign("Drafting_extensionLine2Width");
			it = _nx_dpv->soll_dpv_map.find(id_name);
			int int_secondExtensionLineWidth;
			int_secondExtensionLineWidth = convert_to_int(it->second);
			NXOpen::Annotations::LineWidth secondExtensionLineWidth;
			if (int_secondExtensionLineWidth == 1) {
				secondExtensionLineWidth = NXOpen::Annotations::LineWidthNormal;
				//id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
				//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				//secondExtensionLineWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
			}
			else if (int_secondExtensionLineWidth == 2) {
				secondExtensionLineWidth = NXOpen::Annotations::LineWidthThick;
				//id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
				//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				//secondExtensionLineWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
			}
			else if (int_secondExtensionLineWidth == 3) {
				secondExtensionLineWidth = NXOpen::Annotations::LineWidthThin;
				//id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
				//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				//secondExtensionLineWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
			}
			else if (int_secondExtensionLineWidth == 6) {
				secondExtensionLineWidth = NXOpen::Annotations::LineWidthOne;
			}
			else if (int_secondExtensionLineWidth == 7) {
				secondExtensionLineWidth = NXOpen::Annotations::LineWidthTwo;
			}
			else if (int_secondExtensionLineWidth == 8) {
				secondExtensionLineWidth = NXOpen::Annotations::LineWidthThree;
			}
			else if (int_secondExtensionLineWidth == 9) {
				secondExtensionLineWidth = NXOpen::Annotations::LineWidthFour;
			}
			else if (int_secondExtensionLineWidth == 10) {
				secondExtensionLineWidth = NXOpen::Annotations::LineWidthFive;
			}
			else if (int_secondExtensionLineWidth == 11) {
				secondExtensionLineWidth = NXOpen::Annotations::LineWidthSix;
			}
			else if (int_secondExtensionLineWidth == 12) {
				secondExtensionLineWidth = NXOpen::Annotations::LineWidthSeven;
			}
			else if (int_secondExtensionLineWidth == 13) {
				secondExtensionLineWidth = NXOpen::Annotations::LineWidthEight;
			}
			else if (int_secondExtensionLineWidth == 14) {
				secondExtensionLineWidth = NXOpen::Annotations::LineWidthNine;
			}
			secondExtensionLineCfw.Color = secondExtensionLineColorIndex;
			secondExtensionLineCfw.Font = secondExtensionLineFont;
			secondExtensionLineCfw.Width = secondExtensionLineWidth;
			lineAndArrowPreferences->SetSecondExtensionLineCfw(secondExtensionLineCfw);

			if (_nx_dpv->usedUnitValue.compare("1") == 0) {
				id_name.assign("Drafting_arrowHead2Color_MU");
			}
			else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
				id_name.assign("Drafting_arrowHead2Color_EU");
			}
			it = _nx_dpv->soll_dpv_map.find(id_name);
			int secondArrowheadColorIndex;
			secondArrowheadColorIndex = convert_to_int(it->second);
			id_name.assign("Drafting_arrowHead2Font");
			it = _nx_dpv->soll_dpv_map.find(id_name);
			int int_secondArrowHeadFont;
			int_secondArrowHeadFont = convert_to_int(it->second);
			NXOpen::DisplayableObject::ObjectFont secondArrowHeadFont;
			if (int_secondArrowHeadFont == 1) {
				secondArrowHeadFont = NXOpen::DisplayableObject::ObjectFontSolid;
			}
			else if (int_secondArrowHeadFont == 2) {
				secondArrowHeadFont = NXOpen::DisplayableObject::ObjectFontDashed;
			}
			else if (int_secondArrowHeadFont == 3) {
				secondArrowHeadFont = NXOpen::DisplayableObject::ObjectFontPhantom;
			}
			else if (int_secondArrowHeadFont == 4) {
				secondArrowHeadFont = NXOpen::DisplayableObject::ObjectFontCenterline;
			}
			else if (int_secondArrowHeadFont == 5) {
				secondArrowHeadFont = NXOpen::DisplayableObject::ObjectFontDotted;
			}
			else if (int_secondArrowHeadFont == 6) {
				secondArrowHeadFont = NXOpen::DisplayableObject::ObjectFontLongDashed;
			}
			else if (int_secondArrowHeadFont == 7) {
				secondArrowHeadFont = NXOpen::DisplayableObject::ObjectFontDottedDashed;
			}
			id_name.assign("Drafting_arrowHead2Width");
			it = _nx_dpv->soll_dpv_map.find(id_name);
			int int_secondArrowheadWidth;
			int_secondArrowheadWidth = convert_to_int(it->second);
			NXOpen::Annotations::LineWidth secondArrowheadWidth;
			if (int_secondArrowheadWidth == 1) {
				secondArrowheadWidth = NXOpen::Annotations::LineWidthNormal;
				//id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
				//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				//secondArrowheadWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
			}
			else if (int_secondArrowheadWidth == 2) {
				secondArrowheadWidth = NXOpen::Annotations::LineWidthThick;
				//id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
				//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				//secondArrowheadWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
			}
			else if (int_secondArrowheadWidth == 3) {
				secondArrowheadWidth = NXOpen::Annotations::LineWidthThin;
				//id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
				//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				//secondArrowheadWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
			}
			else if (int_secondArrowheadWidth == 6) {
				secondArrowheadWidth = NXOpen::Annotations::LineWidthOne;
			}
			else if (int_secondArrowheadWidth == 7) {
				secondArrowheadWidth = NXOpen::Annotations::LineWidthTwo;
			}
			else if (int_secondArrowheadWidth == 8) {
				secondArrowheadWidth = NXOpen::Annotations::LineWidthThree;
			}
			else if (int_secondArrowheadWidth == 9) {
				secondArrowheadWidth = NXOpen::Annotations::LineWidthFour;
			}
			else if (int_secondArrowheadWidth == 10) {
				secondArrowheadWidth = NXOpen::Annotations::LineWidthFive;
			}
			else if (int_secondArrowheadWidth == 11) {
				secondArrowheadWidth = NXOpen::Annotations::LineWidthSix;
			}
			else if (int_secondArrowheadWidth == 12) {
				secondArrowheadWidth = NXOpen::Annotations::LineWidthSeven;
			}
			else if (int_secondArrowheadWidth == 13) {
				secondArrowheadWidth = NXOpen::Annotations::LineWidthEight;
			}
			else if (int_secondArrowheadWidth == 14) {
				secondArrowheadWidth = NXOpen::Annotations::LineWidthNine;
			}
			secondArrowheadCfw.Color = secondArrowheadColorIndex;
			secondArrowheadCfw.Font = secondArrowHeadFont;
			secondArrowheadCfw.Width = secondArrowheadWidth;
			lineAndArrowPreferences->SetSecondArrowheadCfw(secondArrowheadCfw);

			if (_nx_dpv->usedUnitValue.compare("1") == 0) {
				id_name.assign("Drafting_arrowLine2Color_MU");
			}
			else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
				id_name.assign("Drafting_arrowLine2Color_EU");
			}
			it = _nx_dpv->soll_dpv_map.find(id_name);
			int secondArrowLineColorIndex;
			secondArrowLineColorIndex = convert_to_int(it->second);
			id_name.assign("Drafting_arrowLine2Font");
			it = _nx_dpv->soll_dpv_map.find(id_name);
			int int_secondArrowLineFont;
			int_secondArrowLineFont = convert_to_int(it->second);
			NXOpen::DisplayableObject::ObjectFont secondArrowLineFont;
			if (int_secondArrowLineFont == 1) {
				secondArrowLineFont = NXOpen::DisplayableObject::ObjectFontSolid;
			}
			else if (int_secondArrowLineFont == 2) {
				secondArrowLineFont = NXOpen::DisplayableObject::ObjectFontDashed;
			}
			else if (int_secondArrowLineFont == 3) {
				secondArrowLineFont = NXOpen::DisplayableObject::ObjectFontPhantom;
			}
			else if (int_secondArrowLineFont == 4) {
				secondArrowLineFont = NXOpen::DisplayableObject::ObjectFontCenterline;
			}
			else if (int_secondArrowLineFont == 5) {
				secondArrowLineFont = NXOpen::DisplayableObject::ObjectFontDotted;
			}
			else if (int_secondArrowLineFont == 6) {
				secondArrowLineFont = NXOpen::DisplayableObject::ObjectFontLongDashed;
			}
			else if (int_secondArrowLineFont == 7) {
				secondArrowLineFont = NXOpen::DisplayableObject::ObjectFontDottedDashed;
			}
			id_name.assign("Drafting_arrowLine2Width");
			it = _nx_dpv->soll_dpv_map.find(id_name);
			int int_secondArrowLineWidth;
			int_secondArrowLineWidth = convert_to_int(it->second);
			NXOpen::Annotations::LineWidth secondArrowLineWidth;
			if (int_secondArrowLineWidth == 1) {
				secondArrowLineWidth = NXOpen::Annotations::LineWidthNormal;
				//id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
				//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				//secondArrowLineWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
			}
			else if (int_secondArrowLineWidth == 2) {
				secondArrowLineWidth = NXOpen::Annotations::LineWidthThick;
				//id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
				//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				//secondArrowLineWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
			}
			else if (int_secondArrowLineWidth == 3) {
				secondArrowLineWidth = NXOpen::Annotations::LineWidthThin;
				//id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
				//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				//secondArrowLineWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
			}
			else if (int_secondArrowLineWidth == 6) {
				secondArrowLineWidth = NXOpen::Annotations::LineWidthOne;
			}
			else if (int_secondArrowLineWidth == 7) {
				secondArrowLineWidth = NXOpen::Annotations::LineWidthTwo;
			}
			else if (int_secondArrowLineWidth == 8) {
				secondArrowLineWidth = NXOpen::Annotations::LineWidthThree;
			}
			else if (int_secondArrowLineWidth == 9) {
				secondArrowLineWidth = NXOpen::Annotations::LineWidthFour;
			}
			else if (int_secondArrowLineWidth == 10) {
				secondArrowLineWidth = NXOpen::Annotations::LineWidthFive;
			}
			else if (int_secondArrowLineWidth == 11) {
				secondArrowLineWidth = NXOpen::Annotations::LineWidthSix;
			}
			else if (int_secondArrowLineWidth == 12) {
				secondArrowLineWidth = NXOpen::Annotations::LineWidthSeven;
			}
			else if (int_secondArrowLineWidth == 13) {
				secondArrowLineWidth = NXOpen::Annotations::LineWidthEight;
			}
			else if (int_secondArrowLineWidth == 14) {
				secondArrowLineWidth = NXOpen::Annotations::LineWidthNine;
			}
			secondArrowLineCfw.Color = secondArrowLineColorIndex;
			secondArrowLineCfw.Font = secondArrowLineFont;
			secondArrowLineCfw.Width = secondArrowLineWidth;
			lineAndArrowPreferences->SetSecondArrowLineCfw(secondArrowLineCfw);

			labelP->SetLetteringPreferences(letteringPreferences);
			labelP->SetLineAndArrowPreferences(lineAndArrowPreferences);
		}

		for (NXOpen::Annotations::NoteCollection::iterator it_note = noteCollection->begin(); it_note != noteCollection->end(); it_note++) {
			Annotations::NoteBase *noteP = (*it_note);

			Annotations::LineAndArrowPreferences *lineAndArrowPreferences = noteP->GetLineAndArrowPreferences();
			Annotations::LetteringPreferences *letteringPreferences = noteP->GetLetteringPreferences();

			Annotations::Lettering noteLetteringGeneralText = letteringPreferences->GetGeneralText();
			if (_nx_dpv->usedUnitValue.compare("1") == 0) {
				id_name.assign("Axs_sxletterCharSize_MU");
			}
			else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
				id_name.assign("Axs_sxletterCharSize_EU");
			}
			it = _nx_dpv->soll_dpv_map.find(id_name);
			double labelCharacterHeight = 0.0;
			labelCharacterHeight = convert_to_double(it->second);
			id_name.assign("Drafting_draftTextColor");
			it = _nx_dpv->soll_dpv_map.find(id_name);
			int generalTextColorIndex;
			generalTextColorIndex = convert_to_int(it->second);
			id_name.assign("Drafting_draftTextFont");
			it = _nx_dpv->soll_dpv_map.find(id_name);
			NXString generalTextFontName;
			generalTextFontName = (NXString)it->second.c_str();
			int generalTextFontIndex;
			generalTextFontIndex = _workPart->Fonts()->AddFont(generalTextFontName);
			id_name.assign("Drafting_draftTextWidth");
			it = _nx_dpv->soll_dpv_map.find(id_name);
			int int_generalTextLineWidth;
			int_generalTextLineWidth = convert_to_int(it->second);
			NXOpen::Annotations::LineWidth generalTextLineWidth;
			//string id_name_tmp;
			//std::map<const std::string, std::string>::iterator it_tmp;
			if (int_generalTextLineWidth == 1) {
				generalTextLineWidth = NXOpen::Annotations::LineWidthNormal;
				//id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
				//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				//generalTextLineWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
			}
			else if (int_generalTextLineWidth == 2) {
				generalTextLineWidth = NXOpen::Annotations::LineWidthThick;
				//id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
				//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				//generalTextLineWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
			}
			else if (int_generalTextLineWidth == 3) {
				generalTextLineWidth = NXOpen::Annotations::LineWidthThin;
				//id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
				//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				//generalTextLineWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
			}
			else if (int_generalTextLineWidth == 6) {
				generalTextLineWidth = NXOpen::Annotations::LineWidthOne;
			}
			else if (int_generalTextLineWidth == 7) {
				generalTextLineWidth = NXOpen::Annotations::LineWidthTwo;
			}
			else if (int_generalTextLineWidth == 8) {
				generalTextLineWidth = NXOpen::Annotations::LineWidthThree;
			}
			else if (int_generalTextLineWidth == 9) {
				generalTextLineWidth = NXOpen::Annotations::LineWidthFour;
			}
			else if (int_generalTextLineWidth == 10) {
				generalTextLineWidth = NXOpen::Annotations::LineWidthFive;
			}
			else if (int_generalTextLineWidth == 11) {
				generalTextLineWidth = NXOpen::Annotations::LineWidthSix;
			}
			else if (int_generalTextLineWidth == 12) {
				generalTextLineWidth = NXOpen::Annotations::LineWidthSeven;
			}
			else if (int_generalTextLineWidth == 13) {
				generalTextLineWidth = NXOpen::Annotations::LineWidthEight;
			}
			else if (int_generalTextLineWidth == 14) {
				generalTextLineWidth = NXOpen::Annotations::LineWidthNine;
			}

			//noteLetteringGeneralText.Size = generalTextSize * 10 / 7; // aus 3.5 mache 5.0
			noteLetteringGeneralText.Size = labelCharacterHeight;
			noteLetteringGeneralText.Cfw.Color = generalTextColorIndex;
			noteLetteringGeneralText.Cfw.Font = (DisplayableObject::ObjectFont) generalTextFontIndex;
			//noteLetteringGeneralText.Cfw.Width = generalTextLineWidth;
			noteLetteringGeneralText.Cfw.Width = NXOpen::Annotations::LineWidthNormal;
			letteringPreferences->SetGeneralText(noteLetteringGeneralText);

			if (_nx_dpv->usedUnitValue.compare("1") == 0) {
				id_name.assign("Drafting_arrowSize_MU");
			}
			else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
				id_name.assign("Drafting_arrowSize_EU");
			}
			it = _nx_dpv->soll_dpv_map.find(id_name);
			double arrowheadLength;
			arrowheadLength = convert_to_double(it->second);
			lineAndArrowPreferences->SetArrowheadLength(arrowheadLength);

			//id_name.assign("Drafting_includedAngle");
			//it = _nx_dpv->soll_dpv_map.find(id_name);
			//double arrowheadIncludedAngle;
			//arrowheadIncludedAngle = convert_to_double(it->second);
			//lineAndArrowPreferences->SetArrowheadIncludedAngle(arrowheadIncludedAngle);

			if (_nx_dpv->usedUnitValue.compare("1") == 0) {
				id_name.assign("Drafting_dotDiameter_MU");
			}
			else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
				id_name.assign("Drafting_dotDiameter_EU");
			}
			it = _nx_dpv->soll_dpv_map.find(id_name);
			double dotArrowheadDiameter;
			dotArrowheadDiameter = convert_to_double(it->second);
			lineAndArrowPreferences->SetDotArrowheadDiameter(dotArrowheadDiameter);

			if (_nx_dpv->usedUnitValue.compare("1") == 0) {
				id_name.assign("Drafting_stubbSize_MU");
			}
			else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
				id_name.assign("Drafting_stubbSize_EU");
			}
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - id_name = %s \n", routineName.c_str(), id_name.c_str());
			it = _nx_dpv->soll_dpv_map.find(id_name);
			double stubLength;
			stubLength = convert_to_double(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - stubLength = %f \n", routineName.c_str(), stubLength);
			lineAndArrowPreferences->SetStubLength(stubLength);

			if (_nx_dpv->usedUnitValue.compare("1") == 0) {
				id_name.assign("Drafting_textLine_MU");
			}
			else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
				id_name.assign("Drafting_textLine_EU");
			}
			it = _nx_dpv->soll_dpv_map.find(id_name);
			double textToLineDistance;
			textToLineDistance = convert_to_double(it->second);
			lineAndArrowPreferences->SetTextToLineDistance(textToLineDistance);

			if (_nx_dpv->usedUnitValue.compare("1") == 0) {
				id_name.assign("Drafting_pointLine1_MU");
			}
			else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
				id_name.assign("Drafting_pointLine1_EU");
			}
			it = _nx_dpv->soll_dpv_map.find(id_name);
			double firstPosToExtensionLineDistance;
			firstPosToExtensionLineDistance = convert_to_double(it->second);
			lineAndArrowPreferences->SetFirstPosToExtLineDist(firstPosToExtensionLineDistance);

			if (_nx_dpv->usedUnitValue.compare("1") == 0) {
				id_name.assign("Drafting_pointLine2_MU");
			}
			else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
				id_name.assign("Drafting_pointLine2_EU");
			}
			it = _nx_dpv->soll_dpv_map.find(id_name);
			double secondPosToExtensionLineDistance;
			secondPosToExtensionLineDistance = convert_to_double(it->second);
			lineAndArrowPreferences->SetSecondPosToExtLineDist(secondPosToExtensionLineDistance);

			if (_nx_dpv->usedUnitValue.compare("1") == 0) {
				id_name.assign("Drafting_datumExtLine_MU");
			}
			else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
				id_name.assign("Drafting_datumExtLine_EU");
			}
			it = _nx_dpv->soll_dpv_map.find(id_name);
			double datumLengthPastArrow;
			datumLengthPastArrow = convert_to_double(it->second);
			lineAndArrowPreferences->SetDatumLengthPastArrow(datumLengthPastArrow);

			Annotations::LineCfw firstExtensionLineCfw = lineAndArrowPreferences->GetFirstExtensionLineCfw();
			Annotations::LineCfw firstArrowheadCfw = lineAndArrowPreferences->GetFirstArrowheadCfw();
			Annotations::LineCfw firstArrowLineCfw = lineAndArrowPreferences->GetFirstArrowLineCfw();
			Annotations::LineCfw secondExtensionLineCfw = lineAndArrowPreferences->GetSecondExtensionLineCfw();
			Annotations::LineCfw secondArrowheadCfw = lineAndArrowPreferences->GetSecondArrowheadCfw();
			Annotations::LineCfw secondArrowLineCfw = lineAndArrowPreferences->GetSecondArrowLineCfw();

			if (_nx_dpv->usedUnitValue.compare("1") == 0) {
				id_name.assign("Drafting_extensionLine1Color_MU");
			}
			else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
				id_name.assign("Drafting_extensionLine1Color_EU");
			}
			it = _nx_dpv->soll_dpv_map.find(id_name);
			int firstExtensionLineColorIndex;
			firstExtensionLineColorIndex = convert_to_int(it->second);
			id_name.assign("Drafting_extensionLine1Font");
			it = _nx_dpv->soll_dpv_map.find(id_name);
			int int_firstExtensionLineFont;
			int_firstExtensionLineFont = convert_to_int(it->second);
			NXOpen::DisplayableObject::ObjectFont firstExtensionLineFont;
			if (int_firstExtensionLineFont == 1) {
				firstExtensionLineFont = NXOpen::DisplayableObject::ObjectFontSolid;
			}
			else if (int_firstExtensionLineFont == 2) {
				firstExtensionLineFont = NXOpen::DisplayableObject::ObjectFontDashed;
			}
			else if (int_firstExtensionLineFont == 3) {
				firstExtensionLineFont = NXOpen::DisplayableObject::ObjectFontPhantom;
			}
			else if (int_firstExtensionLineFont == 4) {
				firstExtensionLineFont = NXOpen::DisplayableObject::ObjectFontCenterline;
			}
			else if (int_firstExtensionLineFont == 5) {
				firstExtensionLineFont = NXOpen::DisplayableObject::ObjectFontDotted;
			}
			else if (int_firstExtensionLineFont == 6) {
				firstExtensionLineFont = NXOpen::DisplayableObject::ObjectFontLongDashed;
			}
			else if (int_firstExtensionLineFont == 7) {
				firstExtensionLineFont = NXOpen::DisplayableObject::ObjectFontDottedDashed;
			}
			id_name.assign("Drafting_extensionLine1Width");
			it = _nx_dpv->soll_dpv_map.find(id_name);
			int int_firstExtensionLineWidth;
			int_firstExtensionLineWidth = convert_to_int(it->second);
			NXOpen::Annotations::LineWidth firstExtensionLineWidth;
			if (int_firstExtensionLineWidth == 1) {
				firstExtensionLineWidth = NXOpen::Annotations::LineWidthNormal;
				//id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
				//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				//firstExtensionLineWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
			}
			else if (int_firstExtensionLineWidth == 2) {
				firstExtensionLineWidth = NXOpen::Annotations::LineWidthThick;
				//id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
				//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				//firstExtensionLineWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
			}
			else if (int_firstExtensionLineWidth == 3) {
				firstExtensionLineWidth = NXOpen::Annotations::LineWidthThin;
				//id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
				//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				//firstExtensionLineWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
			}
			else if (int_firstExtensionLineWidth == 6) {
				firstExtensionLineWidth = NXOpen::Annotations::LineWidthOne;
			}
			else if (int_firstExtensionLineWidth == 7) {
				firstExtensionLineWidth = NXOpen::Annotations::LineWidthTwo;
			}
			else if (int_firstExtensionLineWidth == 8) {
				firstExtensionLineWidth = NXOpen::Annotations::LineWidthThree;
			}
			else if (int_firstExtensionLineWidth == 9) {
				firstExtensionLineWidth = NXOpen::Annotations::LineWidthFour;
			}
			else if (int_firstExtensionLineWidth == 10) {
				firstExtensionLineWidth = NXOpen::Annotations::LineWidthFive;
			}
			else if (int_firstExtensionLineWidth == 11) {
				firstExtensionLineWidth = NXOpen::Annotations::LineWidthSix;
			}
			else if (int_firstExtensionLineWidth == 12) {
				firstExtensionLineWidth = NXOpen::Annotations::LineWidthSeven;
			}
			else if (int_firstExtensionLineWidth == 13) {
				firstExtensionLineWidth = NXOpen::Annotations::LineWidthEight;
			}
			else if (int_firstExtensionLineWidth == 14) {
				firstExtensionLineWidth = NXOpen::Annotations::LineWidthNine;
			}
			firstExtensionLineCfw.Color = firstExtensionLineColorIndex;
			firstExtensionLineCfw.Font = firstExtensionLineFont;
			firstExtensionLineCfw.Width = firstExtensionLineWidth;
			lineAndArrowPreferences->SetFirstExtensionLineCfw(firstExtensionLineCfw);

			if (_nx_dpv->usedUnitValue.compare("1") == 0) {
				id_name.assign("Drafting_arrowHead1Color_MU");
			}
			else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
				id_name.assign("Drafting_arrowHead1Color_EU");
			}
			it = _nx_dpv->soll_dpv_map.find(id_name);
			int firstArrowheadColorIndex;
			firstArrowheadColorIndex = convert_to_int(it->second);
			id_name.assign("Drafting_arrowHead1Font");
			it = _nx_dpv->soll_dpv_map.find(id_name);
			int_firstExtensionLineFont = convert_to_int(it->second);
			if (int_firstExtensionLineFont == 1) {
				firstExtensionLineFont = NXOpen::DisplayableObject::ObjectFontSolid;
			}
			else if (int_firstExtensionLineFont == 2) {
				firstExtensionLineFont = NXOpen::DisplayableObject::ObjectFontDashed;
			}
			else if (int_firstExtensionLineFont == 3) {
				firstExtensionLineFont = NXOpen::DisplayableObject::ObjectFontPhantom;
			}
			else if (int_firstExtensionLineFont == 4) {
				firstExtensionLineFont = NXOpen::DisplayableObject::ObjectFontCenterline;
			}
			else if (int_firstExtensionLineFont == 5) {
				firstExtensionLineFont = NXOpen::DisplayableObject::ObjectFontDotted;
			}
			else if (int_firstExtensionLineFont == 6) {
				firstExtensionLineFont = NXOpen::DisplayableObject::ObjectFontLongDashed;
			}
			else if (int_firstExtensionLineFont == 7) {
				firstExtensionLineFont = NXOpen::DisplayableObject::ObjectFontDottedDashed;
			}
			id_name.assign("Drafting_arrowHead1Width");
			it = _nx_dpv->soll_dpv_map.find(id_name);
			int int_firstArrowheadWidth;
			int_firstArrowheadWidth = convert_to_int(it->second);
			NXOpen::Annotations::LineWidth firstArrowheadWidth;
			if (int_firstArrowheadWidth == 1) {
				firstArrowheadWidth = NXOpen::Annotations::LineWidthNormal;
				//id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
				//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				//firstArrowheadWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
			}
			else if (int_firstArrowheadWidth == 2) {
				firstArrowheadWidth = NXOpen::Annotations::LineWidthThick;
				//id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
				//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				//firstArrowheadWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
			}
			else if (int_firstArrowheadWidth == 3) {
				firstArrowheadWidth = NXOpen::Annotations::LineWidthThin;
				//id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
				//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				//firstArrowheadWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
			}
			else if (int_firstArrowheadWidth == 6) {
				firstArrowheadWidth = NXOpen::Annotations::LineWidthOne;
			}
			else if (int_firstArrowheadWidth == 7) {
				firstArrowheadWidth = NXOpen::Annotations::LineWidthTwo;
			}
			else if (int_firstArrowheadWidth == 8) {
				firstArrowheadWidth = NXOpen::Annotations::LineWidthThree;
			}
			else if (int_firstArrowheadWidth == 9) {
				firstArrowheadWidth = NXOpen::Annotations::LineWidthFour;
			}
			else if (int_firstArrowheadWidth == 10) {
				firstArrowheadWidth = NXOpen::Annotations::LineWidthFive;
			}
			else if (int_firstArrowheadWidth == 11) {
				firstArrowheadWidth = NXOpen::Annotations::LineWidthSix;
			}
			else if (int_firstArrowheadWidth == 12) {
				firstArrowheadWidth = NXOpen::Annotations::LineWidthSeven;
			}
			else if (int_firstArrowheadWidth == 13) {
				firstArrowheadWidth = NXOpen::Annotations::LineWidthEight;
			}
			else if (int_firstArrowheadWidth == 14) {
				firstArrowheadWidth = NXOpen::Annotations::LineWidthNine;
			}
			firstArrowheadCfw.Color = firstArrowheadColorIndex;
			firstArrowheadCfw.Font = firstExtensionLineFont;
			firstArrowheadCfw.Width = firstArrowheadWidth;
			lineAndArrowPreferences->SetFirstArrowheadCfw(firstArrowheadCfw);

			if (_nx_dpv->usedUnitValue.compare("1") == 0) {
				id_name.assign("Drafting_arrowLine1Color_MU");
			}
			else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
				id_name.assign("Drafting_arrowLine1Color_EU");
			}
			it = _nx_dpv->soll_dpv_map.find(id_name);
			int firstArrowLineColorIndex;
			firstArrowLineColorIndex = convert_to_int(it->second);
			id_name.assign("Drafting_arrowLine1Font");
			it = _nx_dpv->soll_dpv_map.find(id_name);
			int int_firstArrowLineFont;
			int_firstArrowLineFont = convert_to_int(it->second);
			NXOpen::DisplayableObject::ObjectFont firstArrowLineFont;
			if (int_firstArrowLineFont == 1) {
				firstArrowLineFont = NXOpen::DisplayableObject::ObjectFontSolid;
			}
			else if (int_firstArrowLineFont == 2) {
				firstArrowLineFont = NXOpen::DisplayableObject::ObjectFontDashed;
			}
			else if (int_firstArrowLineFont == 3) {
				firstArrowLineFont = NXOpen::DisplayableObject::ObjectFontPhantom;
			}
			else if (int_firstArrowLineFont == 4) {
				firstArrowLineFont = NXOpen::DisplayableObject::ObjectFontCenterline;
			}
			else if (int_firstArrowLineFont == 5) {
				firstArrowLineFont = NXOpen::DisplayableObject::ObjectFontDotted;
			}
			else if (int_firstArrowLineFont == 6) {
				firstArrowLineFont = NXOpen::DisplayableObject::ObjectFontLongDashed;
			}
			else if (int_firstArrowLineFont == 7) {
				firstArrowLineFont = NXOpen::DisplayableObject::ObjectFontDottedDashed;
			}
			id_name.assign("Drafting_arrowLine1Width");
			it = _nx_dpv->soll_dpv_map.find(id_name);
			int int_firstArrowLineWidth;
			int_firstArrowLineWidth = convert_to_int(it->second);
			NXOpen::Annotations::LineWidth firstArrowLineWidth;
			if (int_firstArrowLineWidth == 1) {
				firstArrowLineWidth = NXOpen::Annotations::LineWidthNormal;
				//id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
				//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				//firstArrowLineWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
			}
			else if (int_firstArrowLineWidth == 2) {
				firstArrowLineWidth = NXOpen::Annotations::LineWidthThick;
				//id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
				//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				//firstArrowLineWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
			}
			else if (int_firstArrowLineWidth == 3) {
				firstArrowLineWidth = NXOpen::Annotations::LineWidthThin;
				//id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
				//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				//firstArrowLineWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
			}
			else if (int_firstArrowLineWidth == 6) {
				firstArrowLineWidth = NXOpen::Annotations::LineWidthOne;
			}
			else if (int_firstArrowLineWidth == 7) {
				firstArrowLineWidth = NXOpen::Annotations::LineWidthTwo;
			}
			else if (int_firstArrowLineWidth == 8) {
				firstArrowLineWidth = NXOpen::Annotations::LineWidthThree;
			}
			else if (int_firstArrowLineWidth == 9) {
				firstArrowLineWidth = NXOpen::Annotations::LineWidthFour;
			}
			else if (int_firstArrowLineWidth == 10) {
				firstArrowLineWidth = NXOpen::Annotations::LineWidthFive;
			}
			else if (int_firstArrowLineWidth == 11) {
				firstArrowLineWidth = NXOpen::Annotations::LineWidthSix;
			}
			else if (int_firstArrowLineWidth == 12) {
				firstArrowLineWidth = NXOpen::Annotations::LineWidthSeven;
			}
			else if (int_firstArrowLineWidth == 13) {
				firstArrowLineWidth = NXOpen::Annotations::LineWidthEight;
			}
			else if (int_firstArrowLineWidth == 14) {
				firstArrowLineWidth = NXOpen::Annotations::LineWidthNine;
			}
			firstArrowLineCfw.Color = firstArrowLineColorIndex;
			firstArrowLineCfw.Font = firstArrowLineFont;
			firstArrowLineCfw.Width = firstArrowLineWidth;
			lineAndArrowPreferences->SetFirstArrowLineCfw(firstArrowLineCfw);

			if (_nx_dpv->usedUnitValue.compare("1") == 0) {
				id_name.assign("Drafting_extensionLine2Color_MU");
			}
			else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
				id_name.assign("Drafting_extensionLine2Color_EU");
			}
			it = _nx_dpv->soll_dpv_map.find(id_name);
			int secondExtensionLineColorIndex;
			secondExtensionLineColorIndex = convert_to_int(it->second);
			id_name.assign("Drafting_extensionLine2Font");
			it = _nx_dpv->soll_dpv_map.find(id_name);
			int int_secondExtensionLineFont;
			int_secondExtensionLineFont = convert_to_int(it->second);
			NXOpen::DisplayableObject::ObjectFont secondExtensionLineFont;
			if (int_secondExtensionLineFont == 1) {
				secondExtensionLineFont = NXOpen::DisplayableObject::ObjectFontSolid;
			}
			else if (int_secondExtensionLineFont == 2) {
				secondExtensionLineFont = NXOpen::DisplayableObject::ObjectFontDashed;
			}
			else if (int_secondExtensionLineFont == 3) {
				secondExtensionLineFont = NXOpen::DisplayableObject::ObjectFontPhantom;
			}
			else if (int_secondExtensionLineFont == 4) {
				secondExtensionLineFont = NXOpen::DisplayableObject::ObjectFontCenterline;
			}
			else if (int_secondExtensionLineFont == 5) {
				secondExtensionLineFont = NXOpen::DisplayableObject::ObjectFontDotted;
			}
			else if (int_secondExtensionLineFont == 6) {
				secondExtensionLineFont = NXOpen::DisplayableObject::ObjectFontLongDashed;
			}
			else if (int_secondExtensionLineFont == 7) {
				secondExtensionLineFont = NXOpen::DisplayableObject::ObjectFontDottedDashed;
			}
			id_name.assign("Drafting_extensionLine2Width");
			it = _nx_dpv->soll_dpv_map.find(id_name);
			int int_secondExtensionLineWidth;
			int_secondExtensionLineWidth = convert_to_int(it->second);
			NXOpen::Annotations::LineWidth secondExtensionLineWidth;
			if (int_secondExtensionLineWidth == 1) {
				secondExtensionLineWidth = NXOpen::Annotations::LineWidthNormal;
				//id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
				//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				//secondExtensionLineWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
			}
			else if (int_secondExtensionLineWidth == 2) {
				secondExtensionLineWidth = NXOpen::Annotations::LineWidthThick;
				//id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
				//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				//secondExtensionLineWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
			}
			else if (int_secondExtensionLineWidth == 3) {
				secondExtensionLineWidth = NXOpen::Annotations::LineWidthThin;
				//id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
				//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				//secondExtensionLineWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
			}
			else if (int_secondExtensionLineWidth == 6) {
				secondExtensionLineWidth = NXOpen::Annotations::LineWidthOne;
			}
			else if (int_secondExtensionLineWidth == 7) {
				secondExtensionLineWidth = NXOpen::Annotations::LineWidthTwo;
			}
			else if (int_secondExtensionLineWidth == 8) {
				secondExtensionLineWidth = NXOpen::Annotations::LineWidthThree;
			}
			else if (int_secondExtensionLineWidth == 9) {
				secondExtensionLineWidth = NXOpen::Annotations::LineWidthFour;
			}
			else if (int_secondExtensionLineWidth == 10) {
				secondExtensionLineWidth = NXOpen::Annotations::LineWidthFive;
			}
			else if (int_secondExtensionLineWidth == 11) {
				secondExtensionLineWidth = NXOpen::Annotations::LineWidthSix;
			}
			else if (int_secondExtensionLineWidth == 12) {
				secondExtensionLineWidth = NXOpen::Annotations::LineWidthSeven;
			}
			else if (int_secondExtensionLineWidth == 13) {
				secondExtensionLineWidth = NXOpen::Annotations::LineWidthEight;
			}
			else if (int_secondExtensionLineWidth == 14) {
				secondExtensionLineWidth = NXOpen::Annotations::LineWidthNine;
			}
			secondExtensionLineCfw.Color = secondExtensionLineColorIndex;
			secondExtensionLineCfw.Font = secondExtensionLineFont;
			secondExtensionLineCfw.Width = secondExtensionLineWidth;
			lineAndArrowPreferences->SetSecondExtensionLineCfw(secondExtensionLineCfw);

			if (_nx_dpv->usedUnitValue.compare("1") == 0) {
				id_name.assign("Drafting_arrowHead2Color_MU");
			}
			else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
				id_name.assign("Drafting_arrowHead2Color_EU");
			}
			it = _nx_dpv->soll_dpv_map.find(id_name);
			int secondArrowheadColorIndex;
			secondArrowheadColorIndex = convert_to_int(it->second);
			id_name.assign("Drafting_arrowHead2Font");
			it = _nx_dpv->soll_dpv_map.find(id_name);
			int int_secondArrowHeadFont;
			int_secondArrowHeadFont = convert_to_int(it->second);
			NXOpen::DisplayableObject::ObjectFont secondArrowHeadFont;
			if (int_secondArrowHeadFont == 1) {
				secondArrowHeadFont = NXOpen::DisplayableObject::ObjectFontSolid;
			}
			else if (int_secondArrowHeadFont == 2) {
				secondArrowHeadFont = NXOpen::DisplayableObject::ObjectFontDashed;
			}
			else if (int_secondArrowHeadFont == 3) {
				secondArrowHeadFont = NXOpen::DisplayableObject::ObjectFontPhantom;
			}
			else if (int_secondArrowHeadFont == 4) {
				secondArrowHeadFont = NXOpen::DisplayableObject::ObjectFontCenterline;
			}
			else if (int_secondArrowHeadFont == 5) {
				secondArrowHeadFont = NXOpen::DisplayableObject::ObjectFontDotted;
			}
			else if (int_secondArrowHeadFont == 6) {
				secondArrowHeadFont = NXOpen::DisplayableObject::ObjectFontLongDashed;
			}
			else if (int_secondArrowHeadFont == 7) {
				secondArrowHeadFont = NXOpen::DisplayableObject::ObjectFontDottedDashed;
			}
			id_name.assign("Drafting_arrowHead2Width");
			it = _nx_dpv->soll_dpv_map.find(id_name);
			int int_secondArrowheadWidth;
			int_secondArrowheadWidth = convert_to_int(it->second);
			NXOpen::Annotations::LineWidth secondArrowheadWidth;
			if (int_secondArrowheadWidth == 1) {
				secondArrowheadWidth = NXOpen::Annotations::LineWidthNormal;
				//id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
				//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				//secondArrowheadWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
			}
			else if (int_secondArrowheadWidth == 2) {
				secondArrowheadWidth = NXOpen::Annotations::LineWidthThick;
				//id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
				//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				//secondArrowheadWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
			}
			else if (int_secondArrowheadWidth == 3) {
				secondArrowheadWidth = NXOpen::Annotations::LineWidthThin;
				//id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
				//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				//secondArrowheadWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
			}
			else if (int_secondArrowheadWidth == 6) {
				secondArrowheadWidth = NXOpen::Annotations::LineWidthOne;
			}
			else if (int_secondArrowheadWidth == 7) {
				secondArrowheadWidth = NXOpen::Annotations::LineWidthTwo;
			}
			else if (int_secondArrowheadWidth == 8) {
				secondArrowheadWidth = NXOpen::Annotations::LineWidthThree;
			}
			else if (int_secondArrowheadWidth == 9) {
				secondArrowheadWidth = NXOpen::Annotations::LineWidthFour;
			}
			else if (int_secondArrowheadWidth == 10) {
				secondArrowheadWidth = NXOpen::Annotations::LineWidthFive;
			}
			else if (int_secondArrowheadWidth == 11) {
				secondArrowheadWidth = NXOpen::Annotations::LineWidthSix;
			}
			else if (int_secondArrowheadWidth == 12) {
				secondArrowheadWidth = NXOpen::Annotations::LineWidthSeven;
			}
			else if (int_secondArrowheadWidth == 13) {
				secondArrowheadWidth = NXOpen::Annotations::LineWidthEight;
			}
			else if (int_secondArrowheadWidth == 14) {
				secondArrowheadWidth = NXOpen::Annotations::LineWidthNine;
			}
			secondArrowheadCfw.Color = secondArrowheadColorIndex;
			secondArrowheadCfw.Font = secondArrowHeadFont;
			secondArrowheadCfw.Width = secondArrowheadWidth;
			lineAndArrowPreferences->SetSecondArrowheadCfw(secondArrowheadCfw);

			if (_nx_dpv->usedUnitValue.compare("1") == 0) {
				id_name.assign("Drafting_arrowLine2Color_MU");
			}
			else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
				id_name.assign("Drafting_arrowLine2Color_EU");
			}
			it = _nx_dpv->soll_dpv_map.find(id_name);
			int secondArrowLineColorIndex;
			secondArrowLineColorIndex = convert_to_int(it->second);
			id_name.assign("Drafting_arrowLine2Font");
			it = _nx_dpv->soll_dpv_map.find(id_name);
			int int_secondArrowLineFont;
			int_secondArrowLineFont = convert_to_int(it->second);
			NXOpen::DisplayableObject::ObjectFont secondArrowLineFont;
			if (int_secondArrowLineFont == 1) {
				secondArrowLineFont = NXOpen::DisplayableObject::ObjectFontSolid;
			}
			else if (int_secondArrowLineFont == 2) {
				secondArrowLineFont = NXOpen::DisplayableObject::ObjectFontDashed;
			}
			else if (int_secondArrowLineFont == 3) {
				secondArrowLineFont = NXOpen::DisplayableObject::ObjectFontPhantom;
			}
			else if (int_secondArrowLineFont == 4) {
				secondArrowLineFont = NXOpen::DisplayableObject::ObjectFontCenterline;
			}
			else if (int_secondArrowLineFont == 5) {
				secondArrowLineFont = NXOpen::DisplayableObject::ObjectFontDotted;
			}
			else if (int_secondArrowLineFont == 6) {
				secondArrowLineFont = NXOpen::DisplayableObject::ObjectFontLongDashed;
			}
			else if (int_secondArrowLineFont == 7) {
				secondArrowLineFont = NXOpen::DisplayableObject::ObjectFontDottedDashed;
			}
			id_name.assign("Drafting_arrowLine2Width");
			it = _nx_dpv->soll_dpv_map.find(id_name);
			int int_secondArrowLineWidth;
			int_secondArrowLineWidth = convert_to_int(it->second);
			NXOpen::Annotations::LineWidth secondArrowLineWidth;
			if (int_secondArrowLineWidth == 1) {
				secondArrowLineWidth = NXOpen::Annotations::LineWidthNormal;
				//id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
				//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				//secondArrowLineWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
			}
			else if (int_secondArrowLineWidth == 2) {
				secondArrowLineWidth = NXOpen::Annotations::LineWidthThick;
				//id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
				//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				//secondArrowLineWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
			}
			else if (int_secondArrowLineWidth == 3) {
				secondArrowLineWidth = NXOpen::Annotations::LineWidthThin;
				//id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
				//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				//secondArrowLineWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
			}
			else if (int_secondArrowLineWidth == 6) {
				secondArrowLineWidth = NXOpen::Annotations::LineWidthOne;
			}
			else if (int_secondArrowLineWidth == 7) {
				secondArrowLineWidth = NXOpen::Annotations::LineWidthTwo;
			}
			else if (int_secondArrowLineWidth == 8) {
				secondArrowLineWidth = NXOpen::Annotations::LineWidthThree;
			}
			else if (int_secondArrowLineWidth == 9) {
				secondArrowLineWidth = NXOpen::Annotations::LineWidthFour;
			}
			else if (int_secondArrowLineWidth == 10) {
				secondArrowLineWidth = NXOpen::Annotations::LineWidthFive;
			}
			else if (int_secondArrowLineWidth == 11) {
				secondArrowLineWidth = NXOpen::Annotations::LineWidthSix;
			}
			else if (int_secondArrowLineWidth == 12) {
				secondArrowLineWidth = NXOpen::Annotations::LineWidthSeven;
			}
			else if (int_secondArrowLineWidth == 13) {
				secondArrowLineWidth = NXOpen::Annotations::LineWidthEight;
			}
			else if (int_secondArrowLineWidth == 14) {
				secondArrowLineWidth = NXOpen::Annotations::LineWidthNine;
			}
			secondArrowLineCfw.Color = secondArrowLineColorIndex;
			secondArrowLineCfw.Font = secondArrowLineFont;
			secondArrowLineCfw.Width = secondArrowLineWidth;
			lineAndArrowPreferences->SetSecondArrowLineCfw(secondArrowLineCfw);

			noteP->SetLetteringPreferences(letteringPreferences);
			noteP->SetLineAndArrowPreferences(lineAndArrowPreferences);
		}
	}
	catch (...) {
		nxLog("%s - ERROR - STOPP \n", routineName.c_str());
	}
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- STOPP - %s --- \n", routineName.c_str());
}

/*
File - Preferences - Drafting - Annotation - Centerline -> Repair existing centerlines.
File - Preferences - Drafting - Annotation - IntersectionSymbol -> Repair existing intersection symbols.
File - Preferences - Drafting - Annotation - TargetPointSymbol -> Repair existing target point symbols.
*/
void repair_existing_line_styles(en_nx_dpv* _nx_dpv, Session * _theSession, Part* _workPart) {
	routineName.assign("repair_existing_symbol_styles");
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- START - %s --- \n", routineName.c_str());

	try {
		NXOpen::Annotations::CenterlineCollection *centerlineCollection = _workPart->Annotations()->Centerlines();

		for (NXOpen::Annotations::CenterlineCollection::iterator it_centerline = centerlineCollection->begin(); it_centerline != centerlineCollection->end(); it_centerline++) {
			Annotations::Centerline* clP;
			clP = (*it_centerline);

			Annotations::SymbolPreferences *symbolPreferences = clP->GetSymbolPreferences();

			Annotations::LineCfw centerlineSymbolCfw;

			if (_nx_dpv->usedUnitValue.compare("1") == 0) {
				id_name.assign("Drafting_centerlineColor_MU");
			}
			else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
				id_name.assign("Drafting_centerlineColor_EU");
			}
			it = _nx_dpv->soll_dpv_map.find(id_name);
			if (it != _nx_dpv->soll_dpv_map.end()) {
				int centerlineSymbolColorIndex;
				centerlineSymbolColorIndex = convert_to_int(it->second);
				centerlineSymbolCfw.Color = centerlineSymbolColorIndex;
			}
			else {
				nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
			}

			id_name.assign("ShipDrafting_Reference_Lines_CenterLineFont");
			it = _nx_dpv->soll_dpv_map.find(id_name);
			if (it != _nx_dpv->soll_dpv_map.end()) {
				int int_font;
				int_font = convert_to_int(it->second);
				NXOpen::Preferences::Font font;
				if (int_font == 0) {
					font = NXOpen::Preferences::FontInvisible;
				}
				else if (int_font == 1) {
					font = NXOpen::Preferences::FontSolid;
				}
				else if (int_font == 2) {
					font = NXOpen::Preferences::FontDashed;
				}
				else if (int_font == 3) {
					font = NXOpen::Preferences::FontPhantom;
				}
				else if (int_font == 4) {
					font = NXOpen::Preferences::FontCenterline;
				}
				else if (int_font == 5) {
					font = NXOpen::Preferences::FontDotted;
				}
				else if (int_font == 6) {
					font = NXOpen::Preferences::FontLongDashed;
				}
				else if (int_font == 7) {
					font = NXOpen::Preferences::FontDottedDashed;
				}
				else if (int_font == 8) {
					font = NXOpen::Preferences::FontOriginal;
				}
				centerlineSymbolCfw.Font = (NXOpen::DisplayableObject::ObjectFont) font;
			}
			else {
				nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
			}
			id_name.assign("Drafting_centerlineWidth");
			it = _nx_dpv->soll_dpv_map.find(id_name);
			if (it != _nx_dpv->soll_dpv_map.end()) {
				int int_centerlineSymbolWidth;
				int_centerlineSymbolWidth = convert_to_int(it->second);
				NXOpen::Annotations::LineWidth centerlineSymbolWidth;
				//string id_name_tmp;
				//std::map<const std::string, std::string>::iterator it_tmp;
				if (int_centerlineSymbolWidth == 1) {
					centerlineSymbolWidth = NXOpen::Annotations::LineWidthNormal;
					//id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
					//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					//centerlineSymbolWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
				}
				else if (int_centerlineSymbolWidth == 2) {
					centerlineSymbolWidth = NXOpen::Annotations::LineWidthThick;
					//id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
					//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					//centerlineSymbolWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
				}
				else if (int_centerlineSymbolWidth == 3) {
					centerlineSymbolWidth = NXOpen::Annotations::LineWidthThin;
					//id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
					//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
					//centerlineSymbolWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
				}
				else if (int_centerlineSymbolWidth == 6) {
					centerlineSymbolWidth = NXOpen::Annotations::LineWidthOne;
				}
				else if (int_centerlineSymbolWidth == 7) {
					centerlineSymbolWidth = NXOpen::Annotations::LineWidthTwo;
				}
				else if (int_centerlineSymbolWidth == 8) {
					centerlineSymbolWidth = NXOpen::Annotations::LineWidthThree;
				}
				else if (int_centerlineSymbolWidth == 9) {
					centerlineSymbolWidth = NXOpen::Annotations::LineWidthFour;
				}
				else if (int_centerlineSymbolWidth == 10) {
					centerlineSymbolWidth = NXOpen::Annotations::LineWidthFive;
				}
				else if (int_centerlineSymbolWidth == 11) {
					centerlineSymbolWidth = NXOpen::Annotations::LineWidthSix;
				}
				else if (int_centerlineSymbolWidth == 12) {
					centerlineSymbolWidth = NXOpen::Annotations::LineWidthSeven;
				}
				else if (int_centerlineSymbolWidth == 13) {
					centerlineSymbolWidth = NXOpen::Annotations::LineWidthEight;
				}
				else if (int_centerlineSymbolWidth == 14) {
					centerlineSymbolWidth = NXOpen::Annotations::LineWidthNine;
				}
				centerlineSymbolCfw.Width = centerlineSymbolWidth;
				symbolPreferences->SetCenterlineSymbolCfw(centerlineSymbolCfw);

				clP->SetSymbolPreferences(symbolPreferences);
			} else {
				nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
			}
		}

		int intersectionSymbolColorIndex;
		int int_intersectionSymbolFont;
		int int_intersectionSymbolWidth;
		NXOpen::Annotations::LineWidth intersectionSymbolWidth;
		if (_nx_dpv->usedUnitValue.compare("1") == 0) {
			id_name.assign("Drafting_intersectionColor_MU");
		}
		else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
			id_name.assign("Drafting_intersectionColor_EU");
		}
		it = _nx_dpv->soll_dpv_map.find(id_name);
		if (it != _nx_dpv->soll_dpv_map.end()) {
			intersectionSymbolColorIndex = convert_to_int(it->second);
		}
		else {
			nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
		}

		id_name.assign("Drafting_intersectionFont");
		it = _nx_dpv->soll_dpv_map.find(id_name);
		if (it != _nx_dpv->soll_dpv_map.end()) {
			int_intersectionSymbolFont = convert_to_int(it->second);
		}
		else {
			nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
		}

		id_name.assign("Drafting_intersectionWidth");
		it = _nx_dpv->soll_dpv_map.find(id_name);
		if (it != _nx_dpv->soll_dpv_map.end()) {
			int_intersectionSymbolWidth = convert_to_int(it->second);
			//string id_name_tmp;
			//std::map<const std::string, std::string>::iterator it_tmp;
			if (int_intersectionSymbolWidth == 1) {
				intersectionSymbolWidth = NXOpen::Annotations::LineWidthNormal;
				//id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
				//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				//intersectionSymbolWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
			}
			else if (int_intersectionSymbolWidth == 2) {
				intersectionSymbolWidth = NXOpen::Annotations::LineWidthThick;
				//id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
				//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				//intersectionSymbolWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
			}
			else if (int_intersectionSymbolWidth == 3) {
				intersectionSymbolWidth = NXOpen::Annotations::LineWidthThin;
				//id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
				//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				//intersectionSymbolWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
			}
			else if (int_intersectionSymbolWidth == 6) {
				intersectionSymbolWidth = NXOpen::Annotations::LineWidthOne;
			}
			else if (int_intersectionSymbolWidth == 7) {
				intersectionSymbolWidth = NXOpen::Annotations::LineWidthTwo;
			}
			else if (int_intersectionSymbolWidth == 8) {
				intersectionSymbolWidth = NXOpen::Annotations::LineWidthThree;
			}
			else if (int_intersectionSymbolWidth == 9) {
				intersectionSymbolWidth = NXOpen::Annotations::LineWidthFour;
			}
			else if (int_intersectionSymbolWidth == 10) {
				intersectionSymbolWidth = NXOpen::Annotations::LineWidthFive;
			}
			else if (int_intersectionSymbolWidth == 11) {
				intersectionSymbolWidth = NXOpen::Annotations::LineWidthSix;
			}
			else if (int_intersectionSymbolWidth == 12) {
				intersectionSymbolWidth = NXOpen::Annotations::LineWidthSeven;
			}
			else if (int_intersectionSymbolWidth == 13) {
				intersectionSymbolWidth = NXOpen::Annotations::LineWidthEight;
			}
			else if (int_intersectionSymbolWidth == 14) {
				intersectionSymbolWidth = NXOpen::Annotations::LineWidthNine;
			}
		}
		else {
			nxLog("%s - \"%s\" not defined in EISENMANN dpv file! \n", routineName.c_str(), id_name.c_str());
		}

		NXOpen::Annotations::IntersectionSymbolCollection *intersectionSymbolCollection = _workPart->Annotations()->IntersectionSymbols();

		for (NXOpen::Annotations::IntersectionSymbolCollection::iterator it_intersectSymbol = intersectionSymbolCollection->begin(); it_intersectSymbol != intersectionSymbolCollection->end(); it_intersectSymbol++) {
			Annotations::IntersectionSymbol *issP = (*it_intersectSymbol);
			Annotations::SymbolPreferences *symbolPreferences = issP->GetSymbolPreferences();
			Annotations::LineCfw intersectionSymbolCfw;
			intersectionSymbolCfw.Color = intersectionSymbolColorIndex;
			intersectionSymbolCfw.Font = (NXOpen::DisplayableObject::ObjectFont)int_intersectionSymbolFont;
			intersectionSymbolCfw.Width = intersectionSymbolWidth;
			symbolPreferences->SetIntersectionSymbolCfw(intersectionSymbolCfw);
			issP->SetSymbolPreferences(symbolPreferences);
		}

		NXOpen::Annotations::OffsetCenterPointCollection *offsetCenterPointCollection = _workPart->Annotations()->OffsetCenterPoints();

		for (NXOpen::Annotations::OffsetCenterPointCollection::iterator it_CenterPoint = offsetCenterPointCollection->begin(); it_CenterPoint != offsetCenterPointCollection->end(); it_CenterPoint++) {
 			Annotations::OffsetCenterPoint *ocpP = (*it_CenterPoint);
			Annotations::SymbolPreferences *symbolPreferences = ocpP->GetSymbolPreferences();
			Annotations::LineCfw centerlineSymbolCfw;
			centerlineSymbolCfw.Color = intersectionSymbolColorIndex;;
			centerlineSymbolCfw.Font = (NXOpen::DisplayableObject::ObjectFont)int_intersectionSymbolFont;
			centerlineSymbolCfw.Width = intersectionSymbolWidth;
			symbolPreferences->SetCenterlineSymbolCfw(centerlineSymbolCfw);
			ocpP->SetSymbolPreferences(symbolPreferences);
		}
	}
	catch (...) {
		nxLog("%s - ERROR - STOPP \n", routineName.c_str());
	}

	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- STOPP - %s --- \n", routineName.c_str());
}

/*
File - Preferences - Drafting - Annotation - Weld Symbol -> Repair existing target point symbols.
*/
void repair_existing_weld_styles(en_nx_dpv* _nx_dpv, Session * _theSession, Part* _workPart) {
	routineName.assign("repair_existing_weld_styles");
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- START - %s --- \n", routineName.c_str());

	try {
		NXOpen::Annotations::WeldCollection *theWeldCollection = _workPart->Annotations()->Welds();

		for (NXOpen::Annotations::WeldCollection::iterator it_weld = theWeldCollection->begin(); it_weld != theWeldCollection->end(); it_weld++) {
			Annotations::Weld *weldP = (*it_weld);

			Annotations::LineAndArrowPreferences *lineAndArrowPreferences = weldP->GetLineAndArrowPreferences();
			Annotations::LetteringPreferences *letteringPreferences = weldP->GetLetteringPreferences();

			//Annotations::LineCfw idSymbolCfw = symbolPreferences->GetIdSymbolCfw();
			//idSymbolCfw.Color = 30;
			//idSymbolCfw.Font  = DisplayableObject::ObjectFontSolid;
			//idSymbolCfw.Width = Annotations::LineWidthThin;
			//symbolPreferences->SetIdSymbolCfw(idSymbolCfw);

			std::vector<NXOpen::DisplayableObject *> objects(1);
			objects[0] = weldP;

			NXOpen::Annotations::EditSettingsBuilder *editSettingsBuilder;
			editSettingsBuilder = _workPart->SettingsManager()->CreateAnnotationEditSettingsBuilder(objects);

			std::vector<NXOpen::Drafting::BaseEditSettingsBuilder *> baseEditSettingsBuilder(1);
			baseEditSettingsBuilder[0] = editSettingsBuilder;
			_workPart->SettingsManager()->ProcessForMultipleObjectsSettings(baseEditSettingsBuilder);

			NXOpen::NXColor *color;

			Annotations::Lettering idSymLetteringGeneralText = letteringPreferences->GetGeneralText();

			id_name.assign("Drafting_weldSymbolColor");
			it = _nx_dpv->soll_dpv_map.find(id_name);
			int weldSymbolColorIndex;
			weldSymbolColorIndex = convert_to_int(it->second);
			color = _workPart->Colors()->Find(weldSymbolColorIndex);
			editSettingsBuilder->AnnotationStyle()->SymbolStyle()->SetWeldSymbolColor(color);
			if (_nx_dpv->usedUnitValue.compare("1") == 0) {
				id_name.assign("Drafting_draftTextCharSize_MU");
			}
			else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
				id_name.assign("Drafting_draftTextCharSize_EU");
			}
			it = _nx_dpv->soll_dpv_map.find(id_name);
			double generalTextSize = 0.0;
			generalTextSize = convert_to_double(it->second);
			editSettingsBuilder->AnnotationStyle()->LetteringStyle()->SetGeneralTextSize(generalTextSize);
			id_name.assign("Drafting_draftTextColor");
			it = _nx_dpv->soll_dpv_map.find(id_name);
			int generalTextColorIndex;
			generalTextColorIndex = convert_to_int(it->second);
			color = _workPart->Colors()->Find(generalTextColorIndex);
			editSettingsBuilder->AnnotationStyle()->LetteringStyle()->SetGeneralTextColor(color);
			id_name.assign("Drafting_draftTextFont");
			it = _nx_dpv->soll_dpv_map.find(id_name);
			NXString generalTextFontName;
			generalTextFontName = (NXString)it->second.c_str();
			int generalTextFontIndex;
			generalTextFontIndex = _workPart->Fonts()->AddFont(generalTextFontName);
			editSettingsBuilder->AnnotationStyle()->LetteringStyle()->SetGeneralTextFont(generalTextFontIndex);
			
			id_name.assign("Drafting_draftTextWidth");
			it = _nx_dpv->soll_dpv_map.find(id_name);
			int int_generalTextLineWidth;
			int_generalTextLineWidth = convert_to_int(it->second);
			NXOpen::Annotations::LineWidth generalTextLineWidth;
			//string id_name_tmp;
			//std::map<const std::string, std::string>::iterator it_tmp;
			if (int_generalTextLineWidth == 1) {
				generalTextLineWidth = NXOpen::Annotations::LineWidthNormal;
				//id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
				//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				//generalTextLineWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
			}
			else if (int_generalTextLineWidth == 2) {
				generalTextLineWidth = NXOpen::Annotations::LineWidthThick;
				//id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
				//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				//generalTextLineWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
			}
			else if (int_generalTextLineWidth == 3) {
				generalTextLineWidth = NXOpen::Annotations::LineWidthThin;
				//id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
				//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				//generalTextLineWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
			}
			else if (int_generalTextLineWidth == 6) {
				generalTextLineWidth = NXOpen::Annotations::LineWidthOne;
			}
			else if (int_generalTextLineWidth == 7) {
				generalTextLineWidth = NXOpen::Annotations::LineWidthTwo;
			}
			else if (int_generalTextLineWidth == 8) {
				generalTextLineWidth = NXOpen::Annotations::LineWidthThree;
			}
			else if (int_generalTextLineWidth == 9) {
				generalTextLineWidth = NXOpen::Annotations::LineWidthFour;
			}
			else if (int_generalTextLineWidth == 10) {
				generalTextLineWidth = NXOpen::Annotations::LineWidthFive;
			}
			else if (int_generalTextLineWidth == 11) {
				generalTextLineWidth = NXOpen::Annotations::LineWidthSix;
			}
			else if (int_generalTextLineWidth == 12) {
				generalTextLineWidth = NXOpen::Annotations::LineWidthSeven;
			}
			else if (int_generalTextLineWidth == 13) {
				generalTextLineWidth = NXOpen::Annotations::LineWidthEight;
			}
			else if (int_generalTextLineWidth == 14) {
				generalTextLineWidth = NXOpen::Annotations::LineWidthNine;
			}
			idSymLetteringGeneralText.Size = generalTextSize;
			idSymLetteringGeneralText.Cfw.Color = generalTextColorIndex;
			idSymLetteringGeneralText.Cfw.Font = generalTextFontIndex;
			idSymLetteringGeneralText.Cfw.Width = generalTextLineWidth;
			letteringPreferences->SetGeneralText(idSymLetteringGeneralText);
			editSettingsBuilder->AnnotationStyle()->LetteringStyle()->SetGeneralTextLineWidth(generalTextLineWidth);

			if (_nx_dpv->usedUnitValue.compare("1") == 0) {
				id_name.assign("Drafting_arrowSize_MU");
			}
			else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
				id_name.assign("Drafting_arrowSize_EU");
			}
			it = _nx_dpv->soll_dpv_map.find(id_name);
			double arrowheadLength;
			arrowheadLength = convert_to_double(it->second);
			lineAndArrowPreferences->SetArrowheadLength(arrowheadLength);

			//id_name.assign("Drafting_includedAngle");
			//it = _nx_dpv->soll_dpv_map.find(id_name);
			//double arrowheadIncludedAngle;
			//arrowheadIncludedAngle = convert_to_double(it->second);
			//lineAndArrowPreferences->SetArrowheadIncludedAngle(arrowheadIncludedAngle);

			if (_nx_dpv->usedUnitValue.compare("1") == 0) {
				id_name.assign("Drafting_dotDiameter_MU");
			}
			else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
				id_name.assign("Drafting_dotDiameter_EU");
			}
			it = _nx_dpv->soll_dpv_map.find(id_name);
			double dotArrowheadDiameter;
			dotArrowheadDiameter = convert_to_double(it->second);
			lineAndArrowPreferences->SetDotArrowheadDiameter(dotArrowheadDiameter);

			//Jira-Issue NX12-127 (5.0 auf 9.1 auf 0.0) ==> Macht andere Probleme mit Jira-Issue NX-588
			if (_nx_dpv->usedUnitValue.compare("1") == 0) {
				id_name.assign("Drafting_stubbSize_MU");
			}
			else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
				id_name.assign("Drafting_stubbSize_EU");
			}
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - id_name = %s \n", routineName.c_str(), id_name.c_str());
			it = _nx_dpv->soll_dpv_map.find(id_name);
			double stubLength;
			stubLength = convert_to_double(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - stubLength = %f \n", routineName.c_str(), stubLength);
			lineAndArrowPreferences->SetStubLength(stubLength);

			if (_nx_dpv->usedUnitValue.compare("1") == 0) {
				id_name.assign("Drafting_textLine_MU");
			}
			else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
				id_name.assign("Drafting_textLine_EU");
			}
			it = _nx_dpv->soll_dpv_map.find(id_name);
			double textToLineDistance;
			textToLineDistance = convert_to_double(it->second);
			lineAndArrowPreferences->SetTextToLineDistance(textToLineDistance);

			if (_nx_dpv->usedUnitValue.compare("1") == 0) {
				id_name.assign("Drafting_pointLine1_MU");
			}
			else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
				id_name.assign("Drafting_pointLine1_EU");
			}
			it = _nx_dpv->soll_dpv_map.find(id_name);
			double firstPosToExtensionLineDistance;
			firstPosToExtensionLineDistance = convert_to_double(it->second);
			lineAndArrowPreferences->SetFirstPosToExtLineDist(firstPosToExtensionLineDistance);

			if (_nx_dpv->usedUnitValue.compare("1") == 0) {
				id_name.assign("Drafting_pointLine2_MU");
			}
			else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
				id_name.assign("Drafting_pointLine2_EU");
			}
			it = _nx_dpv->soll_dpv_map.find(id_name);
			double secondPosToExtensionLineDistance;
			secondPosToExtensionLineDistance = convert_to_double(it->second);
			lineAndArrowPreferences->SetSecondPosToExtLineDist(secondPosToExtensionLineDistance);

			if (_nx_dpv->usedUnitValue.compare("1") == 0) {
				id_name.assign("Drafting_datumExtLine_MU");
			}
			else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
				id_name.assign("Drafting_datumExtLine_EU");
			}
			it = _nx_dpv->soll_dpv_map.find(id_name);
			double datumLengthPastArrow;
			datumLengthPastArrow = convert_to_double(it->second);
			lineAndArrowPreferences->SetDatumLengthPastArrow(datumLengthPastArrow);

			Annotations::LineCfw firstExtensionLineCfw = lineAndArrowPreferences->GetFirstExtensionLineCfw();
			Annotations::LineCfw firstArrowheadCfw = lineAndArrowPreferences->GetFirstArrowheadCfw();
			Annotations::LineCfw firstArrowLineCfw = lineAndArrowPreferences->GetFirstArrowLineCfw();
			Annotations::LineCfw secondExtensionLineCfw = lineAndArrowPreferences->GetSecondExtensionLineCfw();
			Annotations::LineCfw secondArrowheadCfw = lineAndArrowPreferences->GetSecondArrowheadCfw();
			Annotations::LineCfw secondArrowLineCfw = lineAndArrowPreferences->GetSecondArrowLineCfw();

			if (_nx_dpv->usedUnitValue.compare("1") == 0) {
				id_name.assign("Drafting_extensionLine1Color_MU");
			}
			else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
				id_name.assign("Drafting_extensionLine1Color_EU");
			}
			it = _nx_dpv->soll_dpv_map.find(id_name);
			int firstExtensionLineColorIndex;
			firstExtensionLineColorIndex = convert_to_int(it->second);
			id_name.assign("Drafting_extensionLine1Font");
			it = _nx_dpv->soll_dpv_map.find(id_name);
			int int_firstExtensionLineFont;
			int_firstExtensionLineFont = convert_to_int(it->second);
			NXOpen::DisplayableObject::ObjectFont firstExtensionLineFont;
			if (int_firstExtensionLineFont == 1) {
				firstExtensionLineFont = NXOpen::DisplayableObject::ObjectFontSolid;
			}
			else if (int_firstExtensionLineFont == 2) {
				firstExtensionLineFont = NXOpen::DisplayableObject::ObjectFontDashed;
			}
			else if (int_firstExtensionLineFont == 3) {
				firstExtensionLineFont = NXOpen::DisplayableObject::ObjectFontPhantom;
			}
			else if (int_firstExtensionLineFont == 4) {
				firstExtensionLineFont = NXOpen::DisplayableObject::ObjectFontCenterline;
			}
			else if (int_firstExtensionLineFont == 5) {
				firstExtensionLineFont = NXOpen::DisplayableObject::ObjectFontDotted;
			}
			else if (int_firstExtensionLineFont == 6) {
				firstExtensionLineFont = NXOpen::DisplayableObject::ObjectFontLongDashed;
			}
			else if (int_firstExtensionLineFont == 7) {
				firstExtensionLineFont = NXOpen::DisplayableObject::ObjectFontDottedDashed;
			}
			id_name.assign("Drafting_extensionLine1Width");
			it = _nx_dpv->soll_dpv_map.find(id_name);
			int int_firstExtensionLineWidth;
			int_firstExtensionLineWidth = convert_to_int(it->second);
			NXOpen::Annotations::LineWidth firstExtensionLineWidth;
			if (int_firstExtensionLineWidth == 1) {
				firstExtensionLineWidth = NXOpen::Annotations::LineWidthNormal;
				//id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
				//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				//firstExtensionLineWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
			}
			else if (int_firstExtensionLineWidth == 2) {
				firstExtensionLineWidth = NXOpen::Annotations::LineWidthThick;
				//id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
				//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				//firstExtensionLineWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
			}
			else if (int_firstExtensionLineWidth == 3) {
				firstExtensionLineWidth = NXOpen::Annotations::LineWidthThin;
				//id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
				//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				//firstExtensionLineWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
			}
			else if (int_firstExtensionLineWidth == 6) {
				firstExtensionLineWidth = NXOpen::Annotations::LineWidthOne;
			}
			else if (int_firstExtensionLineWidth == 7) {
				firstExtensionLineWidth = NXOpen::Annotations::LineWidthTwo;
			}
			else if (int_firstExtensionLineWidth == 8) {
				firstExtensionLineWidth = NXOpen::Annotations::LineWidthThree;
			}
			else if (int_firstExtensionLineWidth == 9) {
				firstExtensionLineWidth = NXOpen::Annotations::LineWidthFour;
			}
			else if (int_firstExtensionLineWidth == 10) {
				firstExtensionLineWidth = NXOpen::Annotations::LineWidthFive;
			}
			else if (int_firstExtensionLineWidth == 11) {
				firstExtensionLineWidth = NXOpen::Annotations::LineWidthSix;
			}
			else if (int_firstExtensionLineWidth == 12) {
				firstExtensionLineWidth = NXOpen::Annotations::LineWidthSeven;
			}
			else if (int_firstExtensionLineWidth == 13) {
				firstExtensionLineWidth = NXOpen::Annotations::LineWidthEight;
			}
			else if (int_firstExtensionLineWidth == 14) {
				firstExtensionLineWidth = NXOpen::Annotations::LineWidthNine;
			}
			firstExtensionLineCfw.Color = firstExtensionLineColorIndex;
			firstExtensionLineCfw.Font = firstExtensionLineFont;
			firstExtensionLineCfw.Width = firstExtensionLineWidth;
			lineAndArrowPreferences->SetFirstExtensionLineCfw(firstExtensionLineCfw);

			if (_nx_dpv->usedUnitValue.compare("1") == 0) {
				id_name.assign("Drafting_arrowHead1Color_MU");
			}
			else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
				id_name.assign("Drafting_arrowHead1Color_EU");
			}
			it = _nx_dpv->soll_dpv_map.find(id_name);
			int firstArrowheadColorIndex;
			firstArrowheadColorIndex = convert_to_int(it->second);
			id_name.assign("Drafting_arrowHead1Font");
			it = _nx_dpv->soll_dpv_map.find(id_name);
			int_firstExtensionLineFont = convert_to_int(it->second);
			if (int_firstExtensionLineFont == 1) {
				firstExtensionLineFont = NXOpen::DisplayableObject::ObjectFontSolid;
			}
			else if (int_firstExtensionLineFont == 2) {
				firstExtensionLineFont = NXOpen::DisplayableObject::ObjectFontDashed;
			}
			else if (int_firstExtensionLineFont == 3) {
				firstExtensionLineFont = NXOpen::DisplayableObject::ObjectFontPhantom;
			}
			else if (int_firstExtensionLineFont == 4) {
				firstExtensionLineFont = NXOpen::DisplayableObject::ObjectFontCenterline;
			}
			else if (int_firstExtensionLineFont == 5) {
				firstExtensionLineFont = NXOpen::DisplayableObject::ObjectFontDotted;
			}
			else if (int_firstExtensionLineFont == 6) {
				firstExtensionLineFont = NXOpen::DisplayableObject::ObjectFontLongDashed;
			}
			else if (int_firstExtensionLineFont == 7) {
				firstExtensionLineFont = NXOpen::DisplayableObject::ObjectFontDottedDashed;
			}
			id_name.assign("Drafting_arrowHead1Width");
			it = _nx_dpv->soll_dpv_map.find(id_name);
			int int_firstArrowheadWidth;
			int_firstArrowheadWidth = convert_to_int(it->second);
			NXOpen::Annotations::LineWidth firstArrowheadWidth;
			if (int_firstArrowheadWidth == 1) {
				firstArrowheadWidth = NXOpen::Annotations::LineWidthNormal;
				//id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
				//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				//firstArrowheadWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
			}
			else if (int_firstArrowheadWidth == 2) {
				firstArrowheadWidth = NXOpen::Annotations::LineWidthThick;
				//id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
				//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				//firstArrowheadWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
			}
			else if (int_firstArrowheadWidth == 3) {
				firstArrowheadWidth = NXOpen::Annotations::LineWidthThin;
				//id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
				//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				//firstArrowheadWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
			}
			else if (int_firstArrowheadWidth == 6) {
				firstArrowheadWidth = NXOpen::Annotations::LineWidthOne;
			}
			else if (int_firstArrowheadWidth == 7) {
				firstArrowheadWidth = NXOpen::Annotations::LineWidthTwo;
			}
			else if (int_firstArrowheadWidth == 8) {
				firstArrowheadWidth = NXOpen::Annotations::LineWidthThree;
			}
			else if (int_firstArrowheadWidth == 9) {
				firstArrowheadWidth = NXOpen::Annotations::LineWidthFour;
			}
			else if (int_firstArrowheadWidth == 10) {
				firstArrowheadWidth = NXOpen::Annotations::LineWidthFive;
			}
			else if (int_firstArrowheadWidth == 11) {
				firstArrowheadWidth = NXOpen::Annotations::LineWidthSix;
			}
			else if (int_firstArrowheadWidth == 12) {
				firstArrowheadWidth = NXOpen::Annotations::LineWidthSeven;
			}
			else if (int_firstArrowheadWidth == 13) {
				firstArrowheadWidth = NXOpen::Annotations::LineWidthEight;
			}
			else if (int_firstArrowheadWidth == 14) {
				firstArrowheadWidth = NXOpen::Annotations::LineWidthNine;
			}
			firstArrowheadCfw.Color = firstArrowheadColorIndex;
			firstArrowheadCfw.Font = firstExtensionLineFont;
			firstArrowheadCfw.Width = firstArrowheadWidth;
			lineAndArrowPreferences->SetFirstArrowheadCfw(firstArrowheadCfw);

			if (_nx_dpv->usedUnitValue.compare("1") == 0) {
				id_name.assign("Drafting_arrowLine1Color_MU");
			}
			else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
				id_name.assign("Drafting_arrowLine1Color_EU");
			}
			it = _nx_dpv->soll_dpv_map.find(id_name);
			int firstArrowLineColorIndex;
			firstArrowLineColorIndex = convert_to_int(it->second);
			id_name.assign("Drafting_arrowLine1Font");
			it = _nx_dpv->soll_dpv_map.find(id_name);
			int int_firstArrowLineFont;
			int_firstArrowLineFont = convert_to_int(it->second);
			NXOpen::DisplayableObject::ObjectFont firstArrowLineFont;
			if (int_firstArrowLineFont == 1) {
				firstArrowLineFont = NXOpen::DisplayableObject::ObjectFontSolid;
			}
			else if (int_firstArrowLineFont == 2) {
				firstArrowLineFont = NXOpen::DisplayableObject::ObjectFontDashed;
			}
			else if (int_firstArrowLineFont == 3) {
				firstArrowLineFont = NXOpen::DisplayableObject::ObjectFontPhantom;
			}
			else if (int_firstArrowLineFont == 4) {
				firstArrowLineFont = NXOpen::DisplayableObject::ObjectFontCenterline;
			}
			else if (int_firstArrowLineFont == 5) {
				firstArrowLineFont = NXOpen::DisplayableObject::ObjectFontDotted;
			}
			else if (int_firstArrowLineFont == 6) {
				firstArrowLineFont = NXOpen::DisplayableObject::ObjectFontLongDashed;
			}
			else if (int_firstArrowLineFont == 7) {
				firstArrowLineFont = NXOpen::DisplayableObject::ObjectFontDottedDashed;
			}
			id_name.assign("Drafting_arrowLine1Width");
			it = _nx_dpv->soll_dpv_map.find(id_name);
			int int_firstArrowLineWidth;
			int_firstArrowLineWidth = convert_to_int(it->second);
			NXOpen::Annotations::LineWidth firstArrowLineWidth;
			if (int_firstArrowLineWidth == 1) {
				firstArrowLineWidth = NXOpen::Annotations::LineWidthNormal;
				//id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
				//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				//firstArrowLineWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
			}
			else if (int_firstArrowLineWidth == 2) {
				firstArrowLineWidth = NXOpen::Annotations::LineWidthThick;
				//id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
				//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				//firstArrowLineWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
			}
			else if (int_firstArrowLineWidth == 3) {
				firstArrowLineWidth = NXOpen::Annotations::LineWidthThin;
				//id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
				//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				//firstArrowLineWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
			}
			else if (int_firstArrowLineWidth == 6) {
				firstArrowLineWidth = NXOpen::Annotations::LineWidthOne;
			}
			else if (int_firstArrowLineWidth == 7) {
				firstArrowLineWidth = NXOpen::Annotations::LineWidthTwo;
			}
			else if (int_firstArrowLineWidth == 8) {
				firstArrowLineWidth = NXOpen::Annotations::LineWidthThree;
			}
			else if (int_firstArrowLineWidth == 9) {
				firstArrowLineWidth = NXOpen::Annotations::LineWidthFour;
			}
			else if (int_firstArrowLineWidth == 10) {
				firstArrowLineWidth = NXOpen::Annotations::LineWidthFive;
			}
			else if (int_firstArrowLineWidth == 11) {
				firstArrowLineWidth = NXOpen::Annotations::LineWidthSix;
			}
			else if (int_firstArrowLineWidth == 12) {
				firstArrowLineWidth = NXOpen::Annotations::LineWidthSeven;
			}
			else if (int_firstArrowLineWidth == 13) {
				firstArrowLineWidth = NXOpen::Annotations::LineWidthEight;
			}
			else if (int_firstArrowLineWidth == 14) {
				firstArrowLineWidth = NXOpen::Annotations::LineWidthNine;
			}
			firstArrowLineCfw.Color = firstArrowLineColorIndex;
			firstArrowLineCfw.Font = firstArrowLineFont;
			firstArrowLineCfw.Width = firstArrowLineWidth;
			lineAndArrowPreferences->SetFirstArrowLineCfw(firstArrowLineCfw);

			if (_nx_dpv->usedUnitValue.compare("1") == 0) {
				id_name.assign("Drafting_extensionLine2Color_MU");
			}
			else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
				id_name.assign("Drafting_extensionLine2Color_EU");
			}
			it = _nx_dpv->soll_dpv_map.find(id_name);
			int secondExtensionLineColorIndex;
			secondExtensionLineColorIndex = convert_to_int(it->second);
			id_name.assign("Drafting_extensionLine2Font");
			it = _nx_dpv->soll_dpv_map.find(id_name);
			int int_secondExtensionLineFont;
			int_secondExtensionLineFont = convert_to_int(it->second);
			NXOpen::DisplayableObject::ObjectFont secondExtensionLineFont;
			if (int_secondExtensionLineFont == 1) {
				secondExtensionLineFont = NXOpen::DisplayableObject::ObjectFontSolid;
			}
			else if (int_secondExtensionLineFont == 2) {
				secondExtensionLineFont = NXOpen::DisplayableObject::ObjectFontDashed;
			}
			else if (int_secondExtensionLineFont == 3) {
				secondExtensionLineFont = NXOpen::DisplayableObject::ObjectFontPhantom;
			}
			else if (int_secondExtensionLineFont == 4) {
				secondExtensionLineFont = NXOpen::DisplayableObject::ObjectFontCenterline;
			}
			else if (int_secondExtensionLineFont == 5) {
				secondExtensionLineFont = NXOpen::DisplayableObject::ObjectFontDotted;
			}
			else if (int_secondExtensionLineFont == 6) {
				secondExtensionLineFont = NXOpen::DisplayableObject::ObjectFontLongDashed;
			}
			else if (int_secondExtensionLineFont == 7) {
				secondExtensionLineFont = NXOpen::DisplayableObject::ObjectFontDottedDashed;
			}
			id_name.assign("Drafting_extensionLine2Width");
			it = _nx_dpv->soll_dpv_map.find(id_name);
			int int_secondExtensionLineWidth;
			int_secondExtensionLineWidth = convert_to_int(it->second);
			NXOpen::Annotations::LineWidth secondExtensionLineWidth;
			if (int_secondExtensionLineWidth == 1) {
				secondExtensionLineWidth = NXOpen::Annotations::LineWidthNormal;
				//id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
				//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				//secondExtensionLineWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
			}
			else if (int_secondExtensionLineWidth == 2) {
				secondExtensionLineWidth = NXOpen::Annotations::LineWidthThick;
				//id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
				//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				//secondExtensionLineWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
			}
			else if (int_secondExtensionLineWidth == 3) {
				secondExtensionLineWidth = NXOpen::Annotations::LineWidthThin;
				//id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
				//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				//secondExtensionLineWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
			}
			else if (int_secondExtensionLineWidth == 6) {
				secondExtensionLineWidth = NXOpen::Annotations::LineWidthOne;
			}
			else if (int_secondExtensionLineWidth == 7) {
				secondExtensionLineWidth = NXOpen::Annotations::LineWidthTwo;
			}
			else if (int_secondExtensionLineWidth == 8) {
				secondExtensionLineWidth = NXOpen::Annotations::LineWidthThree;
			}
			else if (int_secondExtensionLineWidth == 9) {
				secondExtensionLineWidth = NXOpen::Annotations::LineWidthFour;
			}
			else if (int_secondExtensionLineWidth == 10) {
				secondExtensionLineWidth = NXOpen::Annotations::LineWidthFive;
			}
			else if (int_secondExtensionLineWidth == 11) {
				secondExtensionLineWidth = NXOpen::Annotations::LineWidthSix;
			}
			else if (int_secondExtensionLineWidth == 12) {
				secondExtensionLineWidth = NXOpen::Annotations::LineWidthSeven;
			}
			else if (int_secondExtensionLineWidth == 13) {
				secondExtensionLineWidth = NXOpen::Annotations::LineWidthEight;
			}
			else if (int_secondExtensionLineWidth == 14) {
				secondExtensionLineWidth = NXOpen::Annotations::LineWidthNine;
			}
			secondExtensionLineCfw.Color = secondExtensionLineColorIndex;
			secondExtensionLineCfw.Font = secondExtensionLineFont;
			secondExtensionLineCfw.Width = secondExtensionLineWidth;
			lineAndArrowPreferences->SetSecondExtensionLineCfw(secondExtensionLineCfw);

			if (_nx_dpv->usedUnitValue.compare("1") == 0) {
				id_name.assign("Drafting_arrowHead2Color_MU");
			}
			else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
				id_name.assign("Drafting_arrowHead2Color_EU");
			}
			it = _nx_dpv->soll_dpv_map.find(id_name);
			int secondArrowheadColorIndex;
			secondArrowheadColorIndex = convert_to_int(it->second);
			id_name.assign("Drafting_arrowHead2Font");
			it = _nx_dpv->soll_dpv_map.find(id_name);
			int int_secondArrowHeadFont;
			int_secondArrowHeadFont = convert_to_int(it->second);
			NXOpen::DisplayableObject::ObjectFont secondArrowHeadFont;
			if (int_secondArrowHeadFont == 1) {
				secondArrowHeadFont = NXOpen::DisplayableObject::ObjectFontSolid;
			}
			else if (int_secondArrowHeadFont == 2) {
				secondArrowHeadFont = NXOpen::DisplayableObject::ObjectFontDashed;
			}
			else if (int_secondArrowHeadFont == 3) {
				secondArrowHeadFont = NXOpen::DisplayableObject::ObjectFontPhantom;
			}
			else if (int_secondArrowHeadFont == 4) {
				secondArrowHeadFont = NXOpen::DisplayableObject::ObjectFontCenterline;
			}
			else if (int_secondArrowHeadFont == 5) {
				secondArrowHeadFont = NXOpen::DisplayableObject::ObjectFontDotted;
			}
			else if (int_secondArrowHeadFont == 6) {
				secondArrowHeadFont = NXOpen::DisplayableObject::ObjectFontLongDashed;
			}
			else if (int_secondArrowHeadFont == 7) {
				secondArrowHeadFont = NXOpen::DisplayableObject::ObjectFontDottedDashed;
			}
			id_name.assign("Drafting_arrowHead2Width");
			it = _nx_dpv->soll_dpv_map.find(id_name);
			int int_secondArrowheadWidth;
			int_secondArrowheadWidth = convert_to_int(it->second);
			NXOpen::Annotations::LineWidth secondArrowheadWidth;
			if (int_secondArrowheadWidth == 1) {
				secondArrowheadWidth = NXOpen::Annotations::LineWidthNormal;
				//id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
				//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				//secondArrowheadWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
			}
			else if (int_secondArrowheadWidth == 2) {
				secondArrowheadWidth = NXOpen::Annotations::LineWidthThick;
				//id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
				//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				//secondArrowheadWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
			}
			else if (int_secondArrowheadWidth == 3) {
				secondArrowheadWidth = NXOpen::Annotations::LineWidthThin;
				//id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
				//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				//secondArrowheadWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
			}
			else if (int_secondArrowheadWidth == 6) {
				secondArrowheadWidth = NXOpen::Annotations::LineWidthOne;
			}
			else if (int_secondArrowheadWidth == 7) {
				secondArrowheadWidth = NXOpen::Annotations::LineWidthTwo;
			}
			else if (int_secondArrowheadWidth == 8) {
				secondArrowheadWidth = NXOpen::Annotations::LineWidthThree;
			}
			else if (int_secondArrowheadWidth == 9) {
				secondArrowheadWidth = NXOpen::Annotations::LineWidthFour;
			}
			else if (int_secondArrowheadWidth == 10) {
				secondArrowheadWidth = NXOpen::Annotations::LineWidthFive;
			}
			else if (int_secondArrowheadWidth == 11) {
				secondArrowheadWidth = NXOpen::Annotations::LineWidthSix;
			}
			else if (int_secondArrowheadWidth == 12) {
				secondArrowheadWidth = NXOpen::Annotations::LineWidthSeven;
			}
			else if (int_secondArrowheadWidth == 13) {
				secondArrowheadWidth = NXOpen::Annotations::LineWidthEight;
			}
			else if (int_secondArrowheadWidth == 14) {
				secondArrowheadWidth = NXOpen::Annotations::LineWidthNine;
			}
			secondArrowheadCfw.Color = secondArrowheadColorIndex;
			secondArrowheadCfw.Font = secondArrowHeadFont;
			secondArrowheadCfw.Width = secondArrowheadWidth;
			lineAndArrowPreferences->SetSecondArrowheadCfw(secondArrowheadCfw);

			if (_nx_dpv->usedUnitValue.compare("1") == 0) {
				id_name.assign("Drafting_arrowLine2Color_MU");
			}
			else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
				id_name.assign("Drafting_arrowLine2Color_EU");
			}
			it = _nx_dpv->soll_dpv_map.find(id_name);
			int secondArrowLineColorIndex;
			secondArrowLineColorIndex = convert_to_int(it->second);
			id_name.assign("Drafting_arrowLine2Font");
			it = _nx_dpv->soll_dpv_map.find(id_name);
			int int_secondArrowLineFont;
			int_secondArrowLineFont = convert_to_int(it->second);
			NXOpen::DisplayableObject::ObjectFont secondArrowLineFont;
			if (int_secondArrowLineFont == 1) {
				secondArrowLineFont = NXOpen::DisplayableObject::ObjectFontSolid;
			}
			else if (int_secondArrowLineFont == 2) {
				secondArrowLineFont = NXOpen::DisplayableObject::ObjectFontDashed;
			}
			else if (int_secondArrowLineFont == 3) {
				secondArrowLineFont = NXOpen::DisplayableObject::ObjectFontPhantom;
			}
			else if (int_secondArrowLineFont == 4) {
				secondArrowLineFont = NXOpen::DisplayableObject::ObjectFontCenterline;
			}
			else if (int_secondArrowLineFont == 5) {
				secondArrowLineFont = NXOpen::DisplayableObject::ObjectFontDotted;
			}
			else if (int_secondArrowLineFont == 6) {
				secondArrowLineFont = NXOpen::DisplayableObject::ObjectFontLongDashed;
			}
			else if (int_secondArrowLineFont == 7) {
				secondArrowLineFont = NXOpen::DisplayableObject::ObjectFontDottedDashed;
			}
			id_name.assign("Drafting_arrowLine2Width");
			it = _nx_dpv->soll_dpv_map.find(id_name);
			int int_secondArrowLineWidth;
			int_secondArrowLineWidth = convert_to_int(it->second);
			NXOpen::Annotations::LineWidth secondArrowLineWidth;
			if (int_secondArrowLineWidth == 1) {
				secondArrowLineWidth = NXOpen::Annotations::LineWidthNormal;
				//id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
				//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				//secondArrowLineWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
			}
			else if (int_secondArrowLineWidth == 2) {
				secondArrowLineWidth = NXOpen::Annotations::LineWidthThick;
				//id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
				//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				//secondArrowLineWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
			}
			else if (int_secondArrowLineWidth == 3) {
				secondArrowLineWidth = NXOpen::Annotations::LineWidthThin;
				//id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
				//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				//secondArrowLineWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
			}
			else if (int_secondArrowLineWidth == 6) {
				secondArrowLineWidth = NXOpen::Annotations::LineWidthOne;
			}
			else if (int_secondArrowLineWidth == 7) {
				secondArrowLineWidth = NXOpen::Annotations::LineWidthTwo;
			}
			else if (int_secondArrowLineWidth == 8) {
				secondArrowLineWidth = NXOpen::Annotations::LineWidthThree;
			}
			else if (int_secondArrowLineWidth == 9) {
				secondArrowLineWidth = NXOpen::Annotations::LineWidthFour;
			}
			else if (int_secondArrowLineWidth == 10) {
				secondArrowLineWidth = NXOpen::Annotations::LineWidthFive;
			}
			else if (int_secondArrowLineWidth == 11) {
				secondArrowLineWidth = NXOpen::Annotations::LineWidthSix;
			}
			else if (int_secondArrowLineWidth == 12) {
				secondArrowLineWidth = NXOpen::Annotations::LineWidthSeven;
			}
			else if (int_secondArrowLineWidth == 13) {
				secondArrowLineWidth = NXOpen::Annotations::LineWidthEight;
			}
			else if (int_secondArrowLineWidth == 14) {
				secondArrowLineWidth = NXOpen::Annotations::LineWidthNine;
			}
			secondArrowLineCfw.Color = secondArrowLineColorIndex;
			secondArrowLineCfw.Font = secondArrowLineFont;
			secondArrowLineCfw.Width = secondArrowLineWidth;
			lineAndArrowPreferences->SetSecondArrowLineCfw(secondArrowLineCfw);

			weldP->SetLetteringPreferences(letteringPreferences);
			weldP->SetLineAndArrowPreferences(lineAndArrowPreferences);

			try {
				editSettingsBuilder->Commit();
			}
			catch (...) {
				nxLog("%s - Inside the weld symbol \"%s\"(tag=%d) an error occured! \n", routineName.c_str(), weldP->JournalIdentifier().GetLocaleText(), (int) weldP->Tag());
			}
			editSettingsBuilder->Destroy();
		}
	} catch (...) {
		nxLog("%s - ERROR - STOPP \n", routineName.c_str());
	}
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- STOPP - %s --- \n", routineName.c_str());
}

/*
File - Preferences - Drafting - Annotation - GDT -> Repair existing GDTs.
*/
void repair_existing_gdt_styles(en_nx_dpv* _nx_dpv, Session * _theSession, Part* _workPart) {
	routineName.assign("repair_existing_gdt_styles");
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- START - %s --- \n", routineName.c_str());

	try{
		NXOpen::Annotations::GdtCollection *theGdtCollection = _workPart->Gdts();
		NXOpen::NXColor *color;

		for (NXOpen::Annotations::GdtCollection::iterator it_gdt = theGdtCollection->begin(); it_gdt != theGdtCollection->end(); it_gdt++) {
			Annotations::Gdt *gdtP = (*it_gdt);

			Annotations::SymbolPreferences *gdtPreferences = gdtP->GetSymbolPreferences();
			Annotations::LineAndArrowPreferences *lineAndArrowPreferences = gdtP->GetLineAndArrowPreferences();
			Annotations::LetteringPreferences *letteringPreferences = gdtP->GetLetteringPreferences();

			Annotations::LineCfw gdtSymbolCfw = gdtPreferences->GetGdtSymbolCfw();

			std::vector<NXOpen::DisplayableObject *> objects(1);
			objects[0] = gdtP;
			NXOpen::Annotations::EditSettingsBuilder *editSettingsBuilder;
			editSettingsBuilder = _workPart->SettingsManager()->CreateAnnotationEditSettingsBuilder(objects);

			id_name.assign("Drafting_gdtColor");
			it = _nx_dpv->soll_dpv_map.find(id_name);
			int gdtSymbolColorIndex;
			gdtSymbolColorIndex = convert_to_int(it->second.c_str());
			id_name.assign("Drafting_gdtFont");
			it = _nx_dpv->soll_dpv_map.find(id_name);
			int int_gdtSymbolFont;
			int_gdtSymbolFont = convert_to_int(it->second);
			NXOpen::DisplayableObject::ObjectFont gdtSymbolFont;
			if (int_gdtSymbolFont == 1) {
				gdtSymbolFont = NXOpen::DisplayableObject::ObjectFontSolid;
			}
			else if (int_gdtSymbolFont == 2) {
				gdtSymbolFont = NXOpen::DisplayableObject::ObjectFontDashed;
			}
			else if (int_gdtSymbolFont == 3) {
				gdtSymbolFont = NXOpen::DisplayableObject::ObjectFontPhantom;
			}
			else if (int_gdtSymbolFont == 4) {
				gdtSymbolFont = NXOpen::DisplayableObject::ObjectFontCenterline;
			}
			else if (int_gdtSymbolFont == 5) {
				gdtSymbolFont = NXOpen::DisplayableObject::ObjectFontDotted;
			}
			else if (int_gdtSymbolFont == 6) {
				gdtSymbolFont = NXOpen::DisplayableObject::ObjectFontLongDashed;
			}
			else if (int_gdtSymbolFont == 7) {
				gdtSymbolFont = NXOpen::DisplayableObject::ObjectFontDottedDashed;
			}
			id_name.assign("Drafting_gdtWidth");
			it = _nx_dpv->soll_dpv_map.find(id_name);
			int int_gdtSymbolWidth;
			int_gdtSymbolWidth = convert_to_int(it->second);
			NXOpen::Annotations::LineWidth gdtSymbolWidth;
			string id_name_tmp;
			std::map<const std::string, std::string>::iterator it_tmp;
			if (int_gdtSymbolWidth == 1) {
				gdtSymbolWidth = NXOpen::Annotations::LineWidthNormal;
				//id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
				//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				//gdtSymbolWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
			}
			else if (int_gdtSymbolWidth == 2) {
				gdtSymbolWidth = NXOpen::Annotations::LineWidthThick;
				//id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
				//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				//gdtSymbolWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
			}
			else if (int_gdtSymbolWidth == 3) {
				gdtSymbolWidth = NXOpen::Annotations::LineWidthThin;
				//id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
				//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				//gdtSymbolWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
			}
			else if (int_gdtSymbolWidth == 6) {
				gdtSymbolWidth = NXOpen::Annotations::LineWidthOne;
			}
			else if (int_gdtSymbolWidth == 7) {
				gdtSymbolWidth = NXOpen::Annotations::LineWidthTwo;
			}
			else if (int_gdtSymbolWidth == 8) {
				gdtSymbolWidth = NXOpen::Annotations::LineWidthThree;
			}
			else if (int_gdtSymbolWidth == 9) {
				gdtSymbolWidth = NXOpen::Annotations::LineWidthFour;
			}
			else if (int_gdtSymbolWidth == 10) {
				gdtSymbolWidth = NXOpen::Annotations::LineWidthFive;
			}
			else if (int_gdtSymbolWidth == 11) {
				gdtSymbolWidth = NXOpen::Annotations::LineWidthSix;
			}
			else if (int_gdtSymbolWidth == 12) {
				gdtSymbolWidth = NXOpen::Annotations::LineWidthSeven;
			}
			else if (int_gdtSymbolWidth == 13) {
				gdtSymbolWidth = NXOpen::Annotations::LineWidthEight;
			}
			else if (int_gdtSymbolWidth == 14) {
				gdtSymbolWidth = NXOpen::Annotations::LineWidthNine;
			}
			gdtSymbolCfw.Color = gdtSymbolColorIndex;
			gdtSymbolCfw.Font = gdtSymbolFont;
			gdtSymbolCfw.Width = gdtSymbolWidth;
			gdtPreferences->SetGdtSymbolCfw(gdtSymbolCfw);

			Annotations::Lettering idSymLetteringGeneralText = letteringPreferences->GetGeneralText();

			if (_nx_dpv->usedUnitValue.compare("1") == 0) {
				id_name.assign("Drafting_draftTextCharSize_MU");
			}
			else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
				id_name.assign("Drafting_draftTextCharSize_EU");
			}
			it = _nx_dpv->soll_dpv_map.find(id_name);
			double generalTextSize = 0.0;
			generalTextSize = convert_to_double(it->second);
			editSettingsBuilder->AnnotationStyle()->LetteringStyle()->SetDimensionTextSize(generalTextSize);
			id_name.assign("Drafting_draftTextColor");
			it = _nx_dpv->soll_dpv_map.find(id_name);
			int generalTextColorIndex;
			generalTextColorIndex = convert_to_int(it->second);
			color = _workPart->Colors()->Find(generalTextColorIndex);
			editSettingsBuilder->AnnotationStyle()->LetteringStyle()->SetDimensionTextColor(color);
			id_name.assign("Drafting_draftTextFont");
			it = _nx_dpv->soll_dpv_map.find(id_name);
			NXString generalTextFontName;
			generalTextFontName = (NXString)it->second.c_str();
			int generalTextFontIndex;
			generalTextFontIndex = _workPart->Fonts()->AddFont(generalTextFontName);
			editSettingsBuilder->AnnotationStyle()->LetteringStyle()->SetDimensionTextFont(generalTextFontIndex);
			
			id_name.assign("Drafting_draftTextWidth");
			it = _nx_dpv->soll_dpv_map.find(id_name);
			int int_generalTextLineWidth;
			int_generalTextLineWidth = convert_to_int(it->second);
			NXOpen::Annotations::LineWidth generalTextLineWidth;
			if (int_generalTextLineWidth == 1) {
				generalTextLineWidth = NXOpen::Annotations::LineWidthNormal;
				//id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
				//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				//generalTextLineWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
			}
			else if (int_generalTextLineWidth == 2) {
				generalTextLineWidth = NXOpen::Annotations::LineWidthThick;
				//id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
				//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				//generalTextLineWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
			}
			else if (int_generalTextLineWidth == 3) {
				//generalTextLineWidth = NXOpen::Annotations::LineWidthThin;
				id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
				it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				generalTextLineWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
			}
			else if (int_generalTextLineWidth == 6) {
				generalTextLineWidth = NXOpen::Annotations::LineWidthOne;
			}
			else if (int_generalTextLineWidth == 7) {
				generalTextLineWidth = NXOpen::Annotations::LineWidthTwo;
			}
			else if (int_generalTextLineWidth == 8) {
				generalTextLineWidth = NXOpen::Annotations::LineWidthThree;
			}
			else if (int_generalTextLineWidth == 9) {
				generalTextLineWidth = NXOpen::Annotations::LineWidthFour;
			}
			else if (int_generalTextLineWidth == 10) {
				generalTextLineWidth = NXOpen::Annotations::LineWidthFive;
			}
			else if (int_generalTextLineWidth == 11) {
				generalTextLineWidth = NXOpen::Annotations::LineWidthSix;
			}
			else if (int_generalTextLineWidth == 12) {
				generalTextLineWidth = NXOpen::Annotations::LineWidthSeven;
			}
			else if (int_generalTextLineWidth == 13) {
				generalTextLineWidth = NXOpen::Annotations::LineWidthEight;
			}
			else if (int_generalTextLineWidth == 14) {
				generalTextLineWidth = NXOpen::Annotations::LineWidthNine;
			}
			idSymLetteringGeneralText.Size = generalTextSize;
			idSymLetteringGeneralText.Cfw.Color = generalTextColorIndex;
			idSymLetteringGeneralText.Cfw.Font = generalTextFontIndex;
			idSymLetteringGeneralText.Cfw.Width = generalTextLineWidth;
			letteringPreferences->SetGeneralText(idSymLetteringGeneralText);
			editSettingsBuilder->AnnotationStyle()->LetteringStyle()->SetDimensionTextLineWidth(generalTextLineWidth);

			if (_nx_dpv->usedUnitValue.compare("1") == 0) {
				id_name.assign("Drafting_arrowSize_MU");
			}
			else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
				id_name.assign("Drafting_arrowSize_EU");
			}
			it = _nx_dpv->soll_dpv_map.find(id_name);
			double arrowheadLength;
			arrowheadLength = convert_to_double(it->second);
			lineAndArrowPreferences->SetArrowheadLength(arrowheadLength);

			//id_name.assign("Drafting_includedAngle");
			//it = _nx_dpv->soll_dpv_map.find(id_name);
			//double arrowheadIncludedAngle;
			//arrowheadIncludedAngle = convert_to_double(it->second);
			//lineAndArrowPreferences->SetArrowheadIncludedAngle(arrowheadIncludedAngle);

			if (_nx_dpv->usedUnitValue.compare("1") == 0) {
				id_name.assign("Drafting_dotDiameter_MU");
			}
			else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
				id_name.assign("Drafting_dotDiameter_EU");
			}
			it = _nx_dpv->soll_dpv_map.find(id_name);
			double dotArrowheadDiameter;
			dotArrowheadDiameter = convert_to_double(it->second);
			lineAndArrowPreferences->SetDotArrowheadDiameter(dotArrowheadDiameter);

			if (_nx_dpv->usedUnitValue.compare("1") == 0) {
				id_name.assign("Drafting_stubbSize_MU");
			}
			else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
				id_name.assign("Drafting_stubbSize_EU");
			}
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - id_name = %s \n", routineName.c_str(), id_name.c_str());
			it = _nx_dpv->soll_dpv_map.find(id_name);
			double stubLength;
			stubLength = convert_to_double(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - stubLength = %f \n", routineName.c_str(), stubLength);
			lineAndArrowPreferences->SetStubLength(stubLength);

			if (_nx_dpv->usedUnitValue.compare("1") == 0) {
				id_name.assign("Drafting_textLine_MU");
			}
			else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
				id_name.assign("Drafting_textLine_EU");
			}
			it = _nx_dpv->soll_dpv_map.find(id_name);
			double textToLineDistance;
			textToLineDistance = convert_to_double(it->second);
			lineAndArrowPreferences->SetTextToLineDistance(textToLineDistance);

			if (_nx_dpv->usedUnitValue.compare("1") == 0) {
				id_name.assign("Drafting_pointLine1_MU");
			}
			else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
				id_name.assign("Drafting_pointLine1_EU");
			}
			it = _nx_dpv->soll_dpv_map.find(id_name);
			double firstPosToExtensionLineDistance;
			firstPosToExtensionLineDistance = convert_to_double(it->second);
			lineAndArrowPreferences->SetFirstPosToExtLineDist(firstPosToExtensionLineDistance);

			if (_nx_dpv->usedUnitValue.compare("1") == 0) {
				id_name.assign("Drafting_pointLine2_MU");
			}
			else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
				id_name.assign("Drafting_pointLine2_EU");
			}
			it = _nx_dpv->soll_dpv_map.find(id_name);
			double secondPosToExtensionLineDistance;
			secondPosToExtensionLineDistance = convert_to_double(it->second);
			lineAndArrowPreferences->SetSecondPosToExtLineDist(secondPosToExtensionLineDistance);

			if (_nx_dpv->usedUnitValue.compare("1") == 0) {
				id_name.assign("Drafting_datumExtLine_MU");
			}
			else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
				id_name.assign("Drafting_datumExtLine_EU");
			}
			it = _nx_dpv->soll_dpv_map.find(id_name);
			double datumLengthPastArrow;
			datumLengthPastArrow = convert_to_double(it->second);
			lineAndArrowPreferences->SetDatumLengthPastArrow(datumLengthPastArrow);

			Annotations::LineCfw firstExtensionLineCfw = lineAndArrowPreferences->GetFirstExtensionLineCfw();
			Annotations::LineCfw firstArrowheadCfw = lineAndArrowPreferences->GetFirstArrowheadCfw();
			Annotations::LineCfw firstArrowLineCfw = lineAndArrowPreferences->GetFirstArrowLineCfw();
			Annotations::LineCfw secondExtensionLineCfw = lineAndArrowPreferences->GetSecondExtensionLineCfw();
			Annotations::LineCfw secondArrowheadCfw = lineAndArrowPreferences->GetSecondArrowheadCfw();
			Annotations::LineCfw secondArrowLineCfw = lineAndArrowPreferences->GetSecondArrowLineCfw();

			if (_nx_dpv->usedUnitValue.compare("1") == 0) {
				id_name.assign("Drafting_extensionLine1Color_MU");
			}
			else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
				id_name.assign("Drafting_extensionLine1Color_EU");
			}
			it = _nx_dpv->soll_dpv_map.find(id_name);
			int firstExtensionLineColorIndex;
			firstExtensionLineColorIndex = convert_to_int(it->second);
			id_name.assign("Drafting_extensionLine1Font");
			it = _nx_dpv->soll_dpv_map.find(id_name);
			int int_firstExtensionLineFont;
			int_firstExtensionLineFont = convert_to_int(it->second);
			NXOpen::DisplayableObject::ObjectFont firstExtensionLineFont;
			if (int_firstExtensionLineFont == 1) {
				firstExtensionLineFont = NXOpen::DisplayableObject::ObjectFontSolid;
			}
			else if (int_firstExtensionLineFont == 2) {
				firstExtensionLineFont = NXOpen::DisplayableObject::ObjectFontDashed;
			}
			else if (int_firstExtensionLineFont == 3) {
				firstExtensionLineFont = NXOpen::DisplayableObject::ObjectFontPhantom;
			}
			else if (int_firstExtensionLineFont == 4) {
				firstExtensionLineFont = NXOpen::DisplayableObject::ObjectFontCenterline;
			}
			else if (int_firstExtensionLineFont == 5) {
				firstExtensionLineFont = NXOpen::DisplayableObject::ObjectFontDotted;
			}
			else if (int_firstExtensionLineFont == 6) {
				firstExtensionLineFont = NXOpen::DisplayableObject::ObjectFontLongDashed;
			}
			else if (int_firstExtensionLineFont == 7) {
				firstExtensionLineFont = NXOpen::DisplayableObject::ObjectFontDottedDashed;
			}
			id_name.assign("Drafting_extensionLine1Width");
			it = _nx_dpv->soll_dpv_map.find(id_name);
			int int_firstExtensionLineWidth;
			int_firstExtensionLineWidth = convert_to_int(it->second);
			NXOpen::Annotations::LineWidth firstExtensionLineWidth;
			if (int_firstExtensionLineWidth == 1) {
				firstExtensionLineWidth = NXOpen::Annotations::LineWidthNormal;
				//id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
				//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				//firstExtensionLineWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
			}
			else if (int_firstExtensionLineWidth == 2) {
				firstExtensionLineWidth = NXOpen::Annotations::LineWidthThick;
				//id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
				//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				//firstExtensionLineWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
			}
			else if (int_firstExtensionLineWidth == 3) {
				firstExtensionLineWidth = NXOpen::Annotations::LineWidthThin;
				//id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
				//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				//firstExtensionLineWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
			}
			else if (int_firstExtensionLineWidth == 6) {
				firstExtensionLineWidth = NXOpen::Annotations::LineWidthOne;
			}
			else if (int_firstExtensionLineWidth == 7) {
				firstExtensionLineWidth = NXOpen::Annotations::LineWidthTwo;
			}
			else if (int_firstExtensionLineWidth == 8) {
				firstExtensionLineWidth = NXOpen::Annotations::LineWidthThree;
			}
			else if (int_firstExtensionLineWidth == 9) {
				firstExtensionLineWidth = NXOpen::Annotations::LineWidthFour;
			}
			else if (int_firstExtensionLineWidth == 10) {
				firstExtensionLineWidth = NXOpen::Annotations::LineWidthFive;
			}
			else if (int_firstExtensionLineWidth == 11) {
				firstExtensionLineWidth = NXOpen::Annotations::LineWidthSix;
			}
			else if (int_firstExtensionLineWidth == 12) {
				firstExtensionLineWidth = NXOpen::Annotations::LineWidthSeven;
			}
			else if (int_firstExtensionLineWidth == 13) {
				firstExtensionLineWidth = NXOpen::Annotations::LineWidthEight;
			}
			else if (int_firstExtensionLineWidth == 14) {
				firstExtensionLineWidth = NXOpen::Annotations::LineWidthNine;
			}
			firstExtensionLineCfw.Color = firstExtensionLineColorIndex;
			firstExtensionLineCfw.Font = firstExtensionLineFont;
			firstExtensionLineCfw.Width = firstExtensionLineWidth;
			lineAndArrowPreferences->SetFirstExtensionLineCfw(firstExtensionLineCfw);


			if (_nx_dpv->usedUnitValue.compare("1") == 0) {
				id_name.assign("Drafting_arrowHead1Color_MU");
			}
			else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
				id_name.assign("Drafting_arrowHead1Color_EU");
			}
			it = _nx_dpv->soll_dpv_map.find(id_name);
			int firstArrowheadColorIndex;
			firstArrowheadColorIndex = convert_to_int(it->second);
			id_name.assign("Drafting_arrowHead1Font");
			it = _nx_dpv->soll_dpv_map.find(id_name);
			int_firstExtensionLineFont = convert_to_int(it->second);
			if (int_firstExtensionLineFont == 1) {
				firstExtensionLineFont = NXOpen::DisplayableObject::ObjectFontSolid;
			}
			else if (int_firstExtensionLineFont == 2) {
				firstExtensionLineFont = NXOpen::DisplayableObject::ObjectFontDashed;
			}
			else if (int_firstExtensionLineFont == 3) {
				firstExtensionLineFont = NXOpen::DisplayableObject::ObjectFontPhantom;
			}
			else if (int_firstExtensionLineFont == 4) {
				firstExtensionLineFont = NXOpen::DisplayableObject::ObjectFontCenterline;
			}
			else if (int_firstExtensionLineFont == 5) {
				firstExtensionLineFont = NXOpen::DisplayableObject::ObjectFontDotted;
			}
			else if (int_firstExtensionLineFont == 6) {
				firstExtensionLineFont = NXOpen::DisplayableObject::ObjectFontLongDashed;
			}
			else if (int_firstExtensionLineFont == 7) {
				firstExtensionLineFont = NXOpen::DisplayableObject::ObjectFontDottedDashed;
			}
			id_name.assign("Drafting_arrowHead1Width");
			it = _nx_dpv->soll_dpv_map.find(id_name);
			int int_firstArrowheadWidth;
			int_firstArrowheadWidth = convert_to_int(it->second);
			NXOpen::Annotations::LineWidth firstArrowheadWidth;
			if (int_firstArrowheadWidth == 1) {
				firstArrowheadWidth = NXOpen::Annotations::LineWidthNormal;
				//id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
				//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				//firstArrowheadWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
			}
			else if (int_firstArrowheadWidth == 2) {
				firstArrowheadWidth = NXOpen::Annotations::LineWidthThick;
				//id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
				//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				//firstArrowheadWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
			}
			else if (int_firstArrowheadWidth == 3) {
				firstArrowheadWidth = NXOpen::Annotations::LineWidthThin;
				//id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
				//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				//firstArrowheadWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
			}
			else if (int_firstArrowheadWidth == 6) {
				firstArrowheadWidth = NXOpen::Annotations::LineWidthOne;
			}
			else if (int_firstArrowheadWidth == 7) {
				firstArrowheadWidth = NXOpen::Annotations::LineWidthTwo;
			}
			else if (int_firstArrowheadWidth == 8) {
				firstArrowheadWidth = NXOpen::Annotations::LineWidthThree;
			}
			else if (int_firstArrowheadWidth == 9) {
				firstArrowheadWidth = NXOpen::Annotations::LineWidthFour;
			}
			else if (int_firstArrowheadWidth == 10) {
				firstArrowheadWidth = NXOpen::Annotations::LineWidthFive;
			}
			else if (int_firstArrowheadWidth == 11) {
				firstArrowheadWidth = NXOpen::Annotations::LineWidthSix;
			}
			else if (int_firstArrowheadWidth == 12) {
				firstArrowheadWidth = NXOpen::Annotations::LineWidthSeven;
			}
			else if (int_firstArrowheadWidth == 13) {
				firstArrowheadWidth = NXOpen::Annotations::LineWidthEight;
			}
			else if (int_firstArrowheadWidth == 14) {
				firstArrowheadWidth = NXOpen::Annotations::LineWidthNine;
			}
			firstArrowheadCfw.Color = firstArrowheadColorIndex;
			firstArrowheadCfw.Font = firstExtensionLineFont;
			firstArrowheadCfw.Width = firstArrowheadWidth;
			lineAndArrowPreferences->SetFirstArrowheadCfw(firstArrowheadCfw);

			if (_nx_dpv->usedUnitValue.compare("1") == 0) {
				id_name.assign("Drafting_arrowLine1Color_MU");
			}
			else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
				id_name.assign("Drafting_arrowLine1Color_EU");
			}
			it = _nx_dpv->soll_dpv_map.find(id_name);
			int firstArrowLineColorIndex;
			firstArrowLineColorIndex = convert_to_int(it->second);
			id_name.assign("Drafting_arrowLine1Font");
			it = _nx_dpv->soll_dpv_map.find(id_name);
			int int_firstArrowLineFont;
			int_firstArrowLineFont = convert_to_int(it->second);
			NXOpen::DisplayableObject::ObjectFont firstArrowLineFont;
			if (int_firstArrowLineFont == 1) {
				firstArrowLineFont = NXOpen::DisplayableObject::ObjectFontSolid;
			}
			else if (int_firstArrowLineFont == 2) {
				firstArrowLineFont = NXOpen::DisplayableObject::ObjectFontDashed;
			}
			else if (int_firstArrowLineFont == 3) {
				firstArrowLineFont = NXOpen::DisplayableObject::ObjectFontPhantom;
			}
			else if (int_firstArrowLineFont == 4) {
				firstArrowLineFont = NXOpen::DisplayableObject::ObjectFontCenterline;
			}
			else if (int_firstArrowLineFont == 5) {
				firstArrowLineFont = NXOpen::DisplayableObject::ObjectFontDotted;
			}
			else if (int_firstArrowLineFont == 6) {
				firstArrowLineFont = NXOpen::DisplayableObject::ObjectFontLongDashed;
			}
			else if (int_firstArrowLineFont == 7) {
				firstArrowLineFont = NXOpen::DisplayableObject::ObjectFontDottedDashed;
			}
			id_name.assign("Drafting_arrowLine1Width");
			it = _nx_dpv->soll_dpv_map.find(id_name);
			int int_firstArrowLineWidth;
			int_firstArrowLineWidth = convert_to_int(it->second);
			NXOpen::Annotations::LineWidth firstArrowLineWidth;
			if (int_firstArrowLineWidth == 1) {
				firstArrowLineWidth = NXOpen::Annotations::LineWidthNormal;
				//id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
				//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				//firstArrowLineWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
			}
			else if (int_firstArrowLineWidth == 2) {
				firstArrowLineWidth = NXOpen::Annotations::LineWidthThick;
				//id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
				//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				//firstArrowLineWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
			}
			else if (int_firstArrowLineWidth == 3) {
				firstArrowLineWidth = NXOpen::Annotations::LineWidthThin;
				//id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
				//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				//firstArrowLineWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
			}
			else if (int_firstArrowLineWidth == 6) {
				firstArrowLineWidth = NXOpen::Annotations::LineWidthOne;
			}
			else if (int_firstArrowLineWidth == 7) {
				firstArrowLineWidth = NXOpen::Annotations::LineWidthTwo;
			}
			else if (int_firstArrowLineWidth == 8) {
				firstArrowLineWidth = NXOpen::Annotations::LineWidthThree;
			}
			else if (int_firstArrowLineWidth == 9) {
				firstArrowLineWidth = NXOpen::Annotations::LineWidthFour;
			}
			else if (int_firstArrowLineWidth == 10) {
				firstArrowLineWidth = NXOpen::Annotations::LineWidthFive;
			}
			else if (int_firstArrowLineWidth == 11) {
				firstArrowLineWidth = NXOpen::Annotations::LineWidthSix;
			}
			else if (int_firstArrowLineWidth == 12) {
				firstArrowLineWidth = NXOpen::Annotations::LineWidthSeven;
			}
			else if (int_firstArrowLineWidth == 13) {
				firstArrowLineWidth = NXOpen::Annotations::LineWidthEight;
			}
			else if (int_firstArrowLineWidth == 14) {
				firstArrowLineWidth = NXOpen::Annotations::LineWidthNine;
			}
			firstArrowLineCfw.Color = firstArrowLineColorIndex;
			firstArrowLineCfw.Font = firstArrowLineFont;
			firstArrowLineCfw.Width = firstArrowLineWidth;
			lineAndArrowPreferences->SetFirstArrowLineCfw(firstArrowLineCfw);

			if (_nx_dpv->usedUnitValue.compare("1") == 0) {
				id_name.assign("Drafting_extensionLine2Color_MU");
			}
			else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
				id_name.assign("Drafting_extensionLine2Color_EU");
			}
			it = _nx_dpv->soll_dpv_map.find(id_name);
			int secondExtensionLineColorIndex;
			secondExtensionLineColorIndex = convert_to_int(it->second);
			id_name.assign("Drafting_extensionLine2Font");
			it = _nx_dpv->soll_dpv_map.find(id_name);
			int int_secondExtensionLineFont;
			int_secondExtensionLineFont = convert_to_int(it->second);
			NXOpen::DisplayableObject::ObjectFont secondExtensionLineFont;
			if (int_secondExtensionLineFont == 1) {
				secondExtensionLineFont = NXOpen::DisplayableObject::ObjectFontSolid;
			}
			else if (int_secondExtensionLineFont == 2) {
				secondExtensionLineFont = NXOpen::DisplayableObject::ObjectFontDashed;
			}
			else if (int_secondExtensionLineFont == 3) {
				secondExtensionLineFont = NXOpen::DisplayableObject::ObjectFontPhantom;
			}
			else if (int_secondExtensionLineFont == 4) {
				secondExtensionLineFont = NXOpen::DisplayableObject::ObjectFontCenterline;
			}
			else if (int_secondExtensionLineFont == 5) {
				secondExtensionLineFont = NXOpen::DisplayableObject::ObjectFontDotted;
			}
			else if (int_secondExtensionLineFont == 6) {
				secondExtensionLineFont = NXOpen::DisplayableObject::ObjectFontLongDashed;
			}
			else if (int_secondExtensionLineFont == 7) {
				secondExtensionLineFont = NXOpen::DisplayableObject::ObjectFontDottedDashed;
			}
			id_name.assign("Drafting_extensionLine2Width");
			it = _nx_dpv->soll_dpv_map.find(id_name);
			int int_secondExtensionLineWidth;
			int_secondExtensionLineWidth = convert_to_int(it->second);
			NXOpen::Annotations::LineWidth secondExtensionLineWidth;
			if (int_secondExtensionLineWidth == 1) {
				secondExtensionLineWidth = NXOpen::Annotations::LineWidthNormal;
				//id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
				//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				//secondExtensionLineWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
			}
			else if (int_secondExtensionLineWidth == 2) {
				secondExtensionLineWidth = NXOpen::Annotations::LineWidthThick;
				//id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
				//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				//secondExtensionLineWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
			}
			else if (int_secondExtensionLineWidth == 3) {
				secondExtensionLineWidth = NXOpen::Annotations::LineWidthThin;
				//id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
				//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				//secondExtensionLineWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
			}
			else if (int_secondExtensionLineWidth == 6) {
				secondExtensionLineWidth = NXOpen::Annotations::LineWidthOne;
			}
			else if (int_secondExtensionLineWidth == 7) {
				secondExtensionLineWidth = NXOpen::Annotations::LineWidthTwo;
			}
			else if (int_secondExtensionLineWidth == 8) {
				secondExtensionLineWidth = NXOpen::Annotations::LineWidthThree;
			}
			else if (int_secondExtensionLineWidth == 9) {
				secondExtensionLineWidth = NXOpen::Annotations::LineWidthFour;
			}
			else if (int_secondExtensionLineWidth == 10) {
				secondExtensionLineWidth = NXOpen::Annotations::LineWidthFive;
			}
			else if (int_secondExtensionLineWidth == 11) {
				secondExtensionLineWidth = NXOpen::Annotations::LineWidthSix;
			}
			else if (int_secondExtensionLineWidth == 12) {
				secondExtensionLineWidth = NXOpen::Annotations::LineWidthSeven;
			}
			else if (int_secondExtensionLineWidth == 13) {
				secondExtensionLineWidth = NXOpen::Annotations::LineWidthEight;
			}
			else if (int_secondExtensionLineWidth == 14) {
				secondExtensionLineWidth = NXOpen::Annotations::LineWidthNine;
			}
			secondExtensionLineCfw.Color = secondExtensionLineColorIndex;
			secondExtensionLineCfw.Font = secondExtensionLineFont;
			secondExtensionLineCfw.Width = secondExtensionLineWidth;
			lineAndArrowPreferences->SetSecondExtensionLineCfw(secondExtensionLineCfw);

			if (_nx_dpv->usedUnitValue.compare("1") == 0) {
				id_name.assign("Drafting_arrowHead2Color_MU");
			}
			else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
				id_name.assign("Drafting_arrowHead2Color_EU");
			}
			it = _nx_dpv->soll_dpv_map.find(id_name);
			int secondArrowheadColorIndex;
			secondArrowheadColorIndex = convert_to_int(it->second);
			id_name.assign("Drafting_arrowHead2Font");
			it = _nx_dpv->soll_dpv_map.find(id_name);
			int int_secondArrowHeadFont;
			int_secondArrowHeadFont = convert_to_int(it->second);
			NXOpen::DisplayableObject::ObjectFont secondArrowHeadFont;
			if (int_secondArrowHeadFont == 1) {
				secondArrowHeadFont = NXOpen::DisplayableObject::ObjectFontSolid;
			}
			else if (int_secondArrowHeadFont == 2) {
				secondArrowHeadFont = NXOpen::DisplayableObject::ObjectFontDashed;
			}
			else if (int_secondArrowHeadFont == 3) {
				secondArrowHeadFont = NXOpen::DisplayableObject::ObjectFontPhantom;
			}
			else if (int_secondArrowHeadFont == 4) {
				secondArrowHeadFont = NXOpen::DisplayableObject::ObjectFontCenterline;
			}
			else if (int_secondArrowHeadFont == 5) {
				secondArrowHeadFont = NXOpen::DisplayableObject::ObjectFontDotted;
			}
			else if (int_secondArrowHeadFont == 6) {
				secondArrowHeadFont = NXOpen::DisplayableObject::ObjectFontLongDashed;
			}
			else if (int_secondArrowHeadFont == 7) {
				secondArrowHeadFont = NXOpen::DisplayableObject::ObjectFontDottedDashed;
			}
			id_name.assign("Drafting_arrowHead2Width");
			it = _nx_dpv->soll_dpv_map.find(id_name);
			int int_secondArrowheadWidth;
			int_secondArrowheadWidth = convert_to_int(it->second);
			NXOpen::Annotations::LineWidth secondArrowheadWidth;
			if (int_secondArrowheadWidth == 1) {
				secondArrowheadWidth = NXOpen::Annotations::LineWidthNormal;
				//id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
				//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				//secondArrowheadWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
			}
			else if (int_secondArrowheadWidth == 2) {
				secondArrowheadWidth = NXOpen::Annotations::LineWidthThick;
				//id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
				//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				//secondArrowheadWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
			}
			else if (int_secondArrowheadWidth == 3) {
				secondArrowheadWidth = NXOpen::Annotations::LineWidthThin;
				//id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
				//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				//secondArrowheadWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
			}
			else if (int_secondArrowheadWidth == 6) {
				secondArrowheadWidth = NXOpen::Annotations::LineWidthOne;
			}
			else if (int_secondArrowheadWidth == 7) {
				secondArrowheadWidth = NXOpen::Annotations::LineWidthTwo;
			}
			else if (int_secondArrowheadWidth == 8) {
				secondArrowheadWidth = NXOpen::Annotations::LineWidthThree;
			}
			else if (int_secondArrowheadWidth == 9) {
				secondArrowheadWidth = NXOpen::Annotations::LineWidthFour;
			}
			else if (int_secondArrowheadWidth == 10) {
				secondArrowheadWidth = NXOpen::Annotations::LineWidthFive;
			}
			else if (int_secondArrowheadWidth == 11) {
				secondArrowheadWidth = NXOpen::Annotations::LineWidthSix;
			}
			else if (int_secondArrowheadWidth == 12) {
				secondArrowheadWidth = NXOpen::Annotations::LineWidthSeven;
			}
			else if (int_secondArrowheadWidth == 13) {
				secondArrowheadWidth = NXOpen::Annotations::LineWidthEight;
			}
			else if (int_secondArrowheadWidth == 14) {
				secondArrowheadWidth = NXOpen::Annotations::LineWidthNine;
			}
			secondArrowheadCfw.Color = secondArrowheadColorIndex;
			secondArrowheadCfw.Font = secondArrowHeadFont;
			secondArrowheadCfw.Width = secondArrowheadWidth;
			lineAndArrowPreferences->SetSecondArrowheadCfw(secondArrowheadCfw);

			if (_nx_dpv->usedUnitValue.compare("1") == 0) {
				id_name.assign("Drafting_arrowLine2Color_MU");
			}
			else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
				id_name.assign("Drafting_arrowLine2Color_EU");
			}
			it = _nx_dpv->soll_dpv_map.find(id_name);
			int secondArrowLineColorIndex;
			secondArrowLineColorIndex = convert_to_int(it->second);
			id_name.assign("Drafting_arrowLine2Font");
			it = _nx_dpv->soll_dpv_map.find(id_name);
			int int_secondArrowLineFont;
			int_secondArrowLineFont = convert_to_int(it->second);
			NXOpen::DisplayableObject::ObjectFont secondArrowLineFont;
			if (int_secondArrowLineFont == 1) {
				secondArrowLineFont = NXOpen::DisplayableObject::ObjectFontSolid;
			}
			else if (int_secondArrowLineFont == 2) {
				secondArrowLineFont = NXOpen::DisplayableObject::ObjectFontDashed;
			}
			else if (int_secondArrowLineFont == 3) {
				secondArrowLineFont = NXOpen::DisplayableObject::ObjectFontPhantom;
			}
			else if (int_secondArrowLineFont == 4) {
				secondArrowLineFont = NXOpen::DisplayableObject::ObjectFontCenterline;
			}
			else if (int_secondArrowLineFont == 5) {
				secondArrowLineFont = NXOpen::DisplayableObject::ObjectFontDotted;
			}
			else if (int_secondArrowLineFont == 6) {
				secondArrowLineFont = NXOpen::DisplayableObject::ObjectFontLongDashed;
			}
			else if (int_secondArrowLineFont == 7) {
				secondArrowLineFont = NXOpen::DisplayableObject::ObjectFontDottedDashed;
			}
			id_name.assign("Drafting_arrowLine2Width");
			it = _nx_dpv->soll_dpv_map.find(id_name);
			int int_secondArrowLineWidth;
			int_secondArrowLineWidth = convert_to_int(it->second);
			NXOpen::Annotations::LineWidth secondArrowLineWidth;
			if (int_secondArrowLineWidth == 1) {
				secondArrowLineWidth = NXOpen::Annotations::LineWidthNormal;
				//id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
				//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				//secondArrowLineWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
			}
			else if (int_secondArrowLineWidth == 2) {
				secondArrowLineWidth = NXOpen::Annotations::LineWidthThick;
				//id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
				//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				//secondArrowLineWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
			}
			else if (int_secondArrowLineWidth == 3) {
				secondArrowLineWidth = NXOpen::Annotations::LineWidthThin;
				//id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
				//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				//secondArrowLineWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
			}
			else if (int_secondArrowLineWidth == 6) {
				secondArrowLineWidth = NXOpen::Annotations::LineWidthOne;
			}
			else if (int_secondArrowLineWidth == 7) {
				secondArrowLineWidth = NXOpen::Annotations::LineWidthTwo;
			}
			else if (int_secondArrowLineWidth == 8) {
				secondArrowLineWidth = NXOpen::Annotations::LineWidthThree;
			}
			else if (int_secondArrowLineWidth == 9) {
				secondArrowLineWidth = NXOpen::Annotations::LineWidthFour;
			}
			else if (int_secondArrowLineWidth == 10) {
				secondArrowLineWidth = NXOpen::Annotations::LineWidthFive;
			}
			else if (int_secondArrowLineWidth == 11) {
				secondArrowLineWidth = NXOpen::Annotations::LineWidthSix;
			}
			else if (int_secondArrowLineWidth == 12) {
				secondArrowLineWidth = NXOpen::Annotations::LineWidthSeven;
			}
			else if (int_secondArrowLineWidth == 13) {
				secondArrowLineWidth = NXOpen::Annotations::LineWidthEight;
			}
			else if (int_secondArrowLineWidth == 14) {
				secondArrowLineWidth = NXOpen::Annotations::LineWidthNine;
			}
			secondArrowLineCfw.Color = secondArrowLineColorIndex;
			secondArrowLineCfw.Font = secondArrowLineFont;
			secondArrowLineCfw.Width = secondArrowLineWidth;
			lineAndArrowPreferences->SetSecondArrowLineCfw(secondArrowLineCfw);

			gdtP->SetLetteringPreferences(letteringPreferences);
			gdtP->SetLineAndArrowPreferences(lineAndArrowPreferences);
			gdtP->SetSymbolPreferences(gdtPreferences);

			try {
				editSettingsBuilder->Commit();
			}
			catch (...) {
				nxLog("%s - Inside the GDT annotation \"%s\"(tag=%d) an error occured! \n", routineName.c_str(), gdtP->JournalIdentifier().GetLocaleText(), (int) gdtP->Tag());
			}

			editSettingsBuilder->Destroy();
		}
	}
	catch (...) {
		nxLog("%s - ERROR - STOPP \n", routineName.c_str());
	}
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- STOPP - %s --- \n", routineName.c_str());
}

/*
File - Preferences - Drafting - Annotation - Surface Finish Symbol -> Repair existing target point symbols.
*/
void repair_existing_SurfaceFinishSymbol_styles(en_nx_dpv* _nx_dpv, Session * _theSession, Part* _workPart) {
	routineName.assign("repair_existing_SurfaceFinishSymbol_styles");
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- START - %s --- \n", routineName.c_str());

	NXOpen::Annotations::DraftingSurfaceFinishCollection *theDraftingSurfaceFinishCollection = _workPart->Annotations()->DraftingSurfaceFinishSymbols();

	for (NXOpen::Annotations::DraftingSurfaceFinishCollection::iterator it_SurfaceFinishSymb = theDraftingSurfaceFinishCollection->begin(); it_SurfaceFinishSymb != theDraftingSurfaceFinishCollection->end(); it_SurfaceFinishSymb++) {
		try {
			NXOpen::Annotations::DraftingSurfaceFinish *draftingSurfaceFinish = *it_SurfaceFinishSymb;

			NXOpen::Annotations::SymbolPreferences *symbolPreferences = draftingSurfaceFinish->GetSymbolPreferences();
			NXOpen::Annotations::LineAndArrowPreferences *lineAndArrowPreferences = draftingSurfaceFinish->GetLineAndArrowPreferences();
			NXOpen::Annotations::LetteringPreferences *letteringPreferences = draftingSurfaceFinish->GetLetteringPreferences();

			NXOpen::Annotations::LineCfw dsfCfw = symbolPreferences->GetSurfaceFinishCfw();

			std::vector<NXOpen::DisplayableObject *> objects(1);
			objects[0] = draftingSurfaceFinish;
			NXOpen::Annotations::EditSettingsBuilder *editSettingsBuilder;
			editSettingsBuilder = _workPart->SettingsManager()->CreateAnnotationEditSettingsBuilder(objects);

			std::vector<NXOpen::Drafting::BaseEditSettingsBuilder *> baseEditSettingsBuilder(1);
			baseEditSettingsBuilder[0] = editSettingsBuilder;
			_workPart->SettingsManager()->ProcessForMultipleObjectsSettings(baseEditSettingsBuilder);

			NXOpen::NXColor *color;

			int type;
			int subtype;
			//c:\git\nx\packages\ugnx12\NX\include\uf_object_types.h
			UF_OBJ_ask_type_and_subtype(draftingSurfaceFinish->Tag(), &type, &subtype);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - surfaceFinishSymbol - type = %d \n", routineName.c_str(), type);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - surfaceFinishSymbol - subtype = %d \n", routineName.c_str(), subtype);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - surfaceFinishSymbol - JournalIdentifier = %s \n", routineName.c_str(), draftingSurfaceFinish->JournalIdentifier().GetLocaleText());
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - surfaceFinishSymbol - isRetained = %s \n", routineName.c_str(), (draftingSurfaceFinish->IsRetained() ? "true" : "false"));

			//if (type != UF_smart_model_instance_type && subtype != UF_smart_model_instance_mark_subtype) {
			id_name.assign("Drafting_SFsymbolColor");
			it = _nx_dpv->soll_dpv_map.find(id_name);
			int surfaceFinishColorIndex;
			surfaceFinishColorIndex = convert_to_int(it->second);
			color = _workPart->Colors()->Find(surfaceFinishColorIndex);
			editSettingsBuilder->AnnotationStyle()->SymbolStyle()->SetSurfaceFinishColor(color);
			editSettingsBuilder->AnnotationStyle()->LineArrowStyle()->SetFirstArrowheadColor(color);
			editSettingsBuilder->AnnotationStyle()->LineArrowStyle()->SetSecondArrowheadColor(color);
			editSettingsBuilder->AnnotationStyle()->LineArrowStyle()->SetFirstArrowLineColor(color);
			editSettingsBuilder->AnnotationStyle()->LineArrowStyle()->SetSecondArrowLineColor(color);
			editSettingsBuilder->AnnotationStyle()->LineArrowStyle()->SetFirstExtensionLineColor(color);
			editSettingsBuilder->AnnotationStyle()->LineArrowStyle()->SetSecondExtensionLineColor(color);
			
			if(g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - surfaceFinishSymbol - Drafting_SFsymbolColor done \n", routineName.c_str());
			id_name.assign("Drafting_SFsymbolLineFont");
			it = _nx_dpv->soll_dpv_map.find(id_name);
			int int_surfaceFinishFont;
			int_surfaceFinishFont = convert_to_int(it->second);
			NXOpen::DisplayableObject::ObjectFont surfaceFinishFont;
			if (int_surfaceFinishFont == 1) {
				surfaceFinishFont = NXOpen::DisplayableObject::ObjectFontSolid;
			}
			else if (int_surfaceFinishFont == 2) {
				surfaceFinishFont = NXOpen::DisplayableObject::ObjectFontDashed;
			}
			else if (int_surfaceFinishFont == 3) {
				surfaceFinishFont = NXOpen::DisplayableObject::ObjectFontPhantom;
			}
			else if (int_surfaceFinishFont == 4) {
				surfaceFinishFont = NXOpen::DisplayableObject::ObjectFontCenterline;
			}
			else if (int_surfaceFinishFont == 5) {
				surfaceFinishFont = NXOpen::DisplayableObject::ObjectFontDotted;
			}
			else if (int_surfaceFinishFont == 6) {
				surfaceFinishFont = NXOpen::DisplayableObject::ObjectFontLongDashed;
			}
			else if (int_surfaceFinishFont == 7) {
				surfaceFinishFont = NXOpen::DisplayableObject::ObjectFontDottedDashed;
			}
			editSettingsBuilder->AnnotationStyle()->SymbolStyle()->SetSurfaceFinishFont(surfaceFinishFont);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - surfaceFinishSymbol - Drafting_SFsymbolLineFont done \n", routineName.c_str());
			id_name.assign("Drafting_SFsymbolLineWidth");
			it = _nx_dpv->soll_dpv_map.find(id_name);
			int int_surfaceFinishWidth;
			int_surfaceFinishWidth = convert_to_int(it->second);
			NXOpen::Annotations::LineWidth surfaceFinishWidth;
			//string id_name_tmp;
			//std::map<const std::string, std::string>::iterator it_tmp;
			if (int_surfaceFinishWidth == 1) {
				surfaceFinishWidth = NXOpen::Annotations::LineWidthNormal;
				//id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
				//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				//surfaceFinishWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
			}
			else if (int_surfaceFinishWidth == 2) {
				surfaceFinishWidth = NXOpen::Annotations::LineWidthThick;
				//id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
				//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				//surfaceFinishWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
			}
			else if (int_surfaceFinishWidth == 3) {
				surfaceFinishWidth = NXOpen::Annotations::LineWidthThin;
				//id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
				//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				//surfaceFinishWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
			}
			else if (int_surfaceFinishWidth == 6) {
				surfaceFinishWidth = NXOpen::Annotations::LineWidthOne;
			}
			else if (int_surfaceFinishWidth == 7) {
				surfaceFinishWidth = NXOpen::Annotations::LineWidthTwo;
			}
			else if (int_surfaceFinishWidth == 8) {
				surfaceFinishWidth = NXOpen::Annotations::LineWidthThree;
			}
			else if (int_surfaceFinishWidth == 9) {
				surfaceFinishWidth = NXOpen::Annotations::LineWidthFour;
			}
			else if (int_surfaceFinishWidth == 10) {
				surfaceFinishWidth = NXOpen::Annotations::LineWidthFive;
			}
			else if (int_surfaceFinishWidth == 11) {
				surfaceFinishWidth = NXOpen::Annotations::LineWidthSix;
			}
			else if (int_surfaceFinishWidth == 12) {
				surfaceFinishWidth = NXOpen::Annotations::LineWidthSeven;
			}
			else if (int_surfaceFinishWidth == 13) {
				surfaceFinishWidth = NXOpen::Annotations::LineWidthEight;
			}
			else if (int_surfaceFinishWidth == 14) {
				surfaceFinishWidth = NXOpen::Annotations::LineWidthNine;
			}
			editSettingsBuilder->AnnotationStyle()->SymbolStyle()->SetSurfaceFinishWidth(surfaceFinishWidth);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - surfaceFinishSymbol - Drafting_SFsymbolLineWidth done \n", routineName.c_str());
			dsfCfw.Color = surfaceFinishColorIndex;
			dsfCfw.Font = surfaceFinishFont;
			dsfCfw.Width = surfaceFinishWidth;
			symbolPreferences->SetSurfaceFinishCfw(dsfCfw);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - dsfCfw - done! \n", routineName.c_str());

			Annotations::Lettering idSymLetteringGeneralText = letteringPreferences->GetGeneralText();

			if (_nx_dpv->usedUnitValue.compare("1") == 0) {
				id_name.assign("Drafting_draftTextCharSize_MU");
			}
			else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
				id_name.assign("Drafting_draftTextCharSize_EU");
			}
			it = _nx_dpv->soll_dpv_map.find(id_name);
			double generalTextSize = 0.0;
			generalTextSize = convert_to_double(it->second);
			editSettingsBuilder->AnnotationStyle()->LetteringStyle()->SetGeneralTextSize(generalTextSize);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - surfaceFinishSymbol - Drafting_draftTextCharSize_MU done \n", routineName.c_str());
			id_name.assign("Drafting_draftTextColor");
			it = _nx_dpv->soll_dpv_map.find(id_name);
			int generalTextColorIndex;
			generalTextColorIndex = convert_to_int(it->second);
			color = _workPart->Colors()->Find(generalTextColorIndex);
			editSettingsBuilder->AnnotationStyle()->LetteringStyle()->SetGeneralTextColor(color);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - surfaceFinishSymbol - Drafting_draftTextColor done \n", routineName.c_str());
			id_name.assign("Drafting_draftTextFont");
			it = _nx_dpv->soll_dpv_map.find(id_name);
			NXString generalTextFontName;
			generalTextFontName = (NXString)it->second.c_str();
			int generalTextFontIndex;
			generalTextFontIndex = _workPart->Fonts()->AddFont(generalTextFontName);
			editSettingsBuilder->AnnotationStyle()->LetteringStyle()->SetGeneralTextFont(generalTextFontIndex);
			
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - surfaceFinishSymbol - Drafting_draftTextFont done \n", routineName.c_str());
			id_name.assign("Drafting_draftTextWidth");
			it = _nx_dpv->soll_dpv_map.find(id_name);
			int int_generalTextLineWidth;
			int_generalTextLineWidth = convert_to_int(it->second);
			NXOpen::Annotations::LineWidth generalTextLineWidth;
			if (int_generalTextLineWidth == 1) {
				generalTextLineWidth = NXOpen::Annotations::LineWidthNormal;
				//id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
				//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				//generalTextLineWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
			}
			else if (int_generalTextLineWidth == 2) {
				generalTextLineWidth = NXOpen::Annotations::LineWidthThick;
				//id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
				//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				//generalTextLineWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
			}
			else if (int_generalTextLineWidth == 3) {
				generalTextLineWidth = NXOpen::Annotations::LineWidthThin;
				//id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
				//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				//generalTextLineWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
			}
			else if (int_generalTextLineWidth == 6) {
				generalTextLineWidth = NXOpen::Annotations::LineWidthOne;
			}
			else if (int_generalTextLineWidth == 7) {
				generalTextLineWidth = NXOpen::Annotations::LineWidthTwo;
			}
			else if (int_generalTextLineWidth == 8) {
				generalTextLineWidth = NXOpen::Annotations::LineWidthThree;
			}
			else if (int_generalTextLineWidth == 9) {
				generalTextLineWidth = NXOpen::Annotations::LineWidthFour;
			}
			else if (int_generalTextLineWidth == 10) {
				generalTextLineWidth = NXOpen::Annotations::LineWidthFive;
			}
			else if (int_generalTextLineWidth == 11) {
				generalTextLineWidth = NXOpen::Annotations::LineWidthSix;
			}
			else if (int_generalTextLineWidth == 12) {
				generalTextLineWidth = NXOpen::Annotations::LineWidthSeven;
			}
			else if (int_generalTextLineWidth == 13) {
				generalTextLineWidth = NXOpen::Annotations::LineWidthEight;
			}
			else if (int_generalTextLineWidth == 14) {
				generalTextLineWidth = NXOpen::Annotations::LineWidthNine;
			}
			idSymLetteringGeneralText.Size = generalTextSize;
			idSymLetteringGeneralText.Cfw.Color = generalTextColorIndex;
			idSymLetteringGeneralText.Cfw.Font = (DisplayableObject::ObjectFont) generalTextFontIndex;
			idSymLetteringGeneralText.Cfw.Width = generalTextLineWidth;
			letteringPreferences->SetGeneralText(idSymLetteringGeneralText);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - surfaceFinishSymbol - idSymLetteringGeneralText done \n", routineName.c_str());
			//editSettingsBuilder->AnnotationStyle()->LetteringStyle()->SetGeneralTextLineWidth(generalTextLineWidth);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - surfaceFinishSymbol - Drafting_draftTextWidth done \n", routineName.c_str());

			if (_nx_dpv->usedUnitValue.compare("1") == 0) {
				id_name.assign("Drafting_arrowSize_MU");
			}
			else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
				id_name.assign("Drafting_arrowSize_EU");
			}
			it = _nx_dpv->soll_dpv_map.find(id_name);
			double arrowheadLength;
			arrowheadLength = convert_to_double(it->second);
			lineAndArrowPreferences->SetArrowheadLength(arrowheadLength);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - surfaceFinishSymbol - Drafting_arrowSize_MU done \n", routineName.c_str());
			//id_name.assign("Drafting_includedAngle");
			//it = _nx_dpv->soll_dpv_map.find(id_name);
			//double arrowheadIncludedAngle;
			//arrowheadIncludedAngle = convert_to_double(it->second);
			//lineAndArrowPreferences->SetArrowheadIncludedAngle(arrowheadIncludedAngle);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - Drafting_includedAngle - done! \n", routineName.c_str());

			if (_nx_dpv->usedUnitValue.compare("1") == 0) {
				id_name.assign("Drafting_dotDiameter_MU");
			}
			else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
				id_name.assign("Drafting_dotDiameter_EU");
			}
			it = _nx_dpv->soll_dpv_map.find(id_name);
			double dotArrowheadDiameter;
			dotArrowheadDiameter = convert_to_double(it->second);
			lineAndArrowPreferences->SetDotArrowheadDiameter(dotArrowheadDiameter);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - Drafting_dotDiameter_MU - done! \n", routineName.c_str());

			if (_nx_dpv->usedUnitValue.compare("1") == 0) {
				id_name.assign("Drafting_stubbSize_MU");
			}
			else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
				id_name.assign("Drafting_stubbSize_EU");
			}
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - id_name = %s \n", routineName.c_str(), id_name.c_str());
			it = _nx_dpv->soll_dpv_map.find(id_name);
			double stubLength;
			stubLength = convert_to_double(it->second);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - stubLength = %f \n", routineName.c_str(), stubLength);
			lineAndArrowPreferences->SetStubLength(stubLength);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - Drafting_stubbSize_MU - done! \n", routineName.c_str());

			if (_nx_dpv->usedUnitValue.compare("1") == 0) {
				id_name.assign("Drafting_textLine_MU");
			}
			else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
				id_name.assign("Drafting_textLine_EU");
			}
			it = _nx_dpv->soll_dpv_map.find(id_name);
			double textToLineDistance;
			textToLineDistance = convert_to_double(it->second);
			lineAndArrowPreferences->SetTextToLineDistance(textToLineDistance);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - Drafting_textLine_MU - done! \n", routineName.c_str());

			if (_nx_dpv->usedUnitValue.compare("1") == 0) {
				id_name.assign("Drafting_pointLine1_MU");
			}
			else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
				id_name.assign("Drafting_pointLine1_EU");
			}
			it = _nx_dpv->soll_dpv_map.find(id_name);
			double firstPosToExtensionLineDistance;
			firstPosToExtensionLineDistance = convert_to_double(it->second);
			lineAndArrowPreferences->SetFirstPosToExtLineDist(firstPosToExtensionLineDistance);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - Drafting_pointLine1_MU - done! \n", routineName.c_str());

			if (_nx_dpv->usedUnitValue.compare("1") == 0) {
				id_name.assign("Drafting_pointLine2_MU");
			}
			else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
				id_name.assign("Drafting_pointLine2_EU");
			}
			it = _nx_dpv->soll_dpv_map.find(id_name);
			double secondPosToExtensionLineDistance;
			secondPosToExtensionLineDistance = convert_to_double(it->second);
			lineAndArrowPreferences->SetSecondPosToExtLineDist(secondPosToExtensionLineDistance);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - Drafting_pointLine2_MU - done! \n", routineName.c_str());

			if (_nx_dpv->usedUnitValue.compare("1") == 0) {
				id_name.assign("Drafting_datumExtLine_MU");
			}
			else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
				id_name.assign("Drafting_datumExtLine_EU");
			}
			it = _nx_dpv->soll_dpv_map.find(id_name);
			double datumLengthPastArrow;
			datumLengthPastArrow = convert_to_double(it->second);
			lineAndArrowPreferences->SetDatumLengthPastArrow(datumLengthPastArrow);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - Drafting_datumExtLine_MU - done! \n", routineName.c_str());

			Annotations::LineCfw firstExtensionLineCfw = lineAndArrowPreferences->GetFirstExtensionLineCfw();
			Annotations::LineCfw firstArrowheadCfw = lineAndArrowPreferences->GetFirstArrowheadCfw();
			Annotations::LineCfw firstArrowLineCfw = lineAndArrowPreferences->GetFirstArrowLineCfw();
			Annotations::LineCfw secondExtensionLineCfw = lineAndArrowPreferences->GetSecondExtensionLineCfw();
			Annotations::LineCfw secondArrowheadCfw = lineAndArrowPreferences->GetSecondArrowheadCfw();
			Annotations::LineCfw secondArrowLineCfw = lineAndArrowPreferences->GetSecondArrowLineCfw();

			if (_nx_dpv->usedUnitValue.compare("1") == 0) {
				id_name.assign("Drafting_extensionLine1Color_MU");
			}
			else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
				id_name.assign("Drafting_extensionLine1Color_EU");
			}
			it = _nx_dpv->soll_dpv_map.find(id_name);
			int firstExtensionLineColorIndex;
			firstExtensionLineColorIndex = convert_to_int(it->second);
			id_name.assign("Drafting_extensionLine1Font");
			it = _nx_dpv->soll_dpv_map.find(id_name);
			int int_firstExtensionLineFont;
			int_firstExtensionLineFont = convert_to_int(it->second);
			NXOpen::DisplayableObject::ObjectFont firstExtensionLineFont;
			if (int_firstExtensionLineFont == 1) {
				firstExtensionLineFont = NXOpen::DisplayableObject::ObjectFontSolid;
			}
			else if (int_firstExtensionLineFont == 2) {
				firstExtensionLineFont = NXOpen::DisplayableObject::ObjectFontDashed;
			}
			else if (int_firstExtensionLineFont == 3) {
				firstExtensionLineFont = NXOpen::DisplayableObject::ObjectFontPhantom;
			}
			else if (int_firstExtensionLineFont == 4) {
				firstExtensionLineFont = NXOpen::DisplayableObject::ObjectFontCenterline;
			}
			else if (int_firstExtensionLineFont == 5) {
				firstExtensionLineFont = NXOpen::DisplayableObject::ObjectFontDotted;
			}
			else if (int_firstExtensionLineFont == 6) {
				firstExtensionLineFont = NXOpen::DisplayableObject::ObjectFontLongDashed;
			}
			else if (int_firstExtensionLineFont == 7) {
				firstExtensionLineFont = NXOpen::DisplayableObject::ObjectFontDottedDashed;
			}
			id_name.assign("Drafting_extensionLine1Width");
			it = _nx_dpv->soll_dpv_map.find(id_name);
			int int_firstExtensionLineWidth;
			int_firstExtensionLineWidth = convert_to_int(it->second);
			NXOpen::Annotations::LineWidth firstExtensionLineWidth;
			if (int_firstExtensionLineWidth == 1) {
				firstExtensionLineWidth = NXOpen::Annotations::LineWidthNormal;
				//id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
				//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				//firstExtensionLineWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
			}
			else if (int_firstExtensionLineWidth == 2) {
				firstExtensionLineWidth = NXOpen::Annotations::LineWidthThick;
				//id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
				//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				//firstExtensionLineWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
			}
			else if (int_firstExtensionLineWidth == 3) {
				firstExtensionLineWidth = NXOpen::Annotations::LineWidthThin;
				//id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
				//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				//firstExtensionLineWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
			}
			else if (int_firstExtensionLineWidth == 6) {
				firstExtensionLineWidth = NXOpen::Annotations::LineWidthOne;
			}
			else if (int_firstExtensionLineWidth == 7) {
				firstExtensionLineWidth = NXOpen::Annotations::LineWidthTwo;
			}
			else if (int_firstExtensionLineWidth == 8) {
				firstExtensionLineWidth = NXOpen::Annotations::LineWidthThree;
			}
			else if (int_firstExtensionLineWidth == 9) {
				firstExtensionLineWidth = NXOpen::Annotations::LineWidthFour;
			}
			else if (int_firstExtensionLineWidth == 10) {
				firstExtensionLineWidth = NXOpen::Annotations::LineWidthFive;
			}
			else if (int_firstExtensionLineWidth == 11) {
				firstExtensionLineWidth = NXOpen::Annotations::LineWidthSix;
			}
			else if (int_firstExtensionLineWidth == 12) {
				firstExtensionLineWidth = NXOpen::Annotations::LineWidthSeven;
			}
			else if (int_firstExtensionLineWidth == 13) {
				firstExtensionLineWidth = NXOpen::Annotations::LineWidthEight;
			}
			else if (int_firstExtensionLineWidth == 14) {
				firstExtensionLineWidth = NXOpen::Annotations::LineWidthNine;
			}
			firstExtensionLineCfw.Color = firstExtensionLineColorIndex;
			firstExtensionLineCfw.Font = firstExtensionLineFont;
			firstExtensionLineCfw.Width = firstExtensionLineWidth;
			lineAndArrowPreferences->SetFirstExtensionLineCfw(firstExtensionLineCfw);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - firstExtensionLineCfw - done! \n", routineName.c_str());

			if (_nx_dpv->usedUnitValue.compare("1") == 0) {
				id_name.assign("Drafting_arrowHead1Color_MU");
			}
			else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
				id_name.assign("Drafting_arrowHead1Color_EU");
			}
			it = _nx_dpv->soll_dpv_map.find(id_name);
			int firstArrowheadColorIndex;
			firstArrowheadColorIndex = convert_to_int(it->second);
			id_name.assign("Drafting_arrowHead1Font");
			it = _nx_dpv->soll_dpv_map.find(id_name);
			int_firstExtensionLineFont = convert_to_int(it->second);
			if (int_firstExtensionLineFont == 1) {
				firstExtensionLineFont = NXOpen::DisplayableObject::ObjectFontSolid;
			}
			else if (int_firstExtensionLineFont == 2) {
				firstExtensionLineFont = NXOpen::DisplayableObject::ObjectFontDashed;
			}
			else if (int_firstExtensionLineFont == 3) {
				firstExtensionLineFont = NXOpen::DisplayableObject::ObjectFontPhantom;
			}
			else if (int_firstExtensionLineFont == 4) {
				firstExtensionLineFont = NXOpen::DisplayableObject::ObjectFontCenterline;
			}
			else if (int_firstExtensionLineFont == 5) {
				firstExtensionLineFont = NXOpen::DisplayableObject::ObjectFontDotted;
			}
			else if (int_firstExtensionLineFont == 6) {
				firstExtensionLineFont = NXOpen::DisplayableObject::ObjectFontLongDashed;
			}
			else if (int_firstExtensionLineFont == 7) {
				firstExtensionLineFont = NXOpen::DisplayableObject::ObjectFontDottedDashed;
			}
			id_name.assign("Drafting_arrowHead1Width");
			it = _nx_dpv->soll_dpv_map.find(id_name);
			int int_firstArrowheadWidth;
			int_firstArrowheadWidth = convert_to_int(it->second);
			NXOpen::Annotations::LineWidth firstArrowheadWidth;
			if (int_firstArrowheadWidth == 1) {
				firstArrowheadWidth = NXOpen::Annotations::LineWidthNormal;
				//id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
				//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				//firstArrowheadWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
			}
			else if (int_firstArrowheadWidth == 2) {
				firstArrowheadWidth = NXOpen::Annotations::LineWidthThick;
				//id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
				//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				//firstArrowheadWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
			}
			else if (int_firstArrowheadWidth == 3) {
				firstArrowheadWidth = NXOpen::Annotations::LineWidthThin;
				//id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
				//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				//firstArrowheadWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
			}
			else if (int_firstArrowheadWidth == 6) {
				firstArrowheadWidth = NXOpen::Annotations::LineWidthOne;
			}
			else if (int_firstArrowheadWidth == 7) {
				firstArrowheadWidth = NXOpen::Annotations::LineWidthTwo;
			}
			else if (int_firstArrowheadWidth == 8) {
				firstArrowheadWidth = NXOpen::Annotations::LineWidthThree;
			}
			else if (int_firstArrowheadWidth == 9) {
				firstArrowheadWidth = NXOpen::Annotations::LineWidthFour;
			}
			else if (int_firstArrowheadWidth == 10) {
				firstArrowheadWidth = NXOpen::Annotations::LineWidthFive;
			}
			else if (int_firstArrowheadWidth == 11) {
				firstArrowheadWidth = NXOpen::Annotations::LineWidthSix;
			}
			else if (int_firstArrowheadWidth == 12) {
				firstArrowheadWidth = NXOpen::Annotations::LineWidthSeven;
			}
			else if (int_firstArrowheadWidth == 13) {
				firstArrowheadWidth = NXOpen::Annotations::LineWidthEight;
			}
			else if (int_firstArrowheadWidth == 14) {
				firstArrowheadWidth = NXOpen::Annotations::LineWidthNine;
			}
			firstArrowheadCfw.Color = firstArrowheadColorIndex;
			firstArrowheadCfw.Font = firstExtensionLineFont;
			firstArrowheadCfw.Width = firstArrowheadWidth;
			lineAndArrowPreferences->SetFirstArrowheadCfw(firstArrowheadCfw);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - firstArrowheadCfw - done! \n", routineName.c_str());

			if (_nx_dpv->usedUnitValue.compare("1") == 0) {
				id_name.assign("Drafting_arrowLine1Color_MU");
			}
			else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
				id_name.assign("Drafting_arrowLine1Color_EU");
			}
			it = _nx_dpv->soll_dpv_map.find(id_name);
			int firstArrowLineColorIndex;
			firstArrowLineColorIndex = convert_to_int(it->second);
			id_name.assign("Drafting_arrowLine1Font");
			it = _nx_dpv->soll_dpv_map.find(id_name);
			int int_firstArrowLineFont;
			int_firstArrowLineFont = convert_to_int(it->second);
			NXOpen::DisplayableObject::ObjectFont firstArrowLineFont;
			if (int_firstArrowLineFont == 1) {
				firstArrowLineFont = NXOpen::DisplayableObject::ObjectFontSolid;
			}
			else if (int_firstArrowLineFont == 2) {
				firstArrowLineFont = NXOpen::DisplayableObject::ObjectFontDashed;
			}
			else if (int_firstArrowLineFont == 3) {
				firstArrowLineFont = NXOpen::DisplayableObject::ObjectFontPhantom;
			}
			else if (int_firstArrowLineFont == 4) {
				firstArrowLineFont = NXOpen::DisplayableObject::ObjectFontCenterline;
			}
			else if (int_firstArrowLineFont == 5) {
				firstArrowLineFont = NXOpen::DisplayableObject::ObjectFontDotted;
			}
			else if (int_firstArrowLineFont == 6) {
				firstArrowLineFont = NXOpen::DisplayableObject::ObjectFontLongDashed;
			}
			else if (int_firstArrowLineFont == 7) {
				firstArrowLineFont = NXOpen::DisplayableObject::ObjectFontDottedDashed;
			}
			id_name.assign("Drafting_arrowLine1Width");
			it = _nx_dpv->soll_dpv_map.find(id_name);
			int int_firstArrowLineWidth;
			int_firstArrowLineWidth = convert_to_int(it->second);
			NXOpen::Annotations::LineWidth firstArrowLineWidth;
			if (int_firstArrowLineWidth == 1) {
				firstArrowLineWidth = NXOpen::Annotations::LineWidthNormal;
				//id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
				//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				//firstArrowLineWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
			}
			else if (int_firstArrowLineWidth == 2) {
				firstArrowLineWidth = NXOpen::Annotations::LineWidthThick;
				//id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
				//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				//firstArrowLineWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
			}
			else if (int_firstArrowLineWidth == 3) {
				firstArrowLineWidth = NXOpen::Annotations::LineWidthThin;
				//id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
				//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				//firstArrowLineWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
			}
			else if (int_firstArrowLineWidth == 6) {
				firstArrowLineWidth = NXOpen::Annotations::LineWidthOne;
			}
			else if (int_firstArrowLineWidth == 7) {
				firstArrowLineWidth = NXOpen::Annotations::LineWidthTwo;
			}
			else if (int_firstArrowLineWidth == 8) {
				firstArrowLineWidth = NXOpen::Annotations::LineWidthThree;
			}
			else if (int_firstArrowLineWidth == 9) {
				firstArrowLineWidth = NXOpen::Annotations::LineWidthFour;
			}
			else if (int_firstArrowLineWidth == 10) {
				firstArrowLineWidth = NXOpen::Annotations::LineWidthFive;
			}
			else if (int_firstArrowLineWidth == 11) {
				firstArrowLineWidth = NXOpen::Annotations::LineWidthSix;
			}
			else if (int_firstArrowLineWidth == 12) {
				firstArrowLineWidth = NXOpen::Annotations::LineWidthSeven;
			}
			else if (int_firstArrowLineWidth == 13) {
				firstArrowLineWidth = NXOpen::Annotations::LineWidthEight;
			}
			else if (int_firstArrowLineWidth == 14) {
				firstArrowLineWidth = NXOpen::Annotations::LineWidthNine;
			}
			firstArrowLineCfw.Color = firstArrowLineColorIndex;
			firstArrowLineCfw.Font = firstArrowLineFont;
			firstArrowLineCfw.Width = firstArrowLineWidth;
			lineAndArrowPreferences->SetFirstArrowLineCfw(firstArrowLineCfw);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - firstArrowLineCfw - done! \n", routineName.c_str());

			if (_nx_dpv->usedUnitValue.compare("1") == 0) {
				id_name.assign("Drafting_extensionLine2Color_MU");
			}
			else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
				id_name.assign("Drafting_extensionLine2Color_EU");
			}
			it = _nx_dpv->soll_dpv_map.find(id_name);
			int secondExtensionLineColorIndex;
			secondExtensionLineColorIndex = convert_to_int(it->second);
			id_name.assign("Drafting_extensionLine2Font");
			it = _nx_dpv->soll_dpv_map.find(id_name);
			int int_secondExtensionLineFont;
			int_secondExtensionLineFont = convert_to_int(it->second);
			NXOpen::DisplayableObject::ObjectFont secondExtensionLineFont;
			if (int_secondExtensionLineFont == 1) {
				secondExtensionLineFont = NXOpen::DisplayableObject::ObjectFontSolid;
			}
			else if (int_secondExtensionLineFont == 2) {
				secondExtensionLineFont = NXOpen::DisplayableObject::ObjectFontDashed;
			}
			else if (int_secondExtensionLineFont == 3) {
				secondExtensionLineFont = NXOpen::DisplayableObject::ObjectFontPhantom;
			}
			else if (int_secondExtensionLineFont == 4) {
				secondExtensionLineFont = NXOpen::DisplayableObject::ObjectFontCenterline;
			}
			else if (int_secondExtensionLineFont == 5) {
				secondExtensionLineFont = NXOpen::DisplayableObject::ObjectFontDotted;
			}
			else if (int_secondExtensionLineFont == 6) {
				secondExtensionLineFont = NXOpen::DisplayableObject::ObjectFontLongDashed;
			}
			else if (int_secondExtensionLineFont == 7) {
				secondExtensionLineFont = NXOpen::DisplayableObject::ObjectFontDottedDashed;
			}
			id_name.assign("Drafting_extensionLine2Width");
			it = _nx_dpv->soll_dpv_map.find(id_name);
			int int_secondExtensionLineWidth;
			int_secondExtensionLineWidth = convert_to_int(it->second);
			NXOpen::Annotations::LineWidth secondExtensionLineWidth;
			if (int_secondExtensionLineWidth == 1) {
				secondExtensionLineWidth = NXOpen::Annotations::LineWidthNormal;
				//id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
				//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				//secondExtensionLineWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
			}
			else if (int_secondExtensionLineWidth == 2) {
				secondExtensionLineWidth = NXOpen::Annotations::LineWidthThick;
				//id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
				//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				//secondExtensionLineWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
			}
			else if (int_secondExtensionLineWidth == 3) {
				secondExtensionLineWidth = NXOpen::Annotations::LineWidthThin;
				//id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
				//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				//secondExtensionLineWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
			}
			else if (int_secondExtensionLineWidth == 6) {
				secondExtensionLineWidth = NXOpen::Annotations::LineWidthOne;
			}
			else if (int_secondExtensionLineWidth == 7) {
				secondExtensionLineWidth = NXOpen::Annotations::LineWidthTwo;
			}
			else if (int_secondExtensionLineWidth == 8) {
				secondExtensionLineWidth = NXOpen::Annotations::LineWidthThree;
			}
			else if (int_secondExtensionLineWidth == 9) {
				secondExtensionLineWidth = NXOpen::Annotations::LineWidthFour;
			}
			else if (int_secondExtensionLineWidth == 10) {
				secondExtensionLineWidth = NXOpen::Annotations::LineWidthFive;
			}
			else if (int_secondExtensionLineWidth == 11) {
				secondExtensionLineWidth = NXOpen::Annotations::LineWidthSix;
			}
			else if (int_secondExtensionLineWidth == 12) {
				secondExtensionLineWidth = NXOpen::Annotations::LineWidthSeven;
			}
			else if (int_secondExtensionLineWidth == 13) {
				secondExtensionLineWidth = NXOpen::Annotations::LineWidthEight;
			}
			else if (int_secondExtensionLineWidth == 14) {
				secondExtensionLineWidth = NXOpen::Annotations::LineWidthNine;
			}
			secondExtensionLineCfw.Color = secondExtensionLineColorIndex;
			secondExtensionLineCfw.Font = secondExtensionLineFont;
			secondExtensionLineCfw.Width = secondExtensionLineWidth;
			lineAndArrowPreferences->SetSecondExtensionLineCfw(secondExtensionLineCfw);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - secondExtensionLineCfw - done! \n", routineName.c_str());

			if (_nx_dpv->usedUnitValue.compare("1") == 0) {
				id_name.assign("Drafting_arrowHead2Color_MU");
			}
			else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
				id_name.assign("Drafting_arrowHead2Color_EU");
			}
			it = _nx_dpv->soll_dpv_map.find(id_name);
			int secondArrowheadColorIndex;
			secondArrowheadColorIndex = convert_to_int(it->second);
			id_name.assign("Drafting_arrowHead2Font");
			it = _nx_dpv->soll_dpv_map.find(id_name);
			int int_secondArrowHeadFont;
			int_secondArrowHeadFont = convert_to_int(it->second);
			NXOpen::DisplayableObject::ObjectFont secondArrowHeadFont;
			if (int_secondArrowHeadFont == 1) {
				secondArrowHeadFont = NXOpen::DisplayableObject::ObjectFontSolid;
			}
			else if (int_secondArrowHeadFont == 2) {
				secondArrowHeadFont = NXOpen::DisplayableObject::ObjectFontDashed;
			}
			else if (int_secondArrowHeadFont == 3) {
				secondArrowHeadFont = NXOpen::DisplayableObject::ObjectFontPhantom;
			}
			else if (int_secondArrowHeadFont == 4) {
				secondArrowHeadFont = NXOpen::DisplayableObject::ObjectFontCenterline;
			}
			else if (int_secondArrowHeadFont == 5) {
				secondArrowHeadFont = NXOpen::DisplayableObject::ObjectFontDotted;
			}
			else if (int_secondArrowHeadFont == 6) {
				secondArrowHeadFont = NXOpen::DisplayableObject::ObjectFontLongDashed;
			}
			else if (int_secondArrowHeadFont == 7) {
				secondArrowHeadFont = NXOpen::DisplayableObject::ObjectFontDottedDashed;
			}
			id_name.assign("Drafting_arrowHead2Width");
			it = _nx_dpv->soll_dpv_map.find(id_name);
			int int_secondArrowheadWidth;
			int_secondArrowheadWidth = convert_to_int(it->second);
			NXOpen::Annotations::LineWidth secondArrowheadWidth;
			if (int_secondArrowheadWidth == 1) {
				secondArrowheadWidth = NXOpen::Annotations::LineWidthNormal;
				//id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
				//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				//secondArrowheadWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
			}
			else if (int_secondArrowheadWidth == 2) {
				secondArrowheadWidth = NXOpen::Annotations::LineWidthThick;
				//id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
				//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				//secondArrowheadWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
			}
			else if (int_secondArrowheadWidth == 3) {
				secondArrowheadWidth = NXOpen::Annotations::LineWidthThin;
				//id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
				//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				//secondArrowheadWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
			}
			else if (int_secondArrowheadWidth == 6) {
				secondArrowheadWidth = NXOpen::Annotations::LineWidthOne;
			}
			else if (int_secondArrowheadWidth == 7) {
				secondArrowheadWidth = NXOpen::Annotations::LineWidthTwo;
			}
			else if (int_secondArrowheadWidth == 8) {
				secondArrowheadWidth = NXOpen::Annotations::LineWidthThree;
			}
			else if (int_secondArrowheadWidth == 9) {
				secondArrowheadWidth = NXOpen::Annotations::LineWidthFour;
			}
			else if (int_secondArrowheadWidth == 10) {
				secondArrowheadWidth = NXOpen::Annotations::LineWidthFive;
			}
			else if (int_secondArrowheadWidth == 11) {
				secondArrowheadWidth = NXOpen::Annotations::LineWidthSix;
			}
			else if (int_secondArrowheadWidth == 12) {
				secondArrowheadWidth = NXOpen::Annotations::LineWidthSeven;
			}
			else if (int_secondArrowheadWidth == 13) {
				secondArrowheadWidth = NXOpen::Annotations::LineWidthEight;
			}
			else if (int_secondArrowheadWidth == 14) {
				secondArrowheadWidth = NXOpen::Annotations::LineWidthNine;
			}
			secondArrowheadCfw.Color = secondArrowheadColorIndex;
			secondArrowheadCfw.Font = secondArrowHeadFont;
			secondArrowheadCfw.Width = secondArrowheadWidth;
			lineAndArrowPreferences->SetSecondArrowheadCfw(secondArrowheadCfw);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - secondArrowheadCfw - done! \n", routineName.c_str());

			if (_nx_dpv->usedUnitValue.compare("1") == 0) {
				id_name.assign("Drafting_arrowLine2Color_MU");
			}
			else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
				id_name.assign("Drafting_arrowLine2Color_EU");
			}
			it = _nx_dpv->soll_dpv_map.find(id_name);
			int secondArrowLineColorIndex;
			secondArrowLineColorIndex = convert_to_int(it->second);
			id_name.assign("Drafting_arrowLine2Font");
			it = _nx_dpv->soll_dpv_map.find(id_name);
			int int_secondArrowLineFont;
			int_secondArrowLineFont = convert_to_int(it->second);
			NXOpen::DisplayableObject::ObjectFont secondArrowLineFont;
			if (int_secondArrowLineFont == 1) {
				secondArrowLineFont = NXOpen::DisplayableObject::ObjectFontSolid;
			}
			else if (int_secondArrowLineFont == 2) {
				secondArrowLineFont = NXOpen::DisplayableObject::ObjectFontDashed;
			}
			else if (int_secondArrowLineFont == 3) {
				secondArrowLineFont = NXOpen::DisplayableObject::ObjectFontPhantom;
			}
			else if (int_secondArrowLineFont == 4) {
				secondArrowLineFont = NXOpen::DisplayableObject::ObjectFontCenterline;
			}
			else if (int_secondArrowLineFont == 5) {
				secondArrowLineFont = NXOpen::DisplayableObject::ObjectFontDotted;
			}
			else if (int_secondArrowLineFont == 6) {
				secondArrowLineFont = NXOpen::DisplayableObject::ObjectFontLongDashed;
			}
			else if (int_secondArrowLineFont == 7) {
				secondArrowLineFont = NXOpen::DisplayableObject::ObjectFontDottedDashed;
			}
			id_name.assign("Drafting_arrowLine2Width");
			it = _nx_dpv->soll_dpv_map.find(id_name);
			int int_secondArrowLineWidth;
			int_secondArrowLineWidth = convert_to_int(it->second);
			NXOpen::Annotations::LineWidth secondArrowLineWidth;
			if (int_secondArrowLineWidth == 1) {
				secondArrowLineWidth = NXOpen::Annotations::LineWidthNormal;
				//id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
				//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				//secondArrowLineWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
			}
			else if (int_secondArrowLineWidth == 2) {
				secondArrowLineWidth = NXOpen::Annotations::LineWidthThick;
				//id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
				//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				//secondArrowLineWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
			}
			else if (int_secondArrowLineWidth == 3) {
				secondArrowLineWidth = NXOpen::Annotations::LineWidthThin;
				//id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
				//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				//secondArrowLineWidth = (NXOpen::Annotations::LineWidth) convert_to_int(it_tmp->second);
			}
			else if (int_secondArrowLineWidth == 6) {
				secondArrowLineWidth = NXOpen::Annotations::LineWidthOne;
			}
			else if (int_secondArrowLineWidth == 7) {
				secondArrowLineWidth = NXOpen::Annotations::LineWidthTwo;
			}
			else if (int_secondArrowLineWidth == 8) {
				secondArrowLineWidth = NXOpen::Annotations::LineWidthThree;
			}
			else if (int_secondArrowLineWidth == 9) {
				secondArrowLineWidth = NXOpen::Annotations::LineWidthFour;
			}
			else if (int_secondArrowLineWidth == 10) {
				secondArrowLineWidth = NXOpen::Annotations::LineWidthFive;
			}
			else if (int_secondArrowLineWidth == 11) {
				secondArrowLineWidth = NXOpen::Annotations::LineWidthSix;
			}
			else if (int_secondArrowLineWidth == 12) {
				secondArrowLineWidth = NXOpen::Annotations::LineWidthSeven;
			}
			else if (int_secondArrowLineWidth == 13) {
				secondArrowLineWidth = NXOpen::Annotations::LineWidthEight;
			}
			else if (int_secondArrowLineWidth == 14) {
				secondArrowLineWidth = NXOpen::Annotations::LineWidthNine;
			}
			secondArrowLineCfw.Color = secondArrowLineColorIndex;
			secondArrowLineCfw.Font = secondArrowLineFont;
			secondArrowLineCfw.Width = secondArrowLineWidth;
			lineAndArrowPreferences->SetSecondArrowLineCfw(secondArrowLineCfw);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - secondArrowLineCfw - done! \n", routineName.c_str());

			draftingSurfaceFinish->SetLetteringPreferences(letteringPreferences);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - SetLetteringPreferences - done! \n", routineName.c_str());
			draftingSurfaceFinish->SetLineAndArrowPreferences(lineAndArrowPreferences);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - SetLineAndArrowPreferences - done! \n", routineName.c_str());
			draftingSurfaceFinish->SetSymbolPreferences(symbolPreferences);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - SetSymbolPreferences - done! \n", routineName.c_str());

			try {
				editSettingsBuilder->Commit();
			}
			catch (...) {
				nxLog("%s - Inside the Surface Finish Symbol \"%s\"(tag=%d) an error occured! \n", routineName.c_str(), draftingSurfaceFinish->JournalIdentifier().GetLocaleText(), (int) draftingSurfaceFinish->Tag());
			}
			
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - editSettingsBuilder->Commit() - done! \n", routineName.c_str());
			editSettingsBuilder->Destroy();
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - editSettingsBuilder->Destroy() - done! \n", routineName.c_str());
			//}
		}
		catch (...) {
			nxLog("%s - ERROR - STOPP \n", routineName.c_str());
		}
	}
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- STOPP - %s --- \n", routineName.c_str());
}


/*
File - Preferences - Drafting - View - Section Line -> Repair existing section lines.
*/
void repair_existing_sectionLine_styles(en_nx_dpv* _nx_dpv, Session * _theSession, Part* _workPart) {
	routineName.assign("repair_existing_sectionLine_styles");
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- START - %s --- \n", routineName.c_str());

	try {
		NXOpen::Drawings::SectionLineCollection *theSectionLineCollection = _workPart->Drafting()->SectionLines();

		for (NXOpen::Drawings::SectionLineCollection::iterator it_sectionLine = theSectionLineCollection->begin(); it_sectionLine != theSectionLineCollection->end(); it_sectionLine++) {
			NXOpen::Drawings::SectionLine *sectionLine = (*it_sectionLine);
			std::vector<NXOpen::Drawings::SectionLine *> sectionlines(1);
			NXOpen::Drawings::SteppedSectionLine *steppedSectionLine(dynamic_cast<NXOpen::Drawings::SteppedSectionLine *>(sectionLine));
			sectionlines[0] = steppedSectionLine;
			NXOpen::Drawings::EditSectionLineSettingsBuilder *editSectionLineSettingsBuilder;
			editSectionLineSettingsBuilder = _workPart->SettingsManager()->CreateDrawingEditSectionLineSettingsBuilder(sectionlines);

			sectionLine->SetLayer(100);

			id_name.assign("Axs_arrowheadType");
			it = _nx_dpv->soll_dpv_map.find(id_name);
			int int_style;
			NXOpen::Drawings::ViewSectionLineBuilder::StyleType style;
			int_style = convert_to_int(it->second);
			if (int_style == 2) {
				style = NXOpen::Drawings::ViewSectionLineBuilder::StyleTypeOpen;
			}
			else if (int_style == 1) {
				style = NXOpen::Drawings::ViewSectionLineBuilder::StyleTypeClosed;
			}
			else if (int_style == 0) {
				style = NXOpen::Drawings::ViewSectionLineBuilder::StyleTypeFilled;
			}
			editSectionLineSettingsBuilder->ViewSectionLine()->SetStyle(style);

			id_name.assign("Axs_sxlFont");
			it = _nx_dpv->soll_dpv_map.find(id_name);
			int int_lineFont;
			int_lineFont = convert_to_int(it->second);
			sectionLine->SetLineFont((NXOpen::DisplayableObject::ObjectFont) int_lineFont);

			id_name.assign("Axs_sxlWidth");
			it = _nx_dpv->soll_dpv_map.find(id_name);
			int int_lineColorFontWidth;
			int_lineColorFontWidth = convert_to_int(it->second);
			NXOpen::DisplayableObject::ObjectWidth lineColorFontWidth;
			if (int_lineColorFontWidth == 0) {
				lineColorFontWidth = NXOpen::DisplayableObject::ObjectWidthNormal;
			}
			else if (int_lineColorFontWidth == 1) {
				lineColorFontWidth = NXOpen::DisplayableObject::ObjectWidthThick;
			}
			else if (int_lineColorFontWidth == 2) {
				lineColorFontWidth = NXOpen::DisplayableObject::ObjectWidthThin;
			}
			else if (int_lineColorFontWidth == 5) {
				lineColorFontWidth = NXOpen::DisplayableObject::ObjectWidthOne;
			}
			else if (int_lineColorFontWidth == 6) {
				lineColorFontWidth = NXOpen::DisplayableObject::ObjectWidthTwo;
			}
			else if (int_lineColorFontWidth == 7) {
				lineColorFontWidth = NXOpen::DisplayableObject::ObjectWidthThree;
			}
			else if (int_lineColorFontWidth == 8) {
				lineColorFontWidth = NXOpen::DisplayableObject::ObjectWidthFour;
			}
			else if (int_lineColorFontWidth == 9) {
				lineColorFontWidth = NXOpen::DisplayableObject::ObjectWidthFive;
			}
			else if (int_lineColorFontWidth == 10) {
				lineColorFontWidth = NXOpen::DisplayableObject::ObjectWidthSix;
			}
			else if (int_lineColorFontWidth == 11) {
				lineColorFontWidth = NXOpen::DisplayableObject::ObjectWidthSeven;
			}
			else if (int_lineColorFontWidth == 12) {
				lineColorFontWidth = NXOpen::DisplayableObject::ObjectWidthEight;
			}
			else if (int_lineColorFontWidth == 13) {
				lineColorFontWidth = NXOpen::DisplayableObject::ObjectWidthNine;
			}
			sectionLine->SetLineWidth(lineColorFontWidth);

			if (_nx_dpv->usedUnitValue.compare("1") == 0) {
				id_name.assign("Axs_sxlColor_MU");
			}
			else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
				id_name.assign("Axs_sxlColor_EU");
			}
			it = _nx_dpv->soll_dpv_map.find(id_name);
			int lineColorIndex;
			lineColorIndex = convert_to_int(it->second);
			sectionLine->SetColor(lineColorIndex);

			try {
				editSectionLineSettingsBuilder->Commit();
			}
			catch (...) {
				nxLog("%s - Inside the View Section Line \"%s\"(tag=%d) an error occured! \n", routineName.c_str(), sectionLine->JournalIdentifier().GetLocaleText(), (int) sectionLine->Tag());
			}
			
			editSectionLineSettingsBuilder->Destroy();
		}
	}
	catch (...) {
		nxLog("%s - ERROR - STOPP \n", routineName.c_str());
	}
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- STOPP - %s --- \n", routineName.c_str());
}

/*
File - Preferences - Drafting - Annotation - Crosshatch / Area Fill->Repair existing section lines.
*/
void repair_existing_hatch_styles(en_nx_dpv* _nx_dpv, Session * _theSession, Part* _workPart) {
	routineName.assign("repair_existing_hatch_styles");
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- START - %s --- \n", routineName.c_str());

	try {
		NXOpen::Annotations::HatchCollection *myHatchCollection = _workPart->Annotations()->Hatches();
		NXOpen::Annotations::Hatch *myhatch;
		//NXOpen::Annotations::HatchBuilder *myhatchBuilder;
		//NXOpen::Annotations::HatchFillSettingsBuilder *hatchFillSettingsBuilder;

		short int z = 0;

		string drafting_hatching = get_env_dir("UGII_UTIL") + "\\xhatch.chx";
		//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - drafting_hatching = %s \n", routineName.c_str(), drafting_hatching.c_str());

		if (_nx_dpv->usedUnitValue.compare("1") == 0) {
			id_name.assign("Drafting_crosshatchSpacing_MU");
		}
		else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
			id_name.assign("Drafting_crosshatchSpacing_EU");
		}
		it = _nx_dpv->soll_dpv_map.find(id_name);
		double myhatchdistance;
		myhatchdistance = convert_to_double(it->second);
		//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - myhatchdistance = %f \n", routineName.c_str(), myhatchdistance);

		id_name.assign("Drafting_crosshatchAngle");
		it = _nx_dpv->soll_dpv_map.find(id_name);
		double crosshatchAngle;
		crosshatchAngle = convert_to_double(it->second);
		//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - crosshatchAngle = %f \n", routineName.c_str(), crosshatchAngle);

		if (_nx_dpv->usedUnitValue.compare("1") == 0) {
			id_name.assign("Drafting_crosshatchColor_MU");
		}
		else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
			id_name.assign("Drafting_crosshatchColor_EU");
		}
		it = _nx_dpv->soll_dpv_map.find(id_name);
		int crosshatchColorIndex;
		crosshatchColorIndex = convert_to_int(it->second);
		//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - crosshatchColorIndex = %d \n", routineName.c_str(), crosshatchColorIndex);
		NXOpen::NXColor * myhatchcolor;
		myhatchcolor = _workPart->Colors()->Find(crosshatchColorIndex);

		NXOpen::Annotations::HatchCollection *theHatchCollection = _workPart->Annotations()->Hatches();
		tag_t hatch_tag;
		int mpi_array[100];
		double mpr_array[70];
		char radius[7], diam[7];

		for (NXOpen::Annotations::HatchCollection::iterator it_hatch = theHatchCollection->begin(); it_hatch != theHatchCollection->end(); it_hatch++) {
			myhatch = (*it_hatch);
			hatch_tag = (*it_hatch)->Tag();

			UF_DRF_hatch_fill_preferences_t hatch_fill_preferences;

			UF_DRF_ask_hatch_fill_preferences(&hatch_fill_preferences);

			hatch_fill_preferences.color = crosshatchColorIndex;
			hatch_fill_preferences.hatch_angle = crosshatchAngle;
			hatch_fill_preferences.hatch_distance = myhatchdistance;

			if (UF_DRF_INVALID_CROSSHATCH_FILE_FORMAT != UF_DRF_set_hatch_fill_preferences(&hatch_fill_preferences)) {
				UF_DRF_ask_object_preferences(hatch_tag, mpi_array, mpr_array, radius, diam);

				mpi_array[67] = crosshatchColorIndex;  // COLOR
				mpi_array[68] = 3;    // DENSITY
				mpr_array[12] = myhatchdistance;

				UF_DRF_set_object_preferences(hatch_tag, mpi_array, mpr_array, radius, diam);

				z++;

				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ------------------------------------ : i = %d \n", routineName.c_str(), z);
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - CROSSHATCHING TAG                    : %d \n", routineName.c_str(), hatch_tag);
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - CROSSHATCHING Journal ID             : %s \n", routineName.c_str(), myhatch->JournalIdentifier().GetLocaleText());
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - CROSSHATCHING COLOR-HANDLE           : %d \n", routineName.c_str(), myhatchcolor->Handle());
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - CROSSHATCHING DISTANCE               : %f \n", routineName.c_str(), myhatchdistance);
			}

		}

		/*
		z = 0;
		for (NXOpen::Annotations::HatchCollection::iterator it_hatches = myHatchCollection->begin(); it_hatches != myHatchCollection->end(); it_hatches++) {
		myhatch = (*it_hatches);
		myhatchBuilder = _workPart->Annotations()->Hatches()->CreateHatchBuilder(myhatch);
		myhatchBuilder->SetAnnotationType(NXOpen::Annotations::HatchBuilder::AnnotationTypesCrosshatch);
		//myhatchBuilder->SetAnnotationType(NXOpen::Annotations::HatchBuilder::AnnotationTypesAreaFill);
		myhatchBuilder->SetCrosshatchFile(drafting_hatching.c_str());
		myhatchBuilder->SetColor(myhatchcolor);
		myhatchBuilder->SetDistance(myhatchdistance);
		myhatchBuilder->SetAngle(crosshatchAngle);
		myhatchBuilder->HatchFillSettings()->SetApplyToAllFromSameComp(true);

		if (myhatchBuilder->Validate()) {
		myhatchBuilder->Commit();
		myhatch->RedisplayObject();
		//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - nb of commited objects = %d \n", routineName.c_str(), objects.size());
		//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - nb of commited object tag is = %d \n", routineName.c_str(), objects[0]->Tag());
		//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - nb of commited object name is = %s \n", routineName.c_str(), objects[0]->JournalIdentifier().GetLocaleText());
		}
		else {
		nxLog("%s - ERROR to commit the crosshatch (tag=%d) \n", routineName.c_str(), (int)myhatchBuilder->Tag());
		}

		z++;
		//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - ------------------------------------ : i = %d \n", routineName.c_str(), z);
		//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - CROSSHATCHING TAG                    : %d \n", routineName.c_str(), (int)myhatch->Tag());
		//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - used hatch Pattern                   : %s \n", routineName.c_str(), myhatchBuilder->Pattern().GetLocaleText());
		//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - CROSSHATCHING Journal ID             : %s \n", routineName.c_str(), myhatch->JournalIdentifier().GetLocaleText());
		//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - CROSSHATCHING COLOR-HANDLE           : %d \n", routineName.c_str(), myhatchcolor->Handle());
		//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - CROSSHATCHING DISTANCE               : %f \n", routineName.c_str(), myhatchdistance);

		myhatchBuilder->Destroy();
		_workPart->Views()->UpdateDisplay();
		}
		*/
	}
	catch (...) {
		nxLog("%s - ERROR - STOPP \n", routineName.c_str());
	}

	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- STOPP - %s --- \n", routineName.c_str());
}


/*
File - Preferences - Drafting - View -> Repair existing views.
*/
void repair_existing_view_styles(en_nx_dpv* _nx_dpv, Session * _theSession, Part* _workPart) {
	routineName.assign("repair_existing_view_styles");
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- START - %s --- \n", routineName.c_str());

	try {
		int z = 0;

		std::vector<NXOpen::Layer::StateInfo> stateInfo(256);
		
		//for (int k = 0; k < 256; k++) {
		//	stateInfo[k] = NXOpen::Layer::StateInfo(k + 1, NXOpen::Layer::StateHidden);
		//}
		//
		//z = 0;
		//stateInfo[z] = NXOpen::Layer::StateInfo(z + 1, NXOpen::Layer::StateSelectable);
		//
		////z = 20;
		////stateInfo[z] = NXOpen::Layer::StateInfo(z + 1, NXOpen::Layer::StateSelectable);
		//
		//z = 99;
		//stateInfo[z] = NXOpen::Layer::StateInfo(z + 1, NXOpen::Layer::StateWorkLayer);
		//
		//for (int k = 100; k < 104; k++) {
		//	stateInfo[k] = NXOpen::Layer::StateInfo(k + 1, NXOpen::Layer::StateSelectable);
		//}
		//
		//z = 101;
		//stateInfo[z] = NXOpen::Layer::StateInfo(z + 1, NXOpen::Layer::StateHidden);
		//
		//for (int k = 154; k < 161; k++) {
		//	stateInfo[k] = NXOpen::Layer::StateInfo(k + 1, NXOpen::Layer::StateSelectable);
		//}
		//
		//_workPart->Layers()->ChangeStates(stateInfo, true);

		//NXOpen::Layer::StateCollection *stateCollection;
		//stateCollection = _workPart->Layers()->GetStates();

		for (int ss = 0; ss < 256; ss++) {
			stateInfo[ss].Layer = ss + 1;
			stateInfo[ss].State =_workPart->Layers()->GetState(ss + 1);
		}

		_workPart->Layers()->SetWorkLayer(100);
		_workPart->Layers()->ResetViewVisibilityToGlobal(_workPart->Views()->WorkView());
		_workPart->Layers()->SetObjectsVisibilityOnLayer(_workPart->Views()->WorkView(), stateInfo, false);

		std::vector<NXOpen::View *> all_views;
		all_views = _workPart->Views()->GetActiveViews();
		for (int ii = 0; ii != all_views.size(); ii++) {
			_workPart->Layers()->SetObjectsVisibilityOnLayer(all_views[ii], stateInfo, false);
			_workPart->Layers()->ResetViewVisibilityToGlobal(all_views[ii]);
		}

		_theSession->DisplayManager()->MakeUpToDate();

		tag_t *children = NULL_TAG;
		tag_t drawing_tag = NULL_TAG;
		tag_t exp_tag = NULL_TAG;
		tag_p_t view_list = NULL;
		UF_DRAW_view_prfs_t view_display_parms;
		UF_VIEW_type_t view_type;      /* <O>
									   The view type.
									   UF_VIEW_MODEL_TYPE           = 0,
									   UF_VIEW_DRAWING_MEMBER_TYPE  = 1,
									   UF_VIEW_DRAWING_SHEET_TYPE   = 2
									   */
		UF_VIEW_subtype_t view_subtype;  /* <O>
										 The view subtype - drawing member views only.
										 UF_VIEW_INVALID_SUBTYPE      = -1,
										 UF_VIEW_SECTION_SUBTYPE      = 0,
										 UF_VIEW_IMPORTED_SUBTYPE     = 1,
										 UF_VIEW_BASE_MEMBER_SUBTYPE  = 2,
										 UF_VIEW_ORTHOGONAL_SUBTYPE   = 3,
										 UF_VIEW_AUXILIARY_SUBTYPE    = 4,
										 UF_VIEW_DETAIL_SUBTYPE       = 5,
										 UF_VIEW_BREAK_SUBTYPE        = 6
										 */
		int n_children = 0;
		int type = 0;
		int subtype = 0;
		int ifail = 0;
		int num_views = 0;
		double scale = 0.0;
		int colorIndex;

		//nicht zuordnungsfaehige Einstellungen
		Preferences::ViewPreferences *viewPrefs = _workPart->ViewPreferences();
		viewPrefs->Detail()->SetCircularBoundary(true);
		viewPrefs->General()->SetFramebarHorizontal(0);
		viewPrefs->General()->SetFramebarVertical(0);
		viewPrefs->General()->SetReference(0);
		viewPrefs->General()->SetLockmethodView(NXOpen::Preferences::GeneralViewLockmethodOptionNone);

		Annotations::CharacterSpaceFactor nxFontCharacterSpaceFactor;
		nxFontCharacterSpaceFactor.General = 1.0; // nicht zugeordnet
		nxFontCharacterSpaceFactor.Dimension = 1.0; // nicht zugeordnet
		nxFontCharacterSpaceFactor.Tolerance = 1.0; // nicht zugeordnet
		nxFontCharacterSpaceFactor.Appended = 1.0; // nicht zugeordnet
		_workPart->Annotations()->Preferences()->SetNxFontCharacterSpaceFactor(nxFontCharacterSpaceFactor); // nicht zugeordnet
		_workPart->Preferences()->Drafting()->SetEnableSmoothEdgesForLWView(false); // nicht zugeordnet
		_workPart->Preferences()->Drafting()->SetVersionObjects(true); // nicht zugeordnet

		/* Get the tag of drawing. */
		ifail = UF_DRAW_ask_current_drawing(&drawing_tag);

		/* Obtain the list of view tags from the drawing */
		if (!ifail) {
			ifail = UF_DRAW_ask_views(drawing_tag, &num_views, &view_list);
		}
		else {
			nxLog("%s - Failed to get current drawing \n", routineName.c_str());
		}

		/* cycle list of view tags from the drawing and set standards */
		if (!ifail) {
			for (int i = 0; i < num_views; i++) {
				tag_t view_tag = view_list[i];
				// NX-565
				NXOpen::Drawings::EditViewSettingsBuilder *en_editViewSettingsBuilder;
				View *thisViewObj = (View *)NXObjectManager::Get(view_tag);
				//if(g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - View = %s \n", routineName.c_str(), thisViewObj->Name().GetLocaleText());
				std::vector<View *> view_vec(1);
				view_vec[0] = thisViewObj;

				en_editViewSettingsBuilder = _workPart->SettingsManager()->CreateDrawingEditViewSettingsBuilder(view_vec);

				id_name.assign("Drafting_sectionVwLabelViewLabelPrefix");
				it = _nx_dpv->soll_dpv_map.find(id_name);
				NXString labelPrefix;
				labelPrefix = (NXString)it->second;
				en_editViewSettingsBuilder->ViewSectionLabel()->SetLabelPrefix(labelPrefix);

				id_name.assign("Drafting_otherVwLabelScaleLabelPrefix");
				it = _nx_dpv->soll_dpv_map.find(id_name);
				labelPrefix = (NXString)it->second;
				en_editViewSettingsBuilder->ViewLabel()->SetScalePrefix(labelPrefix);

				id_name.assign("Drafting_circularDetailVwLabelPrefix");
				it = _nx_dpv->soll_dpv_map.find(id_name);
				labelPrefix = (NXString)it->second;
				en_editViewSettingsBuilder->ViewDetailLabel()->SetParentLabelPrefix(labelPrefix);

				id_name.assign("Drafting_detailVwLabelScaleLabelPrefix");
				it = _nx_dpv->soll_dpv_map.find(id_name);
				labelPrefix = (NXString)it->second;
				en_editViewSettingsBuilder->ViewDetailLabel()->SetScalePrefix(labelPrefix);

				id_name.assign("Drafting_detailVwLabelViewLabelPrefix");
				it = _nx_dpv->soll_dpv_map.find(id_name);
				labelPrefix = (NXString)it->second;
				en_editViewSettingsBuilder->ViewDetailLabel()->SetLabelPrefix(labelPrefix);

				id_name.assign("Drafting_projectedVwLabelScaleLabelPrefix");
				it = _nx_dpv->soll_dpv_map.find(id_name);
				labelPrefix = (NXString)it->second;
				en_editViewSettingsBuilder->ViewProjectedLabel()->SetScalePrefix(labelPrefix);

				id_name.assign("Drafting_projectedVwLabelViewLabelPrefix");
				it = _nx_dpv->soll_dpv_map.find(id_name);
				labelPrefix = (NXString)it->second;
				en_editViewSettingsBuilder->ViewLabel()->SetLabelPrefix(labelPrefix);

				id_name.assign("Drafting_sectionVwLabelScaleLabelPrefix");
				it = _nx_dpv->soll_dpv_map.find(id_name);
				labelPrefix = (NXString)it->second;
				en_editViewSettingsBuilder->ViewSectionLabel()->SetScalePrefix(labelPrefix);

				id_name.assign("Drafting_threadTrueHiddenLine");
				it = _nx_dpv->soll_dpv_map.find(id_name);
				int int_trueHiddenLineToggle;
				int_trueHiddenLineToggle = convert_to_int(it->second);
				bool trueHiddenLineToggle = false;
				if (int_trueHiddenLineToggle == 1) {
					trueHiddenLineToggle = true;
				}
				en_editViewSettingsBuilder->ViewStyle()->ViewStyleThreads()->SetTrueHiddenLine(trueHiddenLineToggle);

				id_name.assign("Drafting_detailVwLabelTextAboveLeader");
				it = _nx_dpv->soll_dpv_map.find(id_name);
				int int_textPlacement;
				int_textPlacement = convert_to_int(it->second);
				NXOpen::Drawings::ViewDetailLabelBuilder::LabelParentTextPlacement textPlacement;
				if (int_textPlacement == 0) {
					textPlacement = NXOpen::Drawings::ViewDetailLabelBuilder::LabelParentTextPlacementBeforeOrAfterStub;
				}
				else if (int_textPlacement == 1) {
					textPlacement = NXOpen::Drawings::ViewDetailLabelBuilder::LabelParentTextPlacementAboveStub;
				}
				en_editViewSettingsBuilder->ViewDetailLabel()->SetTextPlacement(textPlacement);

				//id_name.assign("Drafting_viewRenderingStyle");
				//it = _nx_dpv->soll_dpv_map.find(id_name);
				//int int_renderingStyleOption;
				//int_createGapsToggle = convert_to_int(it->second);
				//en_editViewSettingsBuilder->ViewStyle()->ViewStyleShading()->SetRenderingStyle((NXOpen::Preferences::ShadingRenderingStyleOption) int_createGapsToggle);
				en_editViewSettingsBuilder->ViewStyle()->ViewStyleShading()->SetRenderingStyle(NXOpen::Preferences::ShadingRenderingStyleOptionWireframe);

				try {
					en_editViewSettingsBuilder->Commit();
				}
				catch (...) {
					nxLog("%s - Inside the View Style of \"%s\"(tag=%d) an error occured! \n", routineName.c_str(), thisViewObj->JournalIdentifier().GetLocaleText(), (int) thisViewObj->Tag());
				}

				if (en_editViewSettingsBuilder->Commit() != NULL_TAG) {
					en_editViewSettingsBuilder->Destroy();
				}
				else {
					nxLog("%s - Failed to set Common - Threads - Render True Hidden Line = %s \n", routineName.c_str(), (trueHiddenLineToggle ? "true" : "false"));
					en_editViewSettingsBuilder->Destroy();
				}

				ifail = UF_DRAW_ask_view_scale(view_tag, &exp_tag, &scale);

				if (!ifail) {
					//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - View - scale: %f \n", routineName.c_str(), scale);
					ifail = UF_DRAW_ask_view_display(view_tag, &view_display_parms);

					if (!ifail) {
						UF_DRAW_view_prfs_t tViewParams_EN;
						memcpy(&tViewParams_EN, &view_display_parms, sizeof(UF_DRAW_view_prfs_t));

						id_name.assign("Drafting_hlColor");
						it = _nx_dpv->soll_dpv_map.find(id_name);
						colorIndex = convert_to_int(it->second);
						tViewParams_EN.hidden_line_color = colorIndex;

						id_name.assign("Drafting_hlFont");
						it = _nx_dpv->soll_dpv_map.find(id_name);
						int int_hlFont;
						int_hlFont = convert_to_int(it->second);
						tViewParams_EN.hidden_line_font = int_hlFont;

						id_name.assign("Drafting_hlWidth");
						it = _nx_dpv->soll_dpv_map.find(id_name);
						int int_hlWidth;
						int_hlWidth = convert_to_int(it->second);
						tViewParams_EN.hidden_line_width = int_hlWidth;

						id_name.assign("Drafting_ehe");
						it = _nx_dpv->soll_dpv_map.find(id_name);
						int int_edgesHiddenByEdgesToggle;
						int_edgesHiddenByEdgesToggle = convert_to_int(it->second);
						tViewParams_EN.edge_hiding_edge = (UF_DRAW_edge_hiding_edge_t)int_edgesHiddenByEdgesToggle;

						id_name.assign("Drafting_renderTolerance");
						it = _nx_dpv->soll_dpv_map.find(id_name);
						double toleranceValue;
						toleranceValue = convert_to_double(it->second);
						tViewParams_EN.tolerance = toleranceValue;

						id_name.assign("Drafting_sil");
						it = _nx_dpv->soll_dpv_map.find(id_name);
						int int_silhouettesToggle;
						int_silhouettesToggle = convert_to_int(it->second);
						tViewParams_EN.silhouettes = (UF_DRAW_silhouette_t)int_silhouettesToggle;

						id_name.assign("Drafting_smoothEdgeColor");
						it = _nx_dpv->soll_dpv_map.find(id_name);
						//int colorIndex;
						colorIndex = convert_to_int(it->second);
						tViewParams_EN.smooth_edge_color = colorIndex;

						id_name.assign("Drafting_smoothEdgeFont");
						it = _nx_dpv->soll_dpv_map.find(id_name);
						int int_smoothEdgeFont;
						int_smoothEdgeFont = convert_to_int(it->second);
						tViewParams_EN.smooth_edge_font = int_smoothEdgeFont;

						id_name.assign("Drafting_smoothEdgeWidth");
						it = _nx_dpv->soll_dpv_map.find(id_name);
						int int_smoothEdgeWidth;
						int_smoothEdgeWidth = convert_to_int(it->second);
						tViewParams_EN.smooth_edge_width = int_smoothEdgeWidth;

						id_name.assign("Drafting_isectColor");
						it = _nx_dpv->soll_dpv_map.find(id_name);
						//int colorIndex;
						colorIndex = convert_to_int(it->second);
						tViewParams_EN.virtual_intersect_color = colorIndex;

						id_name.assign("Drafting_isectFont");
						it = _nx_dpv->soll_dpv_map.find(id_name);
						int int_isectFont;
						int_isectFont = convert_to_int(it->second);
						tViewParams_EN.virtual_intersect_font = int_isectFont;

						id_name.assign("Drafting_isectWidth");
						it = _nx_dpv->soll_dpv_map.find(id_name);
						int int_isectWidth;
						int_isectWidth = convert_to_int(it->second);
						tViewParams_EN.virtual_intersect_width = int_isectWidth;

						id_name.assign("Drafting_extractedEdges");
						it = _nx_dpv->soll_dpv_map.find(id_name);
						int int_extractedEdgesOption;
						int_extractedEdgesOption = convert_to_int(it->second);
						if (int_extractedEdgesOption != 0) {
							int_extractedEdgesOption = 1;
						}
						tViewParams_EN.extracted_edges = (UF_DRAW_extracted_edges_t)int_extractedEdgesOption;

						id_name.assign("Drafting_visColor");
						it = _nx_dpv->soll_dpv_map.find(id_name);
						int visibleColorIndex;
						visibleColorIndex = convert_to_int(it->second);
						tViewParams_EN.visible_line_color = visibleColorIndex;

						id_name.assign("Drafting_visFont");
						it = _nx_dpv->soll_dpv_map.find(id_name);
						int int_visFont;
						int_visFont = convert_to_int(it->second);
						tViewParams_EN.visible_line_font = int_visFont;

						id_name.assign("Drafting_visWidth");
						it = _nx_dpv->soll_dpv_map.find(id_name);
						int int_visWidth;
						int_visWidth = convert_to_int(it->second);
						tViewParams_EN.visible_line_width = int_visWidth;

						id_name.assign("Drafting_referencedEdgesOnly");
						it = _nx_dpv->soll_dpv_map.find(id_name);
						int int_reference_EdgesOnlyToggle;
						int_reference_EdgesOnlyToggle = convert_to_int(it->second);
						if (int_reference_EdgesOnlyToggle == 1) {
							tViewParams_EN.referenced_edges_only = true;
						}
						else {
							tViewParams_EN.referenced_edges_only = false;
						}

						id_name.assign("Drafting_selfHiddenEdges");
						it = _nx_dpv->soll_dpv_map.find(id_name);
						int int_selfHiddenToggle;
						int_selfHiddenToggle = convert_to_int(it->second);
						if (int_selfHiddenToggle == 1) {
							tViewParams_EN.edges_hidden_by_own_solid = true;
						}
						else {
							tViewParams_EN.edges_hidden_by_own_solid = false;
						}

						id_name.assign("Drafting_simplifySmallFeatures");
						it = _nx_dpv->soll_dpv_map.find(id_name);
						int int_smallFeatureOption;
						int_smallFeatureOption = convert_to_int(it->second);
						tViewParams_EN.simplify_small_features = int_smallFeatureOption;

						id_name.assign("Drafting_smallFeatureTolerancePercent");
						it = _nx_dpv->soll_dpv_map.find(id_name);
						double smallFeaturesTolerance;
						smallFeaturesTolerance = convert_to_double(it->second);
						tViewParams_EN.small_feature_tolerance = smallFeaturesTolerance;

						id_name.assign("Drafting_traceLineVisibleColor");
						it = _nx_dpv->soll_dpv_map.find(id_name);
						int visibleColorsIndex;
						visibleColorsIndex = convert_to_int(it->second);
						tViewParams_EN.traceline_visible_color = visibleColorsIndex;

						id_name.assign("Drafting_traceLineVisibleFont");
						it = _nx_dpv->soll_dpv_map.find(id_name);
						int int_visiblefont;
						int_visiblefont = convert_to_int(it->second);
						tViewParams_EN.traceline_visible_font = int_visiblefont;

						id_name.assign("Drafting_traceLineVisibleWidth");
						it = _nx_dpv->soll_dpv_map.find(id_name);
						int int_visibleWidth;
						int_visibleWidth = convert_to_int(it->second);
						tViewParams_EN.traceline_visible_width = int_visibleWidth;

						id_name.assign("Drafting_traceLineHiddenColor");
						it = _nx_dpv->soll_dpv_map.find(id_name);
						int hiddenColorIndex;
						hiddenColorIndex = convert_to_int(it->second);
						tViewParams_EN.traceline_hidden_color = hiddenColorIndex;

						id_name.assign("Drafting_traceLineHiddenFont");
						it = _nx_dpv->soll_dpv_map.find(id_name);
						int int_hiddenfont;
						int_hiddenfont = convert_to_int(it->second);
						tViewParams_EN.traceline_hidden_font = int_hiddenfont;

						id_name.assign("Drafting_traceLineHiddenWidth");
						it = _nx_dpv->soll_dpv_map.find(id_name);
						int int_hiddenWidth;
						int_hiddenWidth = convert_to_int(it->second);
						tViewParams_EN.traceline_hidden_width = int_hiddenWidth;

						id_name.assign("Drafting_traceLineGapping");
						it = _nx_dpv->soll_dpv_map.find(id_name);
						int int_createGapsToggle;
						int_createGapsToggle = convert_to_int(it->second);
						tViewParams_EN.traceline_gap = (UF_DRAW_gap_t)int_createGapsToggle;

						if (_nx_dpv->usedUnitValue.compare("1") == 0) {
							id_name.assign("Drafting_traceLineGapSize_MU");
						}
						else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
							id_name.assign("Drafting_traceLineGapSize_EU");
						}
						it = _nx_dpv->soll_dpv_map.find(id_name);
						double gapSize;
						gapSize = convert_to_double(it->second);
						tViewParams_EN.traceline_gap_size = gapSize;

						print_display_view_style_params(view_display_parms, tViewParams_EN);

						// set standard values
						nxLog("%s - UF_DRAW_set_view_display \n", routineName.c_str());
						// UF_DRAW_set_view_display funktioniert mit NX8.5 Release 18.2 Jira-Issue NX-472
						ifail = UF_DRAW_set_view_display(view_tag, &tViewParams_EN);
						if (ifail) {
							char error_message[133] = "";
							ifail = UF_get_fail_message(ifail, error_message);
							nxLog("%s - UF_DRAW_set_view_display fails.\nError is: %s \n", routineName.c_str(), error_message);
						}
						else {
							nxLog("%s - UF_DRAW_set_view_display is successful.\n", routineName.c_str());
						}

						ifail = UF_VIEW_ask_type(view_tag, &view_type, &view_subtype);
						if (!ifail) {
							nxLog("%s - View type=%d and subtype=%d ", routineName.c_str(), view_type, view_subtype);
						}
						if (view_subtype == UF_VIEW_DETAIL_SUBTYPE) {
							try {
								nxLog("%s - set_DETAIL_view_display \n", routineName.c_str());
								Drawings::DetailView *detailView(dynamic_cast<Drawings::DetailView *> (NXOpen::NXObjectManager::Get(view_tag)));

								id_name.assign("Drafting_detailVwLabelIncludeTextLabel");
								it = _nx_dpv->soll_dpv_map.find(id_name);
								int int_showViewLabel = 0;
								int_trueHiddenLineToggle = convert_to_int(it->second);
								bool showViewLabel = false;
								if (int_trueHiddenLineToggle == 1) {
									showViewLabel = true;
								}
								detailView->Style()->General()->SetViewLabel(showViewLabel);

								id_name.assign("Drafting_detailVwLabelIncludeScaleLabel");
								it = _nx_dpv->soll_dpv_map.find(id_name);
								int int_showViewScale;
								int_showViewScale = convert_to_int(it->second);
								bool showViewScale = false;
								if (int_showViewScale == 1) {
									showViewScale = true;
								}
								detailView->Style()->General()->SetScaleLabel(showViewScale);

								try {
									detailView->Commit();
								}
								catch (...) {
									nxLog("%s - Inside the Detail View of \"%s\"(tag=%d) an error occured! \n", routineName.c_str(), detailView->JournalIdentifier().GetLocaleText(), (int) detailView->Tag());
								}

								Drawings::DetailViewBuilder *detailViewBuilder;
								detailViewBuilder = _workPart->DraftingViews()->CreateDetailViewBuilder(detailView);

								id_name.assign("Drafting_detailViewBoundaryLineColor");
								it = _nx_dpv->soll_dpv_map.find(id_name);
								colorIndex = convert_to_int(it->second);
								detailViewBuilder->Style()->ViewStyleDetail()->SetViewBoundaryColor(_workPart->Colors()->Find(colorIndex));

								id_name.assign("Drafting_detailViewBoundaryLineFont");
								it = _nx_dpv->soll_dpv_map.find(id_name);
								int int_detailViewBoundaryLineFont;
								int_detailViewBoundaryLineFont = convert_to_int(it->second);
								detailViewBuilder->Style()->ViewStyleDetail()->SetViewBoundaryFont((NXOpen::Preferences::Font) int_detailViewBoundaryLineFont);

								id_name.assign("Drafting_detailViewBoundaryLineWidth");
								it = _nx_dpv->soll_dpv_map.find(id_name);
								int int_viewBoundaryWidth;
								int_viewBoundaryWidth = convert_to_int(it->second);
								detailViewBuilder->Style()->ViewStyleDetail()->SetViewBoundaryWidth((NXOpen::Preferences::Width) int_viewBoundaryWidth);

								try {
									detailViewBuilder->Commit();
								}
								catch (...) {
									nxLog("%s - Inside the Detail View of \"%s\"(tag=%d) an error occured! \n", routineName.c_str(), detailView->JournalIdentifier().GetLocaleText(), (int) detailView->Tag());
								}
								detailViewBuilder->Destroy();

								n_children = 0;
								children = NULL;
								ifail = UF_SO_ask_children(view_tag, UF_SO_ASK_ALL_CHILDREN, &n_children, &children);
								//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - UF_SO_ask_children - ifail = %d \n", routineName.c_str(), ifail);

								if (!ifail) {
									for (int ii = 0; ii < n_children; ii++) {
										ifail = UF_OBJ_ask_type_and_subtype(children[ii], &type, &subtype);
										if (!ifail && (type == UF_drafting_entity_type) && (subtype == UF_draft_label_on_parent_subtype)) {
											Annotations::Label *labelP(dynamic_cast<Annotations::Label *> (NXOpen::NXObjectManager::Get(children[ii])));

											//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - labelP->Name = %s \n", routineName.c_str(), labelP->Name().GetLocaleText());

											Annotations::LetteringPreferences *letteringPreferences = labelP->GetLetteringPreferences();

											Annotations::Lettering labelLetteringGeneralText = letteringPreferences->GetGeneralText();
											
											if (_nx_dpv->usedUnitValue.compare("1") == 0) {
												id_name.assign("Axs_sxletterCharSize_MU");
											}
											else if (_nx_dpv->usedUnitValue.compare("2") == 0) {
												id_name.assign("Axs_sxletterCharSize_EU");
											}
											it = _nx_dpv->soll_dpv_map.find(id_name);
											double generalTextSize = 0.0;
											generalTextSize = convert_to_double(it->second);
											//labelLetteringGeneralText.Size = generalTextSize * 10/7; // aus 3.5 mache 5.0
											labelLetteringGeneralText.Size = generalTextSize;

											id_name.assign("Drafting_draftTextColor");
											it = _nx_dpv->soll_dpv_map.find(id_name);
											int generalTextColorIndex;
											generalTextColorIndex = convert_to_int(it->second);
											labelLetteringGeneralText.Cfw.Color = generalTextColorIndex;

											id_name.assign("Drafting_draftTextFont");
											it = _nx_dpv->soll_dpv_map.find(id_name);
											NXString generalTextFontName;
											generalTextFontName = (NXString)it->second.c_str();
											int generalTextFontIndex;
											generalTextFontIndex = _workPart->Fonts()->AddFont(generalTextFontName);
											labelLetteringGeneralText.Cfw.Font = generalTextFontIndex;

											id_name.assign("Drafting_draftTextWidth");
											it = _nx_dpv->soll_dpv_map.find(id_name);
											int int_generalTextLineWidth;
											int_generalTextLineWidth = convert_to_int(it->second);
											labelLetteringGeneralText.Cfw.Width = (NXOpen::Annotations::LineWidth) int_generalTextLineWidth;
											//labelLetteringGeneralText.Cfw.Width = NXOpen::Annotations::LineWidthNormal;
											letteringPreferences->SetGeneralText(labelLetteringGeneralText);
											labelP->SetLetteringPreferences(letteringPreferences);
											delete letteringPreferences;
										}
									}
									if (n_children > 0) {
										UF_free(children);
									}
								}
								nxLog("%s is successful. \n", routineName.c_str());
							}
							catch (...) {
								char view_name[MAX_ENTITY_NAME_SIZE] = "";
								UF_OBJ_ask_name(view_tag, view_name);
								nxLog("%s for view %s fails!!! \n", routineName.c_str(), view_name);
							}
						}
						//thisViewObj->UpdateDisplay();
						//ifail = UF_DRAW_update_one_view(drawing_tag, view_tag);
					}
					else {
						nxLog("%s - Failed to ask view display \n", routineName.c_str());
					}
				}
				else {
					nxLog("%s - Failed to ask view scale \n", routineName.c_str());
				}
			}
		}
		else {
			nxLog("%s - Failed to ask views \n", routineName.c_str());
		}
		UF_free(view_list);

		id_name.assign("Drafting_vwLabelSecondaryIndexingMode");
		it = _nx_dpv->soll_dpv_map.find(id_name);
		int int_secondaryIndexing;
		NXOpen::Drawings::ViewCommonViewLabelBuilder::SecondaryIndexingType secondaryIndexing;
		int_secondaryIndexing = convert_to_int(it->second);
		if (int_secondaryIndexing == 0) {
			secondaryIndexing = NXOpen::Drawings::ViewCommonViewLabelBuilder::SecondaryIndexingTypeAlphabetic;
		}
		else if (int_secondaryIndexing == 1) {
			secondaryIndexing = NXOpen::Drawings::ViewCommonViewLabelBuilder::SecondaryIndexingTypeNumeric;
		}

		id_name.assign("Drafting_otherVwLabelLetterFormat");
		it = _nx_dpv->soll_dpv_map.find(id_name);
		int int_viewLetterFormat = convert_to_int(it->second);
		NXOpen::Drawings::LetterFormatTypes viewLetterFormat;
		if (int_viewLetterFormat == 1) {
			viewLetterFormat = NXOpen::Drawings::LetterFormatTypesA;
		}
		else if (int_viewLetterFormat == 2) {
			viewLetterFormat = NXOpen::Drawings::LetterFormatTypesAA;
		}
		else if (int_viewLetterFormat == 3) {
			viewLetterFormat = NXOpen::Drawings::LetterFormatTypesAA1;
		}
		id_name.assign("Drafting_projectedVwLabelLetterFormat");
		it = _nx_dpv->soll_dpv_map.find(id_name);
		int int_projViewLetterFormat = convert_to_int(it->second);
		NXOpen::Drawings::LetterFormatTypes projViewLetterFormat;
		if (int_projViewLetterFormat == 1) {
			projViewLetterFormat = NXOpen::Drawings::LetterFormatTypesA;
		}
		else if (int_projViewLetterFormat == 2) {
			projViewLetterFormat = NXOpen::Drawings::LetterFormatTypesAA;
		}
		else if (int_projViewLetterFormat == 3) {
			projViewLetterFormat = NXOpen::Drawings::LetterFormatTypesAA1;
		}
		id_name.assign("Drafting_sectionVwLabelLetterFormat");
		it = _nx_dpv->soll_dpv_map.find(id_name);
		int int_sectionViewLetterFormat = convert_to_int(it->second);
		NXOpen::Drawings::LetterFormatTypes sectionViewLetterFormat;
		if (int_sectionViewLetterFormat == 1) {
			sectionViewLetterFormat = NXOpen::Drawings::LetterFormatTypesA;
		}
		else if (int_sectionViewLetterFormat == 2) {
			sectionViewLetterFormat = NXOpen::Drawings::LetterFormatTypesAA;
		}
		else if (int_sectionViewLetterFormat == 3) {
			sectionViewLetterFormat = NXOpen::Drawings::LetterFormatTypesAA1;
		}
		id_name.assign("Drafting_detailVwLabelLetterFormat");
		it = _nx_dpv->soll_dpv_map.find(id_name);
		int int_detailViewLetterFormat = convert_to_int(it->second);
		NXOpen::Drawings::LetterFormatTypes detailViewLetterFormat;
		if (int_detailViewLetterFormat == 1) {
			detailViewLetterFormat = NXOpen::Drawings::LetterFormatTypesA;
		}
		else if (int_detailViewLetterFormat == 2) {
			detailViewLetterFormat = NXOpen::Drawings::LetterFormatTypesAA;
		}
		else if (int_detailViewLetterFormat == 3) {
			detailViewLetterFormat = NXOpen::Drawings::LetterFormatTypesAA1;
		}

		NXOpen::Drawings::DrawingSheetBuilder;

		NXOpen::Drawings::DraftingViewCollection *DraftingViewCollection = _workPart->DraftingViews();

		for (NXOpen::Drawings::DraftingViewCollection::iterator it_drViewColl = DraftingViewCollection->begin(); it_drViewColl != DraftingViewCollection->end(); it_drViewColl++) {
			NXOpen::Drawings::DraftingView * dr_view = (*it_drViewColl);

			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - draw = %s \n", routineName.c_str(), dr_view->JournalIdentifier().GetLocaleText());

			std::vector<NXOpen::View *> views(1);
			views[0] = dr_view;

			ifail = UF_VIEW_ask_type(dr_view->Tag(), &view_type, &view_subtype);

			NXOpen::Drawings::EditViewSettingsBuilder *editViewSettingsBuilder;
			editViewSettingsBuilder = _workPart->SettingsManager()->CreateDrawingEditViewSettingsBuilder(views);
			//editViewSettingsBuilder->InheritSettingsFromCustomerDefault();
			//editViewSettingsBuilder->Commit();

			//std::vector<NXOpen::Drafting::BaseEditSettingsBuilder *> editsettingsbuilders(1);
			//editsettingsbuilders[0] = editViewSettingsBuilder;
			//_workPart->SettingsManager()->ProcessForMultipleObjectsSettings(editsettingsbuilders);

			//editViewSettingsBuilder->InheritSettingsFromPreferences();
			//editViewSettingsBuilder->Commit();
			NXOpen::Drawings::ViewLabelBuilder *viewLabelBuilder;
			viewLabelBuilder = editViewSettingsBuilder->ViewLabel();

			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - builder done \n", routineName.c_str());

			int type = 0;
			int subtype = 0;
			UF_OBJ_ask_type_and_subtype(dr_view->Tag(), &type, &subtype);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - View Name = %s - type = %d - subtype = %d \n", routineName.c_str(), dr_view->JournalIdentifier().GetLocaleText(), type, subtype);

			//UF_view_section_subtype                           0
			//UF_view_instance_subtype                          1
			//UF_view_imported_subtype                          2
			//UF_view_base_member_subtype                       3
			//UF_view_orthographic_subtype                      4
			//UF_view_auxiliary_subtype                         5
			//UF_view_detail_subtype                            6
			//UF_view_modeling_subtype                          7
			//UF_view_user_defined_subtype                      8
			//UF_view_graph_subtype                             9
			//UF_view_drawing_sheet_subtype                    10
			//UF_view_cae_subtype                              11
			//UF_view_break_subtype                            12
			//UF_view_query_result_subtype                     13
			//UF_view_drawing_subtype                          14
			//UF_view_break_slave_subtype                      15
			//UF_view_search_model_view_subtype                16
			//UF_view_lightweight_section_subtype              17
			//UF_view_imported_pmi_lightweight_section_subtype 18

			//tag_t view_label_tag;
			//UF_DRAW_ask_view_label(dr_view->Tag(), &view_label_tag);
			//UF_DRAW_view_label_parms_t view_label_parms;
			//UF_DRAW_ask_view_label_parms(view_label_tag, &view_label_parms);
			//strcpy_s(view_label_parms.view_label_prefix, "");
			//UF_DRAW_view_label_position_t pos;
			//pos = UF_DRAW_view_label_above_boundary;
			//view_label_parms.view_label_position = pos;
			//view_label_parms.view_scale_position = UF_DRAW_view_label_above;
			//view_label_parms.view_label_text_to_stub_format = UF_DRAW_parent_view_label_text_above_stub;
			//UF_DRAW_set_view_label_parms(view_label_tag, &view_label_parms);

			if (subtype == UF_view_orthographic_subtype || subtype == UF_view_auxiliary_subtype) {
				editViewSettingsBuilder->ViewProjectedLabel()->SetLabelPosition(NXOpen::Drawings::LabelPositionTypesAbove);
				editViewSettingsBuilder->ViewProjectedLabel()->SetLabelPrefix("");
			}
			else if (subtype == UF_view_detail_subtype) {
				editViewSettingsBuilder->ViewDetailLabel()->SetLabelPosition(NXOpen::Drawings::LabelPositionTypesAbove);
				editViewSettingsBuilder->ViewDetailLabel()->SetLabelPrefix("");
			}
			else if (subtype == UF_view_section_subtype) {
				editViewSettingsBuilder->ViewSectionLabel()->SetLabelPosition(NXOpen::Drawings::LabelPositionTypesAbove);
				editViewSettingsBuilder->ViewSectionLabel()->SetLabelPrefix("");
			} else {
				editViewSettingsBuilder->ViewLabel()->SetLabelPosition(NXOpen::Drawings::LabelPositionTypesAbove);
				editViewSettingsBuilder->ViewLabel()->SetLabelPrefix("");
			}
			
			//id_name.assign("Drafting_otherVwLabelPosition");
			//it = _nx_dpv->soll_dpv_map.find(id_name);
			//int int_labelPosition;
			//int_labelPosition = convert_to_int(it->second);
			//NXOpen::Drawings::LabelPositionTypes labelPosition;
			//if (int_labelPosition == 1) {
			//	labelPosition = NXOpen::Drawings::LabelPositionTypesAbove;
			//}
			//else if (int_labelPosition == 2) {
			//	labelPosition = NXOpen::Drawings::LabelPositionTypesBelow;
			//}
			//viewLabelBuilder->SetLabelPosition(labelPosition);
			
			id_name.assign("Drafting_otherVwLabelLetterSizeFactor");
			it = _nx_dpv->soll_dpv_map.find(id_name);
			double labelCharacterHeightFactor;
			labelCharacterHeightFactor = convert_to_double(it->second);
			viewLabelBuilder->SetLabelCharacterHeightFactor(labelCharacterHeightFactor);
			viewLabelBuilder->SetLabelPrefix("");
			id_name.assign("Drafting_otherVwLabelTextLabelType");
			it = _nx_dpv->soll_dpv_map.find(id_name);
			int int_viewLabelOption;
			int_viewLabelOption = convert_to_int(it->second);
			NXOpen::Drawings::ViewLabelTypes viewLabelOption;
			if (int_viewLabelOption == 1) {
				viewLabelOption = NXOpen::Drawings::ViewLabelTypesName;
			}
			else if (int_viewLabelOption == 2) {
				viewLabelOption = NXOpen::Drawings::ViewLabelTypesLetter;
			}
			viewLabelBuilder->SetViewLabelOption(viewLabelOption);


			if (subtype == UF_view_section_subtype) {
				viewLabelBuilder->SetLetterFormat(sectionViewLetterFormat);
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - sectionViewLetterFormat done \n", routineName.c_str());
				id_name.assign("Drafting_sectionVwLabelIncludeTextLabel");
				it = _nx_dpv->soll_dpv_map.find(id_name);
				bool toggle = false;
				int int_showViewLabel;
				int_showViewLabel = convert_to_int(it->second);
				if (int_showViewLabel == 1) {
					toggle = true;
				}
				viewLabelBuilder->SetShowViewLabel(toggle);
			}
			else if (subtype == UF_view_detail_subtype) {
				viewLabelBuilder->SetLetterFormat(detailViewLetterFormat);
				id_name.assign("Drafting_detailVwLabelIncludeTextLabel");
				it = _nx_dpv->soll_dpv_map.find(id_name);
				bool toggle = false;
				int int_showViewLabel;
				int_showViewLabel = convert_to_int(it->second);
				if (int_showViewLabel == 1) {
					toggle = true;
				}
				viewLabelBuilder->SetShowViewLabel(toggle);
			}
			else if (subtype == UF_view_orthographic_subtype || subtype == UF_view_auxiliary_subtype) {
				viewLabelBuilder->SetLetterFormat(projViewLetterFormat);
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - projViewLetterFormat done \n", routineName.c_str());
				id_name.assign("Drafting_projectedVwLabelIncludeTextLabel");
				it = _nx_dpv->soll_dpv_map.find(id_name);
				int int_showViewLabel;
				bool toggle = false;
				int_showViewLabel = convert_to_int(it->second);
				if (int_showViewLabel == 1) {
					toggle = true;
				}
				viewLabelBuilder->SetShowViewLabel(toggle);
			}
			else {
				viewLabelBuilder->SetLetterFormat(viewLetterFormat);
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - viewLetterFormat done \n", routineName.c_str());
				id_name.assign("Drafting_otherVwLabelIncludeTextLabel");
				it = _nx_dpv->soll_dpv_map.find(id_name);
				bool toggle = false;
				int int_showViewLabel;
				int_showViewLabel = convert_to_int(it->second);
				if (int_showViewLabel == 1) {
					toggle = true;
				}
				//viewLabelBuilder->SetShowViewLabel(toggle);
			}


			//string id_name_tmp;
			//std::map<const std::string, std::string>::iterator it_tmp;

			id_name.assign("Drafting_visColor");
			it = _nx_dpv->soll_dpv_map.find(id_name);
			NXOpen::NXColor *visibleColor;
			int visibleColorIndex;
			visibleColorIndex = convert_to_int(it->second);
			visibleColor = _workPart->Colors()->Find(visibleColorIndex);
			editViewSettingsBuilder->ViewStyle()->ViewStyleVisibleLines()->SetVisibleColor(visibleColor);

			id_name.assign("Drafting_visFont");
			it = _nx_dpv->soll_dpv_map.find(id_name);
			int int_visFont;
			int_visFont = convert_to_int(it->second);
			NXOpen::Preferences::Font visFont;
			if (int_visFont == 0) {
				visFont = NXOpen::Preferences::FontInvisible;
			}
			else if (int_visFont == 1) {
				visFont = NXOpen::Preferences::FontSolid;
			}
			else if (int_visFont == 2) {
				visFont = NXOpen::Preferences::FontDashed;
			}
			else if (int_visFont == 3) {
				visFont = NXOpen::Preferences::FontPhantom;
			}
			else if (int_visFont == 4) {
				visFont = NXOpen::Preferences::FontCenterline;
			}
			else if (int_visFont == 5) {
				visFont = NXOpen::Preferences::FontDotted;
			}
			else if (int_visFont == 6) {
				visFont = NXOpen::Preferences::FontLongDashed;
			}
			else if (int_visFont == 7) {
				visFont = NXOpen::Preferences::FontDottedDashed;
			}
			else if (int_visFont == 8) {
				visFont = NXOpen::Preferences::FontOriginal;
			}
			editViewSettingsBuilder->ViewStyle()->ViewStyleVisibleLines()->SetVisibleFont(visFont);

			id_name.assign("Drafting_visWidth");
			it = _nx_dpv->soll_dpv_map.find(id_name);
			int int_visWidth;
			int_visWidth = convert_to_int(it->second);
			NXOpen::Preferences::Width visWidth;
			if (int_visWidth == 0) {
				visWidth = NXOpen::Preferences::WidthOriginal;
			}
			else if (int_visWidth == 1) {
				visWidth = NXOpen::Preferences::WidthThin;
				//id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
				//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				//visWidth = (NXOpen::Preferences::Width) convert_to_int(it_tmp->second);
			}
			else if (int_visWidth == 2) {
				visWidth = NXOpen::Preferences::WidthNormal;
				//id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
				//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				//visWidth = (NXOpen::Preferences::Width) convert_to_int(it_tmp->second);
			}
			else if (int_visWidth == 3) {
				visWidth = NXOpen::Preferences::WidthThick;
				//id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
				//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				//visWidth = (NXOpen::Preferences::Width) convert_to_int(it_tmp->second);
			}
			else if (int_visWidth == 5) {
				visWidth = NXOpen::Preferences::WidthOne;
			}
			else if (int_visWidth == 6) {
				visWidth = NXOpen::Preferences::WidthTwo;
			}
			else if (int_visWidth == 7) {
				visWidth = NXOpen::Preferences::WidthThree;
			}
			else if (int_visWidth == 8) {
				visWidth = NXOpen::Preferences::WidthFour;
			}
			else if (int_visWidth == 9) {
				visWidth = NXOpen::Preferences::WidthFive;
			}
			else if (int_visWidth == 10) {
				visWidth = NXOpen::Preferences::WidthSix;
			}
			else if (int_visWidth == 11) {
				visWidth = NXOpen::Preferences::WidthSeven;
			}
			else if (int_visWidth == 12) {
				visWidth = NXOpen::Preferences::WidthEight;
			}
			else if (int_visWidth == 13) {
				visWidth = NXOpen::Preferences::WidthNine;
			}
			editViewSettingsBuilder->ViewStyle()->ViewStyleVisibleLines()->SetVisibleWidth(visWidth);

			id_name.assign("Drafting_hlColor");
			it = _nx_dpv->soll_dpv_map.find(id_name);
			NXOpen::NXColor *hiddenColor;
			int hiddenColorIndex;
			hiddenColorIndex = convert_to_int(it->second);
			hiddenColor = _workPart->Colors()->Find(hiddenColorIndex);
			editViewSettingsBuilder->ViewStyle()->ViewStyleHiddenLines()->SetColor(hiddenColor);

			if (dr_view->Style()->HiddenLines()->HiddenlineFont() != NXOpen::Preferences::FontInvisible ) {
				NXOpen::Preferences::Font hlFont;
				hlFont = NXOpen::Preferences::FontDashed;
				editViewSettingsBuilder->ViewStyle()->ViewStyleHiddenLines()->SetFont(hlFont);
				dr_view->Style()->HiddenLines()->SetHiddenlineFont(hlFont);
				//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - Drafting_hlFont done \n", routineName.c_str());
			}

			id_name.assign("Drafting_hlWidth");
			it = _nx_dpv->soll_dpv_map.find(id_name);
			int int_hlWidth;
			int_hlWidth = convert_to_int(it->second);
			NXOpen::Preferences::Width hlWidth;
			if (int_hlWidth == -1) {
				hlWidth = NXOpen::Preferences::WidthOriginal;
			}
			else if (int_hlWidth == 1) {
				hlWidth = NXOpen::Preferences::WidthThin;
				//id_name_tmp.assign("UG_thinLineWidthToNewLineWidth");
				//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				//hlWidth = (NXOpen::Preferences::Width) convert_to_int(it_tmp->second);
			}
			else if (int_hlWidth == 2) {
				hlWidth = NXOpen::Preferences::WidthNormal;
				//id_name_tmp.assign("UG_normalLineWidthToNewLineWidth");
				//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				//hlWidth = (NXOpen::Preferences::Width) convert_to_int(it_tmp->second);
			}
			else if (int_hlWidth == 3) {
				hlWidth = NXOpen::Preferences::WidthThick;
				//id_name_tmp.assign("UG_thickLineWidthToNewLineWidth");
				//it_tmp = _nx_dpv->soll_dpv_map.find(id_name_tmp.c_str());
				//hlWidth = (NXOpen::Preferences::Width) convert_to_int(it_tmp->second);
			}
			else if (int_hlWidth == 5) {
				hlWidth = NXOpen::Preferences::WidthOne;
			}
			else if (int_hlWidth == 6) {
				hlWidth = NXOpen::Preferences::WidthTwo;
			}
			else if (int_hlWidth == 7) {
				hlWidth = NXOpen::Preferences::WidthThree;
			}
			else if (int_hlWidth == 8) {
				hlWidth = NXOpen::Preferences::WidthFour;
			}
			else if (int_hlWidth == 9) {
				hlWidth = NXOpen::Preferences::WidthFive;
			}
			else if (int_hlWidth == 10) {
				hlWidth = NXOpen::Preferences::WidthSix;
			}
			else if (int_hlWidth == 11) {
				hlWidth = NXOpen::Preferences::WidthSeven;
			}
			else if (int_hlWidth == 12) {
				hlWidth = NXOpen::Preferences::WidthEight;
			}
			else if (int_hlWidth == 13) {
				hlWidth = NXOpen::Preferences::WidthNine;
			}
			editViewSettingsBuilder->ViewStyle()->ViewStyleHiddenLines()->SetWidth(hlWidth);
			//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("%s - Drafting_hlWidth done \n", routineName.c_str());
			
			try {
				editViewSettingsBuilder->Commit();
			}
			catch (...) {
				nxLog("%s - Inside the view \"%s\"(tag=%d) an error occured! \n", routineName.c_str(), dr_view->JournalIdentifier().GetLocaleText(), (int) dr_view->Tag());
			}
			//dr_view->Style()->HiddenLines()->SetHiddenlineWidth(hlWidth);

			//dr_view->UpdateDisplay();
			dr_view->Update();
			//ifail = UF_DRAW_update_one_view(drawing_tag, view_tag);
			editViewSettingsBuilder->Destroy();
			//dr_view->Update();
		}

	}
	catch (...) {
		nxLog("%s - ERROR - STOPP \n", routineName.c_str());
	}
	//if (g_nxLog_en_nx_getset_dpv_prefs) nxLog("--- STOPP - %s --- \n", routineName.c_str());
}
